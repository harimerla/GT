"use strict";
/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(self["webpackChunkwebgpu_webpack_starter"] = self["webpackChunkwebgpu_webpack_starter"] || []).push([["vendors-node_modules_ag-grid-enterprise_dist_ag-grid-enterprise_auto_esm_js"],{

/***/ "./node_modules/ag-grid-enterprise/dist/ag-grid-enterprise.auto.esm.js":
/*!*****************************************************************************!*\
  !*** ./node_modules/ag-grid-enterprise/dist/ag-grid-enterprise.auto.esm.js ***!
  \*****************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   AbstractHeaderCellCtrl: () => (/* reexport safe */ ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.AbstractHeaderCellCtrl),\n/* harmony export */   AgAbstractField: () => (/* reexport safe */ ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.AgAbstractField),\n/* harmony export */   AgAbstractLabel: () => (/* reexport safe */ ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.AgAbstractLabel),\n/* harmony export */   AgCheckbox: () => (/* reexport safe */ ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.AgCheckbox),\n/* harmony export */   AgDialog: () => (/* reexport safe */ ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.AgDialog),\n/* harmony export */   AgGroupComponent: () => (/* reexport safe */ ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.AgGroupComponent),\n/* harmony export */   AgInputDateField: () => (/* reexport safe */ ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.AgInputDateField),\n/* harmony export */   AgInputNumberField: () => (/* reexport safe */ ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.AgInputNumberField),\n/* harmony export */   AgInputRange: () => (/* reexport safe */ ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.AgInputRange),\n/* harmony export */   AgInputTextArea: () => (/* reexport safe */ ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.AgInputTextArea),\n/* harmony export */   AgInputTextField: () => (/* reexport safe */ ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.AgInputTextField),\n/* harmony export */   AgMenuItemComponent: () => (/* reexport safe */ ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.AgMenuItemComponent),\n/* harmony export */   AgMenuList: () => (/* reexport safe */ ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.AgMenuList),\n/* harmony export */   AgMenuPanel: () => (/* reexport safe */ ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.AgMenuPanel),\n/* harmony export */   AgPanel: () => (/* reexport safe */ ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.AgPanel),\n/* harmony export */   AgPickerField: () => (/* reexport safe */ ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.AgPickerField),\n/* harmony export */   AgPromise: () => (/* reexport safe */ ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.AgPromise),\n/* harmony export */   AgPromiseStatus: () => (/* reexport safe */ ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.AgPromiseStatus),\n/* harmony export */   AgRadioButton: () => (/* reexport safe */ ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.AgRadioButton),\n/* harmony export */   AgSelect: () => (/* reexport safe */ ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.AgSelect),\n/* harmony export */   AgSlider: () => (/* reexport safe */ ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.AgSlider),\n/* harmony export */   AgStackComponentsRegistry: () => (/* reexport safe */ ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.AgStackComponentsRegistry),\n/* harmony export */   AgToggleButton: () => (/* reexport safe */ ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.AgToggleButton),\n/* harmony export */   AlignedGridsService: () => (/* reexport safe */ ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.AlignedGridsService),\n/* harmony export */   AllCommunityModules: () => (/* reexport safe */ ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.AllCommunityModules),\n/* harmony export */   AllEnterpriseModules: () => (/* binding */ AllEnterpriseModules),\n/* harmony export */   AllModules: () => (/* binding */ AllModules),\n/* harmony export */   AnimateShowChangeCellRenderer: () => (/* reexport safe */ ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.AnimateShowChangeCellRenderer),\n/* harmony export */   AnimateSlideCellRenderer: () => (/* reexport safe */ ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.AnimateSlideCellRenderer),\n/* harmony export */   AnimationFrameService: () => (/* reexport safe */ ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.AnimationFrameService),\n/* harmony export */   AutoScrollService: () => (/* reexport safe */ ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.AutoScrollService),\n/* harmony export */   AutoWidthCalculator: () => (/* reexport safe */ ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.AutoWidthCalculator),\n/* harmony export */   Autowired: () => (/* reexport safe */ ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.Autowired),\n/* harmony export */   BarColumnLabelPlacement: () => (/* reexport safe */ ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.BarColumnLabelPlacement),\n/* harmony export */   BaseComponentWrapper: () => (/* reexport safe */ ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.BaseComponentWrapper),\n/* harmony export */   BaseCreator: () => (/* reexport safe */ ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.BaseCreator),\n/* harmony export */   BaseGridSerializingSession: () => (/* reexport safe */ ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.BaseGridSerializingSession),\n/* harmony export */   Bean: () => (/* reexport safe */ ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.Bean),\n/* harmony export */   BeanStub: () => (/* reexport safe */ ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.BeanStub),\n/* harmony export */   Beans: () => (/* reexport safe */ ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.Beans),\n/* harmony export */   BodyDropPivotTarget: () => (/* reexport safe */ ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.BodyDropPivotTarget),\n/* harmony export */   BodyDropTarget: () => (/* reexport safe */ ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.BodyDropTarget),\n/* harmony export */   CHART_TOOLBAR_ALLOW_LIST: () => (/* reexport safe */ ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.CHART_TOOLBAR_ALLOW_LIST),\n/* harmony export */   CHART_TOOL_PANEL_ALLOW_LIST: () => (/* reexport safe */ ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.CHART_TOOL_PANEL_ALLOW_LIST),\n/* harmony export */   CHART_TOOL_PANEL_MENU_OPTIONS: () => (/* reexport safe */ ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.CHART_TOOL_PANEL_MENU_OPTIONS),\n/* harmony export */   CellComp: () => (/* reexport safe */ ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.CellComp),\n/* harmony export */   CellCtrl: () => (/* reexport safe */ ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.CellCtrl),\n/* harmony export */   CellNavigationService: () => (/* reexport safe */ ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.CellNavigationService),\n/* harmony export */   CellPositionUtils: () => (/* reexport safe */ ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.CellPositionUtils),\n/* harmony export */   CellRangeType: () => (/* reexport safe */ ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.CellRangeType),\n/* harmony export */   ChangedPath: () => (/* reexport safe */ ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.ChangedPath),\n/* harmony export */   CheckboxCellEditor: () => (/* reexport safe */ ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.CheckboxCellEditor),\n/* harmony export */   CheckboxCellRenderer: () => (/* reexport safe */ ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.CheckboxCellRenderer),\n/* harmony export */   CheckboxSelectionComponent: () => (/* reexport safe */ ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.CheckboxSelectionComponent),\n/* harmony export */   ClientSideRowModelModule: () => (/* reexport safe */ ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.ClientSideRowModelModule),\n/* harmony export */   ClientSideRowModelSteps: () => (/* reexport safe */ ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.ClientSideRowModelSteps),\n/* harmony export */   ClipboardModule: () => (/* binding */ ClipboardModule),\n/* harmony export */   ColDefUtil: () => (/* reexport safe */ ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.ColDefUtil),\n/* harmony export */   Column: () => (/* reexport safe */ ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.Column),\n/* harmony export */   ColumnApi: () => (/* reexport safe */ ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.ColumnApi),\n/* harmony export */   ColumnFactory: () => (/* reexport safe */ ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.ColumnFactory),\n/* harmony export */   ColumnGroup: () => (/* reexport safe */ ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.ColumnGroup),\n/* harmony export */   ColumnKeyCreator: () => (/* reexport safe */ ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.ColumnKeyCreator),\n/* harmony export */   ColumnModel: () => (/* reexport safe */ ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.ColumnModel),\n/* harmony export */   ColumnUtils: () => (/* reexport safe */ ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.ColumnUtils),\n/* harmony export */   ColumnsToolPanelModule: () => (/* binding */ ColumnsToolPanelModule),\n/* harmony export */   Component: () => (/* reexport safe */ ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.Component),\n/* harmony export */   ComponentUtil: () => (/* reexport safe */ ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.ComponentUtil),\n/* harmony export */   Context: () => (/* reexport safe */ ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.Context),\n/* harmony export */   CssClassApplier: () => (/* reexport safe */ ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.CssClassApplier),\n/* harmony export */   CssClassManager: () => (/* reexport safe */ ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.CssClassManager),\n/* harmony export */   CsvCreator: () => (/* reexport safe */ ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.CsvCreator),\n/* harmony export */   CsvExportModule: () => (/* reexport safe */ ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.CsvExportModule),\n/* harmony export */   CtrlsService: () => (/* reexport safe */ ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.CtrlsService),\n/* harmony export */   CustomTooltipFeature: () => (/* reexport safe */ ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.CustomTooltipFeature),\n/* harmony export */   DEFAULT_CHART_GROUPS: () => (/* reexport safe */ ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.DEFAULT_CHART_GROUPS),\n/* harmony export */   DateCellEditor: () => (/* reexport safe */ ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.DateCellEditor),\n/* harmony export */   DateFilter: () => (/* reexport safe */ ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.DateFilter),\n/* harmony export */   DateStringCellEditor: () => (/* reexport safe */ ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.DateStringCellEditor),\n/* harmony export */   DisplayedGroupCreator: () => (/* reexport safe */ ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.DisplayedGroupCreator),\n/* harmony export */   Downloader: () => (/* reexport safe */ ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.Downloader),\n/* harmony export */   DragAndDropService: () => (/* reexport safe */ ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.DragAndDropService),\n/* harmony export */   DragService: () => (/* reexport safe */ ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.DragService),\n/* harmony export */   DragSourceType: () => (/* reexport safe */ ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.DragSourceType),\n/* harmony export */   EnterpriseCoreModule: () => (/* binding */ EnterpriseCoreModule),\n/* harmony export */   Environment: () => (/* reexport safe */ ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.Environment),\n/* harmony export */   EventService: () => (/* reexport safe */ ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.EventService),\n/* harmony export */   Events: () => (/* reexport safe */ ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.Events),\n/* harmony export */   ExcelExportModule: () => (/* binding */ ExcelExportModule),\n/* harmony export */   ExcelFactoryMode: () => (/* reexport safe */ ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.ExcelFactoryMode),\n/* harmony export */   ExpressionService: () => (/* reexport safe */ ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.ExpressionService),\n/* harmony export */   FilterManager: () => (/* reexport safe */ ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.FilterManager),\n/* harmony export */   FiltersToolPanelModule: () => (/* binding */ FiltersToolPanelModule),\n/* harmony export */   FloatingFilterMapper: () => (/* reexport safe */ ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.FloatingFilterMapper),\n/* harmony export */   FocusService: () => (/* reexport safe */ ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.FocusService),\n/* harmony export */   GROUP_AUTO_COLUMN_ID: () => (/* reexport safe */ ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.GROUP_AUTO_COLUMN_ID),\n/* harmony export */   Grid: () => (/* reexport safe */ ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.Grid),\n/* harmony export */   GridApi: () => (/* reexport safe */ ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.GridApi),\n/* harmony export */   GridBodyComp: () => (/* reexport safe */ ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.GridBodyComp),\n/* harmony export */   GridBodyCtrl: () => (/* reexport safe */ ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.GridBodyCtrl),\n/* harmony export */   GridChartsModule: () => (/* binding */ GridChartsModule),\n/* harmony export */   GridComp: () => (/* reexport safe */ ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.GridComp),\n/* harmony export */   GridCoreCreator: () => (/* reexport safe */ ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.GridCoreCreator),\n/* harmony export */   GridCtrl: () => (/* reexport safe */ ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.GridCtrl),\n/* harmony export */   GridHeaderComp: () => (/* reexport safe */ ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.GridHeaderComp),\n/* harmony export */   GridHeaderCtrl: () => (/* reexport safe */ ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.GridHeaderCtrl),\n/* harmony export */   GridOptionsService: () => (/* reexport safe */ ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.GridOptionsService),\n/* harmony export */   GridSerializer: () => (/* reexport safe */ ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.GridSerializer),\n/* harmony export */   GroupCellRenderer: () => (/* reexport safe */ ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.GroupCellRenderer),\n/* harmony export */   GroupCellRendererCtrl: () => (/* reexport safe */ ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.GroupCellRendererCtrl),\n/* harmony export */   GroupInstanceIdCreator: () => (/* reexport safe */ ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.GroupInstanceIdCreator),\n/* harmony export */   HeaderCellCtrl: () => (/* reexport safe */ ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.HeaderCellCtrl),\n/* harmony export */   HeaderFilterCellComp: () => (/* reexport safe */ ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.HeaderFilterCellComp),\n/* harmony export */   HeaderFilterCellCtrl: () => (/* reexport safe */ ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.HeaderFilterCellCtrl),\n/* harmony export */   HeaderGroupCellCtrl: () => (/* reexport safe */ ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.HeaderGroupCellCtrl),\n/* harmony export */   HeaderNavigationDirection: () => (/* reexport safe */ ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.HeaderNavigationDirection),\n/* harmony export */   HeaderNavigationService: () => (/* reexport safe */ ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.HeaderNavigationService),\n/* harmony export */   HeaderPositionUtils: () => (/* reexport safe */ ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.HeaderPositionUtils),\n/* harmony export */   HeaderRowComp: () => (/* reexport safe */ ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.HeaderRowComp),\n/* harmony export */   HeaderRowContainerComp: () => (/* reexport safe */ ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.HeaderRowContainerComp),\n/* harmony export */   HeaderRowContainerCtrl: () => (/* reexport safe */ ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.HeaderRowContainerCtrl),\n/* harmony export */   HeaderRowCtrl: () => (/* reexport safe */ ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.HeaderRowCtrl),\n/* harmony export */   HeaderRowType: () => (/* reexport safe */ ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.HeaderRowType),\n/* harmony export */   HorizontalDirection: () => (/* reexport safe */ ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.HorizontalDirection),\n/* harmony export */   HorizontalResizeService: () => (/* reexport safe */ ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.HorizontalResizeService),\n/* harmony export */   InfiniteRowModelModule: () => (/* reexport safe */ ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.InfiniteRowModelModule),\n/* harmony export */   KeyCode: () => (/* reexport safe */ ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.KeyCode),\n/* harmony export */   LargeTextCellEditor: () => (/* reexport safe */ ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.LargeTextCellEditor),\n/* harmony export */   LayoutCssClasses: () => (/* reexport safe */ ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.LayoutCssClasses),\n/* harmony export */   LicenseManager: () => (/* binding */ GridLicenseManager),\n/* harmony export */   LocaleService: () => (/* reexport safe */ ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.LocaleService),\n/* harmony export */   Logger: () => (/* reexport safe */ ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.Logger),\n/* harmony export */   LoggerFactory: () => (/* reexport safe */ ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.LoggerFactory),\n/* harmony export */   ManagedFocusFeature: () => (/* reexport safe */ ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.ManagedFocusFeature),\n/* harmony export */   MasterDetailModule: () => (/* binding */ MasterDetailModule),\n/* harmony export */   MenuModule: () => (/* binding */ MenuModule),\n/* harmony export */   ModuleNames: () => (/* reexport safe */ ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.ModuleNames),\n/* harmony export */   ModuleRegistry: () => (/* reexport safe */ ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.ModuleRegistry),\n/* harmony export */   MouseEventService: () => (/* reexport safe */ ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.MouseEventService),\n/* harmony export */   MoveColumnFeature: () => (/* reexport safe */ ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.MoveColumnFeature),\n/* harmony export */   MultiFilter: () => (/* binding */ MultiFilter),\n/* harmony export */   MultiFilterModule: () => (/* binding */ MultiFilterModule),\n/* harmony export */   NavigationService: () => (/* reexport safe */ ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.NavigationService),\n/* harmony export */   NumberCellEditor: () => (/* reexport safe */ ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.NumberCellEditor),\n/* harmony export */   NumberFilter: () => (/* reexport safe */ ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.NumberFilter),\n/* harmony export */   NumberSequence: () => (/* reexport safe */ ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.NumberSequence),\n/* harmony export */   Optional: () => (/* reexport safe */ ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.Optional),\n/* harmony export */   PaginationProxy: () => (/* reexport safe */ ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.PaginationProxy),\n/* harmony export */   PinnedRowModel: () => (/* reexport safe */ ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.PinnedRowModel),\n/* harmony export */   PivotDropZonePanel: () => (/* binding */ PivotDropZonePanel),\n/* harmony export */   PopupComponent: () => (/* reexport safe */ ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.PopupComponent),\n/* harmony export */   PopupEditorWrapper: () => (/* reexport safe */ ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.PopupEditorWrapper),\n/* harmony export */   PopupService: () => (/* reexport safe */ ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.PopupService),\n/* harmony export */   PositionableFeature: () => (/* reexport safe */ ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.PositionableFeature),\n/* harmony export */   PostConstruct: () => (/* reexport safe */ ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.PostConstruct),\n/* harmony export */   PreConstruct: () => (/* reexport safe */ ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.PreConstruct),\n/* harmony export */   PreDestroy: () => (/* reexport safe */ ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.PreDestroy),\n/* harmony export */   PrimaryColsPanel: () => (/* binding */ PrimaryColsPanel),\n/* harmony export */   PropertyKeys: () => (/* reexport safe */ ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.PropertyKeys),\n/* harmony export */   ProvidedColumnGroup: () => (/* reexport safe */ ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.ProvidedColumnGroup),\n/* harmony export */   ProvidedFilter: () => (/* reexport safe */ ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.ProvidedFilter),\n/* harmony export */   Qualifier: () => (/* reexport safe */ ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.Qualifier),\n/* harmony export */   QuerySelector: () => (/* reexport safe */ ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.QuerySelector),\n/* harmony export */   RangeSelectionModule: () => (/* binding */ RangeSelectionModule),\n/* harmony export */   RefSelector: () => (/* reexport safe */ ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.RefSelector),\n/* harmony export */   ResizeObserverService: () => (/* reexport safe */ ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.ResizeObserverService),\n/* harmony export */   RichSelectModule: () => (/* binding */ RichSelectModule),\n/* harmony export */   RowAnimationCssClasses: () => (/* reexport safe */ ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.RowAnimationCssClasses),\n/* harmony export */   RowContainerComp: () => (/* reexport safe */ ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.RowContainerComp),\n/* harmony export */   RowContainerCtrl: () => (/* reexport safe */ ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.RowContainerCtrl),\n/* harmony export */   RowContainerName: () => (/* reexport safe */ ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.RowContainerName),\n/* harmony export */   RowContainerType: () => (/* reexport safe */ ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.RowContainerType),\n/* harmony export */   RowCtrl: () => (/* reexport safe */ ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.RowCtrl),\n/* harmony export */   RowGroupDropZonePanel: () => (/* binding */ RowGroupDropZonePanel),\n/* harmony export */   RowGroupingModule: () => (/* binding */ RowGroupingModule),\n/* harmony export */   RowHighlightPosition: () => (/* reexport safe */ ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.RowHighlightPosition),\n/* harmony export */   RowNode: () => (/* reexport safe */ ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.RowNode),\n/* harmony export */   RowNodeBlock: () => (/* reexport safe */ ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.RowNodeBlock),\n/* harmony export */   RowNodeBlockLoader: () => (/* reexport safe */ ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.RowNodeBlockLoader),\n/* harmony export */   RowNodeSorter: () => (/* reexport safe */ ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.RowNodeSorter),\n/* harmony export */   RowPositionUtils: () => (/* reexport safe */ ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.RowPositionUtils),\n/* harmony export */   RowRenderer: () => (/* reexport safe */ ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.RowRenderer),\n/* harmony export */   RowType: () => (/* reexport safe */ ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.RowType),\n/* harmony export */   ScalarFilter: () => (/* reexport safe */ ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.ScalarFilter),\n/* harmony export */   ScrollVisibleService: () => (/* reexport safe */ ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.ScrollVisibleService),\n/* harmony export */   SelectCellEditor: () => (/* reexport safe */ ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.SelectCellEditor),\n/* harmony export */   SelectableService: () => (/* reexport safe */ ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.SelectableService),\n/* harmony export */   SelectionHandleType: () => (/* reexport safe */ ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.SelectionHandleType),\n/* harmony export */   ServerSideRowModelModule: () => (/* binding */ ServerSideRowModelModule),\n/* harmony export */   ServerSideTransactionResultStatus: () => (/* reexport safe */ ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.ServerSideTransactionResultStatus),\n/* harmony export */   SetFilter: () => (/* binding */ SetFilter),\n/* harmony export */   SetFilterModule: () => (/* binding */ SetFilterModule),\n/* harmony export */   SetLeftFeature: () => (/* reexport safe */ ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.SetLeftFeature),\n/* harmony export */   SideBarModule: () => (/* binding */ SideBarModule),\n/* harmony export */   SimpleFilter: () => (/* reexport safe */ ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.SimpleFilter),\n/* harmony export */   SortController: () => (/* reexport safe */ ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.SortController),\n/* harmony export */   SortIndicatorComp: () => (/* reexport safe */ ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.SortIndicatorComp),\n/* harmony export */   SparklinesModule: () => (/* binding */ SparklinesModule),\n/* harmony export */   StandardMenuFactory: () => (/* reexport safe */ ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.StandardMenuFactory),\n/* harmony export */   StatusBarModule: () => (/* binding */ StatusBarModule),\n/* harmony export */   StylingService: () => (/* reexport safe */ ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.StylingService),\n/* harmony export */   TabGuardClassNames: () => (/* reexport safe */ ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.TabGuardClassNames),\n/* harmony export */   TabGuardComp: () => (/* reexport safe */ ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.TabGuardComp),\n/* harmony export */   TabGuardCtrl: () => (/* reexport safe */ ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.TabGuardCtrl),\n/* harmony export */   TabbedLayout: () => (/* reexport safe */ ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.TabbedLayout),\n/* harmony export */   TemplateService: () => (/* reexport safe */ ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.TemplateService),\n/* harmony export */   TextCellEditor: () => (/* reexport safe */ ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.TextCellEditor),\n/* harmony export */   TextFilter: () => (/* reexport safe */ ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.TextFilter),\n/* harmony export */   TextFloatingFilter: () => (/* reexport safe */ ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.TextFloatingFilter),\n/* harmony export */   Timer: () => (/* reexport safe */ ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.Timer),\n/* harmony export */   ToolPanelColDefService: () => (/* binding */ ToolPanelColDefService),\n/* harmony export */   TouchListener: () => (/* reexport safe */ ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.TouchListener),\n/* harmony export */   UserComponentFactory: () => (/* reexport safe */ ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.UserComponentFactory),\n/* harmony export */   UserComponentRegistry: () => (/* reexport safe */ ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.UserComponentRegistry),\n/* harmony export */   ValueCache: () => (/* reexport safe */ ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.ValueCache),\n/* harmony export */   ValueFormatterService: () => (/* reexport safe */ ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.ValueFormatterService),\n/* harmony export */   ValueParserService: () => (/* reexport safe */ ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.ValueParserService),\n/* harmony export */   ValueService: () => (/* reexport safe */ ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.ValueService),\n/* harmony export */   ValuesDropZonePanel: () => (/* binding */ ValuesDropZonePanel),\n/* harmony export */   VanillaFrameworkOverrides: () => (/* reexport safe */ ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.VanillaFrameworkOverrides),\n/* harmony export */   VerticalDirection: () => (/* reexport safe */ ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.VerticalDirection),\n/* harmony export */   ViewportRowModelModule: () => (/* binding */ ViewportRowModelModule),\n/* harmony export */   VirtualList: () => (/* reexport safe */ ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.VirtualList),\n/* harmony export */   XmlFactory: () => (/* reexport safe */ ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.XmlFactory),\n/* harmony export */   ZipContainer: () => (/* reexport safe */ ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.ZipContainer),\n/* harmony export */   _: () => (/* reexport safe */ ag_grid_community__WEBPACK_IMPORTED_MODULE_0__._),\n/* harmony export */   __FORCE_MODULE_DETECTION: () => (/* reexport safe */ ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.__FORCE_MODULE_DETECTION),\n/* harmony export */   __FORCE_MODULE_DETECTION_AG_GRID_CORE_EXT: () => (/* binding */ __FORCE_MODULE_DETECTION_AG_GRID_CORE_EXT),\n/* harmony export */   agCharts: () => (/* binding */ agCharts),\n/* harmony export */   exportMultipleSheetsAsExcel: () => (/* binding */ exportMultipleSheetsAsExcel),\n/* harmony export */   getMultipleSheetsAsExcel: () => (/* binding */ getMultipleSheetsAsExcel),\n/* harmony export */   getRowContainerTypeForName: () => (/* reexport safe */ ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.getRowContainerTypeForName),\n/* harmony export */   simpleHttpRequest: () => (/* reexport safe */ ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.simpleHttpRequest)\n/* harmony export */ });\n/* harmony import */ var ag_grid_community__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ag-grid-community */ \"./node_modules/ag-grid-community/dist/ag-grid-community.auto.esm.js\");\n/**\n          * @ag-grid-enterprise/all-modules - Advanced Data Grid / Data Table supporting Javascript / Typescript / React / Angular / Vue * @version v30.0.2\n          * @link https://www.ag-grid.com/\n          * @license Commercial\n          */\n\n\n\nclass MD5 {\n    constructor() {\n        this.ieCompatibility = false;\n    }\n    init() {\n        this.ieCompatibility = (this.md5('hello') != '5d41402abc4b2a76b9719d911017c592');\n    }\n    md5cycle(x, k) {\n        let a = x[0], b = x[1], c = x[2], d = x[3];\n        a = this.ff(a, b, c, d, k[0], 7, -680876936);\n        d = this.ff(d, a, b, c, k[1], 12, -389564586);\n        c = this.ff(c, d, a, b, k[2], 17, 606105819);\n        b = this.ff(b, c, d, a, k[3], 22, -1044525330);\n        a = this.ff(a, b, c, d, k[4], 7, -176418897);\n        d = this.ff(d, a, b, c, k[5], 12, 1200080426);\n        c = this.ff(c, d, a, b, k[6], 17, -1473231341);\n        b = this.ff(b, c, d, a, k[7], 22, -45705983);\n        a = this.ff(a, b, c, d, k[8], 7, 1770035416);\n        d = this.ff(d, a, b, c, k[9], 12, -1958414417);\n        c = this.ff(c, d, a, b, k[10], 17, -42063);\n        b = this.ff(b, c, d, a, k[11], 22, -1990404162);\n        a = this.ff(a, b, c, d, k[12], 7, 1804603682);\n        d = this.ff(d, a, b, c, k[13], 12, -40341101);\n        c = this.ff(c, d, a, b, k[14], 17, -1502002290);\n        b = this.ff(b, c, d, a, k[15], 22, 1236535329);\n        a = this.gg(a, b, c, d, k[1], 5, -165796510);\n        d = this.gg(d, a, b, c, k[6], 9, -1069501632);\n        c = this.gg(c, d, a, b, k[11], 14, 643717713);\n        b = this.gg(b, c, d, a, k[0], 20, -373897302);\n        a = this.gg(a, b, c, d, k[5], 5, -701558691);\n        d = this.gg(d, a, b, c, k[10], 9, 38016083);\n        c = this.gg(c, d, a, b, k[15], 14, -660478335);\n        b = this.gg(b, c, d, a, k[4], 20, -405537848);\n        a = this.gg(a, b, c, d, k[9], 5, 568446438);\n        d = this.gg(d, a, b, c, k[14], 9, -1019803690);\n        c = this.gg(c, d, a, b, k[3], 14, -187363961);\n        b = this.gg(b, c, d, a, k[8], 20, 1163531501);\n        a = this.gg(a, b, c, d, k[13], 5, -1444681467);\n        d = this.gg(d, a, b, c, k[2], 9, -51403784);\n        c = this.gg(c, d, a, b, k[7], 14, 1735328473);\n        b = this.gg(b, c, d, a, k[12], 20, -1926607734);\n        a = this.hh(a, b, c, d, k[5], 4, -378558);\n        d = this.hh(d, a, b, c, k[8], 11, -2022574463);\n        c = this.hh(c, d, a, b, k[11], 16, 1839030562);\n        b = this.hh(b, c, d, a, k[14], 23, -35309556);\n        a = this.hh(a, b, c, d, k[1], 4, -1530992060);\n        d = this.hh(d, a, b, c, k[4], 11, 1272893353);\n        c = this.hh(c, d, a, b, k[7], 16, -155497632);\n        b = this.hh(b, c, d, a, k[10], 23, -1094730640);\n        a = this.hh(a, b, c, d, k[13], 4, 681279174);\n        d = this.hh(d, a, b, c, k[0], 11, -358537222);\n        c = this.hh(c, d, a, b, k[3], 16, -722521979);\n        b = this.hh(b, c, d, a, k[6], 23, 76029189);\n        a = this.hh(a, b, c, d, k[9], 4, -640364487);\n        d = this.hh(d, a, b, c, k[12], 11, -421815835);\n        c = this.hh(c, d, a, b, k[15], 16, 530742520);\n        b = this.hh(b, c, d, a, k[2], 23, -995338651);\n        a = this.ii(a, b, c, d, k[0], 6, -198630844);\n        d = this.ii(d, a, b, c, k[7], 10, 1126891415);\n        c = this.ii(c, d, a, b, k[14], 15, -1416354905);\n        b = this.ii(b, c, d, a, k[5], 21, -57434055);\n        a = this.ii(a, b, c, d, k[12], 6, 1700485571);\n        d = this.ii(d, a, b, c, k[3], 10, -1894986606);\n        c = this.ii(c, d, a, b, k[10], 15, -1051523);\n        b = this.ii(b, c, d, a, k[1], 21, -2054922799);\n        a = this.ii(a, b, c, d, k[8], 6, 1873313359);\n        d = this.ii(d, a, b, c, k[15], 10, -30611744);\n        c = this.ii(c, d, a, b, k[6], 15, -1560198380);\n        b = this.ii(b, c, d, a, k[13], 21, 1309151649);\n        a = this.ii(a, b, c, d, k[4], 6, -145523070);\n        d = this.ii(d, a, b, c, k[11], 10, -1120210379);\n        c = this.ii(c, d, a, b, k[2], 15, 718787259);\n        b = this.ii(b, c, d, a, k[9], 21, -343485551);\n        x[0] = this.add32(a, x[0]);\n        x[1] = this.add32(b, x[1]);\n        x[2] = this.add32(c, x[2]);\n        x[3] = this.add32(d, x[3]);\n    }\n    cmn(q, a, b, x, s, t) {\n        a = this.add32(this.add32(a, q), this.add32(x, t));\n        return this.add32((a << s) | (a >>> (32 - s)), b);\n    }\n    ff(a, b, c, d, x, s, t) {\n        return this.cmn((b & c) | ((~b) & d), a, b, x, s, t);\n    }\n    gg(a, b, c, d, x, s, t) {\n        return this.cmn((b & d) | (c & (~d)), a, b, x, s, t);\n    }\n    hh(a, b, c, d, x, s, t) {\n        return this.cmn(b ^ c ^ d, a, b, x, s, t);\n    }\n    ii(a, b, c, d, x, s, t) {\n        return this.cmn(c ^ (b | (~d)), a, b, x, s, t);\n    }\n    md51(s) {\n        const n = s.length;\n        const state = [1732584193, -271733879, -1732584194, 271733878];\n        let i;\n        for (i = 64; i <= s.length; i += 64) {\n            this.md5cycle(state, this.md5blk(s.substring(i - 64, i)));\n        }\n        s = s.substring(i - 64);\n        const tail = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0];\n        for (i = 0; i < s.length; i++) {\n            tail[i >> 2] |= s.charCodeAt(i) << ((i % 4) << 3);\n        }\n        tail[i >> 2] |= 0x80 << ((i % 4) << 3);\n        if (i > 55) {\n            this.md5cycle(state, tail);\n            for (i = 0; i < 16; i++) {\n                tail[i] = 0;\n            }\n        }\n        tail[14] = n * 8;\n        this.md5cycle(state, tail);\n        return state;\n    }\n    /* there needs to be support for Unicode here, * unless we pretend that we can redefine the MD-5\n     * algorithm for multi-byte characters (perhaps by adding every four 16-bit characters and\n     * shortening the sum to 32 bits). Otherwise I suthis.ggest performing MD-5 as if every character\n     * was two bytes--e.g., 0040 0025 = @%--but then how will an ordinary MD-5 sum be matched?\n     * There is no way to standardize text to something like UTF-8 before transformation; speed cost is\n     * utterly prohibitive. The JavaScript standard itself needs to look at this: it should start\n     * providing access to strings as preformed UTF-8 8-bit unsigned value arrays.\n     */\n    md5blk(s) {\n        const md5blks = [];\n        /* Andy King said do it this way. */\n        for (let i = 0; i < 64; i += 4) {\n            md5blks[i >> 2] = s.charCodeAt(i)\n                + (s.charCodeAt(i + 1) << 8)\n                + (s.charCodeAt(i + 2) << 16)\n                + (s.charCodeAt(i + 3) << 24);\n        }\n        return md5blks;\n    }\n    rhex(n) {\n        const hex_chr = '0123456789abcdef'.split('');\n        let s = '', j = 0;\n        for (; j < 4; j++) {\n            s += hex_chr[(n >> (j * 8 + 4)) & 0x0F]\n                + hex_chr[(n >> (j * 8)) & 0x0F];\n        }\n        return s;\n    }\n    hex(x) {\n        for (let i = 0; i < x.length; i++) {\n            x[i] = this.rhex(x[i]);\n        }\n        return x.join('');\n    }\n    md5(s) {\n        return this.hex(this.md51(s));\n    }\n    add32(a, b) {\n        return this.ieCompatibility ? this.add32Compat(a, b) : this.add32Std(a, b);\n    }\n    /* this function is much faster, so if possible we use it. Some IEs are the only ones I know of that\n     need the idiotic second function, generated by an if clause.  */\n    add32Std(a, b) {\n        return (a + b) & 0xFFFFFFFF;\n    }\n    add32Compat(x, y) {\n        const lsw = (x & 0xFFFF) + (y & 0xFFFF), msw = (x >> 16) + (y >> 16) + (lsw >> 16);\n        return (msw << 16) | (lsw & 0xFFFF);\n    }\n}\n\n// move to general utils\nfunction missingOrEmpty(value) {\n    return value == null || value.length === 0;\n}\nfunction exists(value, allowEmptyString = false) {\n    return value != null && (value !== '' || allowEmptyString);\n}\nclass LicenseManager {\n    constructor(document) {\n        this.watermarkMessage = undefined;\n        this.document = document;\n        this.md5 = new MD5();\n        this.md5.init();\n    }\n    validateLicense() {\n        if (missingOrEmpty(LicenseManager.licenseKey)) {\n            if (!this.isWebsiteUrl() || this.isForceWatermark()) {\n                this.outputMissingLicenseKey();\n            }\n        }\n        else if (LicenseManager.licenseKey.length > 32) {\n            if (LicenseManager.licenseKey.indexOf(\"For_Trialing_ag-Grid_Only\") !== -1) {\n                this.outputInvalidLicenseKey();\n            }\n            else {\n                const { md5, license, version, isTrial } = LicenseManager.extractLicenseComponents(LicenseManager.licenseKey);\n                if (md5 === this.md5.md5(license)) {\n                    if (exists(version) && version) {\n                        this.validateLicenseKeyForVersion(version, !!isTrial, license);\n                    }\n                    else {\n                        this.validateLegacyKey(license);\n                    }\n                }\n                else {\n                    this.outputInvalidLicenseKey();\n                }\n            }\n        }\n        else {\n            this.outputInvalidLicenseKey();\n        }\n    }\n    static extractExpiry(license) {\n        const restrictionHashed = license.substring(license.lastIndexOf('_') + 1, license.length);\n        return new Date(parseInt(LicenseManager.decode(restrictionHashed), 10));\n    }\n    static extractLicenseComponents(licenseKey) {\n        // when users copy the license key from a PDF extra zero width characters are sometimes copied too\n        // carriage returns and line feeds are problematic too\n        // all of which causes license key validation to fail - strip these out\n        let cleanedLicenseKey = licenseKey.replace(/[\\u200B-\\u200D\\uFEFF]/g, '');\n        cleanedLicenseKey = cleanedLicenseKey.replace(/\\r?\\n|\\r/g, '');\n        const hashStart = cleanedLicenseKey.length - 32;\n        const md5 = cleanedLicenseKey.substring(hashStart);\n        const license = cleanedLicenseKey.substring(0, hashStart);\n        const [version, isTrial] = LicenseManager.extractBracketedInformation(cleanedLicenseKey);\n        return { md5, license, version, isTrial };\n    }\n    getLicenseDetails(licenseKey) {\n        const { md5, license, version, isTrial } = LicenseManager.extractLicenseComponents(licenseKey);\n        let valid = (md5 === this.md5.md5(license)) && licenseKey.indexOf(\"For_Trialing_ag-Grid_Only\") === -1;\n        let trialExpired = null;\n        let expiry = null;\n        if (valid) {\n            expiry = LicenseManager.extractExpiry(license);\n            valid = !isNaN(expiry.getTime());\n            if (isTrial) {\n                const now = new Date();\n                trialExpired = (expiry < now);\n            }\n        }\n        return {\n            licenseKey,\n            valid,\n            expiry: valid ? LicenseManager.formatDate(expiry) : null,\n            version: version ? version : 'legacy',\n            isTrial,\n            trialExpired\n        };\n    }\n    isDisplayWatermark() {\n        return this.isForceWatermark() || (!this.isLocalhost() && !this.isWebsiteUrl() && !missingOrEmpty(this.watermarkMessage));\n    }\n    getWatermarkMessage() {\n        return this.watermarkMessage || '';\n    }\n    getHostname() {\n        const win = (this.document.defaultView || window);\n        const loc = win.location;\n        const { hostname = '' } = loc;\n        return hostname;\n    }\n    isForceWatermark() {\n        const win = (this.document.defaultView || window);\n        const loc = win.location;\n        const { pathname } = loc;\n        return pathname ? pathname.indexOf('forceWatermark') !== -1 : false;\n    }\n    isWebsiteUrl() {\n        const hostname = this.getHostname();\n        return hostname.match(/^((?:\\w+\\.)?ag-grid\\.com)$/) !== null;\n    }\n    isLocalhost() {\n        const hostname = this.getHostname();\n        return hostname.match(/^(?:127\\.0\\.0\\.1|localhost)$/) !== null;\n    }\n    static formatDate(date) {\n        const monthNames = [\n            'January', 'February', 'March',\n            'April', 'May', 'June', 'July',\n            'August', 'September', 'October',\n            'November', 'December'\n        ];\n        const day = date.getDate();\n        const monthIndex = date.getMonth();\n        const year = date.getFullYear();\n        return day + ' ' + monthNames[monthIndex] + ' ' + year;\n    }\n    static getGridReleaseDate() {\n        return new Date(parseInt(LicenseManager.decode(LicenseManager.RELEASE_INFORMATION), 10));\n    }\n    static decode(input) {\n        const keystr = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=';\n        let t = '';\n        let n, r, i;\n        let s, o, u, a;\n        let f = 0;\n        const e = input.replace(/[^A-Za-z0-9+/=]/g, '');\n        while (f < e.length) {\n            s = keystr.indexOf(e.charAt(f++));\n            o = keystr.indexOf(e.charAt(f++));\n            u = keystr.indexOf(e.charAt(f++));\n            a = keystr.indexOf(e.charAt(f++));\n            n = s << 2 | o >> 4;\n            r = (o & 15) << 4 | u >> 2;\n            i = (u & 3) << 6 | a;\n            t = t + String.fromCharCode(n);\n            if (u != 64) {\n                t = t + String.fromCharCode(r);\n            }\n            if (a != 64) {\n                t = t + String.fromCharCode(i);\n            }\n        }\n        t = LicenseManager.utf8_decode(t);\n        return t;\n    }\n    static utf8_decode(input) {\n        input = input.replace(/rn/g, 'n');\n        let t = '';\n        for (let n = 0; n < input.length; n++) {\n            const r = input.charCodeAt(n);\n            if (r < 128) {\n                t += String.fromCharCode(r);\n            }\n            else if (r > 127 && r < 2048) {\n                t += String.fromCharCode(r >> 6 | 192);\n                t += String.fromCharCode(r & 63 | 128);\n            }\n            else {\n                t += String.fromCharCode(r >> 12 | 224);\n                t += String.fromCharCode(r >> 6 & 63 | 128);\n                t += String.fromCharCode(r & 63 | 128);\n            }\n        }\n        return t;\n    }\n    static setLicenseKey(licenseKey) {\n        this.licenseKey = licenseKey;\n    }\n    static extractBracketedInformation(licenseKey) {\n        const matches = licenseKey.split('[')\n            .filter(function (v) {\n            return v.indexOf(']') > -1;\n        })\n            .map(function (value) {\n            return value.split(']')[0];\n        });\n        if (!matches || matches.length === 0) {\n            return [null, null];\n        }\n        const isTrial = matches.filter(match => match === 'TRIAL').length === 1;\n        const version = matches.filter(match => match.indexOf(\"v\") === 0).map(match => match.replace(/^v/, \"\"))[0];\n        return [version, isTrial];\n    }\n    validateLicenseKeyForVersion(version, isTrial, license) {\n        if (version !== '2') {\n            return;\n        }\n        if (isTrial) {\n            this.validateForTrial(license);\n        }\n        else {\n            this.validateLegacyKey(license);\n        }\n    }\n    validateLegacyKey(license) {\n        const gridReleaseDate = LicenseManager.getGridReleaseDate();\n        const expiry = LicenseManager.extractExpiry(license);\n        let valid = false;\n        let current = false;\n        if (!isNaN(expiry.getTime())) {\n            valid = true;\n            current = (gridReleaseDate < expiry);\n        }\n        if (!valid) {\n            this.outputInvalidLicenseKey();\n        }\n        else if (!current) {\n            const formattedExpiryDate = LicenseManager.formatDate(expiry);\n            const formattedReleaseDate = LicenseManager.formatDate(gridReleaseDate);\n            this.outputIncompatibleVersion(formattedExpiryDate, formattedReleaseDate);\n        }\n    }\n    validateForTrial(license) {\n        const expiry = LicenseManager.extractExpiry(license);\n        const now = new Date();\n        let valid = false;\n        let current = false;\n        if (!isNaN(expiry.getTime())) {\n            valid = true;\n            current = (expiry > now);\n        }\n        if (!valid) {\n            this.outputInvalidLicenseKey();\n        }\n        else if (!current) {\n            const formattedExpiryDate = LicenseManager.formatDate(expiry);\n            this.outputExpiredTrialKey(formattedExpiryDate);\n        }\n    }\n    outputInvalidLicenseKey() {\n        console.error('*****************************************************************************************************************');\n        console.error('***************************************** AG Grid Enterprise License ********************************************');\n        console.error('********************************************* Invalid License ***************************************************');\n        console.error('* Your license for AG Grid Enterprise is not valid - please contact info@ag-grid.com to obtain a valid license. *');\n        console.error('*****************************************************************************************************************');\n        console.error('*****************************************************************************************************************');\n        this.watermarkMessage = \"Invalid License\";\n    }\n    outputExpiredTrialKey(formattedExpiryDate) {\n        console.error('****************************************************************************************************************');\n        console.error('***************************************** AG Grid Enterprise License *******************************************');\n        console.error('*****************************************   Trial Period Expired.    *******************************************');\n        console.error(`* Your license for AG Grid Enterprise expired on ${formattedExpiryDate}.                                                *`);\n        console.error('* Please email info@ag-grid.com to purchase a license.                                                         *');\n        console.error('****************************************************************************************************************');\n        console.error('****************************************************************************************************************');\n        this.watermarkMessage = \"Trial Period Expired\";\n    }\n    outputMissingLicenseKey() {\n        console.error('****************************************************************************************************************');\n        console.error('***************************************** AG Grid Enterprise License *******************************************');\n        console.error('****************************************** License Key Not Found ***********************************************');\n        console.error('* All AG Grid Enterprise features are unlocked.                                                                *');\n        console.error('* This is an evaluation only version, it is not licensed for development projects intended for production.     *');\n        console.error('* If you want to hide the watermark, please email info@ag-grid.com for a trial license.                        *');\n        console.error('****************************************************************************************************************');\n        console.error('****************************************************************************************************************');\n        this.watermarkMessage = \"For Trial Use Only\";\n    }\n    outputIncompatibleVersion(formattedExpiryDate, formattedReleaseDate) {\n        console.error('****************************************************************************************************************************');\n        console.error('****************************************************************************************************************************');\n        console.error('*                                             AG Grid Enterprise License                                                   *');\n        console.error('*                           License not compatible with installed version of AG Grid Enterprise.                           *');\n        console.error('*                                                                                                                          *');\n        console.error(`* Your AG Grid License entitles you to all versions of AG Grid that we release within the time covered by your license     *`);\n        console.error(`* - typically we provide one year licenses which entitles you to all releases / updates of AG Grid within that year.       *`);\n        console.error(`* Your license has an end (expiry) date which stops the license key working with versions of AG Grid released after the    *`);\n        console.error(`* license end date. The license key that you have expires on ${formattedExpiryDate}, however the version of AG Grid you    *`);\n        console.error(`* are trying to use was released on ${formattedReleaseDate}.                                                               *`);\n        console.error('*                                                                                                                          *');\n        console.error('* Please contact info@ag-grid.com to renew your subscription to new versions and get a new license key to work with this   *');\n        console.error('* version of AG Grid.                                                                                                      *');\n        console.error('****************************************************************************************************************************');\n        console.error('****************************************************************************************************************************');\n        this.watermarkMessage = \"License Expired\";\n    }\n}\nLicenseManager.RELEASE_INFORMATION = 'MTY4NzEzMDAyMDg0OA==';\n\nvar __decorate$2y = ( false) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nlet GridLicenseManager = class GridLicenseManager extends ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.BeanStub {\n    validateLicense() {\n        this.licenseManager = new LicenseManager(this.gridOptionsService.getDocument());\n        this.licenseManager.validateLicense();\n    }\n    static getLicenseDetails(licenseKey) {\n        return new LicenseManager(null).getLicenseDetails(licenseKey);\n    }\n    isDisplayWatermark() {\n        return this.licenseManager.isDisplayWatermark();\n    }\n    getWatermarkMessage() {\n        return this.licenseManager.getWatermarkMessage();\n    }\n    static setLicenseKey(licenseKey) {\n        LicenseManager.setLicenseKey(licenseKey);\n    }\n};\n__decorate$2y([\n    ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.PreConstruct\n], GridLicenseManager.prototype, \"validateLicense\", null);\nGridLicenseManager = __decorate$2y([\n    (0,ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.Bean)('licenseManager')\n], GridLicenseManager);\n\nvar __decorate$2x = ( false) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nclass WatermarkComp extends ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.Component {\n    constructor() {\n        super(/* html*/ `<div class=\"ag-watermark\">\n                <div ref=\"eLicenseTextRef\" class=\"ag-watermark-text\"></div>\n            </div>`);\n    }\n    postConstruct() {\n        const show = this.shouldDisplayWatermark();\n        this.setDisplayed(show);\n        if (show) {\n            this.eLicenseTextRef.innerText = this.licenseManager.getWatermarkMessage();\n            window.setTimeout(() => this.addCssClass('ag-opacity-zero'), 0);\n            window.setTimeout(() => this.setDisplayed(false), 5000);\n        }\n    }\n    shouldDisplayWatermark() {\n        return this.licenseManager.isDisplayWatermark();\n    }\n}\n__decorate$2x([\n    (0,ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.Autowired)('licenseManager')\n], WatermarkComp.prototype, \"licenseManager\", void 0);\n__decorate$2x([\n    (0,ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.RefSelector)('eLicenseTextRef')\n], WatermarkComp.prototype, \"eLicenseTextRef\", void 0);\n__decorate$2x([\n    ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.PostConstruct\n], WatermarkComp.prototype, \"postConstruct\", null);\n\n// DO NOT UPDATE MANUALLY: Generated from script during build time\nconst VERSION$i = '30.0.2';\n\nconst EnterpriseCoreModule = {\n    version: VERSION$i,\n    moduleName: ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.ModuleNames.EnterpriseCoreModule,\n    beans: [GridLicenseManager],\n    agStackComponents: [\n        { componentName: 'AgWatermark', componentClass: WatermarkComp }\n    ]\n};\n\nvar __decorate$2w = ( false) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nvar ClipboardService_1;\n// Matches value in changeDetectionService\nconst SOURCE_PASTE = 'paste';\nconst EXPORT_TYPE_DRAG_COPY = 'dragCopy';\nconst EXPORT_TYPE_CLIPBOARD = 'clipboard';\nvar CellClearType;\n(function (CellClearType) {\n    CellClearType[CellClearType[\"CellRange\"] = 0] = \"CellRange\";\n    CellClearType[CellClearType[\"SelectedRows\"] = 1] = \"SelectedRows\";\n    CellClearType[CellClearType[\"FocusedCell\"] = 2] = \"FocusedCell\";\n})(CellClearType || (CellClearType = {}));\nlet ClipboardService = ClipboardService_1 = class ClipboardService extends ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.BeanStub {\n    constructor() {\n        super(...arguments);\n        this.lastPasteOperationTime = 0;\n        this.navigatorApiFailed = false;\n    }\n    init() {\n        this.logger = this.loggerFactory.create('ClipboardService');\n        if (this.rowModel.getType() === 'clientSide') {\n            this.clientSideRowModel = this.rowModel;\n        }\n        this.ctrlsService.whenReady(p => {\n            this.gridCtrl = p.gridCtrl;\n        });\n    }\n    pasteFromClipboard() {\n        this.logger.log('pasteFromClipboard');\n        // Method 1 - native clipboard API, available in modern chrome browsers\n        const allowNavigator = !this.gridOptionsService.is('suppressClipboardApi');\n        // Some browsers (Firefox) do not allow Web Applications to read from\n        // the clipboard so verify if not only the ClipboardAPI is available,\n        // but also if the `readText` method is public.\n        if (allowNavigator && !this.navigatorApiFailed && navigator.clipboard && navigator.clipboard.readText) {\n            navigator.clipboard.readText()\n                .then(this.processClipboardData.bind(this))\n                .catch((e) => {\n                ag_grid_community__WEBPACK_IMPORTED_MODULE_0__._.doOnce(() => {\n                    console.warn(e);\n                    console.warn('AG Grid: Unable to use the Clipboard API (navigator.clipboard.readText()). ' +\n                        'The reason why it could not be used has been logged in the previous line. ' +\n                        'For this reason the grid has defaulted to using a workaround which doesn\\'t perform as well. ' +\n                        'Either fix why Clipboard API is blocked, OR stop this message from appearing by setting grid ' +\n                        'property suppressClipboardApi=true (which will default the grid to using the workaround rather than the API');\n                }, 'clipboardApiError');\n                this.navigatorApiFailed = true;\n                this.pasteFromClipboardLegacy();\n            });\n        }\n        else {\n            this.pasteFromClipboardLegacy();\n        }\n    }\n    pasteFromClipboardLegacy() {\n        // Method 2 - if modern API fails, the old school hack\n        let defaultPrevented = false;\n        const handlePasteEvent = (e) => {\n            const currentPastOperationTime = (new Date()).getTime();\n            if (currentPastOperationTime - this.lastPasteOperationTime < 50) {\n                defaultPrevented = true;\n                e.preventDefault();\n            }\n            this.lastPasteOperationTime = currentPastOperationTime;\n        };\n        this.executeOnTempElement((textArea) => {\n            textArea.addEventListener('paste', handlePasteEvent);\n            textArea.focus({ preventScroll: true });\n        }, (element) => {\n            const data = element.value;\n            if (!defaultPrevented) {\n                this.processClipboardData(data);\n            }\n            else {\n                this.refocusLastFocusedCell();\n            }\n            element.removeEventListener('paste', handlePasteEvent);\n        });\n    }\n    refocusLastFocusedCell() {\n        const focusedCell = this.focusService.getFocusedCell();\n        if (focusedCell) {\n            this.focusService.setFocusedCell({\n                rowIndex: focusedCell.rowIndex,\n                column: focusedCell.column,\n                rowPinned: focusedCell.rowPinned,\n                forceBrowserFocus: true\n            });\n        }\n    }\n    getClipboardDelimiter() {\n        const delimiter = this.gridOptionsService.get('clipboardDelimiter');\n        return ag_grid_community__WEBPACK_IMPORTED_MODULE_0__._.exists(delimiter) ? delimiter : '\\t';\n    }\n    processClipboardData(data) {\n        if (data == null) {\n            return;\n        }\n        let parsedData = ClipboardService_1.stringToArray(data, this.getClipboardDelimiter());\n        const userFunc = this.gridOptionsService.getCallback('processDataFromClipboard');\n        if (userFunc) {\n            parsedData = userFunc({ data: parsedData });\n        }\n        if (parsedData == null) {\n            return;\n        }\n        if (this.gridOptionsService.is('suppressLastEmptyLineOnPaste')) {\n            this.removeLastLineIfBlank(parsedData);\n        }\n        const pasteOperation = (cellsToFlash, updatedRowNodes, focusedCell, changedPath) => {\n            const rangeActive = this.rangeService && this.rangeService.isMoreThanOneCell();\n            const pasteIntoRange = rangeActive && !this.hasOnlyOneValueToPaste(parsedData);\n            if (pasteIntoRange) {\n                this.pasteIntoActiveRange(parsedData, cellsToFlash, updatedRowNodes, changedPath);\n            }\n            else {\n                this.pasteStartingFromFocusedCell(parsedData, cellsToFlash, updatedRowNodes, focusedCell, changedPath);\n            }\n        };\n        this.doPasteOperation(pasteOperation);\n    }\n    // This will parse a delimited string into an array of arrays.\n    static stringToArray(strData, delimiter = ',') {\n        const data = [];\n        const isNewline = (char) => char === '\\r' || char === '\\n';\n        let insideQuotedField = false;\n        if (strData === '') {\n            return [['']];\n        }\n        // iterate over each character, keep track of current row and column (of the returned array)\n        for (let row = 0, column = 0, position = 0; position < strData.length; position++) {\n            const previousChar = strData[position - 1];\n            const currentChar = strData[position];\n            const nextChar = strData[position + 1];\n            const ensureDataExists = () => {\n                if (!data[row]) {\n                    // create row if it doesn't exist\n                    data[row] = [];\n                }\n                if (!data[row][column]) {\n                    // create column if it doesn't exist\n                    data[row][column] = '';\n                }\n            };\n            ensureDataExists();\n            if (currentChar === '\"') {\n                if (insideQuotedField) {\n                    if (nextChar === '\"') {\n                        // unescape double quote\n                        data[row][column] += '\"';\n                        position++;\n                    }\n                    else {\n                        // exit quoted field\n                        insideQuotedField = false;\n                    }\n                    // continue;\n                }\n                else if (previousChar === undefined || previousChar === delimiter || isNewline(previousChar)) {\n                    // enter quoted field\n                    insideQuotedField = true;\n                    // continue;\n                }\n            }\n            if (!insideQuotedField && currentChar !== '\"') {\n                if (currentChar === delimiter) {\n                    // move to next column\n                    column++;\n                    ensureDataExists();\n                    continue;\n                }\n                else if (isNewline(currentChar)) {\n                    // move to next row\n                    column = 0;\n                    row++;\n                    ensureDataExists();\n                    if (currentChar === '\\r' && nextChar === '\\n') {\n                        // skip over second newline character if it exists\n                        position++;\n                    }\n                    continue;\n                }\n            }\n            // add current character to current column\n            data[row][column] += currentChar;\n        }\n        return data;\n    }\n    // common code to paste operations, e.g. paste to cell, paste to range, and copy range down\n    doPasteOperation(pasteOperationFunc) {\n        const api = this.gridOptionsService.api;\n        const columnApi = this.gridOptionsService.columnApi;\n        const source = 'clipboard';\n        this.eventService.dispatchEvent({\n            type: ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.Events.EVENT_PASTE_START,\n            api,\n            columnApi,\n            source\n        });\n        let changedPath;\n        if (this.clientSideRowModel) {\n            const onlyChangedColumns = this.gridOptionsService.is('aggregateOnlyChangedColumns');\n            changedPath = new ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.ChangedPath(onlyChangedColumns, this.clientSideRowModel.getRootNode());\n        }\n        const cellsToFlash = {};\n        const updatedRowNodes = [];\n        const focusedCell = this.focusService.getFocusedCell();\n        pasteOperationFunc(cellsToFlash, updatedRowNodes, focusedCell, changedPath);\n        if (changedPath) {\n            this.clientSideRowModel.doAggregate(changedPath);\n        }\n        this.rowRenderer.refreshCells();\n        this.dispatchFlashCells(cellsToFlash);\n        this.fireRowChanged(updatedRowNodes);\n        // if using the clipboard hack with a temp element, then the focus has been lost,\n        // so need to put it back. otherwise paste operation loosed focus on cell and keyboard\n        // navigation stops.\n        this.refocusLastFocusedCell();\n        const event = {\n            type: ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.Events.EVENT_PASTE_END,\n            source\n        };\n        this.eventService.dispatchEvent(event);\n    }\n    pasteIntoActiveRange(clipboardData, cellsToFlash, updatedRowNodes, changedPath) {\n        // true if clipboard data can be evenly pasted into range, otherwise false\n        const abortRepeatingPasteIntoRows = this.getRangeSize() % clipboardData.length != 0;\n        let indexOffset = 0;\n        let dataRowIndex = 0;\n        const rowCallback = (currentRow, rowNode, columns, index) => {\n            const atEndOfClipboardData = index - indexOffset >= clipboardData.length;\n            if (atEndOfClipboardData) {\n                if (abortRepeatingPasteIntoRows) {\n                    return;\n                }\n                // increment offset and reset data index to repeat paste of data\n                indexOffset += dataRowIndex;\n                dataRowIndex = 0;\n            }\n            const currentRowData = clipboardData[index - indexOffset];\n            // otherwise we are not the first row, so copy\n            updatedRowNodes.push(rowNode);\n            const processCellFromClipboardFunc = this.gridOptionsService.getCallback('processCellFromClipboard');\n            columns.forEach((column, idx) => {\n                if (!column.isCellEditable(rowNode) || column.isSuppressPaste(rowNode)) {\n                    return;\n                }\n                // repeat data for columns we don't have data for - happens when to range is bigger than copied data range\n                if (idx >= currentRowData.length) {\n                    idx = idx % currentRowData.length;\n                }\n                const newValue = this.processCell(rowNode, column, currentRowData[idx], EXPORT_TYPE_DRAG_COPY, processCellFromClipboardFunc, true);\n                rowNode.setDataValue(column, newValue, SOURCE_PASTE);\n                if (changedPath) {\n                    changedPath.addParentNode(rowNode.parent, [column]);\n                }\n                const { rowIndex, rowPinned } = currentRow;\n                const cellId = this.cellPositionUtils.createIdFromValues({ rowIndex, column, rowPinned });\n                cellsToFlash[cellId] = true;\n            });\n            dataRowIndex++;\n        };\n        this.iterateActiveRanges(false, rowCallback);\n    }\n    pasteStartingFromFocusedCell(parsedData, cellsToFlash, updatedRowNodes, focusedCell, changedPath) {\n        if (!focusedCell) {\n            return;\n        }\n        const currentRow = { rowIndex: focusedCell.rowIndex, rowPinned: focusedCell.rowPinned };\n        const columnsToPasteInto = this.columnModel.getDisplayedColumnsStartingAt(focusedCell.column);\n        if (this.isPasteSingleValueIntoRange(parsedData)) {\n            this.pasteSingleValueIntoRange(parsedData, updatedRowNodes, cellsToFlash, changedPath);\n        }\n        else {\n            this.pasteMultipleValues(parsedData, currentRow, updatedRowNodes, columnsToPasteInto, cellsToFlash, EXPORT_TYPE_CLIPBOARD, changedPath);\n        }\n    }\n    // if range is active, and only one cell, then we paste this cell into all cells in the active range.\n    isPasteSingleValueIntoRange(parsedData) {\n        return this.hasOnlyOneValueToPaste(parsedData)\n            && this.rangeService != null\n            && !this.rangeService.isEmpty();\n    }\n    pasteSingleValueIntoRange(parsedData, updatedRowNodes, cellsToFlash, changedPath) {\n        const value = parsedData[0][0];\n        const rowCallback = (currentRow, rowNode, columns) => {\n            updatedRowNodes.push(rowNode);\n            columns.forEach(column => this.updateCellValue(rowNode, column, value, cellsToFlash, EXPORT_TYPE_CLIPBOARD, changedPath));\n        };\n        this.iterateActiveRanges(false, rowCallback);\n    }\n    hasOnlyOneValueToPaste(parsedData) {\n        return parsedData.length === 1 && parsedData[0].length === 1;\n    }\n    copyRangeDown() {\n        if (!this.rangeService || this.rangeService.isEmpty()) {\n            return;\n        }\n        const firstRowValues = [];\n        const pasteOperation = (cellsToFlash, updatedRowNodes, focusedCell, changedPath) => {\n            const processCellForClipboardFunc = this.gridOptionsService.getCallback('processCellForClipboard');\n            const processCellFromClipboardFunc = this.gridOptionsService.getCallback('processCellFromClipboard');\n            const rowCallback = (currentRow, rowNode, columns) => {\n                // take reference of first row, this is the one we will be using to copy from\n                if (!firstRowValues.length) {\n                    // two reasons for looping through columns\n                    columns.forEach(column => {\n                        // get the initial values to copy down\n                        const value = this.processCell(rowNode, column, this.valueService.getValue(column, rowNode), EXPORT_TYPE_DRAG_COPY, processCellForClipboardFunc, false, true);\n                        firstRowValues.push(value);\n                    });\n                }\n                else {\n                    // otherwise we are not the first row, so copy\n                    updatedRowNodes.push(rowNode);\n                    columns.forEach((column, index) => {\n                        if (!column.isCellEditable(rowNode) || column.isSuppressPaste(rowNode)) {\n                            return;\n                        }\n                        const firstRowValue = this.processCell(rowNode, column, firstRowValues[index], EXPORT_TYPE_DRAG_COPY, processCellFromClipboardFunc, true);\n                        rowNode.setDataValue(column, firstRowValue, SOURCE_PASTE);\n                        if (changedPath) {\n                            changedPath.addParentNode(rowNode.parent, [column]);\n                        }\n                        const { rowIndex, rowPinned } = currentRow;\n                        const cellId = this.cellPositionUtils.createIdFromValues({ rowIndex, column, rowPinned });\n                        cellsToFlash[cellId] = true;\n                    });\n                }\n            };\n            this.iterateActiveRanges(true, rowCallback);\n        };\n        this.doPasteOperation(pasteOperation);\n    }\n    removeLastLineIfBlank(parsedData) {\n        // remove last row if empty, excel puts empty last row in\n        const lastLine = ag_grid_community__WEBPACK_IMPORTED_MODULE_0__._.last(parsedData);\n        const lastLineIsBlank = lastLine && lastLine.length === 1 && lastLine[0] === '';\n        if (lastLineIsBlank) {\n            // do not remove the last empty line when that is the only line pasted\n            if (parsedData.length === 1) {\n                return;\n            }\n            ag_grid_community__WEBPACK_IMPORTED_MODULE_0__._.removeFromArray(parsedData, lastLine);\n        }\n    }\n    fireRowChanged(rowNodes) {\n        if (this.gridOptionsService.get('editType') !== 'fullRow') {\n            return;\n        }\n        rowNodes.forEach(rowNode => {\n            const event = {\n                type: ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.Events.EVENT_ROW_VALUE_CHANGED,\n                node: rowNode,\n                data: rowNode.data,\n                rowIndex: rowNode.rowIndex,\n                rowPinned: rowNode.rowPinned\n            };\n            this.eventService.dispatchEvent(event);\n        });\n    }\n    pasteMultipleValues(clipboardGridData, currentRow, updatedRowNodes, columnsToPasteInto, cellsToFlash, type, changedPath) {\n        let rowPointer = currentRow;\n        // if doing CSRM and NOT tree data, then it means groups are aggregates, which are read only,\n        // so we should skip them when doing paste operations.\n        const skipGroupRows = this.clientSideRowModel != null && !this.gridOptionsService.is('enableGroupEdit') && !this.gridOptionsService.isTreeData();\n        const getNextGoodRowNode = () => {\n            while (true) {\n                if (!rowPointer) {\n                    return null;\n                }\n                const res = this.rowPositionUtils.getRowNode(rowPointer);\n                // move to next row down for next set of values\n                rowPointer = this.cellNavigationService.getRowBelow({ rowPinned: rowPointer.rowPinned, rowIndex: rowPointer.rowIndex });\n                // if no more rows, return null\n                if (res == null) {\n                    return null;\n                }\n                // skip details rows and footer rows, never paste into them as they don't hold data\n                const skipRow = res.detail || res.footer || (skipGroupRows && res.group);\n                // skipping row means we go into the next iteration of the while loop\n                if (!skipRow) {\n                    return res;\n                }\n            }\n        };\n        clipboardGridData.forEach(clipboardRowData => {\n            const rowNode = getNextGoodRowNode();\n            // if we have come to end of rows in grid, then skip\n            if (!rowNode) {\n                return;\n            }\n            clipboardRowData.forEach((value, index) => this.updateCellValue(rowNode, columnsToPasteInto[index], value, cellsToFlash, type, changedPath));\n            updatedRowNodes.push(rowNode);\n        });\n    }\n    updateCellValue(rowNode, column, value, cellsToFlash, type, changedPath) {\n        if (!rowNode ||\n            !column ||\n            !column.isCellEditable(rowNode) ||\n            column.isSuppressPaste(rowNode)) {\n            return;\n        }\n        // if the cell is a group and the col is an aggregation, skip the cell.\n        if (rowNode.group && column.isValueActive()) {\n            return;\n        }\n        const processedValue = this.processCell(rowNode, column, value, type, this.gridOptionsService.getCallback('processCellFromClipboard'), true);\n        rowNode.setDataValue(column, processedValue, SOURCE_PASTE);\n        const { rowIndex, rowPinned } = rowNode;\n        const cellId = this.cellPositionUtils.createIdFromValues({ rowIndex: rowIndex, column, rowPinned });\n        cellsToFlash[cellId] = true;\n        if (changedPath) {\n            changedPath.addParentNode(rowNode.parent, [column]);\n        }\n    }\n    copyToClipboard(params = {}) {\n        this.copyOrCutToClipboard(params);\n    }\n    cutToClipboard(params = {}, source = 'api') {\n        if (this.gridOptionsService.is('suppressCutToClipboard')) {\n            return;\n        }\n        const startEvent = {\n            type: ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.Events.EVENT_CUT_START,\n            source\n        };\n        this.eventService.dispatchEvent(startEvent);\n        this.copyOrCutToClipboard(params, true);\n        const endEvent = {\n            type: ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.Events.EVENT_CUT_END,\n            source\n        };\n        this.eventService.dispatchEvent(endEvent);\n    }\n    copyOrCutToClipboard(params, cut) {\n        let { includeHeaders, includeGroupHeaders } = params;\n        this.logger.log(`copyToClipboard: includeHeaders = ${includeHeaders}`);\n        // don't override 'includeHeaders' if it has been explicitly set to 'false'\n        if (includeHeaders == null) {\n            includeHeaders = this.gridOptionsService.is('copyHeadersToClipboard');\n        }\n        if (includeGroupHeaders == null) {\n            includeGroupHeaders = this.gridOptionsService.is('copyGroupHeadersToClipboard');\n        }\n        const copyParams = { includeHeaders, includeGroupHeaders };\n        const shouldCopyRows = !this.gridOptionsService.is('suppressCopyRowsToClipboard');\n        let cellClearType = null;\n        // Copy priority is Range > Row > Focus\n        if (this.rangeService && !this.rangeService.isEmpty() && !this.shouldSkipSingleCellRange()) {\n            this.copySelectedRangeToClipboard(copyParams);\n            cellClearType = CellClearType.CellRange;\n        }\n        else if (shouldCopyRows && !this.selectionService.isEmpty()) {\n            this.copySelectedRowsToClipboard(copyParams);\n            cellClearType = CellClearType.SelectedRows;\n        }\n        else if (this.focusService.isAnyCellFocused()) {\n            this.copyFocusedCellToClipboard(copyParams);\n            cellClearType = CellClearType.FocusedCell;\n        }\n        if (cut && cellClearType !== null) {\n            this.clearCellsAfterCopy(cellClearType);\n        }\n    }\n    clearCellsAfterCopy(type) {\n        this.eventService.dispatchEvent({ type: ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.Events.EVENT_KEY_SHORTCUT_CHANGED_CELL_START });\n        if (type === CellClearType.CellRange) {\n            this.rangeService.clearCellRangeCellValues({ cellEventSource: 'clipboardService' });\n        }\n        else if (type === CellClearType.SelectedRows) {\n            this.clearSelectedRows();\n        }\n        else {\n            const focusedCell = this.focusService.getFocusedCell();\n            if (focusedCell == null) {\n                return;\n            }\n            const rowNode = this.rowPositionUtils.getRowNode(focusedCell);\n            if (rowNode) {\n                this.clearCellValue(rowNode, focusedCell.column);\n            }\n        }\n        this.eventService.dispatchEvent({ type: ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.Events.EVENT_KEY_SHORTCUT_CHANGED_CELL_END });\n    }\n    clearSelectedRows() {\n        const selected = this.selectionService.getSelectedNodes();\n        const columns = this.columnModel.getAllDisplayedColumns();\n        for (const row of selected) {\n            for (const col of columns) {\n                this.clearCellValue(row, col);\n            }\n        }\n    }\n    clearCellValue(rowNode, column) {\n        if (!column.isCellEditable(rowNode)) {\n            return;\n        }\n        rowNode.setDataValue(column, null, 'clipboardService');\n    }\n    shouldSkipSingleCellRange() {\n        return this.gridOptionsService.is('suppressCopySingleCellRanges') && !this.rangeService.isMoreThanOneCell();\n    }\n    iterateActiveRanges(onlyFirst, rowCallback, columnCallback) {\n        if (!this.rangeService || this.rangeService.isEmpty()) {\n            return;\n        }\n        const cellRanges = this.rangeService.getCellRanges();\n        if (onlyFirst) {\n            this.iterateActiveRange(cellRanges[0], rowCallback, columnCallback, true);\n        }\n        else {\n            cellRanges.forEach((range, idx) => this.iterateActiveRange(range, rowCallback, columnCallback, idx === cellRanges.length - 1));\n        }\n    }\n    iterateActiveRange(range, rowCallback, columnCallback, isLastRange) {\n        if (!this.rangeService) {\n            return;\n        }\n        let currentRow = this.rangeService.getRangeStartRow(range);\n        const lastRow = this.rangeService.getRangeEndRow(range);\n        if (columnCallback && range.columns) {\n            columnCallback(range.columns);\n        }\n        let rangeIndex = 0;\n        let isLastRow = false;\n        // the currentRow could be missing if the user sets the active range manually, and sets a range\n        // that is outside of the grid (eg. sets range rows 0 to 100, but grid has only 20 rows).\n        while (!isLastRow && currentRow != null) {\n            const rowNode = this.rowPositionUtils.getRowNode(currentRow);\n            isLastRow = this.rowPositionUtils.sameRow(currentRow, lastRow);\n            rowCallback(currentRow, rowNode, range.columns, rangeIndex++, isLastRow && isLastRange);\n            currentRow = this.cellNavigationService.getRowBelow(currentRow);\n        }\n    }\n    copySelectedRangeToClipboard(params = {}) {\n        if (!this.rangeService || this.rangeService.isEmpty()) {\n            return;\n        }\n        const allRangesMerge = this.rangeService.areAllRangesAbleToMerge();\n        const { data, cellsToFlash } = allRangesMerge ? this.buildDataFromMergedRanges(params) : this.buildDataFromRanges(params);\n        this.copyDataToClipboard(data);\n        this.dispatchFlashCells(cellsToFlash);\n    }\n    buildDataFromMergedRanges(params) {\n        const columnsSet = new Set();\n        const ranges = this.rangeService.getCellRanges();\n        const rowPositionsMap = new Map();\n        const allRowPositions = [];\n        const allCellsToFlash = {};\n        ranges.forEach(range => {\n            range.columns.forEach(col => columnsSet.add(col));\n            const { rowPositions, cellsToFlash } = this.getRangeRowPositionsAndCellsToFlash(range);\n            rowPositions.forEach(rowPosition => {\n                const rowPositionAsString = `${rowPosition.rowIndex}-${rowPosition.rowPinned || 'null'}`;\n                if (!rowPositionsMap.get(rowPositionAsString)) {\n                    rowPositionsMap.set(rowPositionAsString, true);\n                    allRowPositions.push(rowPosition);\n                }\n            });\n            Object.assign(allCellsToFlash, cellsToFlash);\n        });\n        const allColumns = this.columnModel.getAllDisplayedColumns();\n        const exportedColumns = Array.from(columnsSet);\n        exportedColumns.sort((a, b) => {\n            const posA = allColumns.indexOf(a);\n            const posB = allColumns.indexOf(b);\n            return posA - posB;\n        });\n        const data = this.buildExportParams({\n            columns: exportedColumns,\n            rowPositions: allRowPositions,\n            includeHeaders: params.includeHeaders,\n            includeGroupHeaders: params.includeGroupHeaders,\n        });\n        return { data, cellsToFlash: allCellsToFlash };\n    }\n    buildDataFromRanges(params) {\n        const ranges = this.rangeService.getCellRanges();\n        const data = [];\n        const allCellsToFlash = {};\n        ranges.forEach(range => {\n            const { rowPositions, cellsToFlash } = this.getRangeRowPositionsAndCellsToFlash(range);\n            Object.assign(allCellsToFlash, cellsToFlash);\n            data.push(this.buildExportParams({\n                columns: range.columns,\n                rowPositions: rowPositions,\n                includeHeaders: params.includeHeaders,\n                includeGroupHeaders: params.includeGroupHeaders,\n            }));\n        });\n        return { data: data.join('\\n'), cellsToFlash: allCellsToFlash };\n    }\n    getRangeRowPositionsAndCellsToFlash(range) {\n        const rowPositions = [];\n        const cellsToFlash = {};\n        const startRow = this.rangeService.getRangeStartRow(range);\n        const lastRow = this.rangeService.getRangeEndRow(range);\n        let node = startRow;\n        while (node) {\n            rowPositions.push(node);\n            range.columns.forEach(column => {\n                const { rowIndex, rowPinned } = node;\n                const cellId = this.cellPositionUtils.createIdFromValues({ rowIndex, column, rowPinned });\n                cellsToFlash[cellId] = true;\n            });\n            if (this.rowPositionUtils.sameRow(node, lastRow)) {\n                break;\n            }\n            node = this.cellNavigationService.getRowBelow(node);\n        }\n        return { rowPositions, cellsToFlash };\n    }\n    copyFocusedCellToClipboard(params = {}) {\n        const focusedCell = this.focusService.getFocusedCell();\n        if (focusedCell == null) {\n            return;\n        }\n        const cellId = this.cellPositionUtils.createId(focusedCell);\n        const currentRow = { rowPinned: focusedCell.rowPinned, rowIndex: focusedCell.rowIndex };\n        const column = focusedCell.column;\n        const data = this.buildExportParams({\n            columns: [column],\n            rowPositions: [currentRow],\n            includeHeaders: params.includeHeaders,\n            includeGroupHeaders: params.includeGroupHeaders\n        });\n        this.copyDataToClipboard(data);\n        this.dispatchFlashCells({ [cellId]: true });\n    }\n    copySelectedRowsToClipboard(params = {}) {\n        const { columnKeys, includeHeaders, includeGroupHeaders } = params;\n        const data = this.buildExportParams({\n            columns: columnKeys,\n            includeHeaders,\n            includeGroupHeaders\n        });\n        this.copyDataToClipboard(data);\n    }\n    buildExportParams(params) {\n        const { columns, rowPositions, includeHeaders = false, includeGroupHeaders = false } = params;\n        const exportParams = {\n            columnKeys: columns,\n            rowPositions,\n            skipColumnHeaders: !includeHeaders,\n            skipColumnGroupHeaders: !includeGroupHeaders,\n            suppressQuotes: true,\n            columnSeparator: this.getClipboardDelimiter(),\n            onlySelected: !rowPositions,\n            processCellCallback: this.gridOptionsService.getCallback('processCellForClipboard'),\n            processRowGroupCallback: (params) => this.processRowGroupCallback(params),\n            processHeaderCallback: this.gridOptionsService.getCallback('processHeaderForClipboard'),\n            processGroupHeaderCallback: this.gridOptionsService.getCallback('processGroupHeaderForClipboard')\n        };\n        return this.csvCreator.getDataAsCsv(exportParams, true);\n    }\n    processRowGroupCallback(params) {\n        const { node } = params;\n        const { key } = node;\n        let value = key != null ? key : '';\n        if (params.node.footer) {\n            let suffix = '';\n            if (key && key.length) {\n                suffix = ` ${key}`;\n            }\n            value = `Total${suffix}`;\n        }\n        const processCellForClipboard = this.gridOptionsService.getCallback('processCellForClipboard');\n        if (processCellForClipboard) {\n            let column = node.rowGroupColumn;\n            if (!column && node.footer && node.level === -1) {\n                column = this.columnModel.getRowGroupColumns()[0];\n            }\n            return processCellForClipboard({\n                value,\n                node,\n                column,\n                type: 'clipboard',\n                formatValue: (valueToFormat) => { var _a; return (_a = this.valueFormatterService.formatValue(column, node, valueToFormat)) !== null && _a !== void 0 ? _a : valueToFormat; },\n                parseValue: (valueToParse) => this.valueParserService.parseValue(column, node, valueToParse, this.valueService.getValue(column, node))\n            });\n        }\n        return value;\n    }\n    dispatchFlashCells(cellsToFlash) {\n        window.setTimeout(() => {\n            const event = {\n                type: ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.Events.EVENT_FLASH_CELLS,\n                cells: cellsToFlash\n            };\n            this.eventService.dispatchEvent(event);\n        }, 0);\n    }\n    processCell(rowNode, column, value, type, func, canParse, canFormat) {\n        var _a;\n        if (func) {\n            const params = {\n                column,\n                node: rowNode,\n                value,\n                type,\n                formatValue: (valueToFormat) => { var _a; return (_a = this.valueFormatterService.formatValue(column, rowNode !== null && rowNode !== void 0 ? rowNode : null, valueToFormat)) !== null && _a !== void 0 ? _a : valueToFormat; },\n                parseValue: (valueToParse) => this.valueParserService.parseValue(column, rowNode !== null && rowNode !== void 0 ? rowNode : null, valueToParse, this.valueService.getValue(column, rowNode))\n            };\n            return func(params);\n        }\n        if (canParse && column.getColDef().useValueParserForImport) {\n            return this.valueParserService.parseValue(column, rowNode !== null && rowNode !== void 0 ? rowNode : null, value, this.valueService.getValue(column, rowNode));\n        }\n        else if (canFormat && column.getColDef().useValueFormatterForExport) {\n            return (_a = this.valueFormatterService.formatValue(column, rowNode !== null && rowNode !== void 0 ? rowNode : null, value)) !== null && _a !== void 0 ? _a : value;\n        }\n        return value;\n    }\n    copyDataToClipboard(data) {\n        const userProvidedFunc = this.gridOptionsService.getCallback('sendToClipboard');\n        // method 1 - user provided func\n        if (userProvidedFunc) {\n            userProvidedFunc({ data });\n            return;\n        }\n        // method 2 - native clipboard API, available in modern chrome browsers\n        const allowNavigator = !this.gridOptionsService.is('suppressClipboardApi');\n        if (allowNavigator && navigator.clipboard) {\n            navigator.clipboard.writeText(data).catch((e) => {\n                ag_grid_community__WEBPACK_IMPORTED_MODULE_0__._.doOnce(() => {\n                    console.warn(e);\n                    console.warn('AG Grid: Unable to use the Clipboard API (navigator.clipboard.writeText()). ' +\n                        'The reason why it could not be used has been logged in the previous line. ' +\n                        'For this reason the grid has defaulted to using a workaround which doesn\\'t perform as well. ' +\n                        'Either fix why Clipboard API is blocked, OR stop this message from appearing by setting grid ' +\n                        'property suppressClipboardApi=true (which will default the grid to using the workaround rather than the API.');\n                }, 'clipboardApiError');\n                this.copyDataToClipboardLegacy(data);\n            });\n            return;\n        }\n        this.copyDataToClipboardLegacy(data);\n    }\n    copyDataToClipboardLegacy(data) {\n        // method 3 - if all else fails, the old school hack\n        this.executeOnTempElement(element => {\n            const eDocument = this.gridOptionsService.getDocument();\n            const focusedElementBefore = eDocument.activeElement;\n            element.value = data || ' '; // has to be non-empty value or execCommand will not do anything\n            element.select();\n            element.focus({ preventScroll: true });\n            const result = eDocument.execCommand('copy');\n            if (!result) {\n                console.warn('AG Grid: Browser did not allow document.execCommand(\\'copy\\'). Ensure ' +\n                    'api.copySelectedRowsToClipboard() is invoked via a user event, i.e. button click, otherwise ' +\n                    'the browser will prevent it for security reasons.');\n            }\n            if (focusedElementBefore != null && focusedElementBefore.focus != null) {\n                focusedElementBefore.focus({ preventScroll: true });\n            }\n        });\n    }\n    executeOnTempElement(callbackNow, callbackAfter) {\n        const eDoc = this.gridOptionsService.getDocument();\n        const eTempInput = eDoc.createElement('textarea');\n        eTempInput.style.width = '1px';\n        eTempInput.style.height = '1px';\n        // removing items from the DOM causes the document element to scroll to the\n        // position where the element was positioned. Here we set scrollTop / scrollLeft\n        // to prevent the document element from scrolling when we remove it from the DOM.\n        eTempInput.style.top = eDoc.documentElement.scrollTop + 'px';\n        eTempInput.style.left = eDoc.documentElement.scrollLeft + 'px';\n        eTempInput.style.position = 'absolute';\n        eTempInput.style.opacity = '0';\n        const guiRoot = this.gridCtrl.getGui();\n        guiRoot.appendChild(eTempInput);\n        try {\n            callbackNow(eTempInput);\n        }\n        catch (err) {\n            console.warn('AG Grid: Browser does not support document.execCommand(\\'copy\\') for clipboard operations');\n        }\n        //It needs 100 otherwise OS X seemed to not always be able to paste... Go figure...\n        if (callbackAfter) {\n            window.setTimeout(() => {\n                callbackAfter(eTempInput);\n                guiRoot.removeChild(eTempInput);\n            }, 100);\n        }\n        else {\n            guiRoot.removeChild(eTempInput);\n        }\n    }\n    getRangeSize() {\n        const ranges = this.rangeService.getCellRanges();\n        let startRangeIndex = 0;\n        let endRangeIndex = 0;\n        if (ranges.length > 0) {\n            startRangeIndex = this.rangeService.getRangeStartRow(ranges[0]).rowIndex;\n            endRangeIndex = this.rangeService.getRangeEndRow(ranges[0]).rowIndex;\n        }\n        return startRangeIndex - endRangeIndex + 1;\n    }\n};\n__decorate$2w([\n    (0,ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.Autowired)('csvCreator')\n], ClipboardService.prototype, \"csvCreator\", void 0);\n__decorate$2w([\n    (0,ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.Autowired)('loggerFactory')\n], ClipboardService.prototype, \"loggerFactory\", void 0);\n__decorate$2w([\n    (0,ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.Autowired)('selectionService')\n], ClipboardService.prototype, \"selectionService\", void 0);\n__decorate$2w([\n    (0,ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.Optional)('rangeService')\n], ClipboardService.prototype, \"rangeService\", void 0);\n__decorate$2w([\n    (0,ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.Autowired)('rowModel')\n], ClipboardService.prototype, \"rowModel\", void 0);\n__decorate$2w([\n    (0,ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.Autowired)('ctrlsService')\n], ClipboardService.prototype, \"ctrlsService\", void 0);\n__decorate$2w([\n    (0,ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.Autowired)('valueService')\n], ClipboardService.prototype, \"valueService\", void 0);\n__decorate$2w([\n    (0,ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.Autowired)('focusService')\n], ClipboardService.prototype, \"focusService\", void 0);\n__decorate$2w([\n    (0,ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.Autowired)('rowRenderer')\n], ClipboardService.prototype, \"rowRenderer\", void 0);\n__decorate$2w([\n    (0,ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.Autowired)('columnModel')\n], ClipboardService.prototype, \"columnModel\", void 0);\n__decorate$2w([\n    (0,ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.Autowired)('cellNavigationService')\n], ClipboardService.prototype, \"cellNavigationService\", void 0);\n__decorate$2w([\n    (0,ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.Autowired)('cellPositionUtils')\n], ClipboardService.prototype, \"cellPositionUtils\", void 0);\n__decorate$2w([\n    (0,ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.Autowired)('rowPositionUtils')\n], ClipboardService.prototype, \"rowPositionUtils\", void 0);\n__decorate$2w([\n    (0,ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.Autowired)('valueFormatterService')\n], ClipboardService.prototype, \"valueFormatterService\", void 0);\n__decorate$2w([\n    (0,ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.Autowired)('valueParserService')\n], ClipboardService.prototype, \"valueParserService\", void 0);\n__decorate$2w([\n    ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.PostConstruct\n], ClipboardService.prototype, \"init\", null);\nClipboardService = ClipboardService_1 = __decorate$2w([\n    (0,ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.Bean)('clipboardService')\n], ClipboardService);\n\n// DO NOT UPDATE MANUALLY: Generated from script during build time\nconst VERSION$h = '30.0.2';\n\nconst ClipboardModule = {\n    version: VERSION$h,\n    moduleName: ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.ModuleNames.ClipboardModule,\n    beans: [ClipboardService],\n    dependantModules: [\n        EnterpriseCoreModule,\n        ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.CsvExportModule\n    ]\n};\n\nvar __decorate$2v = ( false) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nvar ExpandState;\n(function (ExpandState) {\n    ExpandState[ExpandState[\"EXPANDED\"] = 0] = \"EXPANDED\";\n    ExpandState[ExpandState[\"COLLAPSED\"] = 1] = \"COLLAPSED\";\n    ExpandState[ExpandState[\"INDETERMINATE\"] = 2] = \"INDETERMINATE\";\n})(ExpandState || (ExpandState = {}));\nclass PrimaryColsHeaderPanel extends ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.Component {\n    constructor() {\n        super(PrimaryColsHeaderPanel.TEMPLATE);\n    }\n    postConstruct() {\n        this.createExpandIcons();\n        this.addManagedListener(this.eExpand, 'click', this.onExpandClicked.bind(this));\n        this.addManagedListener(this.eExpand, 'keydown', (e) => {\n            if (e.key === ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.KeyCode.SPACE) {\n                e.preventDefault();\n                this.onExpandClicked();\n            }\n        });\n        this.addManagedListener(this.eSelect.getInputElement(), 'click', this.onSelectClicked.bind(this));\n        this.eFilterTextField.onValueChange(() => this.onFilterTextChanged());\n        this.addManagedListener(this.eFilterTextField.getInputElement(), 'keydown', this.onMiniFilterKeyDown.bind(this));\n        this.addManagedListener(this.eventService, ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.Events.EVENT_NEW_COLUMNS_LOADED, this.showOrHideOptions.bind(this));\n        const translate = this.localeService.getLocaleTextFunc();\n        this.eSelect.setInputAriaLabel(translate('ariaColumnSelectAll', 'Toggle Select All Columns'));\n        this.eFilterTextField.setInputAriaLabel(translate('ariaFilterColumnsInput', 'Filter Columns Input'));\n    }\n    init(params) {\n        this.params = params;\n        if (this.columnModel.isReady()) {\n            this.showOrHideOptions();\n        }\n    }\n    createExpandIcons() {\n        this.eExpand.appendChild((this.eExpandChecked = ag_grid_community__WEBPACK_IMPORTED_MODULE_0__._.createIconNoSpan('columnSelectOpen', this.gridOptionsService)));\n        this.eExpand.appendChild((this.eExpandUnchecked = ag_grid_community__WEBPACK_IMPORTED_MODULE_0__._.createIconNoSpan('columnSelectClosed', this.gridOptionsService)));\n        this.eExpand.appendChild((this.eExpandIndeterminate = ag_grid_community__WEBPACK_IMPORTED_MODULE_0__._.createIconNoSpan('columnSelectIndeterminate', this.gridOptionsService)));\n        this.setExpandState(ExpandState.EXPANDED);\n    }\n    // we only show expand / collapse if we are showing columns\n    showOrHideOptions() {\n        const showFilter = !this.params.suppressColumnFilter;\n        const showSelect = !this.params.suppressColumnSelectAll;\n        const showExpand = !this.params.suppressColumnExpandAll;\n        const groupsPresent = this.columnModel.isPrimaryColumnGroupsPresent();\n        const translate = this.localeService.getLocaleTextFunc();\n        this.eFilterTextField.setInputPlaceholder(translate('searchOoo', 'Search...'));\n        ag_grid_community__WEBPACK_IMPORTED_MODULE_0__._.setDisplayed(this.eFilterTextField.getGui(), showFilter);\n        ag_grid_community__WEBPACK_IMPORTED_MODULE_0__._.setDisplayed(this.eSelect.getGui(), showSelect);\n        ag_grid_community__WEBPACK_IMPORTED_MODULE_0__._.setDisplayed(this.eExpand, showExpand && groupsPresent);\n    }\n    onFilterTextChanged() {\n        if (!this.onFilterTextChangedDebounced) {\n            this.onFilterTextChangedDebounced = ag_grid_community__WEBPACK_IMPORTED_MODULE_0__._.debounce(() => {\n                const filterText = this.eFilterTextField.getValue();\n                this.dispatchEvent({ type: \"filterChanged\", filterText: filterText });\n            }, PrimaryColsHeaderPanel.DEBOUNCE_DELAY);\n        }\n        this.onFilterTextChangedDebounced();\n    }\n    onMiniFilterKeyDown(e) {\n        if (e.key === ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.KeyCode.ENTER) {\n            // we need to add a delay that corresponds to the filter text debounce delay to ensure\n            // the text filtering has happened, otherwise all columns will be deselected\n            setTimeout(() => this.onSelectClicked(), PrimaryColsHeaderPanel.DEBOUNCE_DELAY);\n        }\n    }\n    onSelectClicked() {\n        this.dispatchEvent({ type: this.selectState ? 'unselectAll' : 'selectAll' });\n    }\n    onExpandClicked() {\n        this.dispatchEvent({ type: this.expandState === ExpandState.EXPANDED ? 'collapseAll' : 'expandAll' });\n    }\n    setExpandState(state) {\n        this.expandState = state;\n        ag_grid_community__WEBPACK_IMPORTED_MODULE_0__._.setDisplayed(this.eExpandChecked, this.expandState === ExpandState.EXPANDED);\n        ag_grid_community__WEBPACK_IMPORTED_MODULE_0__._.setDisplayed(this.eExpandUnchecked, this.expandState === ExpandState.COLLAPSED);\n        ag_grid_community__WEBPACK_IMPORTED_MODULE_0__._.setDisplayed(this.eExpandIndeterminate, this.expandState === ExpandState.INDETERMINATE);\n    }\n    setSelectionState(state) {\n        this.selectState = state;\n        this.eSelect.setValue(this.selectState);\n    }\n}\nPrimaryColsHeaderPanel.DEBOUNCE_DELAY = 300;\nPrimaryColsHeaderPanel.TEMPLATE = `<div class=\"ag-column-select-header\" role=\"presentation\">\n            <div ref=\"eExpand\" class=\"ag-column-select-header-icon\" tabindex=\"0\"></div>\n            <ag-checkbox ref=\"eSelect\" class=\"ag-column-select-header-checkbox\"></ag-checkbox>\n            <ag-input-text-field class=\"ag-column-select-header-filter-wrapper\" ref=\"eFilterTextField\"></ag-input-text-field>\n        </div>`;\n__decorate$2v([\n    (0,ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.Autowired)('columnModel')\n], PrimaryColsHeaderPanel.prototype, \"columnModel\", void 0);\n__decorate$2v([\n    (0,ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.RefSelector)('eExpand')\n], PrimaryColsHeaderPanel.prototype, \"eExpand\", void 0);\n__decorate$2v([\n    (0,ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.RefSelector)('eSelect')\n], PrimaryColsHeaderPanel.prototype, \"eSelect\", void 0);\n__decorate$2v([\n    (0,ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.RefSelector)('eFilterTextField')\n], PrimaryColsHeaderPanel.prototype, \"eFilterTextField\", void 0);\n__decorate$2v([\n    ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.PostConstruct\n], PrimaryColsHeaderPanel.prototype, \"postConstruct\", null);\n\nclass ColumnModelItem {\n    constructor(displayName, columnOrGroup, dept, group = false, expanded) {\n        this.eventService = new ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.EventService();\n        this.displayName = displayName;\n        this.dept = dept;\n        this.group = group;\n        if (group) {\n            this.columnGroup = columnOrGroup;\n            this.expanded = expanded;\n            this.children = [];\n        }\n        else {\n            this.column = columnOrGroup;\n        }\n    }\n    isGroup() { return this.group; }\n    getDisplayName() { return this.displayName; }\n    getColumnGroup() { return this.columnGroup; }\n    getColumn() { return this.column; }\n    getDept() { return this.dept; }\n    isExpanded() { return !!this.expanded; }\n    getChildren() { return this.children; }\n    isPassesFilter() { return this.passesFilter; }\n    setExpanded(expanded) {\n        if (expanded === this.expanded) {\n            return;\n        }\n        this.expanded = expanded;\n        this.eventService.dispatchEvent({ type: ColumnModelItem.EVENT_EXPANDED_CHANGED });\n    }\n    setPassesFilter(passesFilter) {\n        this.passesFilter = passesFilter;\n    }\n    addEventListener(eventType, listener) {\n        this.eventService.addEventListener(eventType, listener);\n    }\n    removeEventListener(eventType, listener) {\n        this.eventService.removeEventListener(eventType, listener);\n    }\n}\nColumnModelItem.EVENT_EXPANDED_CHANGED = 'expandedChanged';\n\nvar __decorate$2u = ( false) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nclass ToolPanelContextMenu extends ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.Component {\n    constructor(column, mouseEvent, parentEl) {\n        super(/* html */ `<div class=\"ag-menu\"></div>`);\n        this.column = column;\n        this.mouseEvent = mouseEvent;\n        this.parentEl = parentEl;\n        this.displayName = null;\n    }\n    postConstruct() {\n        this.initializeProperties(this.column);\n        this.buildMenuItemMap();\n        if (this.column instanceof ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.Column) {\n            this.displayName = this.columnModel.getDisplayNameForColumn(this.column, 'columnToolPanel');\n        }\n        else {\n            this.displayName = this.columnModel.getDisplayNameForProvidedColumnGroup(null, this.column, 'columnToolPanel');\n        }\n        if (this.isActive()) {\n            this.mouseEvent.preventDefault();\n            this.displayContextMenu();\n        }\n    }\n    initializeProperties(column) {\n        if (column instanceof ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.ProvidedColumnGroup) {\n            this.columns = column.getLeafColumns();\n        }\n        else {\n            this.columns = [column];\n        }\n        this.allowGrouping = this.columns.some(col => col.isPrimary() && col.isAllowRowGroup());\n        this.allowValues = this.columns.some(col => col.isPrimary() && col.isAllowValue());\n        this.allowPivoting = this.columnModel.isPivotMode() && this.columns.some(col => col.isPrimary() && col.isAllowPivot());\n    }\n    buildMenuItemMap() {\n        const localeTextFunc = this.localeService.getLocaleTextFunc();\n        this.menuItemMap = new Map();\n        this.menuItemMap.set('rowGroup', {\n            allowedFunction: (col) => col.isPrimary() && col.isAllowRowGroup(),\n            activeFunction: (col) => col.isRowGroupActive(),\n            activateLabel: () => `${localeTextFunc('groupBy', 'Group by')} ${this.displayName}`,\n            deactivateLabel: () => `${localeTextFunc('ungroupBy', 'Un-Group by')} ${this.displayName}`,\n            activateFunction: () => {\n                const groupedColumns = this.columnModel.getRowGroupColumns();\n                this.columnModel.setRowGroupColumns(this.addColumnsToList(groupedColumns), \"toolPanelUi\");\n            },\n            deActivateFunction: () => {\n                const groupedColumns = this.columnModel.getRowGroupColumns();\n                this.columnModel.setRowGroupColumns(this.removeColumnsFromList(groupedColumns), \"toolPanelUi\");\n            },\n            addIcon: 'menuAddRowGroup',\n            removeIcon: 'menuRemoveRowGroup'\n        });\n        this.menuItemMap.set('value', {\n            allowedFunction: (col) => col.isPrimary() && col.isAllowValue(),\n            activeFunction: (col) => col.isValueActive(),\n            activateLabel: () => localeTextFunc('addToValues', `Add ${this.displayName} to values`, [this.displayName]),\n            deactivateLabel: () => localeTextFunc('removeFromValues', `Remove ${this.displayName} from values`, [this.displayName]),\n            activateFunction: () => {\n                const valueColumns = this.columnModel.getValueColumns();\n                this.columnModel.setValueColumns(this.addColumnsToList(valueColumns), \"toolPanelUi\");\n            },\n            deActivateFunction: () => {\n                const valueColumns = this.columnModel.getValueColumns();\n                this.columnModel.setValueColumns(this.removeColumnsFromList(valueColumns), \"toolPanelUi\");\n            },\n            addIcon: 'valuePanel',\n            removeIcon: 'valuePanel'\n        });\n        this.menuItemMap.set('pivot', {\n            allowedFunction: (col) => this.columnModel.isPivotMode() && col.isPrimary() && col.isAllowPivot(),\n            activeFunction: (col) => col.isPivotActive(),\n            activateLabel: () => localeTextFunc('addToLabels', `Add ${this.displayName} to labels`, [this.displayName]),\n            deactivateLabel: () => localeTextFunc('removeFromLabels', `Remove ${this.displayName} from labels`, [this.displayName]),\n            activateFunction: () => {\n                const pivotColumns = this.columnModel.getPivotColumns();\n                this.columnModel.setPivotColumns(this.addColumnsToList(pivotColumns), \"toolPanelUi\");\n            },\n            deActivateFunction: () => {\n                const pivotColumns = this.columnModel.getPivotColumns();\n                this.columnModel.setPivotColumns(this.removeColumnsFromList(pivotColumns), \"toolPanelUi\");\n            },\n            addIcon: 'pivotPanel',\n            removeIcon: 'pivotPanel'\n        });\n    }\n    addColumnsToList(columnList) {\n        return [...columnList].concat(this.columns.filter(col => columnList.indexOf(col) === -1));\n    }\n    removeColumnsFromList(columnList) {\n        return columnList.filter(col => this.columns.indexOf(col) === -1);\n    }\n    displayContextMenu() {\n        const eGui = this.getGui();\n        const menuList = this.createBean(new ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.AgMenuList());\n        const menuItemsMapped = this.getMappedMenuItems();\n        const localeTextFunc = this.localeService.getLocaleTextFunc();\n        let hideFunc = () => { };\n        eGui.appendChild(menuList.getGui());\n        menuList.addMenuItems(menuItemsMapped);\n        menuList.addManagedListener(menuList, ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.AgMenuItemComponent.EVENT_MENU_ITEM_SELECTED, () => {\n            this.parentEl.focus();\n            hideFunc();\n        });\n        const addPopupRes = this.popupService.addPopup({\n            modal: true,\n            eChild: eGui,\n            closeOnEsc: true,\n            afterGuiAttached: () => this.focusService.focusInto(menuList.getGui()),\n            ariaLabel: localeTextFunc('ariaLabelContextMenu', 'Context Menu'),\n            closedCallback: (e) => {\n                if (e instanceof KeyboardEvent) {\n                    this.parentEl.focus();\n                }\n                this.destroyBean(menuList);\n            }\n        });\n        if (addPopupRes) {\n            hideFunc = addPopupRes.hideFunc;\n        }\n        this.popupService.positionPopupUnderMouseEvent({\n            type: 'columnContextMenu',\n            mouseEvent: this.mouseEvent,\n            ePopup: eGui\n        });\n    }\n    isActive() {\n        return this.allowGrouping || this.allowValues || this.allowPivoting;\n    }\n    getMappedMenuItems() {\n        const ret = [];\n        for (const val of this.menuItemMap.values()) {\n            const isInactive = this.columns.some(col => val.allowedFunction(col) && !val.activeFunction(col));\n            const isActive = this.columns.some(col => val.allowedFunction(col) && val.activeFunction(col));\n            if (isInactive) {\n                ret.push({\n                    name: val.activateLabel(this.displayName),\n                    icon: ag_grid_community__WEBPACK_IMPORTED_MODULE_0__._.createIconNoSpan(val.addIcon, this.gridOptionsService, null),\n                    action: () => val.activateFunction()\n                });\n            }\n            if (isActive) {\n                ret.push({\n                    name: val.deactivateLabel(this.displayName),\n                    icon: ag_grid_community__WEBPACK_IMPORTED_MODULE_0__._.createIconNoSpan(val.removeIcon, this.gridOptionsService, null),\n                    action: () => val.deActivateFunction()\n                });\n            }\n        }\n        return ret;\n    }\n}\n__decorate$2u([\n    (0,ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.Autowired)('columnModel')\n], ToolPanelContextMenu.prototype, \"columnModel\", void 0);\n__decorate$2u([\n    (0,ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.Autowired)('popupService')\n], ToolPanelContextMenu.prototype, \"popupService\", void 0);\n__decorate$2u([\n    (0,ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.Autowired)('focusService')\n], ToolPanelContextMenu.prototype, \"focusService\", void 0);\n__decorate$2u([\n    ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.PostConstruct\n], ToolPanelContextMenu.prototype, \"postConstruct\", null);\n\nvar __decorate$2t = ( false) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nclass ToolPanelColumnGroupComp extends ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.Component {\n    constructor(modelItem, allowDragging, eventType, focusWrapper) {\n        super();\n        this.modelItem = modelItem;\n        this.allowDragging = allowDragging;\n        this.eventType = eventType;\n        this.focusWrapper = focusWrapper;\n        this.processingColumnStateChange = false;\n        this.modelItem = modelItem;\n        this.columnGroup = modelItem.getColumnGroup();\n        this.columnDept = modelItem.getDept();\n        this.allowDragging = allowDragging;\n    }\n    init() {\n        this.setTemplate(ToolPanelColumnGroupComp.TEMPLATE);\n        this.eDragHandle = ag_grid_community__WEBPACK_IMPORTED_MODULE_0__._.createIconNoSpan('columnDrag', this.gridOptionsService);\n        this.eDragHandle.classList.add('ag-drag-handle', 'ag-column-select-column-group-drag-handle');\n        const checkboxGui = this.cbSelect.getGui();\n        const checkboxInput = this.cbSelect.getInputElement();\n        checkboxGui.insertAdjacentElement('afterend', this.eDragHandle);\n        checkboxInput.setAttribute('tabindex', '-1');\n        this.displayName = this.columnModel.getDisplayNameForProvidedColumnGroup(null, this.columnGroup, this.eventType);\n        if (ag_grid_community__WEBPACK_IMPORTED_MODULE_0__._.missing(this.displayName)) {\n            this.displayName = '>>';\n        }\n        this.eLabel.innerHTML = this.displayName ? this.displayName : '';\n        this.setupExpandContract();\n        this.addCssClass('ag-column-select-indent-' + this.columnDept);\n        this.addManagedListener(this.eventService, ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.Events.EVENT_COLUMN_PIVOT_MODE_CHANGED, this.onColumnStateChanged.bind(this));\n        this.addManagedListener(this.eLabel, 'click', this.onLabelClicked.bind(this));\n        this.addManagedListener(this.cbSelect, ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.AgCheckbox.EVENT_CHANGED, this.onCheckboxChanged.bind(this));\n        this.addManagedListener(this.modelItem, ColumnModelItem.EVENT_EXPANDED_CHANGED, this.onExpandChanged.bind(this));\n        this.addManagedListener(this.focusWrapper, 'keydown', this.handleKeyDown.bind(this));\n        this.addManagedListener(this.focusWrapper, 'contextmenu', this.onContextMenu.bind(this));\n        this.setOpenClosedIcons();\n        this.setupDragging();\n        this.onColumnStateChanged();\n        this.addVisibilityListenersToAllChildren();\n        this.refreshAriaExpanded();\n        this.refreshAriaLabel();\n        this.setupTooltip();\n        const classes = ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.CssClassApplier.getToolPanelClassesFromColDef(this.columnGroup.getColGroupDef(), this.gridOptionsService, null, this.columnGroup);\n        classes.forEach(c => this.addOrRemoveCssClass(c, true));\n    }\n    getColumns() {\n        return this.columnGroup.getLeafColumns();\n    }\n    setupTooltip() {\n        const colGroupDef = this.columnGroup.getColGroupDef();\n        if (!colGroupDef) {\n            return;\n        }\n        const refresh = () => {\n            const newTooltipText = colGroupDef.headerTooltip;\n            this.setTooltip(newTooltipText);\n        };\n        refresh();\n        this.addManagedListener(this.eventService, ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.Events.EVENT_NEW_COLUMNS_LOADED, refresh);\n    }\n    getTooltipParams() {\n        const res = super.getTooltipParams();\n        res.location = 'columnToolPanelColumnGroup';\n        return res;\n    }\n    handleKeyDown(e) {\n        switch (e.key) {\n            case ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.KeyCode.LEFT:\n                e.preventDefault();\n                this.modelItem.setExpanded(false);\n                break;\n            case ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.KeyCode.RIGHT:\n                e.preventDefault();\n                this.modelItem.setExpanded(true);\n                break;\n            case ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.KeyCode.SPACE:\n                e.preventDefault();\n                if (this.isSelectable()) {\n                    this.onSelectAllChanged(!this.isSelected());\n                }\n                break;\n        }\n    }\n    onContextMenu(e) {\n        const { columnGroup, gridOptionsService } = this;\n        if (gridOptionsService.is('functionsReadOnly')) {\n            return;\n        }\n        const contextMenu = this.createBean(new ToolPanelContextMenu(columnGroup, e, this.focusWrapper));\n        this.addDestroyFunc(() => {\n            if (contextMenu.isAlive()) {\n                this.destroyBean(contextMenu);\n            }\n        });\n    }\n    addVisibilityListenersToAllChildren() {\n        this.columnGroup.getLeafColumns().forEach(column => {\n            this.addManagedListener(column, ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.Column.EVENT_VISIBLE_CHANGED, this.onColumnStateChanged.bind(this));\n            this.addManagedListener(column, ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.Column.EVENT_VALUE_CHANGED, this.onColumnStateChanged.bind(this));\n            this.addManagedListener(column, ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.Column.EVENT_PIVOT_CHANGED, this.onColumnStateChanged.bind(this));\n            this.addManagedListener(column, ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.Column.EVENT_ROW_GROUP_CHANGED, this.onColumnStateChanged.bind(this));\n        });\n    }\n    setupDragging() {\n        if (!this.allowDragging) {\n            ag_grid_community__WEBPACK_IMPORTED_MODULE_0__._.setDisplayed(this.eDragHandle, false);\n            return;\n        }\n        const hideColumnOnExit = !this.gridOptionsService.is('suppressDragLeaveHidesColumns');\n        const dragSource = {\n            type: ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.DragSourceType.ToolPanel,\n            eElement: this.eDragHandle,\n            dragItemName: this.displayName,\n            defaultIconName: hideColumnOnExit ? ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.DragAndDropService.ICON_HIDE : ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.DragAndDropService.ICON_NOT_ALLOWED,\n            getDragItem: () => this.createDragItem(),\n            onDragStarted: () => {\n                const event = {\n                    type: ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.Events.EVENT_COLUMN_PANEL_ITEM_DRAG_START,\n                    column: this.columnGroup\n                };\n                this.eventService.dispatchEvent(event);\n            },\n            onDragStopped: () => {\n                const event = {\n                    type: ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.Events.EVENT_COLUMN_PANEL_ITEM_DRAG_END\n                };\n                this.eventService.dispatchEvent(event);\n            },\n            onGridEnter: () => {\n                if (hideColumnOnExit) {\n                    // when dragged into the grid, mimic what happens when checkbox is enabled\n                    // this handles the behaviour for pivot which is different to just hiding a column.\n                    this.onChangeCommon(true);\n                }\n            },\n            onGridExit: () => {\n                if (hideColumnOnExit) {\n                    // when dragged outside of the grid, mimic what happens when checkbox is disabled\n                    // this handles the behaviour for pivot which is different to just hiding a column.\n                    this.onChangeCommon(false);\n                }\n            }\n        };\n        this.dragAndDropService.addDragSource(dragSource, true);\n        this.addDestroyFunc(() => this.dragAndDropService.removeDragSource(dragSource));\n    }\n    createDragItem() {\n        const visibleState = {};\n        this.columnGroup.getLeafColumns().forEach(col => {\n            visibleState[col.getId()] = col.isVisible();\n        });\n        return {\n            columns: this.columnGroup.getLeafColumns(),\n            visibleState: visibleState\n        };\n    }\n    setupExpandContract() {\n        this.eGroupClosedIcon.appendChild(ag_grid_community__WEBPACK_IMPORTED_MODULE_0__._.createIcon('columnSelectClosed', this.gridOptionsService, null));\n        this.eGroupOpenedIcon.appendChild(ag_grid_community__WEBPACK_IMPORTED_MODULE_0__._.createIcon('columnSelectOpen', this.gridOptionsService, null));\n        this.addManagedListener(this.eGroupClosedIcon, 'click', this.onExpandOrContractClicked.bind(this));\n        this.addManagedListener(this.eGroupOpenedIcon, 'click', this.onExpandOrContractClicked.bind(this));\n        const touchListener = new ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.TouchListener(this.eColumnGroupIcons, true);\n        this.addManagedListener(touchListener, ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.TouchListener.EVENT_TAP, this.onExpandOrContractClicked.bind(this));\n        this.addDestroyFunc(touchListener.destroy.bind(touchListener));\n    }\n    onLabelClicked() {\n        const nextState = !this.cbSelect.getValue();\n        this.onChangeCommon(nextState);\n    }\n    onCheckboxChanged(event) {\n        this.onChangeCommon(event.selected);\n    }\n    getVisibleLeafColumns() {\n        const childColumns = [];\n        const extractCols = (children) => {\n            children.forEach(child => {\n                if (!child.isPassesFilter()) {\n                    return;\n                }\n                if (child.isGroup()) {\n                    extractCols(child.getChildren());\n                }\n                else {\n                    childColumns.push(child.getColumn());\n                }\n            });\n        };\n        extractCols(this.modelItem.getChildren());\n        return childColumns;\n    }\n    onChangeCommon(nextState) {\n        this.refreshAriaLabel();\n        if (this.processingColumnStateChange) {\n            return;\n        }\n        this.modelItemUtils.selectAllChildren(this.modelItem.getChildren(), nextState, this.eventType);\n    }\n    refreshAriaLabel() {\n        const translate = this.localeService.getLocaleTextFunc();\n        const columnLabel = translate('ariaColumnGroup', 'Column Group');\n        const checkboxValue = this.cbSelect.getValue();\n        const state = checkboxValue === undefined ?\n            translate('ariaIndeterminate', 'indeterminate') :\n            (checkboxValue ? translate('ariaVisible', 'visible') : translate('ariaHidden', 'hidden'));\n        const visibilityLabel = translate('ariaToggleVisibility', 'Press SPACE to toggle visibility');\n        ag_grid_community__WEBPACK_IMPORTED_MODULE_0__._.setAriaLabel(this.focusWrapper, `${this.displayName} ${columnLabel}`);\n        this.cbSelect.setInputAriaLabel(`${visibilityLabel} (${state})`);\n        ag_grid_community__WEBPACK_IMPORTED_MODULE_0__._.setAriaDescribedBy(this.focusWrapper, this.cbSelect.getInputElement().id);\n    }\n    onColumnStateChanged() {\n        const selectedValue = this.workOutSelectedValue();\n        const readOnlyValue = this.workOutReadOnlyValue();\n        this.processingColumnStateChange = true;\n        this.cbSelect.setValue(selectedValue);\n        this.cbSelect.setReadOnly(readOnlyValue);\n        this.addOrRemoveCssClass('ag-column-select-column-group-readonly', readOnlyValue);\n        this.processingColumnStateChange = false;\n    }\n    workOutSelectedValue() {\n        const pivotMode = this.columnModel.isPivotMode();\n        const visibleLeafColumns = this.getVisibleLeafColumns();\n        let checkedCount = 0;\n        let uncheckedCount = 0;\n        visibleLeafColumns.forEach(column => {\n            if (!pivotMode && column.getColDef().lockVisible) {\n                return;\n            }\n            if (this.isColumnChecked(column, pivotMode)) {\n                checkedCount++;\n            }\n            else {\n                uncheckedCount++;\n            }\n        });\n        if (checkedCount > 0 && uncheckedCount > 0) {\n            return undefined;\n        }\n        return checkedCount > 0;\n    }\n    workOutReadOnlyValue() {\n        const pivotMode = this.columnModel.isPivotMode();\n        let colsThatCanAction = 0;\n        this.columnGroup.getLeafColumns().forEach(col => {\n            if (pivotMode) {\n                if (col.isAnyFunctionAllowed()) {\n                    colsThatCanAction++;\n                }\n            }\n            else {\n                if (!col.getColDef().lockVisible) {\n                    colsThatCanAction++;\n                }\n            }\n        });\n        return colsThatCanAction === 0;\n    }\n    isColumnChecked(column, pivotMode) {\n        if (pivotMode) {\n            const pivoted = column.isPivotActive();\n            const grouped = column.isRowGroupActive();\n            const aggregated = column.isValueActive();\n            return pivoted || grouped || aggregated;\n        }\n        return column.isVisible();\n    }\n    onExpandOrContractClicked() {\n        const oldState = this.modelItem.isExpanded();\n        this.modelItem.setExpanded(!oldState);\n    }\n    onExpandChanged() {\n        this.setOpenClosedIcons();\n        this.refreshAriaExpanded();\n    }\n    setOpenClosedIcons() {\n        const folderOpen = this.modelItem.isExpanded();\n        ag_grid_community__WEBPACK_IMPORTED_MODULE_0__._.setDisplayed(this.eGroupClosedIcon, !folderOpen);\n        ag_grid_community__WEBPACK_IMPORTED_MODULE_0__._.setDisplayed(this.eGroupOpenedIcon, folderOpen);\n    }\n    refreshAriaExpanded() {\n        ag_grid_community__WEBPACK_IMPORTED_MODULE_0__._.setAriaExpanded(this.focusWrapper, this.modelItem.isExpanded());\n    }\n    getDisplayName() {\n        return this.displayName;\n    }\n    onSelectAllChanged(value) {\n        const cbValue = this.cbSelect.getValue();\n        const readOnly = this.cbSelect.isReadOnly();\n        if (!readOnly && ((value && !cbValue) || (!value && cbValue))) {\n            this.cbSelect.toggle();\n        }\n    }\n    isSelected() {\n        return this.cbSelect.getValue();\n    }\n    isSelectable() {\n        return !this.cbSelect.isReadOnly();\n    }\n    setSelected(selected) {\n        this.cbSelect.setValue(selected, true);\n    }\n}\nToolPanelColumnGroupComp.TEMPLATE = `<div class=\"ag-column-select-column-group\" aria-hidden=\"true\">\n            <span class=\"ag-column-group-icons\" ref=\"eColumnGroupIcons\" >\n                <span class=\"ag-column-group-closed-icon\" ref=\"eGroupClosedIcon\"></span>\n                <span class=\"ag-column-group-opened-icon\" ref=\"eGroupOpenedIcon\"></span>\n            </span>\n            <ag-checkbox ref=\"cbSelect\" class=\"ag-column-select-checkbox\"></ag-checkbox>\n            <span class=\"ag-column-select-column-label\" ref=\"eLabel\"></span>\n        </div>`;\n__decorate$2t([\n    (0,ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.Autowired)('columnModel')\n], ToolPanelColumnGroupComp.prototype, \"columnModel\", void 0);\n__decorate$2t([\n    (0,ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.Autowired)('dragAndDropService')\n], ToolPanelColumnGroupComp.prototype, \"dragAndDropService\", void 0);\n__decorate$2t([\n    (0,ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.Autowired)('modelItemUtils')\n], ToolPanelColumnGroupComp.prototype, \"modelItemUtils\", void 0);\n__decorate$2t([\n    (0,ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.RefSelector)('cbSelect')\n], ToolPanelColumnGroupComp.prototype, \"cbSelect\", void 0);\n__decorate$2t([\n    (0,ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.RefSelector)('eLabel')\n], ToolPanelColumnGroupComp.prototype, \"eLabel\", void 0);\n__decorate$2t([\n    (0,ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.RefSelector)('eGroupOpenedIcon')\n], ToolPanelColumnGroupComp.prototype, \"eGroupOpenedIcon\", void 0);\n__decorate$2t([\n    (0,ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.RefSelector)('eGroupClosedIcon')\n], ToolPanelColumnGroupComp.prototype, \"eGroupClosedIcon\", void 0);\n__decorate$2t([\n    (0,ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.RefSelector)('eColumnGroupIcons')\n], ToolPanelColumnGroupComp.prototype, \"eColumnGroupIcons\", void 0);\n__decorate$2t([\n    ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.PostConstruct\n], ToolPanelColumnGroupComp.prototype, \"init\", null);\n\nvar __decorate$2s = ( false) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nconst PRIMARY_COLS_LIST_ITEM_HOVERED = 'ag-list-item-hovered';\nclass PrimaryColsListPanelItemDragFeature extends ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.BeanStub {\n    constructor(comp, virtualList) {\n        super();\n        this.comp = comp;\n        this.virtualList = virtualList;\n        this.currentDragColumn = null;\n        this.lastHoveredColumnItem = null;\n    }\n    postConstruct() {\n        this.addManagedListener(this.eventService, ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.Events.EVENT_COLUMN_PANEL_ITEM_DRAG_START, this.columnPanelItemDragStart.bind(this));\n        this.addManagedListener(this.eventService, ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.Events.EVENT_COLUMN_PANEL_ITEM_DRAG_END, this.columnPanelItemDragEnd.bind(this));\n        this.createDropTarget();\n        this.createAutoScrollService();\n    }\n    columnPanelItemDragStart({ column }) {\n        this.currentDragColumn = column;\n        const currentColumns = this.getCurrentColumns();\n        const hasNotMovable = currentColumns.find(col => {\n            const colDef = col.getColDef();\n            return !!colDef.suppressMovable || !!colDef.lockPosition;\n        });\n        if (hasNotMovable) {\n            this.moveBlocked = true;\n        }\n    }\n    columnPanelItemDragEnd() {\n        window.setTimeout(() => {\n            this.currentDragColumn = null;\n            this.moveBlocked = false;\n        }, 10);\n    }\n    createDropTarget() {\n        const dropTarget = {\n            isInterestedIn: (type) => type === ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.DragSourceType.ToolPanel,\n            getIconName: () => ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.DragAndDropService[this.moveBlocked ? 'ICON_NOT_ALLOWED' : 'ICON_MOVE'],\n            getContainer: () => this.comp.getGui(),\n            onDragging: (e) => this.onDragging(e),\n            onDragStop: () => this.onDragStop(),\n            onDragLeave: () => this.onDragLeave()\n        };\n        this.dragAndDropService.addDropTarget(dropTarget);\n    }\n    createAutoScrollService() {\n        const virtualListGui = this.virtualList.getGui();\n        this.autoScrollService = new ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.AutoScrollService({\n            scrollContainer: virtualListGui,\n            scrollAxis: 'y',\n            getVerticalPosition: () => virtualListGui.scrollTop,\n            setVerticalPosition: (position) => virtualListGui.scrollTop = position\n        });\n    }\n    onDragging(e) {\n        if (!this.currentDragColumn || this.moveBlocked) {\n            return;\n        }\n        const hoveredColumnItem = this.getDragColumnItem(e);\n        const comp = this.virtualList.getComponentAt(hoveredColumnItem.rowIndex);\n        if (!comp) {\n            return;\n        }\n        const el = comp.getGui().parentElement;\n        if (this.lastHoveredColumnItem &&\n            this.lastHoveredColumnItem.rowIndex === hoveredColumnItem.rowIndex &&\n            this.lastHoveredColumnItem.position === hoveredColumnItem.position) {\n            return;\n        }\n        this.autoScrollService.check(e.event);\n        this.clearHoveredItems();\n        this.lastHoveredColumnItem = hoveredColumnItem;\n        ag_grid_community__WEBPACK_IMPORTED_MODULE_0__._.radioCssClass(el, `${PRIMARY_COLS_LIST_ITEM_HOVERED}`);\n        ag_grid_community__WEBPACK_IMPORTED_MODULE_0__._.radioCssClass(el, `ag-item-highlight-${hoveredColumnItem.position}`);\n    }\n    getDragColumnItem(e) {\n        const virtualListGui = this.virtualList.getGui();\n        const paddingTop = parseFloat(window.getComputedStyle(virtualListGui).paddingTop);\n        const rowHeight = this.virtualList.getRowHeight();\n        const scrollTop = this.virtualList.getScrollTop();\n        const rowIndex = Math.max(0, (e.y - paddingTop + scrollTop) / rowHeight);\n        const maxLen = this.comp.getDisplayedColsList().length - 1;\n        const normalizedRowIndex = Math.min(maxLen, rowIndex) | 0;\n        return {\n            rowIndex: normalizedRowIndex,\n            position: (Math.round(rowIndex) > rowIndex || rowIndex > maxLen) ? 'bottom' : 'top',\n            component: this.virtualList.getComponentAt(normalizedRowIndex)\n        };\n    }\n    onDragStop() {\n        if (this.moveBlocked) {\n            return;\n        }\n        const targetIndex = this.getTargetIndex();\n        const columnsToMove = this.getCurrentColumns();\n        if (targetIndex != null) {\n            this.columnModel.moveColumns(columnsToMove, targetIndex, 'toolPanelUi');\n        }\n        this.clearHoveredItems();\n        this.autoScrollService.ensureCleared();\n    }\n    getMoveDiff(end) {\n        const allColumns = this.columnModel.getAllGridColumns();\n        const currentColumns = this.getCurrentColumns();\n        const currentColumn = currentColumns[0];\n        const span = currentColumns.length;\n        const currentIndex = allColumns.indexOf(currentColumn);\n        if (currentIndex < end) {\n            return span;\n        }\n        return 0;\n    }\n    getCurrentColumns() {\n        if (this.currentDragColumn instanceof ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.ProvidedColumnGroup) {\n            return this.currentDragColumn.getLeafColumns();\n        }\n        return [this.currentDragColumn];\n    }\n    getTargetIndex() {\n        if (!this.lastHoveredColumnItem) {\n            return null;\n        }\n        const columnItemComponent = this.lastHoveredColumnItem.component;\n        let isBefore = this.lastHoveredColumnItem.position === 'top';\n        let targetColumn;\n        if (columnItemComponent instanceof ToolPanelColumnGroupComp) {\n            const columns = columnItemComponent.getColumns();\n            targetColumn = columns[0];\n            isBefore = true;\n        }\n        else {\n            targetColumn = columnItemComponent.getColumn();\n        }\n        const targetColumnIndex = this.columnModel.getAllGridColumns().indexOf(targetColumn);\n        const adjustedTarget = isBefore ? targetColumnIndex : targetColumnIndex + 1;\n        const diff = this.getMoveDiff(adjustedTarget);\n        return adjustedTarget - diff;\n    }\n    onDragLeave() {\n        this.clearHoveredItems();\n        this.autoScrollService.ensureCleared();\n    }\n    clearHoveredItems() {\n        const virtualListGui = this.virtualList.getGui();\n        virtualListGui.querySelectorAll(`.${PRIMARY_COLS_LIST_ITEM_HOVERED}`).forEach(el => {\n            [\n                PRIMARY_COLS_LIST_ITEM_HOVERED,\n                'ag-item-highlight-top',\n                'ag-item-highlight-bottom'\n            ].forEach(cls => {\n                el.classList.remove(cls);\n            });\n        });\n        this.lastHoveredColumnItem = null;\n    }\n}\n__decorate$2s([\n    (0,ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.Autowired)('columnModel')\n], PrimaryColsListPanelItemDragFeature.prototype, \"columnModel\", void 0);\n__decorate$2s([\n    (0,ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.Autowired)('dragAndDropService')\n], PrimaryColsListPanelItemDragFeature.prototype, \"dragAndDropService\", void 0);\n__decorate$2s([\n    ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.PostConstruct\n], PrimaryColsListPanelItemDragFeature.prototype, \"postConstruct\", null);\n\nvar __decorate$2r = ( false) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nclass ToolPanelColumnComp extends ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.Component {\n    constructor(column, columnDept, allowDragging, groupsExist, focusWrapper) {\n        super();\n        this.column = column;\n        this.columnDept = columnDept;\n        this.allowDragging = allowDragging;\n        this.groupsExist = groupsExist;\n        this.focusWrapper = focusWrapper;\n        this.processingColumnStateChange = false;\n    }\n    init() {\n        this.setTemplate(ToolPanelColumnComp.TEMPLATE);\n        this.eDragHandle = ag_grid_community__WEBPACK_IMPORTED_MODULE_0__._.createIconNoSpan('columnDrag', this.gridOptionsService);\n        this.eDragHandle.classList.add('ag-drag-handle', 'ag-column-select-column-drag-handle');\n        const checkboxGui = this.cbSelect.getGui();\n        const checkboxInput = this.cbSelect.getInputElement();\n        checkboxGui.insertAdjacentElement('afterend', this.eDragHandle);\n        checkboxInput.setAttribute('tabindex', '-1');\n        this.displayName = this.columnModel.getDisplayNameForColumn(this.column, 'columnToolPanel');\n        const displayNameSanitised = ag_grid_community__WEBPACK_IMPORTED_MODULE_0__._.escapeString(this.displayName);\n        this.eLabel.innerHTML = displayNameSanitised;\n        // if grouping, we add an extra level of indent, to cater for expand/contract icons we need to indent for\n        const indent = this.columnDept;\n        if (this.groupsExist) {\n            this.addCssClass('ag-column-select-add-group-indent');\n        }\n        this.addCssClass(`ag-column-select-indent-${indent}`);\n        this.setupDragging();\n        this.addManagedListener(this.eventService, ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.Events.EVENT_COLUMN_PIVOT_MODE_CHANGED, this.onColumnStateChanged.bind(this));\n        this.addManagedListener(this.column, ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.Column.EVENT_VALUE_CHANGED, this.onColumnStateChanged.bind(this));\n        this.addManagedListener(this.column, ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.Column.EVENT_PIVOT_CHANGED, this.onColumnStateChanged.bind(this));\n        this.addManagedListener(this.column, ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.Column.EVENT_ROW_GROUP_CHANGED, this.onColumnStateChanged.bind(this));\n        this.addManagedListener(this.column, ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.Column.EVENT_VISIBLE_CHANGED, this.onColumnStateChanged.bind(this));\n        this.addManagedListener(this.focusWrapper, 'keydown', this.handleKeyDown.bind(this));\n        this.addManagedListener(this.focusWrapper, 'contextmenu', this.onContextMenu.bind(this));\n        this.addManagedPropertyListener('functionsReadOnly', this.onColumnStateChanged.bind(this));\n        this.addManagedListener(this.cbSelect, ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.AgCheckbox.EVENT_CHANGED, this.onCheckboxChanged.bind(this));\n        this.addManagedListener(this.eLabel, 'click', this.onLabelClicked.bind(this));\n        this.onColumnStateChanged();\n        this.refreshAriaLabel();\n        this.setupTooltip();\n        const classes = ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.CssClassApplier.getToolPanelClassesFromColDef(this.column.getColDef(), this.gridOptionsService, this.column, null);\n        classes.forEach(c => this.addOrRemoveCssClass(c, true));\n    }\n    getColumn() {\n        return this.column;\n    }\n    setupTooltip() {\n        const refresh = () => {\n            const newTooltipText = this.column.getColDef().headerTooltip;\n            this.setTooltip(newTooltipText);\n        };\n        refresh();\n        this.addManagedListener(this.eventService, ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.Events.EVENT_NEW_COLUMNS_LOADED, refresh);\n    }\n    getTooltipParams() {\n        const res = super.getTooltipParams();\n        res.location = 'columnToolPanelColumn';\n        res.colDef = this.column.getColDef();\n        return res;\n    }\n    onContextMenu(e) {\n        const { column, gridOptionsService } = this;\n        if (gridOptionsService.is('functionsReadOnly')) {\n            return;\n        }\n        const contextMenu = this.createBean(new ToolPanelContextMenu(column, e, this.focusWrapper));\n        this.addDestroyFunc(() => {\n            if (contextMenu.isAlive()) {\n                this.destroyBean(contextMenu);\n            }\n        });\n    }\n    handleKeyDown(e) {\n        if (e.key === ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.KeyCode.SPACE) {\n            e.preventDefault();\n            if (this.isSelectable()) {\n                this.onSelectAllChanged(!this.isSelected());\n            }\n        }\n    }\n    onLabelClicked() {\n        if (this.gridOptionsService.is('functionsReadOnly')) {\n            return;\n        }\n        const nextState = !this.cbSelect.getValue();\n        this.onChangeCommon(nextState);\n    }\n    onCheckboxChanged(event) {\n        this.onChangeCommon(event.selected);\n    }\n    onChangeCommon(nextState) {\n        // ignore lock visible columns\n        if (this.cbSelect.isReadOnly()) {\n            return;\n        }\n        this.refreshAriaLabel();\n        // only want to action if the user clicked the checkbox, not if we are setting the checkbox because\n        // of a change in the model\n        if (this.processingColumnStateChange) {\n            return;\n        }\n        this.modelItemUtils.setColumn(this.column, nextState, 'toolPanelUi');\n    }\n    refreshAriaLabel() {\n        const translate = this.localeService.getLocaleTextFunc();\n        const columnLabel = translate('ariaColumn', 'Column');\n        const state = this.cbSelect.getValue() ? translate('ariaVisible', 'visible') : translate('ariaHidden', 'hidden');\n        const visibilityLabel = translate('ariaToggleVisibility', 'Press SPACE to toggle visibility');\n        ag_grid_community__WEBPACK_IMPORTED_MODULE_0__._.setAriaLabel(this.focusWrapper, `${this.displayName} ${columnLabel}`);\n        this.cbSelect.setInputAriaLabel(`${visibilityLabel} (${state})`);\n        ag_grid_community__WEBPACK_IMPORTED_MODULE_0__._.setAriaDescribedBy(this.focusWrapper, this.cbSelect.getInputElement().id);\n    }\n    setupDragging() {\n        if (!this.allowDragging) {\n            ag_grid_community__WEBPACK_IMPORTED_MODULE_0__._.setDisplayed(this.eDragHandle, false);\n            return;\n        }\n        const hideColumnOnExit = !this.gridOptionsService.is('suppressDragLeaveHidesColumns');\n        const dragSource = {\n            type: ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.DragSourceType.ToolPanel,\n            eElement: this.eDragHandle,\n            dragItemName: this.displayName,\n            defaultIconName: hideColumnOnExit ? ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.DragAndDropService.ICON_HIDE : ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.DragAndDropService.ICON_NOT_ALLOWED,\n            getDragItem: () => this.createDragItem(),\n            onDragStarted: () => {\n                const event = {\n                    type: ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.Events.EVENT_COLUMN_PANEL_ITEM_DRAG_START,\n                    column: this.column\n                };\n                this.eventService.dispatchEvent(event);\n            },\n            onDragStopped: () => {\n                const event = {\n                    type: ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.Events.EVENT_COLUMN_PANEL_ITEM_DRAG_END\n                };\n                this.eventService.dispatchEvent(event);\n            },\n            onGridEnter: () => {\n                if (hideColumnOnExit) {\n                    // when dragged into the grid, mimic what happens when checkbox is enabled\n                    // this handles the behaviour for pivot which is different to just hiding a column.\n                    this.onChangeCommon(true);\n                }\n            },\n            onGridExit: () => {\n                if (hideColumnOnExit) {\n                    // when dragged outside of the grid, mimic what happens when checkbox is disabled\n                    // this handles the behaviour for pivot which is different to just hiding a column.\n                    this.onChangeCommon(false);\n                }\n            }\n        };\n        this.dragAndDropService.addDragSource(dragSource, true);\n        this.addDestroyFunc(() => this.dragAndDropService.removeDragSource(dragSource));\n    }\n    createDragItem() {\n        const visibleState = {};\n        visibleState[this.column.getId()] = this.column.isVisible();\n        return {\n            columns: [this.column],\n            visibleState: visibleState\n        };\n    }\n    onColumnStateChanged() {\n        this.processingColumnStateChange = true;\n        const isPivotMode = this.columnModel.isPivotMode();\n        if (isPivotMode) {\n            // if reducing, checkbox means column is one of pivot, value or group\n            const anyFunctionActive = this.column.isAnyFunctionActive();\n            this.cbSelect.setValue(anyFunctionActive);\n        }\n        else {\n            // if not reducing, the checkbox tells us if column is visible or not\n            this.cbSelect.setValue(this.column.isVisible());\n        }\n        let canBeToggled = true;\n        let canBeDragged = true;\n        if (isPivotMode) {\n            // when in pivot mode, the item should be read only if:\n            //  a) gui is not allowed make any changes\n            const functionsReadOnly = this.gridOptionsService.is('functionsReadOnly');\n            //  b) column is not allow any functions on it\n            const noFunctionsAllowed = !this.column.isAnyFunctionAllowed();\n            canBeToggled = !functionsReadOnly && !noFunctionsAllowed;\n            canBeDragged = canBeToggled;\n        }\n        else {\n            const { enableRowGroup, enableValue, lockPosition, suppressMovable, lockVisible } = this.column.getColDef();\n            const forceDraggable = !!enableRowGroup || !!enableValue;\n            const disableDraggable = !!lockPosition || !!suppressMovable;\n            canBeToggled = !lockVisible;\n            canBeDragged = forceDraggable || !disableDraggable;\n        }\n        this.cbSelect.setReadOnly(!canBeToggled);\n        this.eDragHandle.classList.toggle('ag-column-select-column-readonly', !canBeDragged);\n        this.addOrRemoveCssClass('ag-column-select-column-readonly', !canBeDragged && !canBeToggled);\n        const checkboxPassive = isPivotMode && this.gridOptionsService.is('functionsPassive');\n        this.cbSelect.setPassive(checkboxPassive);\n        this.processingColumnStateChange = false;\n    }\n    getDisplayName() {\n        return this.displayName;\n    }\n    onSelectAllChanged(value) {\n        if (value !== this.cbSelect.getValue()) {\n            if (!this.cbSelect.isReadOnly()) {\n                this.cbSelect.toggle();\n            }\n        }\n    }\n    isSelected() {\n        return this.cbSelect.getValue();\n    }\n    isSelectable() {\n        return !this.cbSelect.isReadOnly();\n    }\n    isExpandable() {\n        return false;\n    }\n    setExpanded(value) {\n        console.warn('AG Grid: can not expand a column item that does not represent a column group header');\n    }\n}\nToolPanelColumnComp.TEMPLATE = `<div class=\"ag-column-select-column\" aria-hidden=\"true\">\n            <ag-checkbox ref=\"cbSelect\" class=\"ag-column-select-checkbox\"></ag-checkbox>\n            <span class=\"ag-column-select-column-label\" ref=\"eLabel\"></span>\n        </div>`;\n__decorate$2r([\n    (0,ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.Autowired)('columnModel')\n], ToolPanelColumnComp.prototype, \"columnModel\", void 0);\n__decorate$2r([\n    (0,ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.Autowired)('dragAndDropService')\n], ToolPanelColumnComp.prototype, \"dragAndDropService\", void 0);\n__decorate$2r([\n    (0,ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.Autowired)('modelItemUtils')\n], ToolPanelColumnComp.prototype, \"modelItemUtils\", void 0);\n__decorate$2r([\n    (0,ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.RefSelector)('eLabel')\n], ToolPanelColumnComp.prototype, \"eLabel\", void 0);\n__decorate$2r([\n    (0,ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.RefSelector)('cbSelect')\n], ToolPanelColumnComp.prototype, \"cbSelect\", void 0);\n__decorate$2r([\n    ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.PostConstruct\n], ToolPanelColumnComp.prototype, \"init\", null);\n\nvar __decorate$2q = ( false) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nclass UIColumnModel {\n    constructor(items) {\n        this.items = items;\n    }\n    getRowCount() {\n        return this.items.length;\n    }\n    getRow(index) {\n        return this.items[index];\n    }\n}\nconst PRIMARY_COLS_LIST_PANEL_CLASS = 'ag-column-select-list';\nclass PrimaryColsListPanel extends ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.Component {\n    constructor() {\n        super(PrimaryColsListPanel.TEMPLATE);\n        this.destroyColumnItemFuncs = [];\n    }\n    destroyColumnTree() {\n        this.allColsTree = [];\n        this.destroyColumnItemFuncs.forEach(f => f());\n        this.destroyColumnItemFuncs = [];\n    }\n    init(params, allowDragging, eventType) {\n        this.params = params;\n        this.allowDragging = allowDragging;\n        this.eventType = eventType;\n        if (!this.params.suppressSyncLayoutWithGrid) {\n            this.addManagedListener(this.eventService, ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.Events.EVENT_COLUMN_MOVED, this.onColumnsChanged.bind(this));\n        }\n        this.addManagedListener(this.eventService, ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.Events.EVENT_NEW_COLUMNS_LOADED, this.onColumnsChanged.bind(this));\n        const eventsImpactingCheckedState = [\n            ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.Events.EVENT_COLUMN_PIVOT_CHANGED,\n            ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.Events.EVENT_COLUMN_PIVOT_MODE_CHANGED,\n            ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.Events.EVENT_COLUMN_ROW_GROUP_CHANGED,\n            ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.Events.EVENT_COLUMN_VALUE_CHANGED,\n            ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.Events.EVENT_COLUMN_VISIBLE,\n            ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.Events.EVENT_NEW_COLUMNS_LOADED\n        ];\n        eventsImpactingCheckedState.forEach(event => {\n            // update header select all checkbox with current selection state\n            this.addManagedListener(this.eventService, event, this.fireSelectionChangedEvent.bind(this));\n        });\n        this.expandGroupsByDefault = !this.params.contractColumnSelection;\n        const translate = this.localeService.getLocaleTextFunc();\n        const columnListName = translate('ariaColumnList', 'Column List');\n        this.virtualList = this.createManagedBean(new ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.VirtualList('column-select', 'tree', columnListName));\n        this.appendChild(this.virtualList.getGui());\n        this.virtualList.setComponentCreator((item, listItemElement) => {\n            ag_grid_community__WEBPACK_IMPORTED_MODULE_0__._.setAriaLevel(listItemElement, (item.getDept() + 1));\n            return this.createComponentFromItem(item, listItemElement);\n        });\n        if (this.columnModel.isReady()) {\n            this.onColumnsChanged();\n        }\n        if (!params.suppressColumnMove && !this.gridOptionsService.is('suppressMovableColumns')) {\n            this.createManagedBean(new PrimaryColsListPanelItemDragFeature(this, this.virtualList));\n        }\n    }\n    createComponentFromItem(item, listItemElement) {\n        if (item.isGroup()) {\n            const renderedGroup = new ToolPanelColumnGroupComp(item, this.allowDragging, this.eventType, listItemElement);\n            this.getContext().createBean(renderedGroup);\n            return renderedGroup;\n        }\n        const columnComp = new ToolPanelColumnComp(item.getColumn(), item.getDept(), this.allowDragging, this.groupsExist, listItemElement);\n        this.getContext().createBean(columnComp);\n        return columnComp;\n    }\n    onColumnsChanged() {\n        const expandedStates = this.getExpandedStates();\n        const pivotModeActive = this.columnModel.isPivotMode();\n        const shouldSyncColumnLayoutWithGrid = !this.params.suppressSyncLayoutWithGrid && !pivotModeActive;\n        if (shouldSyncColumnLayoutWithGrid) {\n            this.buildTreeFromWhatGridIsDisplaying();\n        }\n        else {\n            this.buildTreeFromProvidedColumnDefs();\n        }\n        this.setExpandedStates(expandedStates);\n        this.markFilteredColumns();\n        this.flattenAndFilterModel();\n    }\n    getDisplayedColsList() {\n        return this.displayedColsList;\n    }\n    getExpandedStates() {\n        if (!this.allColsTree) {\n            return {};\n        }\n        const res = {};\n        this.forEachItem(item => {\n            if (!item.isGroup()) {\n                return;\n            }\n            const colGroup = item.getColumnGroup();\n            if (colGroup) { // group should always exist, this is defensive\n                res[colGroup.getId()] = item.isExpanded();\n            }\n        });\n        return res;\n    }\n    setExpandedStates(states) {\n        if (!this.allColsTree) {\n            return;\n        }\n        this.forEachItem(item => {\n            if (!item.isGroup()) {\n                return;\n            }\n            const colGroup = item.getColumnGroup();\n            if (colGroup) { // group should always exist, this is defensive\n                const expanded = states[colGroup.getId()];\n                const groupExistedLastTime = expanded != null;\n                if (groupExistedLastTime) {\n                    item.setExpanded(expanded);\n                }\n            }\n        });\n    }\n    buildTreeFromWhatGridIsDisplaying() {\n        this.colDefService.syncLayoutWithGrid(this.setColumnLayout.bind(this));\n    }\n    setColumnLayout(colDefs) {\n        const columnTree = this.colDefService.createColumnTree(colDefs);\n        this.buildListModel(columnTree);\n        // using col defs to check if groups exist as it could be a custom layout\n        this.groupsExist = colDefs.some(colDef => {\n            return colDef && typeof colDef.children !== 'undefined';\n        });\n        this.markFilteredColumns();\n        this.flattenAndFilterModel();\n    }\n    buildTreeFromProvidedColumnDefs() {\n        // add column / group comps to tool panel\n        this.buildListModel(this.columnModel.getPrimaryColumnTree());\n        this.groupsExist = this.columnModel.isPrimaryColumnGroupsPresent();\n    }\n    buildListModel(columnTree) {\n        const columnExpandedListener = this.onColumnExpanded.bind(this);\n        const addListeners = (item) => {\n            item.addEventListener(ColumnModelItem.EVENT_EXPANDED_CHANGED, columnExpandedListener);\n            const removeFunc = item.removeEventListener.bind(item, ColumnModelItem.EVENT_EXPANDED_CHANGED, columnExpandedListener);\n            this.destroyColumnItemFuncs.push(removeFunc);\n        };\n        const recursivelyBuild = (tree, dept, parentList) => {\n            tree.forEach(child => {\n                if (child instanceof ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.ProvidedColumnGroup) {\n                    createGroupItem(child, dept, parentList);\n                }\n                else {\n                    createColumnItem(child, dept, parentList);\n                }\n            });\n        };\n        const createGroupItem = (columnGroup, dept, parentList) => {\n            const columnGroupDef = columnGroup.getColGroupDef();\n            const skipThisGroup = columnGroupDef && columnGroupDef.suppressColumnsToolPanel;\n            if (skipThisGroup) {\n                return;\n            }\n            if (columnGroup.isPadding()) {\n                recursivelyBuild(columnGroup.getChildren(), dept, parentList);\n                return;\n            }\n            const displayName = this.columnModel.getDisplayNameForProvidedColumnGroup(null, columnGroup, this.eventType);\n            const item = new ColumnModelItem(displayName, columnGroup, dept, true, this.expandGroupsByDefault);\n            parentList.push(item);\n            addListeners(item);\n            recursivelyBuild(columnGroup.getChildren(), dept + 1, item.getChildren());\n        };\n        const createColumnItem = (column, dept, parentList) => {\n            const skipThisColumn = column.getColDef() && column.getColDef().suppressColumnsToolPanel;\n            if (skipThisColumn) {\n                return;\n            }\n            const displayName = this.columnModel.getDisplayNameForColumn(column, 'columnToolPanel');\n            parentList.push(new ColumnModelItem(displayName, column, dept));\n        };\n        this.destroyColumnTree();\n        recursivelyBuild(columnTree, 0, this.allColsTree);\n    }\n    onColumnExpanded() {\n        this.flattenAndFilterModel();\n    }\n    flattenAndFilterModel() {\n        this.displayedColsList = [];\n        const recursiveFunc = (item) => {\n            if (!item.isPassesFilter()) {\n                return;\n            }\n            this.displayedColsList.push(item);\n            if (item.isGroup() && item.isExpanded()) {\n                item.getChildren().forEach(recursiveFunc);\n            }\n        };\n        this.allColsTree.forEach(recursiveFunc);\n        this.virtualList.setModel(new UIColumnModel(this.displayedColsList));\n        const focusedRow = this.virtualList.getLastFocusedRow();\n        this.virtualList.refresh();\n        if (focusedRow != null) {\n            this.focusRowIfAlive(focusedRow);\n        }\n        this.notifyListeners();\n    }\n    focusRowIfAlive(rowIndex) {\n        window.setTimeout(() => {\n            if (this.isAlive()) {\n                this.virtualList.focusRow(rowIndex);\n            }\n        }, 0);\n    }\n    forEachItem(callback) {\n        const recursiveFunc = (items) => {\n            items.forEach(item => {\n                callback(item);\n                if (item.isGroup()) {\n                    recursiveFunc(item.getChildren());\n                }\n            });\n        };\n        recursiveFunc(this.allColsTree);\n    }\n    doSetExpandedAll(value) {\n        this.forEachItem(item => {\n            if (item.isGroup()) {\n                item.setExpanded(value);\n            }\n        });\n    }\n    setGroupsExpanded(expand, groupIds) {\n        if (!groupIds) {\n            this.doSetExpandedAll(expand);\n            return;\n        }\n        const expandedGroupIds = [];\n        this.forEachItem(item => {\n            if (!item.isGroup()) {\n                return;\n            }\n            const groupId = item.getColumnGroup().getId();\n            if (groupIds.indexOf(groupId) >= 0) {\n                item.setExpanded(expand);\n                expandedGroupIds.push(groupId);\n            }\n        });\n        const unrecognisedGroupIds = groupIds.filter(groupId => !ag_grid_community__WEBPACK_IMPORTED_MODULE_0__._.includes(expandedGroupIds, groupId));\n        if (unrecognisedGroupIds.length > 0) {\n            console.warn('AG Grid: unable to find group(s) for supplied groupIds:', unrecognisedGroupIds);\n        }\n    }\n    getExpandState() {\n        let expandedCount = 0;\n        let notExpandedCount = 0;\n        this.forEachItem(item => {\n            if (!item.isGroup()) {\n                return;\n            }\n            if (item.isExpanded()) {\n                expandedCount++;\n            }\n            else {\n                notExpandedCount++;\n            }\n        });\n        if (expandedCount > 0 && notExpandedCount > 0) {\n            return ExpandState.INDETERMINATE;\n        }\n        if (notExpandedCount > 0) {\n            return ExpandState.COLLAPSED;\n        }\n        return ExpandState.EXPANDED;\n    }\n    doSetSelectedAll(selectAllChecked) {\n        this.modelItemUtils.selectAllChildren(this.allColsTree, selectAllChecked, this.eventType);\n    }\n    getSelectionState() {\n        let checkedCount = 0;\n        let uncheckedCount = 0;\n        const pivotMode = this.columnModel.isPivotMode();\n        this.forEachItem(item => {\n            if (item.isGroup()) {\n                return;\n            }\n            if (!item.isPassesFilter()) {\n                return;\n            }\n            const column = item.getColumn();\n            const colDef = column.getColDef();\n            let checked;\n            if (pivotMode) {\n                const noPivotModeOptionsAllowed = !column.isAllowPivot() && !column.isAllowRowGroup() && !column.isAllowValue();\n                if (noPivotModeOptionsAllowed) {\n                    return;\n                }\n                checked = column.isValueActive() || column.isPivotActive() || column.isRowGroupActive();\n            }\n            else {\n                if (colDef.lockVisible) {\n                    return;\n                }\n                checked = column.isVisible();\n            }\n            checked ? checkedCount++ : uncheckedCount++;\n        });\n        if (checkedCount > 0 && uncheckedCount > 0) {\n            return undefined;\n        }\n        return !(checkedCount === 0 || uncheckedCount > 0);\n    }\n    setFilterText(filterText) {\n        this.filterText = ag_grid_community__WEBPACK_IMPORTED_MODULE_0__._.exists(filterText) ? filterText.toLowerCase() : null;\n        this.markFilteredColumns();\n        this.flattenAndFilterModel();\n    }\n    markFilteredColumns() {\n        const passesFilter = (item) => {\n            if (!ag_grid_community__WEBPACK_IMPORTED_MODULE_0__._.exists(this.filterText)) {\n                return true;\n            }\n            const displayName = item.getDisplayName();\n            return displayName == null || displayName.toLowerCase().indexOf(this.filterText) !== -1;\n        };\n        const recursivelyCheckFilter = (item, parentPasses) => {\n            let atLeastOneChildPassed = false;\n            if (item.isGroup()) {\n                const groupPasses = passesFilter(item);\n                item.getChildren().forEach(child => {\n                    const childPasses = recursivelyCheckFilter(child, groupPasses || parentPasses);\n                    if (childPasses) {\n                        atLeastOneChildPassed = childPasses;\n                    }\n                });\n            }\n            const filterPasses = (parentPasses || atLeastOneChildPassed) ? true : passesFilter(item);\n            item.setPassesFilter(filterPasses);\n            return filterPasses;\n        };\n        this.allColsTree.forEach(item => recursivelyCheckFilter(item, false));\n    }\n    notifyListeners() {\n        this.fireGroupExpandedEvent();\n        this.fireSelectionChangedEvent();\n    }\n    fireGroupExpandedEvent() {\n        const expandState = this.getExpandState();\n        this.dispatchEvent({ type: 'groupExpanded', state: expandState });\n    }\n    fireSelectionChangedEvent() {\n        const selectionState = this.getSelectionState();\n        this.dispatchEvent({ type: 'selectionChanged', state: selectionState });\n    }\n}\nPrimaryColsListPanel.TEMPLATE = `<div class=\"${PRIMARY_COLS_LIST_PANEL_CLASS}\" role=\"presentation\"></div>`;\n__decorate$2q([\n    (0,ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.Autowired)('columnModel')\n], PrimaryColsListPanel.prototype, \"columnModel\", void 0);\n__decorate$2q([\n    (0,ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.Autowired)('toolPanelColDefService')\n], PrimaryColsListPanel.prototype, \"colDefService\", void 0);\n__decorate$2q([\n    (0,ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.Autowired)('modelItemUtils')\n], PrimaryColsListPanel.prototype, \"modelItemUtils\", void 0);\n__decorate$2q([\n    ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.PreDestroy\n], PrimaryColsListPanel.prototype, \"destroyColumnTree\", null);\n\nvar __decorate$2p = ( false) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nclass PivotModePanel extends ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.Component {\n    createTemplate() {\n        return /* html */ `<div class=\"ag-pivot-mode-panel\">\n                <ag-toggle-button ref=\"cbPivotMode\" class=\"ag-pivot-mode-select\"></ag-toggle-button>\n            </div>`;\n    }\n    init() {\n        this.setTemplate(this.createTemplate());\n        this.cbPivotMode.setValue(this.columnModel.isPivotMode());\n        const localeTextFunc = this.localeService.getLocaleTextFunc();\n        this.cbPivotMode.setLabel(localeTextFunc('pivotMode', 'Pivot Mode'));\n        this.addManagedListener(this.cbPivotMode, ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.AgCheckbox.EVENT_CHANGED, this.onBtPivotMode.bind(this));\n        this.addManagedListener(this.eventService, ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.Events.EVENT_NEW_COLUMNS_LOADED, this.onPivotModeChanged.bind(this));\n        this.addManagedListener(this.eventService, ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.Events.EVENT_COLUMN_PIVOT_MODE_CHANGED, this.onPivotModeChanged.bind(this));\n    }\n    onBtPivotMode() {\n        const newValue = !!this.cbPivotMode.getValue();\n        if (newValue !== this.columnModel.isPivotMode()) {\n            this.columnModel.setPivotMode(newValue, \"toolPanelUi\");\n            const api = this.gridOptionsService.api;\n            if (api) {\n                api.refreshHeader();\n            }\n        }\n    }\n    onPivotModeChanged() {\n        const pivotModeActive = this.columnModel.isPivotMode();\n        this.cbPivotMode.setValue(pivotModeActive);\n    }\n}\n__decorate$2p([\n    (0,ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.Autowired)('columnModel')\n], PivotModePanel.prototype, \"columnModel\", void 0);\n__decorate$2p([\n    (0,ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.RefSelector)('cbPivotMode')\n], PivotModePanel.prototype, \"cbPivotMode\", void 0);\n__decorate$2p([\n    ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.PreConstruct\n], PivotModePanel.prototype, \"init\", null);\n\nvar __decorate$2o = ( false) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nlet AggregationStage = class AggregationStage extends ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.BeanStub {\n    init() {\n        this.alwaysAggregateAtRootLevel = this.gridOptionsService.is('alwaysAggregateAtRootLevel');\n        this.addManagedPropertyListener('alwaysAggregateAtRootLevel', (propChange) => this.alwaysAggregateAtRootLevel = propChange.currentValue);\n        this.groupIncludeTotalFooter = this.gridOptionsService.is('groupIncludeTotalFooter');\n        this.addManagedPropertyListener('groupIncludeTotalFooter', (propChange) => this.groupIncludeTotalFooter = propChange.currentValue);\n    }\n    // it's possible to recompute the aggregate without doing the other parts\n    // + api.refreshClientSideRowModel('aggregate')\n    execute(params) {\n        // if changed path is active, it means we came from a) change detection or b) transaction update.\n        // for both of these, if no value columns are present, it means there is nothing to aggregate now\n        // and there is no cleanup to be done (as value columns don't change between transactions or change\n        // detections). if no value columns and no changed path, means we have to go through all nodes in\n        // case we need to clean up agg data from before.\n        const noValueColumns = ag_grid_community__WEBPACK_IMPORTED_MODULE_0__._.missingOrEmpty(this.columnModel.getValueColumns());\n        const noUserAgg = !this.gridOptionsService.getCallback('getGroupRowAgg');\n        const changedPathActive = params.changedPath && params.changedPath.isActive();\n        if (noValueColumns && noUserAgg && changedPathActive) {\n            return;\n        }\n        const aggDetails = this.createAggDetails(params);\n        this.recursivelyCreateAggData(aggDetails);\n    }\n    createAggDetails(params) {\n        const pivotActive = this.columnModel.isPivotActive();\n        const measureColumns = this.columnModel.getValueColumns();\n        const pivotColumns = pivotActive ? this.columnModel.getPivotColumns() : [];\n        const aggDetails = {\n            changedPath: params.changedPath,\n            valueColumns: measureColumns,\n            pivotColumns: pivotColumns\n        };\n        return aggDetails;\n    }\n    isSuppressAggFilteredOnly() {\n        const isGroupAggFiltering = this.gridOptionsService.getGroupAggFiltering() !== undefined;\n        return isGroupAggFiltering || this.gridOptionsService.is('suppressAggFilteredOnly');\n    }\n    recursivelyCreateAggData(aggDetails) {\n        // update prop, in case changed since last time\n        this.filteredOnly = !this.isSuppressAggFilteredOnly();\n        const callback = (rowNode) => {\n            const hasNoChildren = !rowNode.hasChildren();\n            if (hasNoChildren) {\n                // this check is needed for TreeData, in case the node is no longer a child,\n                // but it was a child previously.\n                if (rowNode.aggData) {\n                    rowNode.setAggData(null);\n                }\n                // never agg data for leaf nodes\n                return;\n            }\n            //Optionally enable the aggregation at the root Node\n            const isRootNode = rowNode.level === -1;\n            // if total footer is displayed, the value is in use\n            if (isRootNode && !this.groupIncludeTotalFooter) {\n                const notPivoting = !this.columnModel.isPivotMode();\n                if (!this.alwaysAggregateAtRootLevel && notPivoting) {\n                    return;\n                }\n            }\n            this.aggregateRowNode(rowNode, aggDetails);\n        };\n        aggDetails.changedPath.forEachChangedNodeDepthFirst(callback, true);\n    }\n    aggregateRowNode(rowNode, aggDetails) {\n        const measureColumnsMissing = aggDetails.valueColumns.length === 0;\n        const pivotColumnsMissing = aggDetails.pivotColumns.length === 0;\n        const userFunc = this.gridOptionsService.getCallback('getGroupRowAgg');\n        let aggResult;\n        if (userFunc) {\n            const params = { nodes: rowNode.childrenAfterFilter };\n            aggResult = userFunc(params);\n        }\n        else if (measureColumnsMissing) {\n            aggResult = null;\n        }\n        else if (pivotColumnsMissing) {\n            aggResult = this.aggregateRowNodeUsingValuesOnly(rowNode, aggDetails);\n        }\n        else {\n            aggResult = this.aggregateRowNodeUsingValuesAndPivot(rowNode);\n        }\n        rowNode.setAggData(aggResult);\n        // if we are grouping, then it's possible there is a sibling footer\n        // to the group, so update the data here also if there is one\n        if (rowNode.sibling) {\n            rowNode.sibling.setAggData(aggResult);\n        }\n    }\n    aggregateRowNodeUsingValuesAndPivot(rowNode) {\n        var _a;\n        const result = {};\n        const secondaryColumns = (_a = this.columnModel.getSecondaryColumns()) !== null && _a !== void 0 ? _a : [];\n        secondaryColumns.forEach(secondaryCol => {\n            const { pivotValueColumn, pivotTotalColumnIds, colId, pivotKeys } = secondaryCol.getColDef();\n            if (ag_grid_community__WEBPACK_IMPORTED_MODULE_0__._.exists(pivotTotalColumnIds)) {\n                return;\n            }\n            const keys = pivotKeys !== null && pivotKeys !== void 0 ? pivotKeys : [];\n            let values;\n            if (rowNode.leafGroup) {\n                // lowest level group, get the values from the mapped set\n                values = this.getValuesFromMappedSet(rowNode.childrenMapped, keys, pivotValueColumn);\n            }\n            else {\n                // value columns and pivot columns, non-leaf group\n                values = this.getValuesPivotNonLeaf(rowNode, colId);\n            }\n            result[colId] = this.aggregateValues(values, pivotValueColumn.getAggFunc(), pivotValueColumn, rowNode, secondaryCol);\n        });\n        secondaryColumns.forEach(secondaryCol => {\n            const { pivotValueColumn, pivotTotalColumnIds, colId } = secondaryCol.getColDef();\n            if (!ag_grid_community__WEBPACK_IMPORTED_MODULE_0__._.exists(pivotTotalColumnIds)) {\n                return;\n            }\n            const aggResults = [];\n            //retrieve results for colIds associated with this pivot total column\n            if (!pivotTotalColumnIds || !pivotTotalColumnIds.length) {\n                return;\n            }\n            pivotTotalColumnIds.forEach((currentColId) => {\n                aggResults.push(result[currentColId]);\n            });\n            result[colId] = this.aggregateValues(aggResults, pivotValueColumn.getAggFunc(), pivotValueColumn, rowNode, secondaryCol);\n        });\n        return result;\n    }\n    aggregateRowNodeUsingValuesOnly(rowNode, aggDetails) {\n        const result = {};\n        const changedValueColumns = aggDetails.changedPath.isActive() ?\n            aggDetails.changedPath.getValueColumnsForNode(rowNode, aggDetails.valueColumns)\n            : aggDetails.valueColumns;\n        const notChangedValueColumns = aggDetails.changedPath.isActive() ?\n            aggDetails.changedPath.getNotValueColumnsForNode(rowNode, aggDetails.valueColumns)\n            : null;\n        const values2d = this.getValuesNormal(rowNode, changedValueColumns);\n        const oldValues = rowNode.aggData;\n        changedValueColumns.forEach((valueColumn, index) => {\n            result[valueColumn.getId()] = this.aggregateValues(values2d[index], valueColumn.getAggFunc(), valueColumn, rowNode);\n        });\n        if (notChangedValueColumns && oldValues) {\n            notChangedValueColumns.forEach((valueColumn) => {\n                result[valueColumn.getId()] = oldValues[valueColumn.getId()];\n            });\n        }\n        return result;\n    }\n    getValuesPivotNonLeaf(rowNode, colId) {\n        const values = [];\n        rowNode.childrenAfterFilter.forEach((node) => {\n            const value = node.aggData[colId];\n            values.push(value);\n        });\n        return values;\n    }\n    getValuesFromMappedSet(mappedSet, keys, valueColumn) {\n        let mapPointer = mappedSet;\n        keys.forEach(key => (mapPointer = mapPointer ? mapPointer[key] : null));\n        if (!mapPointer) {\n            return [];\n        }\n        const values = [];\n        mapPointer.forEach((rowNode) => {\n            const value = this.valueService.getValue(valueColumn, rowNode);\n            values.push(value);\n        });\n        return values;\n    }\n    getValuesNormal(rowNode, valueColumns) {\n        // create 2d array, of all values for all valueColumns\n        const values = [];\n        valueColumns.forEach(() => values.push([]));\n        const valueColumnCount = valueColumns.length;\n        const nodeList = this.filteredOnly ? rowNode.childrenAfterFilter : rowNode.childrenAfterGroup;\n        const rowCount = nodeList.length;\n        for (let i = 0; i < rowCount; i++) {\n            const childNode = nodeList[i];\n            for (let j = 0; j < valueColumnCount; j++) {\n                const valueColumn = valueColumns[j];\n                // if the row is a group, then it will only have an agg result value,\n                // which means valueGetter is never used.\n                const value = this.valueService.getValue(valueColumn, childNode);\n                values[j].push(value);\n            }\n        }\n        return values;\n    }\n    aggregateValues(values, aggFuncOrString, column, rowNode, pivotResultColumn) {\n        const aggFunc = typeof aggFuncOrString === 'string' ?\n            this.aggFuncService.getAggFunc(aggFuncOrString) :\n            aggFuncOrString;\n        if (typeof aggFunc !== 'function') {\n            console.error(`AG Grid: unrecognised aggregation function ${aggFuncOrString}`);\n            return null;\n        }\n        const aggFuncAny = aggFunc;\n        const params = {\n            values: values,\n            column: column,\n            colDef: column ? column.getColDef() : undefined,\n            pivotResultColumn: pivotResultColumn,\n            rowNode: rowNode,\n            data: rowNode ? rowNode.data : undefined,\n            api: this.gridApi,\n            columnApi: this.columnApi,\n            context: this.gridOptionsService.context,\n        }; // the \"as any\" is needed to allow the deprecation warning messages\n        return aggFuncAny(params);\n    }\n};\n__decorate$2o([\n    (0,ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.Autowired)('columnModel')\n], AggregationStage.prototype, \"columnModel\", void 0);\n__decorate$2o([\n    (0,ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.Autowired)('valueService')\n], AggregationStage.prototype, \"valueService\", void 0);\n__decorate$2o([\n    (0,ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.Autowired)('aggFuncService')\n], AggregationStage.prototype, \"aggFuncService\", void 0);\n__decorate$2o([\n    (0,ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.Autowired)('gridApi')\n], AggregationStage.prototype, \"gridApi\", void 0);\n__decorate$2o([\n    (0,ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.Autowired)('columnApi')\n], AggregationStage.prototype, \"columnApi\", void 0);\n__decorate$2o([\n    ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.PostConstruct\n], AggregationStage.prototype, \"init\", null);\nAggregationStage = __decorate$2o([\n    (0,ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.Bean)('aggregationStage')\n], AggregationStage);\n\nclass BatchRemover {\n    constructor() {\n        this.allSets = {};\n        this.allParents = [];\n    }\n    removeFromChildrenAfterGroup(parent, child) {\n        const set = this.getSet(parent);\n        set.removeFromChildrenAfterGroup[child.id] = true;\n    }\n    isRemoveFromAllLeafChildren(parent, child) {\n        const set = this.getSet(parent);\n        return !!set.removeFromAllLeafChildren[child.id];\n    }\n    preventRemoveFromAllLeafChildren(parent, child) {\n        const set = this.getSet(parent);\n        delete set.removeFromAllLeafChildren[child.id];\n    }\n    removeFromAllLeafChildren(parent, child) {\n        const set = this.getSet(parent);\n        set.removeFromAllLeafChildren[child.id] = true;\n    }\n    getSet(parent) {\n        if (!this.allSets[parent.id]) {\n            this.allSets[parent.id] = {\n                removeFromAllLeafChildren: {},\n                removeFromChildrenAfterGroup: {}\n            };\n            this.allParents.push(parent);\n        }\n        return this.allSets[parent.id];\n    }\n    getAllParents() {\n        return this.allParents;\n    }\n    flush() {\n        this.allParents.forEach(parent => {\n            const nodeDetails = this.allSets[parent.id];\n            parent.childrenAfterGroup = parent.childrenAfterGroup.filter(child => !nodeDetails.removeFromChildrenAfterGroup[child.id]);\n            parent.allLeafChildren = parent.allLeafChildren.filter(child => !nodeDetails.removeFromAllLeafChildren[child.id]);\n            parent.updateHasChildren();\n            if (parent.sibling) {\n                parent.sibling.childrenAfterGroup = parent.childrenAfterGroup;\n                parent.sibling.allLeafChildren = parent.allLeafChildren;\n            }\n        });\n        this.allSets = {};\n        this.allParents.length = 0;\n    }\n}\n\nvar __decorate$2n = ( false) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nlet GroupStage = class GroupStage extends ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.BeanStub {\n    constructor() {\n        super(...arguments);\n        // we use a sequence variable so that each time we do a grouping, we don't\n        // reuse the ids - otherwise the rowRenderer will confuse rowNodes between redraws\n        // when it tries to animate between rows.\n        this.groupIdSequence = new ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.NumberSequence();\n    }\n    postConstruct() {\n        this.usingTreeData = this.gridOptionsService.isTreeData();\n        if (this.usingTreeData) {\n            this.getDataPath = this.gridOptionsService.get('getDataPath');\n        }\n    }\n    execute(params) {\n        const details = this.createGroupingDetails(params);\n        if (details.transactions) {\n            this.handleTransaction(details);\n        }\n        else {\n            const afterColsChanged = params.afterColumnsChanged === true;\n            this.shotgunResetEverything(details, afterColsChanged);\n        }\n        this.positionLeafsAndGroups(params.changedPath);\n        this.orderGroups(details.rootNode);\n        this.selectableService.updateSelectableAfterGrouping(details.rootNode);\n    }\n    positionLeafsAndGroups(changedPath) {\n        // we don't do group sorting for tree data\n        if (this.usingTreeData) {\n            return;\n        }\n        changedPath.forEachChangedNodeDepthFirst(group => {\n            if (group.childrenAfterGroup) {\n                const leafNodes = [];\n                const groupNodes = [];\n                let unbalancedNode;\n                group.childrenAfterGroup.forEach(row => {\n                    var _a;\n                    if (!((_a = row.childrenAfterGroup) === null || _a === void 0 ? void 0 : _a.length)) {\n                        leafNodes.push(row);\n                    }\n                    else {\n                        if (row.key === '' && !unbalancedNode) {\n                            unbalancedNode = row;\n                        }\n                        else {\n                            groupNodes.push(row);\n                        }\n                    }\n                });\n                if (unbalancedNode) {\n                    groupNodes.push(unbalancedNode);\n                }\n                group.childrenAfterGroup = [...leafNodes, ...groupNodes];\n            }\n        }, false);\n    }\n    createGroupingDetails(params) {\n        const { rowNode, changedPath, rowNodeTransactions, rowNodeOrder } = params;\n        const groupedCols = this.usingTreeData ? null : this.columnModel.getRowGroupColumns();\n        const details = {\n            // someone complained that the parent attribute was causing some change detection\n            // to break is some angular add-on - which i never used. taking the parent out breaks\n            // a cyclic dependency, hence this flag got introduced.\n            includeParents: !this.gridOptionsService.is('suppressParentsInRowNodes'),\n            expandByDefault: this.gridOptionsService.getNum('groupDefaultExpanded'),\n            groupedCols: groupedCols,\n            rootNode: rowNode,\n            pivotMode: this.columnModel.isPivotMode(),\n            groupedColCount: this.usingTreeData || !groupedCols ? 0 : groupedCols.length,\n            rowNodeOrder: rowNodeOrder,\n            transactions: rowNodeTransactions,\n            // if no transaction, then it's shotgun, changed path would be 'not active' at this point anyway\n            changedPath: changedPath\n        };\n        return details;\n    }\n    handleTransaction(details) {\n        details.transactions.forEach(tran => {\n            // we don't allow batch remover for tree data as tree data uses Filler Nodes,\n            // and creating/deleting filler nodes needs to be done alongside the node deleting\n            // and moving. if we want to Batch Remover working with tree data then would need\n            // to consider how Filler Nodes would be impacted (it's possible that it can be easily\n            // modified to work, however for now I don't have the brain energy to work it all out).\n            const batchRemover = !this.usingTreeData ? new BatchRemover() : undefined;\n            // the order here of [add, remove, update] needs to be the same as in ClientSideNodeManager,\n            // as the order is important when a record with the same id is added and removed in the same\n            // transaction.\n            if (ag_grid_community__WEBPACK_IMPORTED_MODULE_0__._.existsAndNotEmpty(tran.remove)) {\n                this.removeNodes(tran.remove, details, batchRemover);\n            }\n            if (ag_grid_community__WEBPACK_IMPORTED_MODULE_0__._.existsAndNotEmpty(tran.update)) {\n                this.moveNodesInWrongPath(tran.update, details, batchRemover);\n            }\n            if (ag_grid_community__WEBPACK_IMPORTED_MODULE_0__._.existsAndNotEmpty(tran.add)) {\n                this.insertNodes(tran.add, details, false);\n            }\n            // must flush here, and not allow another transaction to be applied,\n            // as each transaction must finish leaving the data in a consistent state.\n            if (batchRemover) {\n                const parentsWithChildrenRemoved = batchRemover.getAllParents().slice();\n                batchRemover.flush();\n                this.removeEmptyGroups(parentsWithChildrenRemoved, details);\n            }\n        });\n        if (details.rowNodeOrder) {\n            this.sortChildren(details);\n        }\n    }\n    // this is used when doing delta updates, eg Redux, keeps nodes in right order\n    sortChildren(details) {\n        details.changedPath.forEachChangedNodeDepthFirst(node => {\n            if (!node.childrenAfterGroup) {\n                return;\n            }\n            const didSort = ag_grid_community__WEBPACK_IMPORTED_MODULE_0__._.sortRowNodesByOrder(node.childrenAfterGroup, details.rowNodeOrder);\n            if (didSort) {\n                details.changedPath.addParentNode(node);\n            }\n        }, false, true);\n    }\n    orderGroups(rootNode) {\n        // we don't do group sorting for tree data\n        if (this.usingTreeData) {\n            return;\n        }\n        const comparator = this.gridOptionsService.getCallback('initialGroupOrderComparator');\n        if (ag_grid_community__WEBPACK_IMPORTED_MODULE_0__._.exists(comparator)) {\n            recursiveSort(rootNode);\n        }\n        function recursiveSort(rowNode) {\n            const doSort = ag_grid_community__WEBPACK_IMPORTED_MODULE_0__._.exists(rowNode.childrenAfterGroup) &&\n                // we only want to sort groups, so we do not sort leafs (a leaf group has leafs as children)\n                !rowNode.leafGroup;\n            if (doSort) {\n                rowNode.childrenAfterGroup.sort((nodeA, nodeB) => comparator({ nodeA, nodeB }));\n                rowNode.childrenAfterGroup.forEach((childNode) => recursiveSort(childNode));\n            }\n        }\n    }\n    getExistingPathForNode(node, details) {\n        const res = [];\n        // when doing tree data, the node is part of the path,\n        // but when doing grid grouping, the node is not part of the path so we start with the parent.\n        let pointer = this.usingTreeData ? node : node.parent;\n        while (pointer && pointer !== details.rootNode) {\n            res.push({\n                key: pointer.key,\n                rowGroupColumn: pointer.rowGroupColumn,\n                field: pointer.field\n            });\n            pointer = pointer.parent;\n        }\n        res.reverse();\n        return res;\n    }\n    moveNodesInWrongPath(childNodes, details, batchRemover) {\n        childNodes.forEach(childNode => {\n            // we add node, even if parent has not changed, as the data could have\n            // changed, hence aggregations will be wrong\n            if (details.changedPath.isActive()) {\n                details.changedPath.addParentNode(childNode.parent);\n            }\n            const infoToKeyMapper = (item) => item.key;\n            const oldPath = this.getExistingPathForNode(childNode, details).map(infoToKeyMapper);\n            const newPath = this.getGroupInfo(childNode, details).map(infoToKeyMapper);\n            const nodeInCorrectPath = ag_grid_community__WEBPACK_IMPORTED_MODULE_0__._.areEqual(oldPath, newPath);\n            if (!nodeInCorrectPath) {\n                this.moveNode(childNode, details, batchRemover);\n            }\n        });\n    }\n    moveNode(childNode, details, batchRemover) {\n        this.removeNodesInStages([childNode], details, batchRemover);\n        this.insertOneNode(childNode, details, true, batchRemover);\n        // hack - if we didn't do this, then renaming a tree item (ie changing rowNode.key) wouldn't get\n        // refreshed into the gui.\n        // this is needed to kick off the event that rowComp listens to for refresh. this in turn\n        // then will get each cell in the row to refresh - which is what we need as we don't know which\n        // columns will be displaying the rowNode.key info.\n        childNode.setData(childNode.data);\n        // we add both old and new parents to changed path, as both will need to be refreshed.\n        // we already added the old parent (in calling method), so just add the new parent here\n        if (details.changedPath.isActive()) {\n            const newParent = childNode.parent;\n            details.changedPath.addParentNode(newParent);\n        }\n    }\n    removeNodes(leafRowNodes, details, batchRemover) {\n        this.removeNodesInStages(leafRowNodes, details, batchRemover);\n        if (details.changedPath.isActive()) {\n            leafRowNodes.forEach(rowNode => details.changedPath.addParentNode(rowNode.parent));\n        }\n    }\n    removeNodesInStages(leafRowNodes, details, batchRemover) {\n        this.removeNodesFromParents(leafRowNodes, details, batchRemover);\n        if (this.usingTreeData) {\n            this.postRemoveCreateFillerNodes(leafRowNodes, details);\n            // When not TreeData, then removeEmptyGroups is called just before the BatchRemover is flushed.\n            // However for TreeData, there is no BatchRemover, so we have to call removeEmptyGroups here.\n            const nodeParents = leafRowNodes.map(n => n.parent);\n            this.removeEmptyGroups(nodeParents, details);\n        }\n    }\n    forEachParentGroup(details, group, callback) {\n        let pointer = group;\n        while (pointer && pointer !== details.rootNode) {\n            callback(pointer);\n            pointer = pointer.parent;\n        }\n    }\n    removeNodesFromParents(nodesToRemove, details, provided) {\n        // this method can be called with BatchRemover as optional. if it is missed, we created a local version\n        // and flush it at the end. if one is provided, we add to the provided one and it gets flushed elsewhere.\n        const batchRemoverIsLocal = provided == null;\n        const batchRemoverToUse = provided ? provided : new BatchRemover();\n        nodesToRemove.forEach(nodeToRemove => {\n            this.removeFromParent(nodeToRemove, batchRemoverToUse);\n            // remove from allLeafChildren. we clear down all parents EXCEPT the Root Node, as\n            // the ClientSideNodeManager is responsible for the Root Node.\n            this.forEachParentGroup(details, nodeToRemove.parent, parentNode => {\n                batchRemoverToUse.removeFromAllLeafChildren(parentNode, nodeToRemove);\n            });\n        });\n        if (batchRemoverIsLocal) {\n            batchRemoverToUse.flush();\n        }\n    }\n    postRemoveCreateFillerNodes(nodesToRemove, details) {\n        nodesToRemove.forEach(nodeToRemove => {\n            // if not group, and children are present, need to move children to a group.\n            // otherwise if no children, we can just remove without replacing.\n            const replaceWithGroup = nodeToRemove.hasChildren();\n            if (replaceWithGroup) {\n                const oldPath = this.getExistingPathForNode(nodeToRemove, details);\n                // because we just removed the userGroup, this will always return new support group\n                const newGroupNode = this.findParentForNode(nodeToRemove, oldPath, details);\n                // these properties are the ones that will be incorrect in the newly created group,\n                // so copy them from the old childNode\n                newGroupNode.expanded = nodeToRemove.expanded;\n                newGroupNode.allLeafChildren = nodeToRemove.allLeafChildren;\n                newGroupNode.childrenAfterGroup = nodeToRemove.childrenAfterGroup;\n                newGroupNode.childrenMapped = nodeToRemove.childrenMapped;\n                newGroupNode.updateHasChildren();\n                newGroupNode.childrenAfterGroup.forEach(rowNode => rowNode.parent = newGroupNode);\n            }\n        });\n    }\n    removeEmptyGroups(possibleEmptyGroups, details) {\n        // we do this multiple times, as when we remove groups, that means the parent of just removed\n        // group can then be empty. to get around this, if we remove, then we check everything again for\n        // newly emptied groups. the max number of times this will execute is the depth of the group tree.\n        let checkAgain = true;\n        const groupShouldBeRemoved = (rowNode) => {\n            // because of the while loop below, it's possible we already moved the node,\n            // so double check before trying to remove again.\n            const mapKey = this.getChildrenMappedKey(rowNode.key, rowNode.rowGroupColumn);\n            const parentRowNode = rowNode.parent;\n            const groupAlreadyRemoved = (parentRowNode && parentRowNode.childrenMapped) ?\n                !parentRowNode.childrenMapped[mapKey] : true;\n            if (groupAlreadyRemoved) {\n                // if not linked, then group was already removed\n                return false;\n            }\n            // if still not removed, then we remove if this group is empty\n            return !!rowNode.isEmptyRowGroupNode();\n        };\n        while (checkAgain) {\n            checkAgain = false;\n            const batchRemover = new BatchRemover();\n            possibleEmptyGroups.forEach(possibleEmptyGroup => {\n                // remove empty groups\n                this.forEachParentGroup(details, possibleEmptyGroup, rowNode => {\n                    if (groupShouldBeRemoved(rowNode)) {\n                        checkAgain = true;\n                        this.removeFromParent(rowNode, batchRemover);\n                        // we remove selection on filler nodes here, as the selection would not be removed\n                        // from the RowNodeManager, as filler nodes don't exist on the RowNodeManager\n                        rowNode.setSelectedParams({ newValue: false, source: 'rowGroupChanged' });\n                    }\n                });\n            });\n            batchRemover.flush();\n        }\n    }\n    // removes the node from the parent by:\n    // a) removing from childrenAfterGroup (using batchRemover if present, otherwise immediately)\n    // b) removing from childrenMapped (immediately)\n    // c) setRowTop(null) - as the rowRenderer uses this to know the RowNode is no longer needed\n    // d) setRowIndex(null) - as the rowNode will no longer be displayed.\n    removeFromParent(child, batchRemover) {\n        if (child.parent) {\n            if (batchRemover) {\n                batchRemover.removeFromChildrenAfterGroup(child.parent, child);\n            }\n            else {\n                ag_grid_community__WEBPACK_IMPORTED_MODULE_0__._.removeFromArray(child.parent.childrenAfterGroup, child);\n                child.parent.updateHasChildren();\n            }\n        }\n        const mapKey = this.getChildrenMappedKey(child.key, child.rowGroupColumn);\n        if (child.parent && child.parent.childrenMapped) {\n            child.parent.childrenMapped[mapKey] = undefined;\n        }\n        // this is important for transition, see rowComp removeFirstPassFuncs. when doing animation and\n        // remove, if rowTop is still present, the rowComp thinks it's just moved position.\n        child.setRowTop(null);\n        child.setRowIndex(null);\n    }\n    addToParent(child, parent) {\n        const mapKey = this.getChildrenMappedKey(child.key, child.rowGroupColumn);\n        if (parent) {\n            const children = parent.childrenMapped != null;\n            if (children) {\n                parent.childrenMapped[mapKey] = child;\n            }\n            parent.childrenAfterGroup.push(child);\n            parent.updateHasChildren();\n        }\n    }\n    areGroupColsEqual(d1, d2) {\n        if (d1 == null || d2 == null || d1.pivotMode !== d2.pivotMode) {\n            return false;\n        }\n        return ag_grid_community__WEBPACK_IMPORTED_MODULE_0__._.areEqual(d1.groupedCols, d2.groupedCols);\n    }\n    checkAllGroupDataAfterColsChanged(details) {\n        const recurse = (rowNodes) => {\n            if (!rowNodes) {\n                return;\n            }\n            rowNodes.forEach(rowNode => {\n                const isLeafNode = !this.usingTreeData && !rowNode.group;\n                if (isLeafNode) {\n                    return;\n                }\n                const groupInfo = {\n                    field: rowNode.field,\n                    key: rowNode.key,\n                    rowGroupColumn: rowNode.rowGroupColumn\n                };\n                this.setGroupData(rowNode, groupInfo);\n                recurse(rowNode.childrenAfterGroup);\n            });\n        };\n        recurse(details.rootNode.childrenAfterGroup);\n    }\n    shotgunResetEverything(details, afterColumnsChanged) {\n        if (this.noChangeInGroupingColumns(details, afterColumnsChanged)) {\n            return;\n        }\n        // groups are about to get disposed, so need to deselect any that are selected\n        this.selectionService.filterFromSelection((node) => node && !node.group);\n        const { rootNode, groupedCols } = details;\n        // because we are not creating the root node each time, we have the logic\n        // here to change leafGroup once.\n        // we set .leafGroup to false for tree data, as .leafGroup is only used when pivoting, and pivoting\n        // isn't allowed with treeData, so the grid never actually use .leafGroup when doing treeData.\n        rootNode.leafGroup = this.usingTreeData ? false : groupedCols.length === 0;\n        // we are doing everything from scratch, so reset childrenAfterGroup and childrenMapped from the rootNode\n        rootNode.childrenAfterGroup = [];\n        rootNode.childrenMapped = {};\n        rootNode.updateHasChildren();\n        const sibling = rootNode.sibling;\n        if (sibling) {\n            sibling.childrenAfterGroup = rootNode.childrenAfterGroup;\n            sibling.childrenMapped = rootNode.childrenMapped;\n        }\n        this.insertNodes(rootNode.allLeafChildren, details, false);\n    }\n    noChangeInGroupingColumns(details, afterColumnsChanged) {\n        let noFurtherProcessingNeeded = false;\n        const groupDisplayColumns = this.columnModel.getGroupDisplayColumns();\n        const newGroupDisplayColIds = groupDisplayColumns ?\n            groupDisplayColumns.map(c => c.getId()).join('-') : '';\n        if (afterColumnsChanged) {\n            // we only need to redo grouping if doing normal grouping (ie not tree data)\n            // and the group cols have changed.\n            noFurtherProcessingNeeded = this.usingTreeData || this.areGroupColsEqual(details, this.oldGroupingDetails);\n            // if the group display cols have changed, then we need to update rowNode.groupData\n            // (regardless of tree data or row grouping)\n            if (this.oldGroupDisplayColIds !== newGroupDisplayColIds) {\n                this.checkAllGroupDataAfterColsChanged(details);\n            }\n        }\n        this.oldGroupingDetails = details;\n        this.oldGroupDisplayColIds = newGroupDisplayColIds;\n        return noFurtherProcessingNeeded;\n    }\n    insertNodes(newRowNodes, details, isMove) {\n        newRowNodes.forEach(rowNode => {\n            this.insertOneNode(rowNode, details, isMove);\n            if (details.changedPath.isActive()) {\n                details.changedPath.addParentNode(rowNode.parent);\n            }\n        });\n    }\n    insertOneNode(childNode, details, isMove, batchRemover) {\n        const path = this.getGroupInfo(childNode, details);\n        const parentGroup = this.findParentForNode(childNode, path, details, batchRemover);\n        if (!parentGroup.group) {\n            console.warn(`AG Grid: duplicate group keys for row data, keys should be unique`, [parentGroup.data, childNode.data]);\n        }\n        if (this.usingTreeData) {\n            this.swapGroupWithUserNode(parentGroup, childNode, isMove);\n        }\n        else {\n            childNode.parent = parentGroup;\n            childNode.level = path.length;\n            parentGroup.childrenAfterGroup.push(childNode);\n            parentGroup.updateHasChildren();\n        }\n    }\n    findParentForNode(childNode, path, details, batchRemover) {\n        let nextNode = details.rootNode;\n        path.forEach((groupInfo, level) => {\n            nextNode = this.getOrCreateNextNode(nextNode, groupInfo, level, details);\n            // node gets added to all group nodes.\n            // note: we do not add to rootNode here, as the rootNode is the master list of rowNodes\n            if (!(batchRemover === null || batchRemover === void 0 ? void 0 : batchRemover.isRemoveFromAllLeafChildren(nextNode, childNode))) {\n                nextNode.allLeafChildren.push(childNode);\n            }\n            else {\n                // if this node is about to be removed, prevent that\n                batchRemover === null || batchRemover === void 0 ? void 0 : batchRemover.preventRemoveFromAllLeafChildren(nextNode, childNode);\n            }\n        });\n        return nextNode;\n    }\n    swapGroupWithUserNode(fillerGroup, userGroup, isMove) {\n        userGroup.parent = fillerGroup.parent;\n        userGroup.key = fillerGroup.key;\n        userGroup.field = fillerGroup.field;\n        userGroup.groupData = fillerGroup.groupData;\n        userGroup.level = fillerGroup.level;\n        // AG-3441 - preserve the existing expanded status of the node if we're moving it, so that\n        // you can drag a sub tree from one parent to another without changing its expansion\n        if (!isMove) {\n            userGroup.expanded = fillerGroup.expanded;\n        }\n        // we set .leafGroup to false for tree data, as .leafGroup is only used when pivoting, and pivoting\n        // isn't allowed with treeData, so the grid never actually use .leafGroup when doing treeData.\n        userGroup.leafGroup = fillerGroup.leafGroup;\n        // always null for userGroups, as row grouping is not allowed when doing tree data\n        userGroup.rowGroupIndex = fillerGroup.rowGroupIndex;\n        userGroup.allLeafChildren = fillerGroup.allLeafChildren;\n        userGroup.childrenAfterGroup = fillerGroup.childrenAfterGroup;\n        userGroup.childrenMapped = fillerGroup.childrenMapped;\n        userGroup.sibling = fillerGroup.sibling;\n        userGroup.updateHasChildren();\n        this.removeFromParent(fillerGroup);\n        userGroup.childrenAfterGroup.forEach((rowNode) => rowNode.parent = userGroup);\n        this.addToParent(userGroup, fillerGroup.parent);\n    }\n    getOrCreateNextNode(parentGroup, groupInfo, level, details) {\n        const key = this.getChildrenMappedKey(groupInfo.key, groupInfo.rowGroupColumn);\n        let nextNode = parentGroup.childrenMapped ? parentGroup.childrenMapped[key] : undefined;\n        if (!nextNode) {\n            nextNode = this.createGroup(groupInfo, parentGroup, level, details);\n            // attach the new group to the parent\n            this.addToParent(nextNode, parentGroup);\n        }\n        return nextNode;\n    }\n    createGroup(groupInfo, parent, level, details) {\n        const groupNode = new ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.RowNode(this.beans);\n        groupNode.group = true;\n        groupNode.field = groupInfo.field;\n        groupNode.rowGroupColumn = groupInfo.rowGroupColumn;\n        this.setGroupData(groupNode, groupInfo);\n        // we put 'row-group-' before the group id, so it doesn't clash with standard row id's. we also use 't-' and 'b-'\n        // for top pinned and bottom pinned rows.\n        groupNode.id = ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.RowNode.ID_PREFIX_ROW_GROUP + this.groupIdSequence.next();\n        groupNode.key = groupInfo.key;\n        groupNode.level = level;\n        groupNode.leafGroup = this.usingTreeData ? false : level === (details.groupedColCount - 1);\n        groupNode.allLeafChildren = [];\n        // why is this done here? we are not updating the children count as we go,\n        // i suspect this is updated in the filter stage\n        groupNode.setAllChildrenCount(0);\n        groupNode.rowGroupIndex = this.usingTreeData ? null : level;\n        groupNode.childrenAfterGroup = [];\n        groupNode.childrenMapped = {};\n        groupNode.updateHasChildren();\n        groupNode.parent = details.includeParents ? parent : null;\n        this.setExpandedInitialValue(details, groupNode);\n        if (this.gridOptionsService.is('groupIncludeFooter')) {\n            groupNode.createFooter();\n        }\n        return groupNode;\n    }\n    setGroupData(groupNode, groupInfo) {\n        groupNode.groupData = {};\n        const groupDisplayCols = this.columnModel.getGroupDisplayColumns();\n        groupDisplayCols.forEach(col => {\n            // newGroup.rowGroupColumn=null when working off GroupInfo, and we always display the group in the group column\n            // if rowGroupColumn is present, then it's grid row grouping and we only include if configuration says so\n            const displayGroupForCol = this.usingTreeData || (groupNode.rowGroupColumn ? col.isRowGroupDisplayed(groupNode.rowGroupColumn.getId()) : false);\n            if (displayGroupForCol) {\n                groupNode.groupData[col.getColId()] = groupInfo.key;\n            }\n        });\n    }\n    getChildrenMappedKey(key, rowGroupColumn) {\n        if (rowGroupColumn) {\n            // grouping by columns\n            return rowGroupColumn.getId() + '-' + key;\n        }\n        // tree data - we don't have rowGroupColumns\n        return key;\n    }\n    setExpandedInitialValue(details, groupNode) {\n        // if pivoting the leaf group is never expanded as we do not show leaf rows\n        if (details.pivotMode && groupNode.leafGroup) {\n            groupNode.expanded = false;\n            return;\n        }\n        // use callback if exists\n        const userCallback = this.gridOptionsService.getCallback('isGroupOpenByDefault');\n        if (userCallback) {\n            const params = {\n                rowNode: groupNode,\n                field: groupNode.field,\n                key: groupNode.key,\n                level: groupNode.level,\n                rowGroupColumn: groupNode.rowGroupColumn\n            };\n            groupNode.expanded = userCallback(params) == true;\n            return;\n        }\n        // use expandByDefault if exists\n        const { expandByDefault } = details;\n        if (details.expandByDefault === -1) {\n            groupNode.expanded = true;\n            return;\n        }\n        // otherwise\n        groupNode.expanded = groupNode.level < expandByDefault;\n    }\n    getGroupInfo(rowNode, details) {\n        if (this.usingTreeData) {\n            return this.getGroupInfoFromCallback(rowNode);\n        }\n        return this.getGroupInfoFromGroupColumns(rowNode, details);\n    }\n    getGroupInfoFromCallback(rowNode) {\n        const keys = this.getDataPath ? this.getDataPath(rowNode.data) : null;\n        if (keys === null || keys === undefined || keys.length === 0) {\n            ag_grid_community__WEBPACK_IMPORTED_MODULE_0__._.doOnce(() => console.warn(`AG Grid: getDataPath() should not return an empty path for data`, rowNode.data), 'groupStage.getGroupInfoFromCallback');\n        }\n        const groupInfoMapper = (key) => ({ key, field: null, rowGroupColumn: null });\n        return keys ? keys.map(groupInfoMapper) : [];\n    }\n    getGroupInfoFromGroupColumns(rowNode, details) {\n        const res = [];\n        details.groupedCols.forEach(groupCol => {\n            let key = this.valueService.getKeyForNode(groupCol, rowNode);\n            let keyExists = key !== null && key !== undefined && key !== '';\n            // unbalanced tree and pivot mode don't work together - not because of the grid, it doesn't make\n            // mathematical sense as you are building up a cube. so if pivot mode, we put in a blank key where missing.\n            // this keeps the tree balanced and hence can be represented as a group.\n            const createGroupForEmpty = details.pivotMode || !this.gridOptionsService.is('groupAllowUnbalanced');\n            if (createGroupForEmpty && !keyExists) {\n                key = '';\n                keyExists = true;\n            }\n            if (keyExists) {\n                const item = {\n                    key: key,\n                    field: groupCol.getColDef().field,\n                    rowGroupColumn: groupCol\n                };\n                res.push(item);\n            }\n        });\n        return res;\n    }\n};\n__decorate$2n([\n    (0,ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.Autowired)('columnModel')\n], GroupStage.prototype, \"columnModel\", void 0);\n__decorate$2n([\n    (0,ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.Autowired)('selectableService')\n], GroupStage.prototype, \"selectableService\", void 0);\n__decorate$2n([\n    (0,ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.Autowired)('valueService')\n], GroupStage.prototype, \"valueService\", void 0);\n__decorate$2n([\n    (0,ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.Autowired)('beans')\n], GroupStage.prototype, \"beans\", void 0);\n__decorate$2n([\n    (0,ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.Autowired)('selectionService')\n], GroupStage.prototype, \"selectionService\", void 0);\n__decorate$2n([\n    ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.PostConstruct\n], GroupStage.prototype, \"postConstruct\", null);\nGroupStage = __decorate$2n([\n    (0,ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.Bean)('groupStage')\n], GroupStage);\n\nvar __decorate$2m = ( false) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nvar PivotColDefService_1;\nlet PivotColDefService = PivotColDefService_1 = class PivotColDefService extends ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.BeanStub {\n    createPivotColumnDefs(uniqueValues) {\n        // this is passed to the columnModel, to configure the columns and groups we show\n        const pivotColumns = this.columnModel.getPivotColumns();\n        const valueColumns = this.columnModel.getValueColumns();\n        const levelsDeep = pivotColumns.length;\n        const pivotColumnGroupDefs = this.recursiveBuildGroup(0, uniqueValues, [], levelsDeep, pivotColumns);\n        function extractColDefs(input, arr = []) {\n            input.forEach((def) => {\n                if (def.children !== undefined) {\n                    extractColDefs(def.children, arr);\n                }\n                else {\n                    arr.push(def);\n                }\n            });\n            return arr;\n        }\n        const pivotColumnDefs = extractColDefs(pivotColumnGroupDefs);\n        // additional columns that contain the aggregated total for each value column per row\n        this.addRowGroupTotals(pivotColumnGroupDefs, pivotColumnDefs, valueColumns);\n        // additional group columns that contain child totals for each collapsed child column / group\n        this.addExpandablePivotGroups(pivotColumnGroupDefs, pivotColumnDefs);\n        // additional group columns that contain an aggregated total across all child columns\n        this.addPivotTotalsToGroups(pivotColumnGroupDefs, pivotColumnDefs);\n        // we clone, so the colDefs in pivotColumnsGroupDefs and pivotColumnDefs are not shared. this is so that\n        // any changes the user makes (via processSecondaryColumnDefinitions) don't impact the internal aggregations,\n        // as these use the col defs also\n        const pivotColumnDefsClone = pivotColumnDefs.map(colDef => ag_grid_community__WEBPACK_IMPORTED_MODULE_0__._.cloneObject(colDef));\n        return {\n            pivotColumnGroupDefs: pivotColumnGroupDefs,\n            pivotColumnDefs: pivotColumnDefsClone\n        };\n    }\n    recursiveBuildGroup(index, uniqueValue, pivotKeys, maxDepth, primaryPivotColumns) {\n        const measureColumns = this.columnModel.getValueColumns();\n        if (index >= maxDepth) { // Base case - build the measure columns\n            return this.buildMeasureCols(pivotKeys);\n        }\n        // sort by either user provided comparator, or our own one\n        const primaryPivotColumnDefs = primaryPivotColumns[index].getColDef();\n        const comparator = this.headerNameComparator.bind(this, primaryPivotColumnDefs.pivotComparator);\n        // Base case for the compact layout, instead of recursing build the last layer of groups as measure columns instead\n        if (measureColumns.length === 1 && this.gridOptionsService.is('removePivotHeaderRowWhenSingleValueColumn') && index === maxDepth - 1) {\n            const leafCols = [];\n            ag_grid_community__WEBPACK_IMPORTED_MODULE_0__._.iterateObject(uniqueValue, (key) => {\n                const newPivotKeys = [...pivotKeys, key];\n                leafCols.push(Object.assign(Object.assign({}, this.createColDef(measureColumns[0], key, newPivotKeys)), { columnGroupShow: 'open' }));\n            });\n            leafCols.sort(comparator);\n            return leafCols;\n        }\n        // Recursive case\n        const groups = [];\n        ag_grid_community__WEBPACK_IMPORTED_MODULE_0__._.iterateObject(uniqueValue, (key, value) => {\n            const newPivotKeys = [...pivotKeys, key];\n            groups.push({\n                children: this.recursiveBuildGroup(index + 1, value, newPivotKeys, maxDepth, primaryPivotColumns),\n                headerName: key,\n                pivotKeys: newPivotKeys,\n                columnGroupShow: 'open',\n                groupId: this.generateColumnGroupId(newPivotKeys),\n            });\n        });\n        groups.sort(comparator);\n        return groups;\n    }\n    buildMeasureCols(pivotKeys) {\n        const measureColumns = this.columnModel.getValueColumns();\n        if (measureColumns.length === 0) {\n            // if no value columns selected, then we insert one blank column, so the user at least sees columns\n            // rendered. otherwise the grid would render with no columns (just empty groups) which would give the\n            // impression that the grid is broken\n            return [this.createColDef(null, '-', pivotKeys)];\n        }\n        return measureColumns.map((measureCol) => {\n            const columnName = this.columnModel.getDisplayNameForColumn(measureCol, 'header');\n            return Object.assign(Object.assign({}, this.createColDef(measureCol, columnName, pivotKeys)), { columnGroupShow: 'open' });\n        });\n    }\n    ;\n    addExpandablePivotGroups(pivotColumnGroupDefs, pivotColumnDefs) {\n        if (this.gridOptionsService.is('suppressExpandablePivotGroups') ||\n            this.gridOptionsService.get('pivotColumnGroupTotals')) {\n            return;\n        }\n        const recursivelyAddSubTotals = (groupDef, currentPivotColumnDefs, acc) => {\n            const group = groupDef;\n            if (group.children) {\n                const childAcc = new Map();\n                group.children.forEach((grp) => {\n                    recursivelyAddSubTotals(grp, currentPivotColumnDefs, childAcc);\n                });\n                const firstGroup = !group.children.some(child => child.children);\n                this.columnModel.getValueColumns().forEach(valueColumn => {\n                    const columnName = this.columnModel.getDisplayNameForColumn(valueColumn, 'header');\n                    const totalColDef = this.createColDef(valueColumn, columnName, groupDef.pivotKeys);\n                    totalColDef.pivotTotalColumnIds = childAcc.get(valueColumn.getColId());\n                    totalColDef.columnGroupShow = 'closed';\n                    totalColDef.aggFunc = valueColumn.getAggFunc();\n                    if (!firstGroup) {\n                        // add total colDef to group and pivot colDefs array\n                        const children = groupDef.children;\n                        children.push(totalColDef);\n                        currentPivotColumnDefs.push(totalColDef);\n                    }\n                });\n                this.merge(acc, childAcc);\n            }\n            else {\n                const def = groupDef;\n                // check that value column exists, i.e. aggFunc is supplied\n                if (!def.pivotValueColumn) {\n                    return;\n                }\n                const pivotValueColId = def.pivotValueColumn.getColId();\n                const arr = acc.has(pivotValueColId) ? acc.get(pivotValueColId) : [];\n                arr.push(def.colId);\n                acc.set(pivotValueColId, arr);\n            }\n        };\n        pivotColumnGroupDefs.forEach((groupDef) => {\n            recursivelyAddSubTotals(groupDef, pivotColumnDefs, new Map());\n        });\n    }\n    addPivotTotalsToGroups(pivotColumnGroupDefs, pivotColumnDefs) {\n        if (!this.gridOptionsService.get('pivotColumnGroupTotals')) {\n            return;\n        }\n        const insertAfter = this.gridOptionsService.get('pivotColumnGroupTotals') === 'after';\n        const valueCols = this.columnModel.getValueColumns();\n        const aggFuncs = valueCols.map(valueCol => valueCol.getAggFunc());\n        // don't add pivot totals if there is less than 1 aggFunc or they are not all the same\n        if (!aggFuncs || aggFuncs.length < 1 || !this.sameAggFuncs(aggFuncs)) {\n            // console.warn('AG Grid: aborting adding pivot total columns - value columns require same aggFunc');\n            return;\n        }\n        // arbitrarily select a value column to use as a template for pivot columns\n        const valueColumn = valueCols[0];\n        pivotColumnGroupDefs.forEach((groupDef) => {\n            this.recursivelyAddPivotTotal(groupDef, pivotColumnDefs, valueColumn, insertAfter);\n        });\n    }\n    recursivelyAddPivotTotal(groupDef, pivotColumnDefs, valueColumn, insertAfter) {\n        const group = groupDef;\n        if (!group.children) {\n            const def = groupDef;\n            return def.colId ? [def.colId] : null;\n        }\n        let colIds = [];\n        // need to recurse children first to obtain colIds used in the aggregation stage\n        group.children\n            .forEach((grp) => {\n            const childColIds = this.recursivelyAddPivotTotal(grp, pivotColumnDefs, valueColumn, insertAfter);\n            if (childColIds) {\n                colIds = colIds.concat(childColIds);\n            }\n        });\n        // only add total colDef if there is more than 1 child node\n        if (group.children.length > 1) {\n            const localeTextFunc = this.localeService.getLocaleTextFunc();\n            const headerName = localeTextFunc('pivotColumnGroupTotals', 'Total');\n            //create total colDef using an arbitrary value column as a template\n            const totalColDef = this.createColDef(valueColumn, headerName, groupDef.pivotKeys, true);\n            totalColDef.pivotTotalColumnIds = colIds;\n            totalColDef.aggFunc = valueColumn.getAggFunc();\n            // add total colDef to group and pivot colDefs array\n            const children = groupDef.children;\n            insertAfter ? children.push(totalColDef) : children.unshift(totalColDef);\n            pivotColumnDefs.push(totalColDef);\n        }\n        return colIds;\n    }\n    addRowGroupTotals(pivotColumnGroupDefs, pivotColumnDefs, valueColumns) {\n        if (!this.gridOptionsService.get('pivotRowTotals')) {\n            return;\n        }\n        const insertAfter = this.gridOptionsService.get('pivotRowTotals') === 'after';\n        // order of row group totals depends on position\n        const valueCols = insertAfter ? valueColumns.slice() : valueColumns.slice().reverse();\n        for (let i = 0; i < valueCols.length; i++) {\n            const valueCol = valueCols[i];\n            let colIds = [];\n            pivotColumnGroupDefs.forEach((groupDef) => {\n                colIds = colIds.concat(this.extractColIdsForValueColumn(groupDef, valueCol));\n            });\n            const withGroup = valueCols.length > 1 || !this.gridOptionsService.is('removePivotHeaderRowWhenSingleValueColumn');\n            this.createRowGroupTotal(pivotColumnGroupDefs, pivotColumnDefs, valueCol, colIds, insertAfter, withGroup);\n        }\n    }\n    extractColIdsForValueColumn(groupDef, valueColumn) {\n        const group = groupDef;\n        if (!group.children) {\n            const colDef = group;\n            return colDef.pivotValueColumn === valueColumn && colDef.colId ? [colDef.colId] : [];\n        }\n        let colIds = [];\n        group.children\n            .forEach((grp) => {\n            this.extractColIdsForValueColumn(grp, valueColumn);\n            const childColIds = this.extractColIdsForValueColumn(grp, valueColumn);\n            colIds = colIds.concat(childColIds);\n        });\n        return colIds;\n    }\n    createRowGroupTotal(parentChildren, pivotColumnDefs, valueColumn, colIds, insertAfter, addGroup) {\n        const measureColumns = this.columnModel.getValueColumns();\n        let colDef;\n        if (measureColumns.length === 0) {\n            colDef = this.createColDef(null, '-', []);\n        }\n        else {\n            const columnName = this.columnModel.getDisplayNameForColumn(valueColumn, 'header');\n            colDef = this.createColDef(valueColumn, columnName, []);\n            colDef.pivotTotalColumnIds = colIds;\n        }\n        colDef.colId = PivotColDefService_1.PIVOT_ROW_TOTAL_PREFIX + colDef.colId;\n        pivotColumnDefs.push(colDef);\n        const valueGroup = addGroup ? {\n            children: [colDef],\n            pivotKeys: [],\n            groupId: `${PivotColDefService_1.PIVOT_ROW_TOTAL_PREFIX}_pivotGroup_${valueColumn.getColId()}`,\n        } : colDef;\n        insertAfter ? parentChildren.push(valueGroup) : parentChildren.unshift(valueGroup);\n    }\n    createColDef(valueColumn, headerName, pivotKeys, totalColumn = false) {\n        const colDef = {};\n        // This is null when there are no measure columns and we're creating placeholder columns\n        if (valueColumn) {\n            const colDefToCopy = valueColumn.getColDef();\n            Object.assign(colDef, colDefToCopy);\n            // even if original column was hidden, we always show the pivot value column, otherwise it would be\n            // very confusing for people thinking the pivot is broken\n            colDef.hide = false;\n        }\n        colDef.headerName = headerName;\n        colDef.colId = this.generateColumnId(pivotKeys || [], valueColumn && !totalColumn ? valueColumn.getColId() : '');\n        // pivot columns repeat over field, so it makes sense to use the unique id instead. For example if you want to\n        // assign values to pinned bottom rows using setPinnedBottomRowData the value service will use this colId.\n        colDef.field = colDef.colId;\n        // this is to support using pinned rows, normally the data will be extracted from the aggData object using the colId\n        // however pinned rows still access the data object by field, this prevents values with dots from being treated as complex objects\n        colDef.valueGetter = (params) => { var _a; return (_a = params.data) === null || _a === void 0 ? void 0 : _a[params.colDef.field]; };\n        colDef.pivotKeys = pivotKeys;\n        colDef.pivotValueColumn = valueColumn;\n        if (colDef.filter === true) {\n            colDef.filter = 'agNumberColumnFilter';\n        }\n        return colDef;\n    }\n    sameAggFuncs(aggFuncs) {\n        if (aggFuncs.length == 1) {\n            return true;\n        }\n        //check if all aggFunc's match\n        for (let i = 1; i < aggFuncs.length; i++) {\n            if (aggFuncs[i] !== aggFuncs[0]) {\n                return false;\n            }\n        }\n        return true;\n    }\n    headerNameComparator(userComparator, a, b) {\n        if (userComparator) {\n            return userComparator(a.headerName, b.headerName);\n        }\n        else {\n            if (a.headerName && !b.headerName) {\n                return 1;\n            }\n            else if (!a.headerName && b.headerName) {\n                return -1;\n            }\n            // slightly naff here - just to satify typescript\n            // really should be &&, but if so ts complains\n            // the above if/else checks would deal with either being falsy, so at this stage if either are falsy, both are\n            // ..still naff though\n            if (!a.headerName || !b.headerName) {\n                return 0;\n            }\n            if (a.headerName < b.headerName) {\n                return -1;\n            }\n            if (a.headerName > b.headerName) {\n                return 1;\n            }\n            return 0;\n        }\n    }\n    merge(m1, m2) {\n        m2.forEach((value, key, map) => {\n            const existingList = m1.has(key) ? m1.get(key) : [];\n            const updatedList = [...existingList, ...value];\n            m1.set(key, updatedList);\n        });\n    }\n    generateColumnGroupId(pivotKeys) {\n        const pivotCols = this.columnModel.getPivotColumns().map((col) => col.getColId());\n        return `pivotGroup_${pivotCols.join('-')}_${pivotKeys.join('-')}`;\n    }\n    generateColumnId(pivotKeys, measureColumnId) {\n        const pivotCols = this.columnModel.getPivotColumns().map((col) => col.getColId());\n        return `pivot_${pivotCols.join('-')}_${pivotKeys.join('-')}_${measureColumnId}`;\n    }\n};\nPivotColDefService.PIVOT_ROW_TOTAL_PREFIX = 'PivotRowTotal_';\n__decorate$2m([\n    (0,ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.Autowired)('columnModel')\n], PivotColDefService.prototype, \"columnModel\", void 0);\nPivotColDefService = PivotColDefService_1 = __decorate$2m([\n    (0,ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.Bean)('pivotColDefService')\n], PivotColDefService);\n\nvar __decorate$2l = ( false) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nlet PivotStage = class PivotStage extends ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.BeanStub {\n    constructor() {\n        super(...arguments);\n        this.uniqueValues = {};\n    }\n    execute(params) {\n        const changedPath = params.changedPath;\n        if (this.columnModel.isPivotActive()) {\n            this.executePivotOn(changedPath);\n        }\n        else {\n            this.executePivotOff(changedPath);\n        }\n    }\n    executePivotOff(changedPath) {\n        this.aggregationColumnsHashLastTime = null;\n        this.uniqueValues = {};\n        if (this.columnModel.isSecondaryColumnsPresent()) {\n            this.columnModel.setSecondaryColumns(null, \"rowModelUpdated\");\n            if (changedPath) {\n                changedPath.setInactive();\n            }\n        }\n    }\n    executePivotOn(changedPath) {\n        const uniqueValues = this.bucketUpRowNodes(changedPath);\n        const uniqueValuesChanged = this.setUniqueValues(uniqueValues);\n        const aggregationColumns = this.columnModel.getValueColumns();\n        const aggregationColumnsHash = aggregationColumns.map((column) => `${column.getId()}-${column.getColDef().headerName}`).join('#');\n        const aggregationFuncsHash = aggregationColumns.map((column) => column.getAggFunc().toString()).join('#');\n        const aggregationColumnsChanged = this.aggregationColumnsHashLastTime !== aggregationColumnsHash;\n        const aggregationFuncsChanged = this.aggregationFuncsHashLastTime !== aggregationFuncsHash;\n        this.aggregationColumnsHashLastTime = aggregationColumnsHash;\n        this.aggregationFuncsHashLastTime = aggregationFuncsHash;\n        const groupColumnsHash = this.columnModel.getRowGroupColumns().map((column) => column.getId()).join('#');\n        const groupColumnsChanged = groupColumnsHash !== this.groupColumnsHashLastTime;\n        this.groupColumnsHashLastTime = groupColumnsHash;\n        if (uniqueValuesChanged || aggregationColumnsChanged || groupColumnsChanged || aggregationFuncsChanged) {\n            const { pivotColumnGroupDefs, pivotColumnDefs } = this.pivotColDefService.createPivotColumnDefs(this.uniqueValues);\n            this.pivotColumnDefs = pivotColumnDefs;\n            this.columnModel.setSecondaryColumns(pivotColumnGroupDefs, \"rowModelUpdated\");\n            // because the secondary columns have changed, then the aggregation needs to visit the whole\n            // tree again, so we make the changedPath not active, to force aggregation to visit all paths.\n            if (changedPath) {\n                changedPath.setInactive();\n            }\n        }\n    }\n    setUniqueValues(newValues) {\n        const json1 = JSON.stringify(newValues);\n        const json2 = JSON.stringify(this.uniqueValues);\n        const uniqueValuesChanged = json1 !== json2;\n        // we only continue the below if the unique values are different, as otherwise\n        // the result will be the same as the last time we did it\n        if (uniqueValuesChanged) {\n            this.uniqueValues = newValues;\n            return true;\n        }\n        else {\n            return false;\n        }\n    }\n    bucketUpRowNodes(changedPath) {\n        // accessed from inside inner function\n        const uniqueValues = {};\n        // ensure childrenMapped is cleared, as if a node has been filtered out it should not have mapped children.\n        changedPath.forEachChangedNodeDepthFirst(node => {\n            if (node.leafGroup) {\n                node.childrenMapped = null;\n            }\n        });\n        const recursivelyBucketFilteredChildren = (node) => {\n            var _a;\n            if (node.leafGroup) {\n                this.bucketRowNode(node, uniqueValues);\n            }\n            else {\n                (_a = node.childrenAfterFilter) === null || _a === void 0 ? void 0 : _a.forEach(recursivelyBucketFilteredChildren);\n            }\n        };\n        changedPath.executeFromRootNode(recursivelyBucketFilteredChildren);\n        return uniqueValues;\n    }\n    bucketRowNode(rowNode, uniqueValues) {\n        const pivotColumns = this.columnModel.getPivotColumns();\n        if (pivotColumns.length === 0) {\n            rowNode.childrenMapped = null;\n        }\n        else {\n            rowNode.childrenMapped = this.bucketChildren(rowNode.childrenAfterFilter, pivotColumns, 0, uniqueValues);\n        }\n        if (rowNode.sibling) {\n            rowNode.sibling.childrenMapped = rowNode.childrenMapped;\n        }\n    }\n    bucketChildren(children, pivotColumns, pivotIndex, uniqueValues) {\n        const mappedChildren = {};\n        const pivotColumn = pivotColumns[pivotIndex];\n        // map the children out based on the pivot column\n        children.forEach((child) => {\n            let key = this.valueService.getKeyForNode(pivotColumn, child);\n            if (ag_grid_community__WEBPACK_IMPORTED_MODULE_0__._.missing(key)) {\n                key = '';\n            }\n            if (!uniqueValues[key]) {\n                uniqueValues[key] = {};\n            }\n            if (!mappedChildren[key]) {\n                mappedChildren[key] = [];\n            }\n            mappedChildren[key].push(child);\n        });\n        // if it's the last pivot column, return as is, otherwise go one level further in the map\n        if (pivotIndex === pivotColumns.length - 1) {\n            return mappedChildren;\n        }\n        else {\n            const result = {};\n            ag_grid_community__WEBPACK_IMPORTED_MODULE_0__._.iterateObject(mappedChildren, (key, value) => {\n                result[key] = this.bucketChildren(value, pivotColumns, pivotIndex + 1, uniqueValues[key]);\n            });\n            return result;\n        }\n    }\n    getPivotColumnDefs() {\n        return this.pivotColumnDefs;\n    }\n};\n__decorate$2l([\n    (0,ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.Autowired)('valueService')\n], PivotStage.prototype, \"valueService\", void 0);\n__decorate$2l([\n    (0,ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.Autowired)('columnModel')\n], PivotStage.prototype, \"columnModel\", void 0);\n__decorate$2l([\n    (0,ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.Autowired)('pivotColDefService')\n], PivotStage.prototype, \"pivotColDefService\", void 0);\nPivotStage = __decorate$2l([\n    (0,ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.Bean)('pivotStage')\n], PivotStage);\n\nvar __decorate$2k = ( false) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nvar AggFuncService_1;\n// @ts-ignore\nconst AGBigInt = typeof BigInt === 'undefined' ? null : BigInt;\nlet AggFuncService = AggFuncService_1 = class AggFuncService extends ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.BeanStub {\n    constructor() {\n        super(...arguments);\n        this.aggFuncsMap = {};\n        this.initialised = false;\n    }\n    init() {\n        if (this.initialised) {\n            return;\n        }\n        this.initialiseWithDefaultAggregations();\n        this.addAggFuncs(this.gridOptionsService.get('aggFuncs'));\n    }\n    initialiseWithDefaultAggregations() {\n        this.aggFuncsMap[AggFuncService_1.AGG_SUM] = aggSum;\n        this.aggFuncsMap[AggFuncService_1.AGG_FIRST] = aggFirst;\n        this.aggFuncsMap[AggFuncService_1.AGG_LAST] = aggLast;\n        this.aggFuncsMap[AggFuncService_1.AGG_MIN] = aggMin;\n        this.aggFuncsMap[AggFuncService_1.AGG_MAX] = aggMax;\n        this.aggFuncsMap[AggFuncService_1.AGG_COUNT] = aggCount;\n        this.aggFuncsMap[AggFuncService_1.AGG_AVG] = aggAvg;\n        this.initialised = true;\n    }\n    isAggFuncPossible(column, func) {\n        const allKeys = this.getFuncNames(column);\n        const allowed = ag_grid_community__WEBPACK_IMPORTED_MODULE_0__._.includes(allKeys, func);\n        const funcExists = ag_grid_community__WEBPACK_IMPORTED_MODULE_0__._.exists(this.aggFuncsMap[func]);\n        return allowed && funcExists;\n    }\n    getDefaultAggFunc(column) {\n        const defaultAgg = column.getColDef().defaultAggFunc;\n        if (ag_grid_community__WEBPACK_IMPORTED_MODULE_0__._.exists(defaultAgg) && this.isAggFuncPossible(column, defaultAgg)) {\n            return defaultAgg;\n        }\n        if (this.isAggFuncPossible(column, AggFuncService_1.AGG_SUM)) {\n            return AggFuncService_1.AGG_SUM;\n        }\n        const allKeys = this.getFuncNames(column);\n        return ag_grid_community__WEBPACK_IMPORTED_MODULE_0__._.existsAndNotEmpty(allKeys) ? allKeys[0] : null;\n    }\n    addAggFuncs(aggFuncs) {\n        ag_grid_community__WEBPACK_IMPORTED_MODULE_0__._.iterateObject(aggFuncs, this.addAggFunc.bind(this));\n    }\n    addAggFunc(key, aggFunc) {\n        this.init();\n        this.aggFuncsMap[key] = aggFunc;\n    }\n    getAggFunc(name) {\n        this.init();\n        return this.aggFuncsMap[name];\n    }\n    getFuncNames(column) {\n        const userAllowedFuncs = column.getColDef().allowedAggFuncs;\n        return userAllowedFuncs == null ? Object.keys(this.aggFuncsMap).sort() : userAllowedFuncs;\n    }\n    clear() {\n        this.aggFuncsMap = {};\n    }\n};\nAggFuncService.AGG_SUM = 'sum';\nAggFuncService.AGG_FIRST = 'first';\nAggFuncService.AGG_LAST = 'last';\nAggFuncService.AGG_MIN = 'min';\nAggFuncService.AGG_MAX = 'max';\nAggFuncService.AGG_COUNT = 'count';\nAggFuncService.AGG_AVG = 'avg';\n__decorate$2k([\n    ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.PostConstruct\n], AggFuncService.prototype, \"init\", null);\nAggFuncService = AggFuncService_1 = __decorate$2k([\n    (0,ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.Bean)('aggFuncService')\n], AggFuncService);\nfunction aggSum(params) {\n    const { values } = params;\n    let result = null; // the logic ensures that we never combine bigint arithmetic with numbers, but TS is hard to please\n    // for optimum performance, we use a for loop here rather than calling any helper methods or using functional code\n    for (let i = 0; i < values.length; i++) {\n        const value = values[i];\n        if (typeof value === 'number') {\n            if (result === null) {\n                result = value;\n            }\n            else {\n                if (AGBigInt) {\n                    result += typeof result === 'number' ? value : AGBigInt(value);\n                }\n                else {\n                    result += value;\n                }\n            }\n        }\n        else if (typeof value === 'bigint') {\n            if (result === null) {\n                result = value;\n            }\n            else {\n                result = (typeof result === 'bigint' ? result : AGBigInt(result)) + value;\n            }\n        }\n    }\n    return result;\n}\nfunction aggFirst(params) {\n    return params.values.length > 0 ? params.values[0] : null;\n}\nfunction aggLast(params) {\n    return params.values.length > 0 ? ag_grid_community__WEBPACK_IMPORTED_MODULE_0__._.last(params.values) : null;\n}\nfunction aggMin(params) {\n    const { values } = params;\n    let result = null;\n    // for optimum performance, we use a for loop here rather than calling any helper methods or using functional code\n    for (let i = 0; i < values.length; i++) {\n        const value = values[i];\n        if ((typeof value === 'number' || typeof value === 'bigint') && (result === null || result > value)) {\n            result = value;\n        }\n    }\n    return result;\n}\nfunction aggMax(params) {\n    const { values } = params;\n    let result = null;\n    // for optimum performance, we use a for loop here rather than calling any helper methods or using functional code\n    for (let i = 0; i < values.length; i++) {\n        const value = values[i];\n        if ((typeof value === 'number' || typeof value === 'bigint') && (result === null || result < value)) {\n            result = value;\n        }\n    }\n    return result;\n}\nfunction aggCount(params) {\n    const { values } = params;\n    let result = 0;\n    // for optimum performance, we use a for loop here rather than calling any helper methods or using functional code\n    for (let i = 0; i < values.length; i++) {\n        const value = values[i];\n        // check if the value is from a group, in which case use the group's count\n        result += value != null && typeof value.value === 'number' ? value.value : 1;\n    }\n    return result;\n}\n// the average function is tricky as the multiple levels require weighted averages\n// for the non-leaf node aggregations.\nfunction aggAvg(params) {\n    var _a, _b, _c;\n    const { values } = params;\n    let sum = 0; // the logic ensures that we never combine bigint arithmetic with numbers, but TS is hard to please\n    let count = 0;\n    // for optimum performance, we use a for loop here rather than calling any helper methods or using functional code\n    for (let i = 0; i < values.length; i++) {\n        const currentValue = values[i];\n        let valueToAdd = null;\n        if (typeof currentValue === 'number' || typeof currentValue === 'bigint') {\n            valueToAdd = currentValue;\n            count++;\n        }\n        else if (currentValue != null && (typeof currentValue.value === 'number' || typeof currentValue.value === 'bigint') && typeof currentValue.count === 'number') {\n            // we are aggregating groups, so we take the aggregated values to calculated a weighted average\n            if (AGBigInt) {\n                valueToAdd = currentValue.value * (typeof currentValue.value === 'number' ? currentValue.count : AGBigInt(currentValue.count));\n            }\n            else {\n                valueToAdd = currentValue.value * currentValue.count;\n            }\n            count += currentValue.count;\n        }\n        if (typeof valueToAdd === 'number') {\n            if (AGBigInt) {\n                sum += typeof sum === 'number' ? valueToAdd : AGBigInt(valueToAdd);\n            }\n            else {\n                sum += valueToAdd;\n            }\n        }\n        else if (typeof valueToAdd === 'bigint') {\n            sum = (typeof sum === 'bigint' ? sum : AGBigInt(sum)) + valueToAdd;\n        }\n    }\n    let value = null;\n    // avoid divide by zero error\n    if (count > 0) {\n        if (AGBigInt) {\n            value = sum / (typeof sum === 'number' ? count : AGBigInt(count));\n        }\n        else {\n            value = sum / count;\n        }\n    }\n    // the previous aggregation data\n    const existingAggData = (_b = (_a = params.rowNode) === null || _a === void 0 ? void 0 : _a.aggData) === null || _b === void 0 ? void 0 : _b[(_c = params.column) === null || _c === void 0 ? void 0 : _c.getColId()];\n    if (existingAggData && existingAggData.count === count && existingAggData.value === value) {\n        // the underlying values haven't changed, return the old object to avoid triggering change detection\n        return existingAggData;\n    }\n    // the result will be an object. when this cell is rendered, only the avg is shown.\n    // however when this cell is part of another aggregation, the count is also needed\n    // to create a weighted average for the next level.\n    return {\n        count,\n        value,\n        // the grid by default uses toString to render values for an object, so this\n        // is a trick to get the default cellRenderer to display the avg value\n        toString: function () {\n            return typeof this.value === 'number' || typeof this.value === 'bigint' ? this.value.toString() : '';\n        },\n        // used for sorting\n        toNumber: function () {\n            return this.value;\n        }\n    };\n}\n\nvar __decorate$2j = ( false) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nclass DropZoneColumnComp extends ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.Component {\n    constructor(column, dragSourceDropTarget, ghost, dropZonePurpose, horizontal) {\n        super();\n        this.column = column;\n        this.dragSourceDropTarget = dragSourceDropTarget;\n        this.ghost = ghost;\n        this.dropZonePurpose = dropZonePurpose;\n        this.horizontal = horizontal;\n        this.popupShowing = false;\n    }\n    init() {\n        this.setTemplate(DropZoneColumnComp.TEMPLATE);\n        const eGui = this.getGui();\n        const isFunctionsReadOnly = this.gridOptionsService.is('functionsReadOnly');\n        this.addElementClasses(eGui);\n        this.addElementClasses(this.eDragHandle, 'drag-handle');\n        this.addElementClasses(this.eText, 'text');\n        this.addElementClasses(this.eButton, 'button');\n        this.eDragHandle.appendChild(ag_grid_community__WEBPACK_IMPORTED_MODULE_0__._.createIconNoSpan('columnDrag', this.gridOptionsService));\n        this.eButton.appendChild(ag_grid_community__WEBPACK_IMPORTED_MODULE_0__._.createIconNoSpan('cancel', this.gridOptionsService));\n        this.setupSort();\n        this.displayName = this.columnModel.getDisplayNameForColumn(this.column, 'columnDrop');\n        this.setupComponents();\n        if (!this.ghost && !isFunctionsReadOnly) {\n            this.addDragSource();\n        }\n        this.setupAria();\n        this.addManagedListener(this.eventService, ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.Column.EVENT_SORT_CHANGED, () => {\n            this.setupAria();\n        });\n        this.setupTooltip();\n    }\n    setupAria() {\n        const translate = this.localeService.getLocaleTextFunc();\n        const { name, aggFuncName } = this.getColumnAndAggFuncName();\n        const aggSeparator = translate('ariaDropZoneColumnComponentAggFuncSeperator', ' of ');\n        const sortDirection = {\n            asc: translate('ariaDropZoneColumnComponentSortAscending', 'ascending'),\n            desc: translate('ariaDropZoneColumnComponentSortDescending', 'descending'),\n        };\n        const columnSort = this.column.getSort();\n        const isSortSuppressed = this.gridOptionsService.is('rowGroupPanelSuppressSort');\n        const ariaInstructions = [\n            [\n                aggFuncName && `${aggFuncName}${aggSeparator}`,\n                name,\n                this.isGroupingZone() && !isSortSuppressed && columnSort && `, ${sortDirection[columnSort]}`\n            ].filter(part => !!part).join(''),\n        ];\n        const isFunctionsReadOnly = this.gridOptionsService.is('functionsReadOnly');\n        if (this.isAggregationZone() && !isFunctionsReadOnly) {\n            const aggregationMenuAria = translate('ariaDropZoneColumnValueItemDescription', 'Press ENTER to change the aggregation type');\n            ariaInstructions.push(aggregationMenuAria);\n        }\n        if (this.isGroupingZone() && this.column.getColDef().sortable && !isSortSuppressed) {\n            const sortProgressAria = translate('ariaDropZoneColumnGroupItemDescription', 'Press ENTER to sort');\n            ariaInstructions.push(sortProgressAria);\n        }\n        const deleteAria = translate('ariaDropZoneColumnComponentDescription', 'Press DELETE to remove');\n        ariaInstructions.push(deleteAria);\n        ag_grid_community__WEBPACK_IMPORTED_MODULE_0__._.setAriaLabel(this.getGui(), ariaInstructions.join('. '));\n    }\n    setupTooltip() {\n        const refresh = () => {\n            const newTooltipText = this.column.getColDef().headerTooltip;\n            this.setTooltip(newTooltipText);\n        };\n        refresh();\n        this.addManagedListener(this.eventService, ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.Events.EVENT_NEW_COLUMNS_LOADED, refresh);\n    }\n    setupSort() {\n        const canSort = this.column.getColDef().sortable;\n        const isGroupingZone = this.isGroupingZone();\n        if (!canSort || !isGroupingZone) {\n            return;\n        }\n        if (!this.gridOptionsService.is('rowGroupPanelSuppressSort')) {\n            this.eSortIndicator.setupSort(this.column, true);\n            const performSort = (event) => {\n                event.preventDefault();\n                const sortUsingCtrl = this.gridOptionsService.get('multiSortKey') === 'ctrl';\n                const multiSort = sortUsingCtrl ? (event.ctrlKey || event.metaKey) : event.shiftKey;\n                this.sortController.progressSort(this.column, multiSort, 'uiColumnSorted');\n            };\n            this.addGuiEventListener('click', performSort);\n            this.addGuiEventListener('keydown', (e) => {\n                const isEnter = e.key === ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.KeyCode.ENTER;\n                if (isEnter && this.isGroupingZone()) {\n                    performSort(e);\n                }\n            });\n        }\n    }\n    addDragSource() {\n        const dragSource = {\n            type: ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.DragSourceType.ToolPanel,\n            eElement: this.eDragHandle,\n            defaultIconName: ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.DragAndDropService.ICON_HIDE,\n            getDragItem: () => this.createDragItem(),\n            dragItemName: this.displayName,\n            dragSourceDropTarget: this.dragSourceDropTarget\n        };\n        this.dragAndDropService.addDragSource(dragSource, true);\n        this.addDestroyFunc(() => this.dragAndDropService.removeDragSource(dragSource));\n    }\n    createDragItem() {\n        const visibleState = {};\n        visibleState[this.column.getId()] = this.column.isVisible();\n        return {\n            columns: [this.column],\n            visibleState: visibleState\n        };\n    }\n    setupComponents() {\n        this.setTextValue();\n        this.setupRemove();\n        if (this.ghost) {\n            this.addCssClass('ag-column-drop-cell-ghost');\n        }\n        if (this.isAggregationZone() && !this.gridOptionsService.is('functionsReadOnly')) {\n            this.addGuiEventListener('click', this.onShowAggFuncSelection.bind(this));\n        }\n    }\n    setupRemove() {\n        ag_grid_community__WEBPACK_IMPORTED_MODULE_0__._.setDisplayed(this.eButton, !this.gridOptionsService.is('functionsReadOnly'));\n        const agEvent = { type: DropZoneColumnComp.EVENT_COLUMN_REMOVE };\n        this.addGuiEventListener('keydown', (e) => {\n            const isEnter = e.key === ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.KeyCode.ENTER;\n            const isDelete = e.key === ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.KeyCode.DELETE;\n            if (isDelete) {\n                e.preventDefault();\n                this.dispatchEvent(agEvent);\n            }\n            if (isEnter && this.isAggregationZone() && !this.gridOptionsService.is('functionsReadOnly')) {\n                e.preventDefault();\n                this.onShowAggFuncSelection();\n            }\n        });\n        this.addManagedListener(this.eButton, 'click', (mouseEvent) => {\n            this.dispatchEvent(agEvent);\n            mouseEvent.stopPropagation();\n        });\n        const touchListener = new ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.TouchListener(this.eButton);\n        this.addManagedListener(touchListener, ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.TouchListener.EVENT_TAP, () => {\n            this.dispatchEvent(agEvent);\n        });\n        this.addDestroyFunc(touchListener.destroy.bind(touchListener));\n    }\n    getColumnAndAggFuncName() {\n        const name = this.displayName;\n        let aggFuncName = '';\n        if (this.isAggregationZone()) {\n            const aggFunc = this.column.getAggFunc();\n            // if aggFunc is a string, we can use it, but if it's a function, then we swap with 'func'\n            const aggFuncString = typeof aggFunc === 'string' ? aggFunc : 'agg';\n            const localeTextFunc = this.localeService.getLocaleTextFunc();\n            aggFuncName = localeTextFunc(aggFuncString, aggFuncString);\n        }\n        return { name, aggFuncName };\n    }\n    setTextValue() {\n        const { name, aggFuncName } = this.getColumnAndAggFuncName();\n        const displayValue = this.isAggregationZone() ? `${aggFuncName}(${name})` : name;\n        const displayValueSanitised = ag_grid_community__WEBPACK_IMPORTED_MODULE_0__._.escapeString(displayValue);\n        this.eText.innerHTML = displayValueSanitised;\n    }\n    onShowAggFuncSelection() {\n        if (this.popupShowing) {\n            return;\n        }\n        this.popupShowing = true;\n        const virtualList = new ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.VirtualList('select-agg-func');\n        const rows = this.aggFuncService.getFuncNames(this.column);\n        const eGui = this.getGui();\n        const virtualListGui = virtualList.getGui();\n        virtualList.setModel({\n            getRow: function (index) { return rows[index]; },\n            getRowCount: function () { return rows.length; }\n        });\n        this.getContext().createBean(virtualList);\n        const ePopup = ag_grid_community__WEBPACK_IMPORTED_MODULE_0__._.loadTemplate(/* html*/ `<div class=\"ag-select-agg-func-popup\"></div>`);\n        ePopup.style.top = '0px';\n        ePopup.style.left = '0px';\n        ePopup.appendChild(virtualListGui);\n        // ePopup.style.height = this.gridOptionsService.getAggFuncPopupHeight() + 'px';\n        ePopup.style.width = `${eGui.clientWidth}px`;\n        const popupHiddenFunc = () => {\n            this.destroyBean(virtualList);\n            this.popupShowing = false;\n            eGui.focus();\n        };\n        const translate = this.localeService.getLocaleTextFunc();\n        const addPopupRes = this.popupService.addPopup({\n            modal: true,\n            eChild: ePopup,\n            closeOnEsc: true,\n            closedCallback: popupHiddenFunc,\n            ariaLabel: translate('ariaLabelAggregationFunction', 'Aggregation Function')\n        });\n        if (addPopupRes) {\n            virtualList.setComponentCreator(this.createAggSelect.bind(this, addPopupRes.hideFunc));\n        }\n        virtualList.addGuiEventListener('keydown', (e) => {\n            if (e.key === ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.KeyCode.ENTER || e.key === ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.KeyCode.SPACE) {\n                const row = virtualList.getLastFocusedRow();\n                if (row == null) {\n                    return;\n                }\n                const comp = virtualList.getComponentAt(row);\n                if (comp) {\n                    comp.selectItem();\n                }\n            }\n        });\n        this.popupService.positionPopupByComponent({\n            type: 'aggFuncSelect',\n            eventSource: eGui,\n            ePopup: ePopup,\n            keepWithinBounds: true,\n            column: this.column,\n            position: 'under'\n        });\n        virtualList.refresh();\n        let rowToFocus = rows.findIndex(r => r === this.column.getAggFunc());\n        if (rowToFocus === -1) {\n            rowToFocus = 0;\n        }\n        virtualList.focusRow(rowToFocus);\n    }\n    createAggSelect(hidePopup, value) {\n        const itemSelected = () => {\n            hidePopup();\n            if (this.gridOptionsService.is('functionsPassive')) {\n                const event = {\n                    type: ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.Events.EVENT_COLUMN_AGG_FUNC_CHANGE_REQUEST,\n                    columns: [this.column],\n                    aggFunc: value\n                };\n                this.eventService.dispatchEvent(event);\n            }\n            else {\n                this.columnModel.setColumnAggFunc(this.column, value, \"toolPanelDragAndDrop\");\n            }\n        };\n        const localeTextFunc = this.localeService.getLocaleTextFunc();\n        const aggFuncString = value.toString();\n        const aggFuncStringTranslated = localeTextFunc(aggFuncString, aggFuncString);\n        const comp = new AggItemComp(itemSelected, aggFuncStringTranslated);\n        return comp;\n    }\n    addElementClasses(el, suffix) {\n        suffix = suffix ? `-${suffix}` : '';\n        const direction = this.horizontal ? 'horizontal' : 'vertical';\n        el.classList.add(`ag-column-drop-cell${suffix}`, `ag-column-drop-${direction}-cell${suffix}`);\n    }\n    isAggregationZone() {\n        return this.dropZonePurpose === 'aggregation';\n    }\n    isGroupingZone() {\n        return this.dropZonePurpose === 'rowGroup';\n    }\n}\nDropZoneColumnComp.EVENT_COLUMN_REMOVE = 'columnRemove';\nDropZoneColumnComp.TEMPLATE = `<span role=\"option\" tabindex=\"0\">\n          <span ref=\"eDragHandle\" class=\"ag-drag-handle ag-column-drop-cell-drag-handle\" role=\"presentation\"></span>\n          <span ref=\"eText\" class=\"ag-column-drop-cell-text\" aria-hidden=\"true\"></span>\n          <ag-sort-indicator ref=\"eSortIndicator\"></ag-sort-indicator>\n          <span ref=\"eButton\" class=\"ag-column-drop-cell-button\" role=\"presentation\"></span>\n        </span>`;\n__decorate$2j([\n    (0,ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.Autowired)('dragAndDropService')\n], DropZoneColumnComp.prototype, \"dragAndDropService\", void 0);\n__decorate$2j([\n    (0,ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.Autowired)('columnModel')\n], DropZoneColumnComp.prototype, \"columnModel\", void 0);\n__decorate$2j([\n    (0,ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.Autowired)('popupService')\n], DropZoneColumnComp.prototype, \"popupService\", void 0);\n__decorate$2j([\n    (0,ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.Optional)('aggFuncService')\n], DropZoneColumnComp.prototype, \"aggFuncService\", void 0);\n__decorate$2j([\n    (0,ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.Autowired)('sortController')\n], DropZoneColumnComp.prototype, \"sortController\", void 0);\n__decorate$2j([\n    (0,ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.RefSelector)('eText')\n], DropZoneColumnComp.prototype, \"eText\", void 0);\n__decorate$2j([\n    (0,ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.RefSelector)('eDragHandle')\n], DropZoneColumnComp.prototype, \"eDragHandle\", void 0);\n__decorate$2j([\n    (0,ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.RefSelector)('eButton')\n], DropZoneColumnComp.prototype, \"eButton\", void 0);\n__decorate$2j([\n    (0,ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.RefSelector)('eSortIndicator')\n], DropZoneColumnComp.prototype, \"eSortIndicator\", void 0);\n__decorate$2j([\n    ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.PostConstruct\n], DropZoneColumnComp.prototype, \"init\", null);\nclass AggItemComp extends ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.Component {\n    constructor(itemSelected, value) {\n        super(/* html */ `<div class=\"ag-select-agg-func-item\"/>`);\n        this.selectItem = itemSelected;\n        this.getGui().innerText = value;\n        this.addGuiEventListener('click', this.selectItem);\n    }\n}\n\nvar __decorate$2i = ( false) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nclass BaseDropZonePanel extends ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.Component {\n    constructor(horizontal, dropZonePurpose) {\n        super(/* html */ `<div class=\"ag-unselectable\" role=\"presentation\"></div>`);\n        this.horizontal = horizontal;\n        this.dropZonePurpose = dropZonePurpose;\n        this.state = BaseDropZonePanel.STATE_NOT_DRAGGING;\n        this.guiDestroyFunctions = [];\n        this.childColumnComponents = [];\n        this.resizeEnabled = false;\n        this.addElementClasses(this.getGui());\n        this.eColumnDropList = document.createElement('div');\n        this.addElementClasses(this.eColumnDropList, 'list');\n        ag_grid_community__WEBPACK_IMPORTED_MODULE_0__._.setAriaRole(this.eColumnDropList, 'listbox');\n    }\n    isHorizontal() {\n        return this.horizontal;\n    }\n    toggleResizable(resizable) {\n        this.positionableFeature.setResizable(resizable ? { bottom: true } : false);\n        this.resizeEnabled = resizable;\n    }\n    setBeans(beans) {\n        this.beans = beans;\n    }\n    destroy() {\n        this.destroyGui();\n        super.destroy();\n    }\n    destroyGui() {\n        this.guiDestroyFunctions.forEach(func => func());\n        this.guiDestroyFunctions.length = 0;\n        this.childColumnComponents.length = 0;\n        ag_grid_community__WEBPACK_IMPORTED_MODULE_0__._.clearElement(this.getGui());\n        ag_grid_community__WEBPACK_IMPORTED_MODULE_0__._.clearElement(this.eColumnDropList);\n    }\n    init(params) {\n        this.params = params;\n        this.createManagedBean(new ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.ManagedFocusFeature(this.getFocusableElement(), {\n            handleKeyDown: this.handleKeyDown.bind(this)\n        }));\n        this.addManagedListener(this.beans.eventService, ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.Events.EVENT_NEW_COLUMNS_LOADED, this.refreshGui.bind(this));\n        this.addManagedPropertyListener('functionsReadOnly', this.refreshGui.bind(this));\n        this.setupDropTarget();\n        this.positionableFeature = new ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.PositionableFeature(this.getGui(), { minHeight: 100 });\n        this.createManagedBean(this.positionableFeature);\n        // we don't know if this bean will be initialised before columnModel.\n        // if columnModel first, then below will work\n        // if columnModel second, then below will put blank in, and then above event gets first when columnModel is set up\n        this.refreshGui();\n        ag_grid_community__WEBPACK_IMPORTED_MODULE_0__._.setAriaLabel(this.eColumnDropList, this.getAriaLabel());\n    }\n    handleKeyDown(e) {\n        const isVertical = !this.horizontal;\n        let isNext = e.key === ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.KeyCode.DOWN;\n        let isPrevious = e.key === ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.KeyCode.UP;\n        if (!isVertical) {\n            const isRtl = this.gridOptionsService.is('enableRtl');\n            isNext = (!isRtl && e.key === ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.KeyCode.RIGHT) || (isRtl && e.key === ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.KeyCode.LEFT);\n            isPrevious = (!isRtl && e.key === ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.KeyCode.LEFT) || (isRtl && e.key === ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.KeyCode.RIGHT);\n        }\n        if (!isNext && !isPrevious) {\n            return;\n        }\n        const el = this.focusService.findNextFocusableElement(this.getFocusableElement(), false, isPrevious);\n        if (el) {\n            e.preventDefault();\n            el.focus();\n        }\n    }\n    addElementClasses(el, suffix) {\n        suffix = suffix ? `-${suffix}` : '';\n        const direction = this.horizontal ? 'horizontal' : 'vertical';\n        el.classList.add(`ag-column-drop${suffix}`, `ag-column-drop-${direction}${suffix}`);\n    }\n    setupDropTarget() {\n        this.dropTarget = {\n            getContainer: this.getGui.bind(this),\n            getIconName: this.getIconName.bind(this),\n            onDragging: this.onDragging.bind(this),\n            onDragEnter: this.onDragEnter.bind(this),\n            onDragLeave: this.onDragLeave.bind(this),\n            onDragStop: this.onDragStop.bind(this),\n            isInterestedIn: this.isInterestedIn.bind(this)\n        };\n        this.beans.dragAndDropService.addDropTarget(this.dropTarget);\n    }\n    isInterestedIn(type) {\n        // not interested in row drags\n        return type === ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.DragSourceType.HeaderCell || type === ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.DragSourceType.ToolPanel;\n    }\n    checkInsertIndex(draggingEvent) {\n        const newIndex = this.getNewInsertIndex(draggingEvent);\n        // <0 happens when drag is no a direction we are interested in, eg drag is up/down but in horizontal panel\n        if (newIndex < 0) {\n            return false;\n        }\n        const changed = newIndex !== this.insertIndex;\n        if (changed) {\n            this.insertIndex = newIndex;\n        }\n        return changed;\n    }\n    getNewInsertIndex(draggingEvent) {\n        const mouseEvent = draggingEvent.event;\n        const mouseLocation = this.horizontal ? mouseEvent.clientX : mouseEvent.clientY;\n        const boundsList = this.childColumnComponents.map(col => (col.getGui().getBoundingClientRect()));\n        // find the non-ghost component we're hovering\n        const hoveredIndex = boundsList.findIndex(rect => (this.horizontal ? (rect.right > mouseLocation && rect.left < mouseLocation) : (rect.top < mouseLocation && rect.bottom > mouseLocation)));\n        // not hovering a non-ghost component\n        if (hoveredIndex === -1) {\n            const enableRtl = this.beans.gridOptionsService.is('enableRtl');\n            // if mouse is below or right of all components then new index should be placed last\n            const isLast = boundsList.every(rect => (mouseLocation > (this.horizontal ? rect.right : rect.bottom)));\n            if (isLast) {\n                return enableRtl && this.horizontal ? 0 : this.childColumnComponents.length;\n            }\n            // if mouse is above or left of all components, new index is first\n            const isFirst = boundsList.every(rect => (mouseLocation < (this.horizontal ? rect.left : rect.top)));\n            if (isFirst) {\n                return enableRtl && this.horizontal ? this.childColumnComponents.length : 0;\n            }\n            // must be hovering a ghost, don't change the index\n            return this.insertIndex;\n        }\n        // if the old index is equal to or less than the index of our new target\n        // we need to shift right, to insert after rather than before\n        if (this.insertIndex <= hoveredIndex) {\n            return hoveredIndex + 1;\n        }\n        return hoveredIndex;\n    }\n    checkDragStartedBySelf(draggingEvent) {\n        if (this.state !== BaseDropZonePanel.STATE_NOT_DRAGGING) {\n            return;\n        }\n        this.state = BaseDropZonePanel.STATE_REARRANGE_COLUMNS;\n        this.potentialDndColumns = draggingEvent.dragSource.getDragItem().columns || [];\n        this.refreshGui();\n        this.checkInsertIndex(draggingEvent);\n        this.refreshGui();\n    }\n    onDragging(draggingEvent) {\n        this.checkDragStartedBySelf(draggingEvent);\n        if (this.checkInsertIndex(draggingEvent)) {\n            this.refreshGui();\n        }\n    }\n    onDragEnter(draggingEvent) {\n        // this will contain all columns that are potential drops\n        const dragColumns = draggingEvent.dragSource.getDragItem().columns || [];\n        this.state = BaseDropZonePanel.STATE_NEW_COLUMNS_IN;\n        // take out columns that are not droppable\n        const goodDragColumns = dragColumns.filter(this.isColumnDroppable.bind(this));\n        if (goodDragColumns.length > 0) {\n            const hideColumnOnExit = this.isRowGroupPanel() && !this.gridOptionsService.is('suppressRowGroupHidesColumns') && !draggingEvent.fromNudge;\n            if (hideColumnOnExit) {\n                const dragItem = draggingEvent.dragSource.getDragItem();\n                const columns = dragItem.columns;\n                this.setColumnsVisible(columns, false, \"uiColumnDragged\");\n            }\n            this.potentialDndColumns = goodDragColumns;\n            this.checkInsertIndex(draggingEvent);\n            this.refreshGui();\n        }\n    }\n    setColumnsVisible(columns, visible, source = \"api\") {\n        if (columns) {\n            const allowedCols = columns.filter(c => !c.getColDef().lockVisible);\n            this.colModel.setColumnsVisible(allowedCols, visible, source);\n        }\n    }\n    isPotentialDndColumns() {\n        return ag_grid_community__WEBPACK_IMPORTED_MODULE_0__._.existsAndNotEmpty(this.potentialDndColumns);\n    }\n    isRowGroupPanel() {\n        return this.dropZonePurpose === 'rowGroup';\n    }\n    onDragLeave(draggingEvent) {\n        // if the dragging started from us, we remove the group, however if it started\n        // some place else, then we don't, as it was only 'asking'\n        if (this.state === BaseDropZonePanel.STATE_REARRANGE_COLUMNS) {\n            const columns = draggingEvent.dragSource.getDragItem().columns || [];\n            this.removeColumns(columns);\n        }\n        if (this.isPotentialDndColumns()) {\n            const showColumnOnExit = this.isRowGroupPanel() && !this.gridOptionsService.is('suppressMakeColumnVisibleAfterUnGroup') && !draggingEvent.fromNudge;\n            if (showColumnOnExit) {\n                const dragItem = draggingEvent.dragSource.getDragItem();\n                this.setColumnsVisible(dragItem.columns, true, \"uiColumnDragged\");\n            }\n            this.potentialDndColumns = [];\n            this.refreshGui();\n        }\n        this.state = BaseDropZonePanel.STATE_NOT_DRAGGING;\n    }\n    onDragStop() {\n        if (this.isPotentialDndColumns()) {\n            let success = false;\n            if (this.state === BaseDropZonePanel.STATE_NEW_COLUMNS_IN) {\n                this.addColumns(this.potentialDndColumns);\n                success = true;\n            }\n            else {\n                success = this.rearrangeColumns(this.potentialDndColumns);\n            }\n            this.potentialDndColumns = [];\n            // If the function is passive, then we don't refresh, as we assume the client application\n            // is going to call setRowGroups / setPivots / setValues at a later point which will then\n            // cause a refresh. This gives a nice GUI where the ghost stays until the app has caught\n            // up with the changes. However, if there was no change in the order, then we do need to\n            // refresh to reset the columns\n            if (!this.beans.gridOptionsService.is('functionsPassive') || !success) {\n                this.refreshGui();\n            }\n        }\n        this.state = BaseDropZonePanel.STATE_NOT_DRAGGING;\n    }\n    removeColumns(columnsToRemove) {\n        const newColumnList = this.getExistingColumns().filter(col => !ag_grid_community__WEBPACK_IMPORTED_MODULE_0__._.includes(columnsToRemove, col));\n        this.updateColumns(newColumnList);\n    }\n    addColumns(columnsToAdd) {\n        if (!columnsToAdd) {\n            return;\n        }\n        const newColumnList = this.getExistingColumns().slice();\n        const colsToAddNoDuplicates = columnsToAdd.filter(col => newColumnList.indexOf(col) < 0);\n        ag_grid_community__WEBPACK_IMPORTED_MODULE_0__._.insertArrayIntoArray(newColumnList, colsToAddNoDuplicates, this.insertIndex);\n        this.updateColumns(newColumnList);\n    }\n    rearrangeColumns(columnsToAdd) {\n        const newColumnList = this.getNonGhostColumns().slice();\n        ag_grid_community__WEBPACK_IMPORTED_MODULE_0__._.insertArrayIntoArray(newColumnList, columnsToAdd, this.insertIndex);\n        if (ag_grid_community__WEBPACK_IMPORTED_MODULE_0__._.areEqual(newColumnList, this.getExistingColumns())) {\n            return false;\n        }\n        this.updateColumns(newColumnList);\n        return true;\n    }\n    refreshGui() {\n        // we reset the scroll position after the refresh.\n        // if we don't do this, then the list will always scroll to the top\n        // each time we refresh it. this is because part of the refresh empties\n        // out the list which sets scroll to zero. so the user could be just\n        // reordering the list - we want to prevent the resetting of the scroll.\n        // this is relevant for vertical display only (as horizontal has no scroll)\n        const scrollTop = this.eColumnDropList.scrollTop;\n        const resizeEnabled = this.resizeEnabled;\n        const focusedIndex = this.getFocusedItem();\n        let alternateElement = this.focusService.findNextFocusableElement();\n        if (!alternateElement) {\n            alternateElement = this.focusService.findNextFocusableElement(undefined, false, true);\n        }\n        this.toggleResizable(false);\n        this.destroyGui();\n        this.addIconAndTitleToGui();\n        this.addEmptyMessageToGui();\n        this.addColumnsToGui();\n        if (!this.isHorizontal()) {\n            this.eColumnDropList.scrollTop = scrollTop;\n        }\n        if (resizeEnabled) {\n            this.toggleResizable(resizeEnabled);\n        }\n        // focus should only be restored when keyboard mode\n        // otherwise mouse clicks will cause containers to scroll\n        // without no apparent reason.\n        if (this.focusService.isKeyboardMode()) {\n            this.restoreFocus(focusedIndex, alternateElement);\n        }\n    }\n    getFocusedItem() {\n        const eGui = this.getGui();\n        const activeElement = this.gridOptionsService.getDocument().activeElement;\n        if (!eGui.contains(activeElement)) {\n            return -1;\n        }\n        const items = Array.from(eGui.querySelectorAll('.ag-column-drop-cell'));\n        return items.indexOf(activeElement);\n    }\n    restoreFocus(index, alternateElement) {\n        const eGui = this.getGui();\n        const items = Array.from(eGui.querySelectorAll('.ag-column-drop-cell'));\n        if (index === -1) {\n            return;\n        }\n        if (items.length === 0) {\n            alternateElement.focus();\n        }\n        const indexToFocus = Math.min(items.length - 1, index);\n        const el = items[indexToFocus];\n        if (el) {\n            el.focus();\n        }\n    }\n    getNonGhostColumns() {\n        const existingColumns = this.getExistingColumns();\n        if (this.isPotentialDndColumns()) {\n            return existingColumns.filter(column => !ag_grid_community__WEBPACK_IMPORTED_MODULE_0__._.includes(this.potentialDndColumns, column));\n        }\n        return existingColumns;\n    }\n    addColumnsToGui() {\n        const nonGhostColumns = this.getNonGhostColumns();\n        const itemsToAddToGui = nonGhostColumns.map(column => (this.createColumnComponent(column, false)));\n        if (this.isPotentialDndColumns()) {\n            const dndColumns = this.potentialDndColumns.map(column => (this.createColumnComponent(column, true)));\n            if (this.insertIndex >= itemsToAddToGui.length) {\n                itemsToAddToGui.push(...dndColumns);\n            }\n            else {\n                itemsToAddToGui.splice(this.insertIndex, 0, ...dndColumns);\n            }\n        }\n        this.appendChild(this.eColumnDropList);\n        itemsToAddToGui.forEach((columnComponent, index) => {\n            if (index > 0) {\n                this.addArrow(this.eColumnDropList);\n            }\n            this.eColumnDropList.appendChild(columnComponent.getGui());\n        });\n        this.addAriaLabelsToComponents();\n    }\n    addAriaLabelsToComponents() {\n        this.childColumnComponents.forEach((comp, idx) => {\n            const eGui = comp.getGui();\n            ag_grid_community__WEBPACK_IMPORTED_MODULE_0__._.setAriaPosInSet(eGui, idx + 1);\n            ag_grid_community__WEBPACK_IMPORTED_MODULE_0__._.setAriaSetSize(eGui, this.childColumnComponents.length);\n        });\n    }\n    createColumnComponent(column, ghost) {\n        const columnComponent = new DropZoneColumnComp(column, this.dropTarget, ghost, this.dropZonePurpose, this.horizontal);\n        columnComponent.addEventListener(DropZoneColumnComp.EVENT_COLUMN_REMOVE, this.removeColumns.bind(this, [column]));\n        this.beans.context.createBean(columnComponent);\n        this.guiDestroyFunctions.push(() => this.destroyBean(columnComponent));\n        if (!ghost) {\n            this.childColumnComponents.push(columnComponent);\n        }\n        return columnComponent;\n    }\n    addIconAndTitleToGui() {\n        const eGroupIcon = this.params.icon;\n        const eTitleBar = document.createElement('div');\n        ag_grid_community__WEBPACK_IMPORTED_MODULE_0__._.setAriaHidden(eTitleBar, true);\n        this.addElementClasses(eTitleBar, 'title-bar');\n        this.addElementClasses(eGroupIcon, 'icon');\n        this.addOrRemoveCssClass('ag-column-drop-empty', this.isExistingColumnsEmpty());\n        eTitleBar.appendChild(eGroupIcon);\n        if (!this.horizontal) {\n            const eTitle = document.createElement('span');\n            this.addElementClasses(eTitle, 'title');\n            eTitle.innerHTML = this.params.title;\n            eTitleBar.appendChild(eTitle);\n        }\n        this.appendChild(eTitleBar);\n    }\n    isExistingColumnsEmpty() {\n        return this.getExistingColumns().length === 0;\n    }\n    addEmptyMessageToGui() {\n        if (!this.isExistingColumnsEmpty() || this.isPotentialDndColumns()) {\n            return;\n        }\n        const eMessage = document.createElement('span');\n        eMessage.innerHTML = this.params.emptyMessage;\n        this.addElementClasses(eMessage, 'empty-message');\n        this.eColumnDropList.appendChild(eMessage);\n    }\n    addArrow(eParent) {\n        // only add the arrows if the layout is horizontal\n        if (this.horizontal) {\n            // for RTL it's a left arrow, otherwise it's a right arrow\n            const enableRtl = this.beans.gridOptionsService.is('enableRtl');\n            const icon = ag_grid_community__WEBPACK_IMPORTED_MODULE_0__._.createIconNoSpan(enableRtl ? 'smallLeft' : 'smallRight', this.beans.gridOptionsService);\n            this.addElementClasses(icon, 'cell-separator');\n            eParent.appendChild(icon);\n        }\n    }\n}\nBaseDropZonePanel.STATE_NOT_DRAGGING = 'notDragging';\nBaseDropZonePanel.STATE_NEW_COLUMNS_IN = 'newColumnsIn';\nBaseDropZonePanel.STATE_REARRANGE_COLUMNS = 'rearrangeColumns';\n__decorate$2i([\n    (0,ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.Autowired)('columnModel')\n], BaseDropZonePanel.prototype, \"colModel\", void 0);\n__decorate$2i([\n    (0,ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.Autowired)('focusService')\n], BaseDropZonePanel.prototype, \"focusService\", void 0);\n\nvar __decorate$2h = ( false) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nclass RowGroupDropZonePanel extends BaseDropZonePanel {\n    constructor(horizontal) {\n        super(horizontal, 'rowGroup');\n    }\n    passBeansUp() {\n        super.setBeans({\n            gridOptionsService: this.gridOptionsService,\n            eventService: this.eventService,\n            context: this.getContext(),\n            loggerFactory: this.loggerFactory,\n            dragAndDropService: this.dragAndDropService\n        });\n        const localeTextFunc = this.localeService.getLocaleTextFunc();\n        const emptyMessage = localeTextFunc('rowGroupColumnsEmptyMessage', 'Drag here to set row groups');\n        const title = localeTextFunc('groups', 'Row Groups');\n        super.init({\n            dragAndDropIcon: ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.DragAndDropService.ICON_GROUP,\n            icon: ag_grid_community__WEBPACK_IMPORTED_MODULE_0__._.createIconNoSpan('rowGroupPanel', this.gridOptionsService, null),\n            emptyMessage: emptyMessage,\n            title\n        });\n        this.addManagedListener(this.eventService, ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.Events.EVENT_COLUMN_ROW_GROUP_CHANGED, this.refreshGui.bind(this));\n    }\n    getAriaLabel() {\n        const translate = this.localeService.getLocaleTextFunc();\n        const label = translate('ariaRowGroupDropZonePanelLabel', 'Row Groups');\n        return label;\n    }\n    getTooltipParams() {\n        const res = super.getTooltipParams();\n        res.location = 'rowGroupColumnsList';\n        return res;\n    }\n    isColumnDroppable(column) {\n        // we never allow grouping of secondary columns\n        if (this.gridOptionsService.is('functionsReadOnly') || !column.isPrimary()) {\n            return false;\n        }\n        return column.isAllowRowGroup() && !column.isRowGroupActive();\n    }\n    updateColumns(columns) {\n        if (this.gridOptionsService.is('functionsPassive')) {\n            const event = {\n                type: ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.Events.EVENT_COLUMN_ROW_GROUP_CHANGE_REQUEST,\n                columns: columns\n            };\n            this.eventService.dispatchEvent(event);\n        }\n        else {\n            this.columnModel.setRowGroupColumns(columns, \"toolPanelUi\");\n        }\n    }\n    getIconName() {\n        return this.isPotentialDndColumns() ? ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.DragAndDropService.ICON_GROUP : ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.DragAndDropService.ICON_NOT_ALLOWED;\n    }\n    getExistingColumns() {\n        return this.columnModel.getRowGroupColumns();\n    }\n}\n__decorate$2h([\n    (0,ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.Autowired)('columnModel')\n], RowGroupDropZonePanel.prototype, \"columnModel\", void 0);\n__decorate$2h([\n    (0,ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.Autowired)('loggerFactory')\n], RowGroupDropZonePanel.prototype, \"loggerFactory\", void 0);\n__decorate$2h([\n    (0,ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.Autowired)('dragAndDropService')\n], RowGroupDropZonePanel.prototype, \"dragAndDropService\", void 0);\n__decorate$2h([\n    ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.PostConstruct\n], RowGroupDropZonePanel.prototype, \"passBeansUp\", null);\n\nvar __decorate$2g = ( false) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nclass PivotDropZonePanel extends BaseDropZonePanel {\n    constructor(horizontal) {\n        super(horizontal, 'pivot');\n    }\n    passBeansUp() {\n        super.setBeans({\n            gridOptionsService: this.gridOptionsService,\n            eventService: this.eventService,\n            context: this.getContext(),\n            loggerFactory: this.loggerFactory,\n            dragAndDropService: this.dragAndDropService\n        });\n        const localeTextFunc = this.localeService.getLocaleTextFunc();\n        const emptyMessage = localeTextFunc('pivotColumnsEmptyMessage', 'Drag here to set column labels');\n        const title = localeTextFunc('pivots', 'Column Labels');\n        super.init({\n            dragAndDropIcon: ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.DragAndDropService.ICON_GROUP,\n            icon: ag_grid_community__WEBPACK_IMPORTED_MODULE_0__._.createIconNoSpan('pivotPanel', this.gridOptionsService, null),\n            emptyMessage: emptyMessage,\n            title: title\n        });\n        this.addManagedListener(this.eventService, ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.Events.EVENT_NEW_COLUMNS_LOADED, this.refresh.bind(this));\n        this.addManagedListener(this.eventService, ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.Events.EVENT_COLUMN_PIVOT_CHANGED, this.refresh.bind(this));\n        this.addManagedListener(this.eventService, ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.Events.EVENT_COLUMN_PIVOT_MODE_CHANGED, this.checkVisibility.bind(this));\n        this.refresh();\n    }\n    getAriaLabel() {\n        const translate = this.localeService.getLocaleTextFunc();\n        const label = translate('ariaPivotDropZonePanelLabel', 'Column Labels');\n        return label;\n    }\n    getTooltipParams() {\n        const res = super.getTooltipParams();\n        res.location = 'pivotColumnsList';\n        return res;\n    }\n    refresh() {\n        this.checkVisibility();\n        this.refreshGui();\n    }\n    checkVisibility() {\n        const pivotMode = this.columnModel.isPivotMode();\n        if (this.isHorizontal()) {\n            // what we do for horizontal (ie the pivot panel at the top) depends\n            // on the user property as well as pivotMode.\n            switch (this.gridOptionsService.get('pivotPanelShow')) {\n                case 'always':\n                    this.setDisplayed(pivotMode);\n                    break;\n                case 'onlyWhenPivoting':\n                    const pivotActive = this.columnModel.isPivotActive();\n                    this.setDisplayed(pivotMode && pivotActive);\n                    break;\n                default:\n                    // never show it\n                    this.setDisplayed(false);\n                    break;\n            }\n        }\n        else {\n            // in toolPanel, the pivot panel is always shown when pivot mode is on\n            this.setDisplayed(pivotMode);\n        }\n    }\n    isColumnDroppable(column) {\n        // we never allow grouping of secondary columns\n        if (this.gridOptionsService.is('functionsReadOnly') || !column.isPrimary()) {\n            return false;\n        }\n        return column.isAllowPivot() && !column.isPivotActive();\n    }\n    updateColumns(columns) {\n        if (this.gridOptionsService.is('functionsPassive')) {\n            const event = {\n                type: ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.Events.EVENT_COLUMN_PIVOT_CHANGE_REQUEST,\n                columns: columns\n            };\n            this.eventService.dispatchEvent(event);\n        }\n        else {\n            this.columnModel.setPivotColumns(columns, \"toolPanelUi\");\n        }\n    }\n    getIconName() {\n        return this.isPotentialDndColumns() ? ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.DragAndDropService.ICON_PIVOT : ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.DragAndDropService.ICON_NOT_ALLOWED;\n    }\n    getExistingColumns() {\n        return this.columnModel.getPivotColumns();\n    }\n}\n__decorate$2g([\n    (0,ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.Autowired)('columnModel')\n], PivotDropZonePanel.prototype, \"columnModel\", void 0);\n__decorate$2g([\n    (0,ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.Autowired)('loggerFactory')\n], PivotDropZonePanel.prototype, \"loggerFactory\", void 0);\n__decorate$2g([\n    (0,ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.Autowired)('dragAndDropService')\n], PivotDropZonePanel.prototype, \"dragAndDropService\", void 0);\n__decorate$2g([\n    ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.PostConstruct\n], PivotDropZonePanel.prototype, \"passBeansUp\", null);\n\nvar __decorate$2f = ( false) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nclass GridHeaderDropZones extends ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.Component {\n    constructor() {\n        super();\n    }\n    postConstruct() {\n        this.setGui(this.createNorthPanel());\n        this.addManagedListener(this.eventService, ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.Events.EVENT_COLUMN_ROW_GROUP_CHANGED, this.onRowGroupChanged.bind(this));\n        this.addManagedListener(this.eventService, ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.Events.EVENT_NEW_COLUMNS_LOADED, this.onRowGroupChanged.bind(this));\n        this.addManagedPropertyListener('rowGroupPanelShow', this.onRowGroupChanged.bind(this));\n        this.onRowGroupChanged();\n    }\n    createNorthPanel() {\n        const topPanelGui = document.createElement('div');\n        const dropPanelVisibleListener = this.onDropPanelVisible.bind(this);\n        topPanelGui.classList.add('ag-column-drop-wrapper');\n        ag_grid_community__WEBPACK_IMPORTED_MODULE_0__._.setAriaRole(topPanelGui, 'presentation');\n        this.rowGroupComp = new RowGroupDropZonePanel(true);\n        this.createManagedBean(this.rowGroupComp);\n        this.pivotComp = new PivotDropZonePanel(true);\n        this.createManagedBean(this.pivotComp);\n        topPanelGui.appendChild(this.rowGroupComp.getGui());\n        topPanelGui.appendChild(this.pivotComp.getGui());\n        this.addManagedListener(this.rowGroupComp, ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.Component.EVENT_DISPLAYED_CHANGED, dropPanelVisibleListener);\n        this.addManagedListener(this.pivotComp, ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.Component.EVENT_DISPLAYED_CHANGED, dropPanelVisibleListener);\n        this.onDropPanelVisible();\n        return topPanelGui;\n    }\n    onDropPanelVisible() {\n        const bothDisplayed = this.rowGroupComp.isDisplayed() && this.pivotComp.isDisplayed();\n        this.rowGroupComp.addOrRemoveCssClass('ag-column-drop-horizontal-half-width', bothDisplayed);\n        this.pivotComp.addOrRemoveCssClass('ag-column-drop-horizontal-half-width', bothDisplayed);\n    }\n    onRowGroupChanged() {\n        if (!this.rowGroupComp) {\n            return;\n        }\n        const rowGroupPanelShow = this.gridOptionsService.get('rowGroupPanelShow');\n        if (rowGroupPanelShow === 'always') {\n            this.rowGroupComp.setDisplayed(true);\n        }\n        else if (rowGroupPanelShow === 'onlyWhenGrouping') {\n            const grouping = !this.columnModel.isRowGroupEmpty();\n            this.rowGroupComp.setDisplayed(grouping);\n        }\n        else {\n            this.rowGroupComp.setDisplayed(false);\n        }\n    }\n}\n__decorate$2f([\n    (0,ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.Autowired)('columnModel')\n], GridHeaderDropZones.prototype, \"columnModel\", void 0);\n__decorate$2f([\n    ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.PostConstruct\n], GridHeaderDropZones.prototype, \"postConstruct\", null);\n\nvar __decorate$2e = ( false) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nlet FilterAggregatesStage = class FilterAggregatesStage extends ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.BeanStub {\n    execute(params) {\n        const isPivotMode = this.columnModel.isPivotMode();\n        const isAggFilterActive = this.filterManager.isAggregateFilterPresent()\n            || this.filterManager.isAggregateQuickFilterPresent();\n        // This is the default filter for applying only to leaf nodes, realistically this should not apply as primary agg columns,\n        // should not be applied by the filterManager if getGroupAggFiltering is missing. Predicate will apply filters to leaf level.\n        const defaultPrimaryColumnPredicate = (params) => !params.node.group;\n        // Default secondary column predicate, selecting only leaf level groups.\n        const defaultSecondaryColumnPredicate = ((params) => params.node.leafGroup);\n        // The predicate to determine whether filters should apply to this row. Either defined by the user in groupAggFiltering or a default depending\n        // on current pivot mode status.\n        const applyFilterToNode = this.gridOptionsService.getGroupAggFiltering()\n            || (isPivotMode ? defaultSecondaryColumnPredicate : defaultPrimaryColumnPredicate);\n        const { changedPath } = params;\n        const preserveChildren = (node, recursive = false) => {\n            if (node.childrenAfterFilter) {\n                node.childrenAfterAggFilter = node.childrenAfterFilter;\n                if (recursive) {\n                    node.childrenAfterAggFilter.forEach((child) => preserveChildren(child, recursive));\n                }\n                this.setAllChildrenCount(node);\n            }\n            if (node.sibling) {\n                node.sibling.childrenAfterAggFilter = node.childrenAfterAggFilter;\n            }\n        };\n        const filterChildren = (node) => {\n            var _a;\n            node.childrenAfterAggFilter = ((_a = node.childrenAfterFilter) === null || _a === void 0 ? void 0 : _a.filter((child) => {\n                var _a;\n                const shouldFilterRow = applyFilterToNode({ node: child });\n                if (shouldFilterRow) {\n                    const doesNodePassFilter = this.filterManager.doesRowPassAggregateFilters({ rowNode: child });\n                    if (doesNodePassFilter) {\n                        // Node has passed, so preserve children\n                        preserveChildren(child, true);\n                        return true;\n                    }\n                }\n                const hasChildPassed = (_a = child.childrenAfterAggFilter) === null || _a === void 0 ? void 0 : _a.length;\n                return hasChildPassed;\n            })) || null;\n            this.setAllChildrenCount(node);\n            if (node.sibling) {\n                node.sibling.childrenAfterAggFilter = node.childrenAfterAggFilter;\n            }\n        };\n        changedPath.forEachChangedNodeDepthFirst(isAggFilterActive ? filterChildren : preserveChildren, true);\n    }\n    setAllChildrenCountTreeData(rowNode) {\n        // for tree data, we include all children, groups and leafs\n        let allChildrenCount = 0;\n        rowNode.childrenAfterAggFilter.forEach((child) => {\n            // include child itself\n            allChildrenCount++;\n            // include children of children\n            allChildrenCount += child.allChildrenCount;\n        });\n        rowNode.setAllChildrenCount(allChildrenCount);\n    }\n    setAllChildrenCountGridGrouping(rowNode) {\n        // for grid data, we only count the leafs\n        let allChildrenCount = 0;\n        rowNode.childrenAfterAggFilter.forEach((child) => {\n            if (child.group) {\n                allChildrenCount += child.allChildrenCount;\n            }\n            else {\n                allChildrenCount++;\n            }\n        });\n        rowNode.setAllChildrenCount(allChildrenCount);\n    }\n    setAllChildrenCount(rowNode) {\n        if (!rowNode.hasChildren()) {\n            rowNode.setAllChildrenCount(null);\n            return;\n        }\n        if (this.gridOptionsService.isTreeData()) {\n            this.setAllChildrenCountTreeData(rowNode);\n        }\n        else {\n            this.setAllChildrenCountGridGrouping(rowNode);\n        }\n    }\n};\n__decorate$2e([\n    (0,ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.Autowired)('filterManager')\n], FilterAggregatesStage.prototype, \"filterManager\", void 0);\n__decorate$2e([\n    (0,ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.Autowired)('columnModel')\n], FilterAggregatesStage.prototype, \"columnModel\", void 0);\nFilterAggregatesStage = __decorate$2e([\n    (0,ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.Bean)('filterAggregatesStage')\n], FilterAggregatesStage);\n\n// DO NOT UPDATE MANUALLY: Generated from script during build time\nconst VERSION$g = '30.0.2';\n\nvar __decorate$2d = ( false) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nclass GroupFilter extends ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.TabGuardComp {\n    constructor() {\n        super(/* html */ `\n            <div class=\"ag-group-filter\">\n                <div ref=\"eGroupField\"></div>\n                <div ref=\"eUnderlyingFilter\"></div>\n            </div>\n        `);\n    }\n    postConstruct() {\n        this.initialiseTabGuard({});\n    }\n    init(params) {\n        this.params = params;\n        this.validateParams();\n        return this.updateGroups().then(() => {\n            this.addManagedListener(this.eventService, ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.Events.EVENT_COLUMN_ROW_GROUP_CHANGED, () => this.onColumnRowGroupChanged());\n        });\n    }\n    validateParams() {\n        const { colDef } = this.params;\n        if (colDef.field) {\n            ag_grid_community__WEBPACK_IMPORTED_MODULE_0__._.doOnce(() => console.warn('AG Grid: Group Column Filter does not work with the colDef property \"field\". This property will be ignored.'), 'groupFilterFieldParam');\n        }\n        if (colDef.filterValueGetter) {\n            ag_grid_community__WEBPACK_IMPORTED_MODULE_0__._.doOnce(() => console.warn('AG Grid: Group Column Filter does not work with the colDef property \"filterValueGetter\". This property will be ignored.'), 'groupFilterFilterValueGetterParam');\n        }\n        if (colDef.filterParams) {\n            ag_grid_community__WEBPACK_IMPORTED_MODULE_0__._.doOnce(() => console.warn('AG Grid: Group Column Filter does not work with the colDef property \"filterParams\". This property will be ignored.'), 'groupFilterFilterParams');\n        }\n    }\n    updateGroups() {\n        const sourceColumns = this.updateGroupField();\n        return this.getUnderlyingFilters(sourceColumns);\n    }\n    getSourceColumns() {\n        this.groupColumn = this.params.column;\n        if (this.gridOptionsService.is('treeData')) {\n            ag_grid_community__WEBPACK_IMPORTED_MODULE_0__._.doOnce(() => console.warn('AG Grid: Group Column Filter does not work with Tree Data enabled. Please disable Tree Data, or use a different filter.'), 'groupFilterTreeData');\n            return [];\n        }\n        const sourceColumns = this.columnModel.getSourceColumnsForGroupColumn(this.groupColumn);\n        if (!sourceColumns) {\n            ag_grid_community__WEBPACK_IMPORTED_MODULE_0__._.doOnce(() => console.warn('AG Grid: Group Column Filter only works on group columns. Please use a different filter.'), 'groupFilterNotGroupColumn');\n            return [];\n        }\n        return sourceColumns;\n    }\n    updateGroupField() {\n        ag_grid_community__WEBPACK_IMPORTED_MODULE_0__._.clearElement(this.eGroupField);\n        if (this.eGroupFieldSelect) {\n            this.destroyBean(this.eGroupFieldSelect);\n        }\n        const allSourceColumns = this.getSourceColumns();\n        const sourceColumns = allSourceColumns.filter(sourceColumn => sourceColumn.isFilterAllowed());\n        if (!sourceColumns.length) {\n            this.selectedColumn = undefined;\n            ag_grid_community__WEBPACK_IMPORTED_MODULE_0__._.setDisplayed(this.eGroupField, false);\n            return null;\n        }\n        if (allSourceColumns.length === 1) {\n            // we only want to hide the group field element if there's only one group column.\n            // If there's one group column that has a filter, but multiple columns in total,\n            // we should still show the select so the user knows which column it's for.\n            this.selectedColumn = sourceColumns[0];\n            ag_grid_community__WEBPACK_IMPORTED_MODULE_0__._.setDisplayed(this.eGroupField, false);\n        }\n        else {\n            // keep the old selected column if it's still valid\n            if (!this.selectedColumn || !sourceColumns.some(column => column.getId() === this.selectedColumn.getId())) {\n                this.selectedColumn = sourceColumns[0];\n            }\n            this.createGroupFieldSelectElement(sourceColumns);\n            this.eGroupField.appendChild(this.eGroupFieldSelect.getGui());\n            this.eGroupField.appendChild(ag_grid_community__WEBPACK_IMPORTED_MODULE_0__._.loadTemplate(/* html */ `<div class=\"ag-filter-separator\"></div>`));\n            ag_grid_community__WEBPACK_IMPORTED_MODULE_0__._.setDisplayed(this.eGroupField, true);\n        }\n        return sourceColumns;\n    }\n    createGroupFieldSelectElement(sourceColumns) {\n        this.eGroupFieldSelect = this.createManagedBean(new ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.AgSelect());\n        const localeTextFunc = this.localeService.getLocaleTextFunc();\n        this.eGroupFieldSelect.setLabel(localeTextFunc('groupFilterSelect', 'Select field:'));\n        this.eGroupFieldSelect.setLabelAlignment('top');\n        this.eGroupFieldSelect.addOptions(sourceColumns.map(sourceColumn => {\n            var _a;\n            return ({\n                value: sourceColumn.getId(),\n                text: (_a = this.columnModel.getDisplayNameForColumn(sourceColumn, 'groupFilter', false)) !== null && _a !== void 0 ? _a : undefined\n            });\n        }));\n        this.eGroupFieldSelect.setValue(this.selectedColumn.getId());\n        this.eGroupFieldSelect.onValueChange((newValue) => this.updateSelectedColumn(newValue));\n        this.eGroupFieldSelect.addCssClass('ag-group-filter-field-select-wrapper');\n        if (sourceColumns.length === 1) {\n            this.eGroupFieldSelect.setDisabled(true);\n        }\n    }\n    getUnderlyingFilters(sourceColumns) {\n        if (!sourceColumns) {\n            this.filterColumnPairs = undefined;\n            this.selectedFilter = undefined;\n            this.groupColumn.setFilterActive(false, 'columnRowGroupChanged');\n            return ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.AgPromise.resolve();\n        }\n        const filterPromises = [];\n        const filterColumnPairs = [];\n        sourceColumns.forEach(column => {\n            const filterWrapper = this.filterManager.getOrCreateFilterWrapper(column, 'COLUMN_MENU');\n            if (filterWrapper === null || filterWrapper === void 0 ? void 0 : filterWrapper.filterPromise) {\n                filterPromises.push(filterWrapper.filterPromise.then(filter => {\n                    if (filter) {\n                        filterColumnPairs.push({\n                            filter,\n                            column\n                        });\n                    }\n                    if (column.getId() === this.selectedColumn.getId()) {\n                        this.selectedFilter = filter !== null && filter !== void 0 ? filter : undefined;\n                    }\n                    return filter;\n                }));\n            }\n        });\n        return ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.AgPromise.all(filterPromises).then(() => {\n            this.filterColumnPairs = filterColumnPairs;\n            this.groupColumn.setFilterActive(this.isFilterActive(), 'columnRowGroupChanged');\n        });\n    }\n    addUnderlyingFilterElement() {\n        ag_grid_community__WEBPACK_IMPORTED_MODULE_0__._.clearElement(this.eUnderlyingFilter);\n        if (!this.selectedColumn) {\n            return ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.AgPromise.resolve();\n        }\n        const filterWrapper = this.filterManager.getOrCreateFilterWrapper(this.selectedColumn, 'COLUMN_MENU');\n        if (!filterWrapper) {\n            return ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.AgPromise.resolve();\n        }\n        return filterWrapper.guiPromise.then(gui => {\n            var _a;\n            this.eUnderlyingFilter.appendChild(gui);\n            (_a = filterWrapper.filterPromise) === null || _a === void 0 ? void 0 : _a.then(filter => {\n                var _a, _b;\n                (_a = filter === null || filter === void 0 ? void 0 : filter.afterGuiAttached) === null || _a === void 0 ? void 0 : _a.call(filter, this.afterGuiAttachedParams);\n                if (!((_b = this.afterGuiAttachedParams) === null || _b === void 0 ? void 0 : _b.suppressFocus) && this.eGroupFieldSelect && !this.eGroupFieldSelect.isDisabled()) {\n                    this.eGroupFieldSelect.getFocusableElement().focus();\n                }\n            });\n        });\n    }\n    updateSelectedColumn(columnId) {\n        var _a, _b;\n        if (!columnId) {\n            return;\n        }\n        (_b = (_a = this.selectedFilter) === null || _a === void 0 ? void 0 : _a.afterGuiDetached) === null || _b === void 0 ? void 0 : _b.call(_a);\n        const selectedFilterColumnPair = this.getFilterColumnPair(columnId);\n        this.selectedColumn = selectedFilterColumnPair === null || selectedFilterColumnPair === void 0 ? void 0 : selectedFilterColumnPair.column;\n        this.selectedFilter = selectedFilterColumnPair === null || selectedFilterColumnPair === void 0 ? void 0 : selectedFilterColumnPair.filter;\n        this.dispatchEvent({\n            type: GroupFilter.EVENT_SELECTED_COLUMN_CHANGED\n        });\n        this.addUnderlyingFilterElement();\n    }\n    isFilterActive() {\n        var _a;\n        return !!((_a = this.filterColumnPairs) === null || _a === void 0 ? void 0 : _a.some(({ filter }) => filter.isFilterActive()));\n    }\n    doesFilterPass() {\n        return true;\n    }\n    getModel() {\n        return null;\n    }\n    setModel() {\n        return ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.AgPromise.resolve();\n    }\n    afterGuiAttached(params) {\n        this.afterGuiAttachedParams = params;\n        this.addUnderlyingFilterElement();\n    }\n    afterGuiDetached() {\n        var _a, _b;\n        ag_grid_community__WEBPACK_IMPORTED_MODULE_0__._.clearElement(this.eUnderlyingFilter);\n        (_b = (_a = this.selectedFilter) === null || _a === void 0 ? void 0 : _a.afterGuiDetached) === null || _b === void 0 ? void 0 : _b.call(_a);\n    }\n    onColumnRowGroupChanged() {\n        this.updateGroups().then(() => {\n            this.dispatchEvent({\n                type: GroupFilter.EVENT_COLUMN_ROW_GROUP_CHANGED\n            });\n            this.eventService.dispatchEvent({\n                type: 'filterAllowedUpdated'\n            });\n        });\n    }\n    getFilterColumnPair(columnId) {\n        var _a;\n        if (!columnId) {\n            return undefined;\n        }\n        return (_a = this.filterColumnPairs) === null || _a === void 0 ? void 0 : _a.find(({ column }) => column.getId() === columnId);\n    }\n    getSelectedFilter() {\n        return this.selectedFilter;\n    }\n    getSelectedColumn() {\n        return this.selectedColumn;\n    }\n    isFilterAllowed() {\n        return !!this.selectedColumn;\n    }\n    destroy() {\n        super.destroy();\n    }\n}\nGroupFilter.EVENT_COLUMN_ROW_GROUP_CHANGED = 'columnRowGroupChanged';\nGroupFilter.EVENT_SELECTED_COLUMN_CHANGED = 'selectedColumnChanged';\n__decorate$2d([\n    (0,ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.Autowired)('filterManager')\n], GroupFilter.prototype, \"filterManager\", void 0);\n__decorate$2d([\n    (0,ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.Autowired)('columnModel')\n], GroupFilter.prototype, \"columnModel\", void 0);\n__decorate$2d([\n    (0,ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.RefSelector)('eGroupField')\n], GroupFilter.prototype, \"eGroupField\", void 0);\n__decorate$2d([\n    (0,ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.RefSelector)('eUnderlyingFilter')\n], GroupFilter.prototype, \"eUnderlyingFilter\", void 0);\n__decorate$2d([\n    ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.PostConstruct\n], GroupFilter.prototype, \"postConstruct\", null);\n\nvar __decorate$2c = ( false) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nclass GroupFloatingFilterComp extends ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.Component {\n    constructor() {\n        super(/* html */ `\n            <div ref=\"eFloatingFilter\" class=\"ag-group-floating-filter ag-floating-filter-input\" role=\"presentation\"></div>\n        `);\n    }\n    init(params) {\n        this.params = params;\n        // we only support showing the underlying floating filter for multiple group columns\n        const canShowUnderlyingFloatingFilter = this.gridOptionsService.get('groupDisplayType') === 'multipleColumns';\n        return new ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.AgPromise(resolve => {\n            this.params.parentFilterInstance(parentFilterInstance => {\n                this.parentFilterInstance = parentFilterInstance;\n                if (canShowUnderlyingFloatingFilter) {\n                    this.setupUnderlyingFloatingFilterElement().then(() => resolve());\n                }\n                else {\n                    this.setupReadOnlyFloatingFilterElement();\n                    resolve();\n                }\n            });\n        }).then(() => {\n            this.addManagedListener(this.parentFilterInstance, GroupFilter.EVENT_SELECTED_COLUMN_CHANGED, () => this.onSelectedColumnChanged());\n            this.addManagedListener(this.parentFilterInstance, GroupFilter.EVENT_COLUMN_ROW_GROUP_CHANGED, () => this.onColumnRowGroupChanged());\n        });\n    }\n    setupReadOnlyFloatingFilterElement() {\n        if (!this.eFloatingFilterText) {\n            this.eFloatingFilterText = this.createManagedBean(new ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.AgInputTextField());\n            const displayName = this.columnModel.getDisplayNameForColumn(this.params.column, 'header', true);\n            const translate = this.localeService.getLocaleTextFunc();\n            this.eFloatingFilterText\n                .setDisabled(true)\n                .setInputAriaLabel(`${displayName} ${translate('ariaFilterInput', 'Filter Input')}`)\n                .addGuiEventListener('click', () => this.params.showParentFilter());\n        }\n        this.updateDisplayedValue();\n        this.eFloatingFilter.appendChild(this.eFloatingFilterText.getGui());\n    }\n    setupUnderlyingFloatingFilterElement() {\n        this.showingUnderlyingFloatingFilter = false;\n        this.underlyingFloatingFilter = undefined;\n        ag_grid_community__WEBPACK_IMPORTED_MODULE_0__._.clearElement(this.eFloatingFilter);\n        const column = this.parentFilterInstance.getSelectedColumn();\n        // we can only show the underlying filter if there is one instance (e.g. the underlying column is not visible)\n        if (column && !column.isVisible()) {\n            const compDetails = this.filterManager.getFloatingFilterCompDetails(column, this.params.showParentFilter);\n            if (compDetails) {\n                if (!this.columnVisibleChangedListener) {\n                    this.columnVisibleChangedListener = this.addManagedListener(column, ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.Column.EVENT_VISIBLE_CHANGED, this.onColumnVisibleChanged.bind(this));\n                }\n                return compDetails.newAgStackInstance().then(floatingFilter => {\n                    var _a, _b;\n                    this.underlyingFloatingFilter = floatingFilter;\n                    (_a = this.underlyingFloatingFilter) === null || _a === void 0 ? void 0 : _a.onParentModelChanged((_b = this.parentFilterInstance.getSelectedFilter()) === null || _b === void 0 ? void 0 : _b.getModel());\n                    this.appendChild(floatingFilter.getGui());\n                    this.showingUnderlyingFloatingFilter = true;\n                });\n            }\n        }\n        // fallback to the read-only version\n        this.setupReadOnlyFloatingFilterElement();\n        return ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.AgPromise.resolve();\n    }\n    onColumnVisibleChanged() {\n        this.setupUnderlyingFloatingFilterElement();\n    }\n    onParentModelChanged(_model, event) {\n        var _a, _b;\n        if (this.showingUnderlyingFloatingFilter) {\n            (_a = this.underlyingFloatingFilter) === null || _a === void 0 ? void 0 : _a.onParentModelChanged((_b = this.parentFilterInstance.getSelectedFilter()) === null || _b === void 0 ? void 0 : _b.getModel(), event);\n        }\n        else {\n            this.updateDisplayedValue();\n        }\n    }\n    updateDisplayedValue() {\n        if (!this.parentFilterInstance || !this.eFloatingFilterText) {\n            return;\n        }\n        const selectedFilter = this.parentFilterInstance.getSelectedFilter();\n        if (!selectedFilter) {\n            this.eFloatingFilterText.setValue('');\n            this.eFloatingFilterText.setDisplayed(false);\n            return;\n        }\n        this.eFloatingFilterText.setDisplayed(true);\n        if (selectedFilter.getModelAsString) {\n            const filterModel = selectedFilter.getModel();\n            this.eFloatingFilterText.setValue(filterModel == null ? '' : selectedFilter.getModelAsString(filterModel));\n        }\n        else {\n            this.eFloatingFilterText.setValue('');\n        }\n    }\n    onSelectedColumnChanged() {\n        if (!this.showingUnderlyingFloatingFilter) {\n            this.updateDisplayedValue();\n        }\n    }\n    onColumnRowGroupChanged() {\n        if (!this.showingUnderlyingFloatingFilter) {\n            this.updateDisplayedValue();\n        }\n    }\n    destroy() {\n        super.destroy();\n    }\n}\n__decorate$2c([\n    (0,ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.Autowired)('columnModel')\n], GroupFloatingFilterComp.prototype, \"columnModel\", void 0);\n__decorate$2c([\n    (0,ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.Autowired)('filterManager')\n], GroupFloatingFilterComp.prototype, \"filterManager\", void 0);\n__decorate$2c([\n    (0,ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.RefSelector)('eFloatingFilter')\n], GroupFloatingFilterComp.prototype, \"eFloatingFilter\", void 0);\n\nconst RowGroupingModule = {\n    version: VERSION$g,\n    moduleName: ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.ModuleNames.RowGroupingModule,\n    beans: [AggregationStage, FilterAggregatesStage, GroupStage, PivotColDefService, PivotStage, AggFuncService],\n    agStackComponents: [\n        { componentName: 'AgGridHeaderDropZones', componentClass: GridHeaderDropZones }\n    ],\n    userComponents: [\n        { componentName: 'agGroupColumnFilter', componentClass: GroupFilter },\n        { componentName: 'agGroupColumnFloatingFilter', componentClass: GroupFloatingFilterComp },\n    ],\n    dependantModules: [\n        EnterpriseCoreModule\n    ]\n};\n\nvar __decorate$2b = ( false) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nclass ValuesDropZonePanel extends BaseDropZonePanel {\n    constructor(horizontal) {\n        super(horizontal, 'aggregation');\n    }\n    passBeansUp() {\n        super.setBeans({\n            gridOptionsService: this.gridOptionsService,\n            eventService: this.eventService,\n            context: this.getContext(),\n            loggerFactory: this.loggerFactory,\n            dragAndDropService: this.dragAndDropService\n        });\n        const localeTextFunc = this.localeService.getLocaleTextFunc();\n        const emptyMessage = localeTextFunc('valueColumnsEmptyMessage', 'Drag here to aggregate');\n        const title = localeTextFunc('values', 'Values');\n        super.init({\n            dragAndDropIcon: ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.DragAndDropService.ICON_AGGREGATE,\n            icon: ag_grid_community__WEBPACK_IMPORTED_MODULE_0__._.createIconNoSpan('valuePanel', this.gridOptionsService, null),\n            emptyMessage: emptyMessage,\n            title: title\n        });\n        this.addManagedListener(this.eventService, ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.Events.EVENT_COLUMN_VALUE_CHANGED, this.refreshGui.bind(this));\n    }\n    getAriaLabel() {\n        const translate = this.localeService.getLocaleTextFunc();\n        const label = translate('ariaValuesDropZonePanelLabel', 'Values');\n        return label;\n    }\n    getTooltipParams() {\n        const res = super.getTooltipParams();\n        res.location = 'valueColumnsList';\n        return res;\n    }\n    getIconName() {\n        return this.isPotentialDndColumns() ? ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.DragAndDropService.ICON_AGGREGATE : ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.DragAndDropService.ICON_NOT_ALLOWED;\n    }\n    isColumnDroppable(column) {\n        // we never allow grouping of secondary columns\n        if (this.gridOptionsService.is('functionsReadOnly') || !column.isPrimary()) {\n            return false;\n        }\n        return column.isAllowValue() && !column.isValueActive();\n    }\n    updateColumns(columns) {\n        if (this.gridOptionsService.is('functionsPassive')) {\n            const event = {\n                type: ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.Events.EVENT_COLUMN_VALUE_CHANGE_REQUEST,\n                columns: columns\n            };\n            this.eventService.dispatchEvent(event);\n        }\n        else {\n            this.columnModel.setValueColumns(columns, \"toolPanelUi\");\n        }\n    }\n    getExistingColumns() {\n        return this.columnModel.getValueColumns();\n    }\n}\n__decorate$2b([\n    (0,ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.Autowired)('columnModel')\n], ValuesDropZonePanel.prototype, \"columnModel\", void 0);\n__decorate$2b([\n    (0,ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.Autowired)('loggerFactory')\n], ValuesDropZonePanel.prototype, \"loggerFactory\", void 0);\n__decorate$2b([\n    (0,ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.Autowired)('dragAndDropService')\n], ValuesDropZonePanel.prototype, \"dragAndDropService\", void 0);\n__decorate$2b([\n    ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.PostConstruct\n], ValuesDropZonePanel.prototype, \"passBeansUp\", null);\n\nvar __decorate$2a = ( false) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nclass PrimaryColsPanel extends ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.Component {\n    constructor() {\n        super(PrimaryColsPanel.TEMPLATE);\n    }\n    // we allow dragging in the toolPanel, but not when this component appears in the column menu\n    init(allowDragging, params, eventType) {\n        this.allowDragging = allowDragging;\n        this.params = params;\n        this.eventType = eventType;\n        this.primaryColsHeaderPanel.init(this.params);\n        const hideFilter = this.params.suppressColumnFilter;\n        const hideSelect = this.params.suppressColumnSelectAll;\n        const hideExpand = this.params.suppressColumnExpandAll;\n        if (hideExpand && hideFilter && hideSelect) {\n            this.primaryColsHeaderPanel.setDisplayed(false);\n        }\n        this.addManagedListener(this.primaryColsListPanel, 'groupExpanded', this.onGroupExpanded.bind(this));\n        this.addManagedListener(this.primaryColsListPanel, 'selectionChanged', this.onSelectionChange.bind(this));\n        this.primaryColsListPanel.init(this.params, this.allowDragging, this.eventType);\n        this.addManagedListener(this.primaryColsHeaderPanel, 'expandAll', this.onExpandAll.bind(this));\n        this.addManagedListener(this.primaryColsHeaderPanel, 'collapseAll', this.onCollapseAll.bind(this));\n        this.addManagedListener(this.primaryColsHeaderPanel, 'selectAll', this.onSelectAll.bind(this));\n        this.addManagedListener(this.primaryColsHeaderPanel, 'unselectAll', this.onUnselectAll.bind(this));\n        this.addManagedListener(this.primaryColsHeaderPanel, 'filterChanged', this.onFilterChanged.bind(this));\n        this.positionableFeature = new ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.PositionableFeature(this.getGui(), { minHeight: 100 });\n        this.createManagedBean(this.positionableFeature);\n    }\n    toggleResizable(resizable) {\n        this.positionableFeature.setResizable(resizable ? { bottom: true } : false);\n    }\n    onExpandAll() {\n        this.primaryColsListPanel.doSetExpandedAll(true);\n    }\n    onCollapseAll() {\n        this.primaryColsListPanel.doSetExpandedAll(false);\n    }\n    expandGroups(groupIds) {\n        this.primaryColsListPanel.setGroupsExpanded(true, groupIds);\n    }\n    collapseGroups(groupIds) {\n        this.primaryColsListPanel.setGroupsExpanded(false, groupIds);\n    }\n    setColumnLayout(colDefs) {\n        this.primaryColsListPanel.setColumnLayout(colDefs);\n    }\n    onFilterChanged(event) {\n        this.primaryColsListPanel.setFilterText(event.filterText);\n    }\n    syncLayoutWithGrid() {\n        this.primaryColsListPanel.onColumnsChanged();\n    }\n    onSelectAll() {\n        this.primaryColsListPanel.doSetSelectedAll(true);\n    }\n    onUnselectAll() {\n        this.primaryColsListPanel.doSetSelectedAll(false);\n    }\n    onGroupExpanded(event) {\n        this.primaryColsHeaderPanel.setExpandState(event.state);\n    }\n    onSelectionChange(event) {\n        this.primaryColsHeaderPanel.setSelectionState(event.state);\n    }\n}\nPrimaryColsPanel.TEMPLATE = `<div class=\"ag-column-select\">\n            <ag-primary-cols-header ref=\"primaryColsHeaderPanel\"></ag-primary-cols-header>\n            <ag-primary-cols-list ref=\"primaryColsListPanel\"></ag-primary-cols-list>\n        </div>`;\n__decorate$2a([\n    (0,ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.RefSelector)('primaryColsHeaderPanel')\n], PrimaryColsPanel.prototype, \"primaryColsHeaderPanel\", void 0);\n__decorate$2a([\n    (0,ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.RefSelector)('primaryColsListPanel')\n], PrimaryColsPanel.prototype, \"primaryColsListPanel\", void 0);\n\nvar __decorate$29 = ( false) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nclass ColumnToolPanel extends ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.Component {\n    constructor() {\n        super(ColumnToolPanel.TEMPLATE);\n        this.initialised = false;\n        this.childDestroyFuncs = [];\n    }\n    // lazy initialise the panel\n    setVisible(visible) {\n        super.setDisplayed(visible);\n        if (visible && !this.initialised) {\n            this.init(this.params);\n        }\n    }\n    init(params) {\n        const defaultParams = {\n            suppressColumnMove: false,\n            suppressColumnSelectAll: false,\n            suppressColumnFilter: false,\n            suppressColumnExpandAll: false,\n            contractColumnSelection: false,\n            suppressPivotMode: false,\n            suppressRowGroups: false,\n            suppressValues: false,\n            suppressPivots: false,\n            suppressSyncLayoutWithGrid: false,\n            api: this.gridApi,\n            columnApi: this.columnApi,\n        };\n        this.params = Object.assign(Object.assign(Object.assign({}, defaultParams), params), { context: this.gridOptionsService.context });\n        if (this.isRowGroupingModuleLoaded() && !this.params.suppressPivotMode) {\n            // DO NOT CHANGE TO createManagedBean\n            this.pivotModePanel = this.createBean(new PivotModePanel());\n            this.childDestroyFuncs.push(() => this.destroyBean(this.pivotModePanel));\n            this.appendChild(this.pivotModePanel);\n        }\n        // DO NOT CHANGE TO createManagedBean\n        this.primaryColsPanel = this.createBean(new PrimaryColsPanel());\n        this.childDestroyFuncs.push(() => this.destroyBean(this.primaryColsPanel));\n        this.primaryColsPanel.init(true, this.params, \"toolPanelUi\");\n        this.primaryColsPanel.addCssClass('ag-column-panel-column-select');\n        this.appendChild(this.primaryColsPanel);\n        if (this.isRowGroupingModuleLoaded()) {\n            if (!this.params.suppressRowGroups) {\n                // DO NOT CHANGE TO createManagedBean\n                this.rowGroupDropZonePanel = this.createBean(new RowGroupDropZonePanel(false));\n                this.childDestroyFuncs.push(() => this.destroyBean(this.rowGroupDropZonePanel));\n                this.appendChild(this.rowGroupDropZonePanel);\n            }\n            if (!this.params.suppressValues) {\n                // DO NOT CHANGE TO createManagedBean\n                this.valuesDropZonePanel = this.createBean(new ValuesDropZonePanel(false));\n                this.childDestroyFuncs.push(() => this.destroyBean(this.valuesDropZonePanel));\n                this.appendChild(this.valuesDropZonePanel);\n            }\n            if (!this.params.suppressPivots) {\n                // DO NOT CHANGE TO createManagedBean\n                this.pivotDropZonePanel = this.createBean(new PivotDropZonePanel(false));\n                this.childDestroyFuncs.push(() => this.destroyBean(this.pivotDropZonePanel));\n                this.appendChild(this.pivotDropZonePanel);\n            }\n            this.setLastVisible();\n            const pivotModeListener = this.addManagedListener(this.eventService, ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.Events.EVENT_COLUMN_PIVOT_MODE_CHANGED, () => {\n                this.resetChildrenHeight();\n                this.setLastVisible();\n            });\n            this.childDestroyFuncs.push(() => pivotModeListener());\n        }\n        this.initialised = true;\n    }\n    setPivotModeSectionVisible(visible) {\n        if (!this.isRowGroupingModuleLoaded()) {\n            return;\n        }\n        if (this.pivotModePanel) {\n            this.pivotModePanel.setDisplayed(visible);\n        }\n        else if (visible) {\n            this.pivotModePanel = this.createBean(new PivotModePanel());\n            // ensure pivot mode panel is positioned at the top of the columns tool panel\n            this.getGui().insertBefore(this.pivotModePanel.getGui(), this.getGui().firstChild);\n            this.childDestroyFuncs.push(() => this.destroyBean(this.pivotModePanel));\n        }\n        this.setLastVisible();\n    }\n    setRowGroupsSectionVisible(visible) {\n        if (!this.isRowGroupingModuleLoaded()) {\n            return;\n        }\n        if (this.rowGroupDropZonePanel) {\n            this.rowGroupDropZonePanel.setDisplayed(visible);\n        }\n        else if (visible) {\n            this.rowGroupDropZonePanel = this.createManagedBean(new RowGroupDropZonePanel(false));\n            this.appendChild(this.rowGroupDropZonePanel);\n        }\n        this.setLastVisible();\n    }\n    setValuesSectionVisible(visible) {\n        if (!this.isRowGroupingModuleLoaded()) {\n            return;\n        }\n        if (this.valuesDropZonePanel) {\n            this.valuesDropZonePanel.setDisplayed(visible);\n        }\n        else if (visible) {\n            this.valuesDropZonePanel = this.createManagedBean(new ValuesDropZonePanel(false));\n            this.appendChild(this.valuesDropZonePanel);\n        }\n        this.setLastVisible();\n    }\n    setPivotSectionVisible(visible) {\n        if (!this.isRowGroupingModuleLoaded()) {\n            return;\n        }\n        if (this.pivotDropZonePanel) {\n            this.pivotDropZonePanel.setDisplayed(visible);\n        }\n        else if (visible) {\n            this.pivotDropZonePanel = this.createManagedBean(new PivotDropZonePanel(false));\n            this.appendChild(this.pivotDropZonePanel);\n            this.pivotDropZonePanel.setDisplayed(visible);\n        }\n        this.setLastVisible();\n    }\n    setResizers() {\n        [\n            this.primaryColsPanel,\n            this.rowGroupDropZonePanel,\n            this.valuesDropZonePanel,\n            this.pivotDropZonePanel\n        ].forEach(panel => {\n            if (!panel) {\n                return;\n            }\n            const eGui = panel.getGui();\n            panel.toggleResizable(!eGui.classList.contains('ag-last-column-drop') && !eGui.classList.contains('ag-hidden'));\n        });\n    }\n    setLastVisible() {\n        const eGui = this.getGui();\n        const columnDrops = Array.prototype.slice.call(eGui.querySelectorAll('.ag-column-drop'));\n        columnDrops.forEach(columnDrop => columnDrop.classList.remove('ag-last-column-drop'));\n        const columnDropEls = eGui.querySelectorAll('.ag-column-drop:not(.ag-hidden)');\n        const lastVisible = ag_grid_community__WEBPACK_IMPORTED_MODULE_0__._.last(columnDropEls);\n        if (lastVisible) {\n            lastVisible.classList.add('ag-last-column-drop');\n        }\n        this.setResizers();\n    }\n    resetChildrenHeight() {\n        const eGui = this.getGui();\n        const children = eGui.children;\n        for (let i = 0; i < children.length; i++) {\n            const child = children[i];\n            child.style.removeProperty('height');\n            child.style.removeProperty('flex');\n        }\n    }\n    isRowGroupingModuleLoaded() {\n        return ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.ModuleRegistry.assertRegistered(ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.ModuleNames.RowGroupingModule, 'Row Grouping', this.context.getGridId());\n    }\n    expandColumnGroups(groupIds) {\n        this.primaryColsPanel.expandGroups(groupIds);\n    }\n    collapseColumnGroups(groupIds) {\n        this.primaryColsPanel.collapseGroups(groupIds);\n    }\n    setColumnLayout(colDefs) {\n        this.primaryColsPanel.setColumnLayout(colDefs);\n    }\n    syncLayoutWithGrid() {\n        this.primaryColsPanel.syncLayoutWithGrid();\n    }\n    destroyChildren() {\n        this.childDestroyFuncs.forEach(func => func());\n        this.childDestroyFuncs.length = 0;\n        ag_grid_community__WEBPACK_IMPORTED_MODULE_0__._.clearElement(this.getGui());\n    }\n    refresh() {\n        this.destroyChildren();\n        this.init(this.params);\n    }\n    // this is a user component, and IComponent has \"public destroy()\" as part of the interface.\n    // so this must be public.\n    destroy() {\n        this.destroyChildren();\n        super.destroy();\n    }\n}\nColumnToolPanel.TEMPLATE = `<div class=\"ag-column-panel\"></div>`;\n__decorate$29([\n    (0,ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.Autowired)(\"gridApi\")\n], ColumnToolPanel.prototype, \"gridApi\", void 0);\n__decorate$29([\n    (0,ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.Autowired)(\"columnApi\")\n], ColumnToolPanel.prototype, \"columnApi\", void 0);\n\nvar __decorate$28 = ( false) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nclass HorizontalResizeComp extends ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.Component {\n    constructor() {\n        super(/* html */ `<div class=\"ag-tool-panel-horizontal-resize\"></div>`);\n        this.minWidth = 100;\n        this.maxWidth = null;\n    }\n    setElementToResize(elementToResize) {\n        this.elementToResize = elementToResize;\n    }\n    postConstruct() {\n        const finishedWithResizeFunc = this.horizontalResizeService.addResizeBar({\n            eResizeBar: this.getGui(),\n            dragStartPixels: 1,\n            onResizeStart: this.onResizeStart.bind(this),\n            onResizing: this.onResizing.bind(this),\n            onResizeEnd: this.onResizeEnd.bind(this)\n        });\n        this.addDestroyFunc(finishedWithResizeFunc);\n        this.setInverted(this.gridOptionsService.is('enableRtl'));\n    }\n    dispatchResizeEvent(start, end, width) {\n        const event = {\n            type: ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.Events.EVENT_TOOL_PANEL_SIZE_CHANGED,\n            width: width,\n            started: start,\n            ended: end,\n        };\n        this.eventService.dispatchEvent(event);\n    }\n    onResizeStart() {\n        this.startingWidth = this.elementToResize.offsetWidth;\n        this.dispatchResizeEvent(true, false, this.startingWidth);\n    }\n    onResizeEnd(delta) {\n        return this.onResizing(delta, true);\n    }\n    onResizing(delta, isEnd = false) {\n        const direction = this.inverted ? -1 : 1;\n        let newWidth = Math.max(this.minWidth, Math.floor(this.startingWidth - (delta * direction)));\n        if (this.maxWidth != null) {\n            newWidth = Math.min(this.maxWidth, newWidth);\n        }\n        this.elementToResize.style.width = `${newWidth}px`;\n        this.dispatchResizeEvent(false, isEnd, newWidth);\n    }\n    setInverted(inverted) {\n        this.inverted = inverted;\n    }\n    setMaxWidth(value) {\n        this.maxWidth = value;\n    }\n    setMinWidth(value) {\n        if (value != null) {\n            this.minWidth = value;\n        }\n        else {\n            this.minWidth = 100;\n        }\n    }\n}\n__decorate$28([\n    (0,ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.Autowired)('horizontalResizeService')\n], HorizontalResizeComp.prototype, \"horizontalResizeService\", void 0);\n__decorate$28([\n    ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.PostConstruct\n], HorizontalResizeComp.prototype, \"postConstruct\", null);\n\nvar __decorate$27 = ( false) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nclass SideBarButtonComp extends ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.Component {\n    constructor(toolPanelDef) {\n        super();\n        this.toolPanelDef = toolPanelDef;\n    }\n    getToolPanelId() {\n        return this.toolPanelDef.id;\n    }\n    postConstruct() {\n        const template = this.createTemplate();\n        this.setTemplate(template);\n        this.setLabel();\n        this.setIcon();\n        this.addManagedListener(this.eToggleButton, 'click', this.onButtonPressed.bind(this));\n        this.eToggleButton.setAttribute('id', `ag-${this.getCompId()}-button`);\n    }\n    createTemplate() {\n        const res = /* html */ `<div class=\"ag-side-button\" role=\"presentation\">\n                <button type=\"button\" ref=\"eToggleButton\" tabindex=\"-1\" role=\"tab\" aria-expanded=\"false\" class=\"ag-button ag-side-button-button\">\n                    <div ref=\"eIconWrapper\" class=\"ag-side-button-icon-wrapper\" aria-hidden=\"true\"></div>\n                    <span ref =\"eLabel\" class=\"ag-side-button-label\"></span>\n                </button>\n            </div>`;\n        return res;\n    }\n    setLabel() {\n        const translate = this.localeService.getLocaleTextFunc();\n        const def = this.toolPanelDef;\n        const label = translate(def.labelKey, def.labelDefault);\n        this.eLabel.innerText = label;\n    }\n    setIcon() {\n        this.eIconWrapper.insertAdjacentElement('afterbegin', ag_grid_community__WEBPACK_IMPORTED_MODULE_0__._.createIconNoSpan(this.toolPanelDef.iconKey, this.gridOptionsService));\n    }\n    onButtonPressed() {\n        this.dispatchEvent({ type: SideBarButtonComp.EVENT_TOGGLE_BUTTON_CLICKED });\n    }\n    setSelected(selected) {\n        this.addOrRemoveCssClass('ag-selected', selected);\n        ag_grid_community__WEBPACK_IMPORTED_MODULE_0__._.setAriaExpanded(this.eToggleButton, selected);\n    }\n    getButtonElement() {\n        return this.eToggleButton;\n    }\n}\nSideBarButtonComp.EVENT_TOGGLE_BUTTON_CLICKED = 'toggleButtonClicked';\n__decorate$27([\n    (0,ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.RefSelector)('eToggleButton')\n], SideBarButtonComp.prototype, \"eToggleButton\", void 0);\n__decorate$27([\n    (0,ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.RefSelector)('eIconWrapper')\n], SideBarButtonComp.prototype, \"eIconWrapper\", void 0);\n__decorate$27([\n    (0,ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.RefSelector)('eLabel')\n], SideBarButtonComp.prototype, \"eLabel\", void 0);\n__decorate$27([\n    ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.PostConstruct\n], SideBarButtonComp.prototype, \"postConstruct\", null);\n\nvar __decorate$26 = ( false) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nclass SideBarButtonsComp extends ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.Component {\n    constructor() {\n        super(SideBarButtonsComp.TEMPLATE);\n        this.buttonComps = [];\n    }\n    postConstruct() {\n        this.addManagedListener(this.getFocusableElement(), 'keydown', this.handleKeyDown.bind(this));\n    }\n    handleKeyDown(e) {\n        if (e.key !== ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.KeyCode.TAB || !e.shiftKey) {\n            return;\n        }\n        const lastColumn = ag_grid_community__WEBPACK_IMPORTED_MODULE_0__._.last(this.columnModel.getAllDisplayedColumns());\n        if (this.focusService.focusGridView(lastColumn, true)) {\n            e.preventDefault();\n        }\n    }\n    setActiveButton(id) {\n        this.buttonComps.forEach(comp => {\n            comp.setSelected(id === comp.getToolPanelId());\n        });\n    }\n    addButtonComp(def) {\n        const buttonComp = this.createBean(new SideBarButtonComp(def));\n        this.buttonComps.push(buttonComp);\n        this.appendChild(buttonComp);\n        buttonComp.addEventListener(SideBarButtonComp.EVENT_TOGGLE_BUTTON_CLICKED, () => {\n            this.dispatchEvent({\n                type: SideBarButtonsComp.EVENT_SIDE_BAR_BUTTON_CLICKED,\n                toolPanelId: def.id\n            });\n        });\n        return buttonComp;\n    }\n    clearButtons() {\n        this.buttonComps = this.destroyBeans(this.buttonComps);\n        ag_grid_community__WEBPACK_IMPORTED_MODULE_0__._.clearElement(this.getGui());\n    }\n}\nSideBarButtonsComp.EVENT_SIDE_BAR_BUTTON_CLICKED = 'sideBarButtonClicked';\nSideBarButtonsComp.TEMPLATE = `<div class=\"ag-side-buttons\" role=\"tablist\"></div>`;\n__decorate$26([\n    (0,ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.Autowired)('focusService')\n], SideBarButtonsComp.prototype, \"focusService\", void 0);\n__decorate$26([\n    (0,ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.Autowired)('columnModel')\n], SideBarButtonsComp.prototype, \"columnModel\", void 0);\n__decorate$26([\n    ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.PostConstruct\n], SideBarButtonsComp.prototype, \"postConstruct\", null);\n__decorate$26([\n    ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.PreDestroy\n], SideBarButtonsComp.prototype, \"clearButtons\", null);\n\nclass SideBarDefParser {\n    static parse(toParse) {\n        if (!toParse) {\n            return undefined;\n        }\n        if (toParse === true) {\n            return {\n                toolPanels: [\n                    SideBarDefParser.DEFAULT_COLUMN_COMP,\n                    SideBarDefParser.DEFAULT_FILTER_COMP,\n                ],\n                defaultToolPanel: 'columns'\n            };\n        }\n        if (typeof toParse === 'string') {\n            return SideBarDefParser.parse([toParse]);\n        }\n        if (Array.isArray(toParse)) {\n            const comps = [];\n            toParse.forEach(key => {\n                const lookupResult = SideBarDefParser.DEFAULT_BY_KEY[key];\n                if (!lookupResult) {\n                    console.warn(`AG Grid: the key ${key} is not a valid key for specifying a tool panel, valid keys are: ${Object.keys(SideBarDefParser.DEFAULT_BY_KEY).join(',')}`);\n                    return;\n                }\n                comps.push(lookupResult);\n            });\n            if (comps.length === 0) {\n                return undefined;\n            }\n            return {\n                toolPanels: comps,\n                defaultToolPanel: comps[0].id\n            };\n        }\n        const result = {\n            toolPanels: SideBarDefParser.parseComponents(toParse.toolPanels),\n            defaultToolPanel: toParse.defaultToolPanel,\n            hiddenByDefault: toParse.hiddenByDefault,\n            position: toParse.position\n        };\n        return result;\n    }\n    static parseComponents(from) {\n        const result = [];\n        if (!from) {\n            return result;\n        }\n        from.forEach((it) => {\n            let toAdd = null;\n            if (typeof it === 'string') {\n                const lookupResult = SideBarDefParser.DEFAULT_BY_KEY[it];\n                if (!lookupResult) {\n                    console.warn(`AG Grid: the key ${it} is not a valid key for specifying a tool panel, valid keys are: ${Object.keys(SideBarDefParser.DEFAULT_BY_KEY).join(',')}`);\n                    return;\n                }\n                toAdd = lookupResult;\n            }\n            else {\n                toAdd = it;\n            }\n            result.push(toAdd);\n        });\n        return result;\n    }\n}\nSideBarDefParser.DEFAULT_COLUMN_COMP = {\n    id: 'columns',\n    labelDefault: 'Columns',\n    labelKey: 'columns',\n    iconKey: 'columns',\n    toolPanel: 'agColumnsToolPanel',\n};\nSideBarDefParser.DEFAULT_FILTER_COMP = {\n    id: 'filters',\n    labelDefault: 'Filters',\n    labelKey: 'filters',\n    iconKey: 'filter',\n    toolPanel: 'agFiltersToolPanel',\n};\nSideBarDefParser.DEFAULT_BY_KEY = {\n    columns: SideBarDefParser.DEFAULT_COLUMN_COMP,\n    filters: SideBarDefParser.DEFAULT_FILTER_COMP\n};\n\nvar __decorate$25 = ( false) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nclass ToolPanelWrapper extends ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.Component {\n    constructor() {\n        super(ToolPanelWrapper.TEMPLATE);\n    }\n    setupResize() {\n        const eGui = this.getGui();\n        const resizeBar = this.resizeBar = this.createManagedBean(new HorizontalResizeComp());\n        eGui.setAttribute('id', `ag-${this.getCompId()}`);\n        resizeBar.setElementToResize(eGui);\n        this.appendChild(resizeBar);\n    }\n    getToolPanelId() {\n        return this.toolPanelId;\n    }\n    setToolPanelDef(toolPanelDef) {\n        const { id, minWidth, maxWidth, width } = toolPanelDef;\n        this.toolPanelId = id;\n        this.width = width;\n        const params = {};\n        const compDetails = this.userComponentFactory.getToolPanelCompDetails(toolPanelDef, params);\n        const componentPromise = compDetails.newAgStackInstance();\n        if (componentPromise == null) {\n            console.warn(`AG Grid: error processing tool panel component ${id}. You need to specify 'toolPanel'`);\n            return;\n        }\n        componentPromise.then(this.setToolPanelComponent.bind(this));\n        if (minWidth != null) {\n            this.resizeBar.setMinWidth(minWidth);\n        }\n        if (maxWidth != null) {\n            this.resizeBar.setMaxWidth(maxWidth);\n        }\n    }\n    setToolPanelComponent(compInstance) {\n        this.toolPanelCompInstance = compInstance;\n        this.appendChild(compInstance.getGui());\n        this.addDestroyFunc(() => {\n            this.destroyBean(compInstance);\n        });\n        if (this.width) {\n            this.getGui().style.width = `${this.width}px`;\n        }\n    }\n    getToolPanelInstance() {\n        return this.toolPanelCompInstance;\n    }\n    setResizerSizerSide(side) {\n        const isRtl = this.gridOptionsService.is('enableRtl');\n        const isLeft = side === 'left';\n        const inverted = isRtl ? isLeft : !isLeft;\n        this.resizeBar.setInverted(inverted);\n    }\n    refresh() {\n        this.toolPanelCompInstance.refresh();\n    }\n}\nToolPanelWrapper.TEMPLATE = `<div class=\"ag-tool-panel-wrapper\" role=\"tabpanel\"/>`;\n__decorate$25([\n    (0,ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.Autowired)(\"userComponentFactory\")\n], ToolPanelWrapper.prototype, \"userComponentFactory\", void 0);\n__decorate$25([\n    ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.PostConstruct\n], ToolPanelWrapper.prototype, \"setupResize\", null);\n\nvar __decorate$24 = ( false) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nclass SideBarComp extends ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.Component {\n    constructor() {\n        super(SideBarComp.TEMPLATE);\n        this.toolPanelWrappers = [];\n    }\n    postConstruct() {\n        this.sideBarButtonsComp.addEventListener(SideBarButtonsComp.EVENT_SIDE_BAR_BUTTON_CLICKED, this.onToolPanelButtonClicked.bind(this));\n        this.setSideBarDef();\n        this.addManagedPropertyListener('sideBar', () => {\n            this.clearDownUi();\n            this.setSideBarDef();\n        });\n        this.gridApi.registerSideBarComp(this);\n        this.createManagedBean(new ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.ManagedFocusFeature(this.getFocusableElement(), {\n            onTabKeyDown: this.onTabKeyDown.bind(this),\n            handleKeyDown: this.handleKeyDown.bind(this)\n        }));\n    }\n    onTabKeyDown(e) {\n        if (e.defaultPrevented) {\n            return;\n        }\n        const { focusService, sideBarButtonsComp } = this;\n        const eGui = this.getGui();\n        const sideBarGui = sideBarButtonsComp.getGui();\n        const eDocument = this.gridOptionsService.getDocument();\n        const activeElement = eDocument.activeElement;\n        const openPanel = eGui.querySelector('.ag-tool-panel-wrapper:not(.ag-hidden)');\n        const target = e.target;\n        if (!openPanel) {\n            return;\n        }\n        if (sideBarGui.contains(activeElement)) {\n            if (focusService.focusInto(openPanel, e.shiftKey)) {\n                e.preventDefault();\n            }\n            return;\n        }\n        // only handle backwards focus to target the sideBar buttons\n        if (!e.shiftKey) {\n            return;\n        }\n        let nextEl = null;\n        if (openPanel.contains(activeElement)) {\n            nextEl = this.focusService.findNextFocusableElement(openPanel, undefined, true);\n        }\n        else if (focusService.isTargetUnderManagedComponent(openPanel, target) && e.shiftKey) {\n            nextEl = this.focusService.findFocusableElementBeforeTabGuard(openPanel, target);\n        }\n        if (!nextEl) {\n            nextEl = sideBarGui.querySelector('.ag-selected button');\n        }\n        if (nextEl) {\n            e.preventDefault();\n            nextEl.focus();\n        }\n    }\n    handleKeyDown(e) {\n        const eDocument = this.gridOptionsService.getDocument();\n        if (!this.sideBarButtonsComp.getGui().contains(eDocument.activeElement)) {\n            return;\n        }\n        const sideBarGui = this.sideBarButtonsComp.getGui();\n        const buttons = Array.prototype.slice.call(sideBarGui.querySelectorAll('.ag-side-button'));\n        const currentButton = eDocument.activeElement;\n        const currentPos = buttons.findIndex(button => button.contains(currentButton));\n        let nextPos = null;\n        switch (e.key) {\n            case ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.KeyCode.LEFT:\n            case ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.KeyCode.UP:\n                nextPos = Math.max(0, currentPos - 1);\n                break;\n            case ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.KeyCode.RIGHT:\n            case ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.KeyCode.DOWN:\n                nextPos = Math.min(currentPos + 1, buttons.length - 1);\n                break;\n        }\n        if (nextPos === null) {\n            return;\n        }\n        const innerButton = buttons[nextPos].querySelector('button');\n        if (innerButton) {\n            innerButton.focus();\n            e.preventDefault();\n        }\n    }\n    onToolPanelButtonClicked(event) {\n        const id = event.toolPanelId;\n        const openedItem = this.openedItem();\n        // if item was already open, we close it\n        if (openedItem === id) {\n            this.openToolPanel(undefined, 'sideBarButtonClicked'); // passing undefined closes\n        }\n        else {\n            this.openToolPanel(id, 'sideBarButtonClicked');\n        }\n    }\n    clearDownUi() {\n        this.sideBarButtonsComp.clearButtons();\n        this.destroyToolPanelWrappers();\n    }\n    setSideBarDef() {\n        // initially hide side bar\n        this.setDisplayed(false);\n        const sideBarRaw = this.gridOptionsService.get('sideBar');\n        this.sideBar = SideBarDefParser.parse(sideBarRaw);\n        if (!!this.sideBar && !!this.sideBar.toolPanels) {\n            const shouldDisplaySideBar = !this.sideBar.hiddenByDefault;\n            this.setDisplayed(shouldDisplaySideBar);\n            const toolPanelDefs = this.sideBar.toolPanels;\n            this.createToolPanelsAndSideButtons(toolPanelDefs);\n            this.setSideBarPosition(this.sideBar.position);\n            if (!this.sideBar.hiddenByDefault) {\n                this.openToolPanel(this.sideBar.defaultToolPanel, 'sideBarInitializing');\n            }\n        }\n    }\n    getDef() {\n        return this.sideBar;\n    }\n    setSideBarPosition(position) {\n        if (!position) {\n            position = 'right';\n        }\n        const isLeft = position === 'left';\n        const resizerSide = isLeft ? 'right' : 'left';\n        this.addOrRemoveCssClass('ag-side-bar-left', isLeft);\n        this.addOrRemoveCssClass('ag-side-bar-right', !isLeft);\n        this.toolPanelWrappers.forEach(wrapper => {\n            wrapper.setResizerSizerSide(resizerSide);\n        });\n        return this;\n    }\n    createToolPanelsAndSideButtons(defs) {\n        for (const def of defs) {\n            this.createToolPanelAndSideButton(def);\n        }\n    }\n    validateDef(def) {\n        if (def.id == null) {\n            console.warn(`AG Grid: please review all your toolPanel components, it seems like at least one of them doesn't have an id`);\n            return false;\n        }\n        // helpers, in case user doesn't have the right module loaded\n        if (def.toolPanel === 'agColumnsToolPanel') {\n            const moduleMissing = !ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.ModuleRegistry.assertRegistered(ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.ModuleNames.ColumnsToolPanelModule, 'Column Tool Panel', this.context.getGridId());\n            if (moduleMissing) {\n                return false;\n            }\n        }\n        if (def.toolPanel === 'agFiltersToolPanel') {\n            const moduleMissing = !ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.ModuleRegistry.assertRegistered(ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.ModuleNames.FiltersToolPanelModule, 'Filters Tool Panel', this.context.getGridId());\n            if (moduleMissing) {\n                return false;\n            }\n        }\n        return true;\n    }\n    createToolPanelAndSideButton(def) {\n        if (!this.validateDef(def)) {\n            return;\n        }\n        const button = this.sideBarButtonsComp.addButtonComp(def);\n        const wrapper = this.getContext().createBean(new ToolPanelWrapper());\n        wrapper.setToolPanelDef(def);\n        wrapper.setDisplayed(false);\n        const wrapperGui = wrapper.getGui();\n        this.appendChild(wrapperGui);\n        this.toolPanelWrappers.push(wrapper);\n        ag_grid_community__WEBPACK_IMPORTED_MODULE_0__._.setAriaControls(button.getButtonElement(), wrapperGui);\n    }\n    refresh() {\n        this.toolPanelWrappers.forEach(wrapper => wrapper.refresh());\n    }\n    openToolPanel(key, source = 'api') {\n        const currentlyOpenedKey = this.openedItem();\n        if (currentlyOpenedKey === key) {\n            return;\n        }\n        this.toolPanelWrappers.forEach(wrapper => {\n            const show = key === wrapper.getToolPanelId();\n            wrapper.setDisplayed(show);\n        });\n        const newlyOpenedKey = this.openedItem();\n        const openToolPanelChanged = currentlyOpenedKey !== newlyOpenedKey;\n        if (openToolPanelChanged) {\n            this.sideBarButtonsComp.setActiveButton(key);\n            this.raiseToolPanelVisibleEvent(key, currentlyOpenedKey !== null && currentlyOpenedKey !== void 0 ? currentlyOpenedKey : undefined, source);\n        }\n    }\n    getToolPanelInstance(key) {\n        const toolPanelWrapper = this.toolPanelWrappers.filter(toolPanel => toolPanel.getToolPanelId() === key)[0];\n        if (!toolPanelWrapper) {\n            console.warn(`AG Grid: unable to lookup Tool Panel as invalid key supplied: ${key}`);\n            return;\n        }\n        return toolPanelWrapper.getToolPanelInstance();\n    }\n    raiseToolPanelVisibleEvent(key, previousKey, source) {\n        const switchingToolPanel = !!key && !!previousKey;\n        if (previousKey) {\n            const event = {\n                type: ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.Events.EVENT_TOOL_PANEL_VISIBLE_CHANGED,\n                source,\n                key: previousKey,\n                visible: false,\n                switchingToolPanel,\n            };\n            this.eventService.dispatchEvent(event);\n        }\n        if (key) {\n            const event = {\n                type: ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.Events.EVENT_TOOL_PANEL_VISIBLE_CHANGED,\n                source,\n                key,\n                visible: true,\n                switchingToolPanel,\n            };\n            this.eventService.dispatchEvent(event);\n        }\n    }\n    close(source = 'api') {\n        this.openToolPanel(undefined, source);\n    }\n    isToolPanelShowing() {\n        return !!this.openedItem();\n    }\n    openedItem() {\n        let activeToolPanel = null;\n        this.toolPanelWrappers.forEach(wrapper => {\n            if (wrapper.isDisplayed()) {\n                activeToolPanel = wrapper.getToolPanelId();\n            }\n        });\n        return activeToolPanel;\n    }\n    destroyToolPanelWrappers() {\n        this.toolPanelWrappers.forEach(wrapper => {\n            ag_grid_community__WEBPACK_IMPORTED_MODULE_0__._.removeFromParent(wrapper.getGui());\n            this.destroyBean(wrapper);\n        });\n        this.toolPanelWrappers.length = 0;\n    }\n    destroy() {\n        this.destroyToolPanelWrappers();\n        super.destroy();\n    }\n}\nSideBarComp.TEMPLATE = `<div class=\"ag-side-bar ag-unselectable\">\n            <ag-side-bar-buttons ref=\"sideBarButtons\"></ag-side-bar-buttons>\n        </div>`;\n__decorate$24([\n    (0,ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.Autowired)('gridApi')\n], SideBarComp.prototype, \"gridApi\", void 0);\n__decorate$24([\n    (0,ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.Autowired)('focusService')\n], SideBarComp.prototype, \"focusService\", void 0);\n__decorate$24([\n    (0,ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.RefSelector)('sideBarButtons')\n], SideBarComp.prototype, \"sideBarButtonsComp\", void 0);\n__decorate$24([\n    ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.PostConstruct\n], SideBarComp.prototype, \"postConstruct\", null);\n\nvar __decorate$23 = ( false) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nlet ToolPanelColDefService = class ToolPanelColDefService extends ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.BeanStub {\n    constructor() {\n        super(...arguments);\n        this.isColGroupDef = (colDef) => colDef && typeof colDef.children !== 'undefined';\n        this.getId = (colDef) => {\n            return this.isColGroupDef(colDef) ? colDef.groupId : colDef.colId;\n        };\n    }\n    createColumnTree(colDefs) {\n        const invalidColIds = [];\n        const createDummyColGroup = (abstractColDef, depth) => {\n            if (this.isColGroupDef(abstractColDef)) {\n                // creating 'dummy' group which is not associated with grid column group\n                const groupDef = abstractColDef;\n                const groupId = (typeof groupDef.groupId !== 'undefined') ? groupDef.groupId : groupDef.headerName;\n                const group = new ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.ProvidedColumnGroup(groupDef, groupId, false, depth);\n                const children = [];\n                groupDef.children.forEach(def => {\n                    const child = createDummyColGroup(def, depth + 1);\n                    // check column exists in case invalid colDef is supplied for primary column\n                    if (child) {\n                        children.push(child);\n                    }\n                });\n                group.setChildren(children);\n                return group;\n            }\n            else {\n                const colDef = abstractColDef;\n                const key = colDef.colId ? colDef.colId : colDef.field;\n                const column = this.columnModel.getPrimaryColumn(key);\n                if (!column) {\n                    invalidColIds.push(colDef);\n                }\n                return column;\n            }\n        };\n        const mappedResults = [];\n        colDefs.forEach(colDef => {\n            const result = createDummyColGroup(colDef, 0);\n            if (result) {\n                // only return correctly mapped colDef results\n                mappedResults.push(result);\n            }\n        });\n        if (invalidColIds.length > 0) {\n            console.warn('AG Grid: unable to find grid columns for the supplied colDef(s):', invalidColIds);\n        }\n        return mappedResults;\n    }\n    syncLayoutWithGrid(syncLayoutCallback) {\n        // extract ordered list of leaf path trees (column group hierarchy for each individual leaf column)\n        const leafPathTrees = this.getLeafPathTrees();\n        // merge leaf path tree taking split column groups into account\n        const mergedColumnTrees = this.mergeLeafPathTrees(leafPathTrees);\n        // sync layout with merged column trees\n        syncLayoutCallback(mergedColumnTrees);\n    }\n    getLeafPathTrees() {\n        // leaf tree paths are obtained by walking up the tree starting at a column until we reach the top level group.\n        const getLeafPathTree = (node, childDef) => {\n            let leafPathTree;\n            // build up tree in reverse order\n            if (node instanceof ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.ProvidedColumnGroup) {\n                if (node.isPadding()) {\n                    // skip over padding groups\n                    leafPathTree = childDef;\n                }\n                else {\n                    const groupDef = Object.assign({}, node.getColGroupDef());\n                    // ensure group contains groupId\n                    groupDef.groupId = node.getGroupId();\n                    groupDef.children = [childDef];\n                    leafPathTree = groupDef;\n                }\n            }\n            else {\n                const colDef = Object.assign({}, node.getColDef());\n                // ensure col contains colId\n                colDef.colId = node.getColId();\n                leafPathTree = colDef;\n            }\n            // walk tree\n            const parent = node.getOriginalParent();\n            if (parent) {\n                // keep walking up the tree until we reach the root\n                return getLeafPathTree(parent, leafPathTree);\n            }\n            else {\n                // we have reached the root - exit with resulting leaf path tree\n                return leafPathTree;\n            }\n        };\n        // obtain a sorted list of all grid columns\n        const allGridColumns = this.columnModel.getAllGridColumns();\n        // only primary columns and non row group columns should appear in the tool panel\n        const allPrimaryGridColumns = allGridColumns.filter(column => {\n            const colDef = column.getColDef();\n            return column.isPrimary() && !colDef.showRowGroup;\n        });\n        // construct a leaf path tree for each column\n        return allPrimaryGridColumns.map(col => getLeafPathTree(col, col.getColDef()));\n    }\n    mergeLeafPathTrees(leafPathTrees) {\n        const matchingRootGroupIds = (pathA, pathB) => {\n            const bothPathsAreGroups = this.isColGroupDef(pathA) && this.isColGroupDef(pathB);\n            return bothPathsAreGroups && this.getId(pathA) === this.getId(pathB);\n        };\n        const mergeTrees = (treeA, treeB) => {\n            if (!this.isColGroupDef(treeB)) {\n                return treeA;\n            }\n            const mergeResult = treeA;\n            const groupToMerge = treeB;\n            if (groupToMerge.children && groupToMerge.groupId) {\n                const added = this.addChildrenToGroup(mergeResult, groupToMerge.groupId, groupToMerge.children[0]);\n                if (added) {\n                    return mergeResult;\n                }\n            }\n            groupToMerge.children.forEach(child => mergeTrees(mergeResult, child));\n            return mergeResult;\n        };\n        // we can't just merge the leaf path trees as groups can be split apart - instead only merge if leaf\n        // path groups with the same root group id are contiguous.\n        const mergeColDefs = [];\n        for (let i = 1; i <= leafPathTrees.length; i++) {\n            const first = leafPathTrees[i - 1];\n            const second = leafPathTrees[i];\n            if (matchingRootGroupIds(first, second)) {\n                leafPathTrees[i] = mergeTrees(first, second);\n            }\n            else {\n                mergeColDefs.push(first);\n            }\n        }\n        return mergeColDefs;\n    }\n    addChildrenToGroup(tree, groupId, colDef) {\n        const subGroupIsSplit = (currentSubGroup, currentSubGroupToAdd) => {\n            const existingChildIds = currentSubGroup.children.map(this.getId);\n            const childGroupAlreadyExists = ag_grid_community__WEBPACK_IMPORTED_MODULE_0__._.includes(existingChildIds, this.getId(currentSubGroupToAdd));\n            const lastChild = ag_grid_community__WEBPACK_IMPORTED_MODULE_0__._.last(currentSubGroup.children);\n            const lastChildIsDifferent = lastChild && this.getId(lastChild) !== this.getId(currentSubGroupToAdd);\n            return childGroupAlreadyExists && lastChildIsDifferent;\n        };\n        if (!this.isColGroupDef(tree)) {\n            return true;\n        }\n        const currentGroup = tree;\n        const groupToAdd = colDef;\n        if (subGroupIsSplit(currentGroup, groupToAdd)) {\n            currentGroup.children.push(groupToAdd);\n            return true;\n        }\n        if (currentGroup.groupId === groupId) {\n            // add children that don't already exist to group\n            const existingChildIds = currentGroup.children.map(this.getId);\n            const colDefAlreadyPresent = ag_grid_community__WEBPACK_IMPORTED_MODULE_0__._.includes(existingChildIds, this.getId(groupToAdd));\n            if (!colDefAlreadyPresent) {\n                currentGroup.children.push(groupToAdd);\n                return true;\n            }\n        }\n        // recurse until correct group is found to add children\n        currentGroup.children.forEach(subGroup => this.addChildrenToGroup(subGroup, groupId, colDef));\n        return false;\n    }\n};\n__decorate$23([\n    (0,ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.Autowired)('columnModel')\n], ToolPanelColDefService.prototype, \"columnModel\", void 0);\nToolPanelColDefService = __decorate$23([\n    (0,ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.Bean)('toolPanelColDefService')\n], ToolPanelColDefService);\n\n// DO NOT UPDATE MANUALLY: Generated from script during build time\nconst VERSION$f = '30.0.2';\n\nconst SideBarModule = {\n    version: VERSION$f,\n    moduleName: ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.ModuleNames.SideBarModule,\n    beans: [ToolPanelColDefService],\n    agStackComponents: [\n        { componentName: 'AgHorizontalResize', componentClass: HorizontalResizeComp },\n        { componentName: 'AgSideBar', componentClass: SideBarComp },\n        { componentName: 'AgSideBarButtons', componentClass: SideBarButtonsComp },\n    ],\n    dependantModules: [\n        EnterpriseCoreModule\n    ]\n};\n\nvar __decorate$22 = ( false) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nlet ModelItemUtils = class ModelItemUtils {\n    selectAllChildren(colTree, selectAllChecked, eventType) {\n        const cols = this.extractAllLeafColumns(colTree);\n        this.setAllColumns(cols, selectAllChecked, eventType);\n    }\n    setColumn(col, selectAllChecked, eventType) {\n        this.setAllColumns([col], selectAllChecked, eventType);\n    }\n    setAllColumns(cols, selectAllChecked, eventType) {\n        if (this.columnModel.isPivotMode()) {\n            this.setAllPivot(cols, selectAllChecked, eventType);\n        }\n        else {\n            this.setAllVisible(cols, selectAllChecked, eventType);\n        }\n    }\n    extractAllLeafColumns(allItems) {\n        const res = [];\n        const recursiveFunc = (items) => {\n            items.forEach(item => {\n                if (!item.isPassesFilter()) {\n                    return;\n                }\n                if (item.isGroup()) {\n                    recursiveFunc(item.getChildren());\n                }\n                else {\n                    res.push(item.getColumn());\n                }\n            });\n        };\n        recursiveFunc(allItems);\n        return res;\n    }\n    setAllVisible(columns, visible, eventType) {\n        const colStateItems = [];\n        columns.forEach(col => {\n            if (col.getColDef().lockVisible) {\n                return;\n            }\n            if (col.isVisible() != visible) {\n                colStateItems.push({\n                    colId: col.getId(),\n                    hide: !visible\n                });\n            }\n        });\n        if (colStateItems.length > 0) {\n            this.columnModel.applyColumnState({ state: colStateItems }, eventType);\n        }\n    }\n    setAllPivot(columns, value, eventType) {\n        if (this.gridOptionsService.is('functionsPassive')) {\n            this.setAllPivotPassive(columns, value);\n        }\n        else {\n            this.setAllPivotActive(columns, value, eventType);\n        }\n    }\n    setAllPivotPassive(columns, value) {\n        const copyOfPivotColumns = this.columnModel.getPivotColumns().slice();\n        const copyOfValueColumns = this.columnModel.getValueColumns().slice();\n        const copyOfRowGroupColumns = this.columnModel.getRowGroupColumns().slice();\n        let pivotChanged = false;\n        let valueChanged = false;\n        let rowGroupChanged = false;\n        const turnOnAction = (col) => {\n            // don't change any column that's already got a function active\n            if (col.isAnyFunctionActive()) {\n                return;\n            }\n            if (col.isAllowValue()) {\n                copyOfValueColumns.push(col);\n                valueChanged = true;\n            }\n            else if (col.isAllowRowGroup()) {\n                copyOfRowGroupColumns.push(col);\n                pivotChanged = true;\n            }\n            else if (col.isAllowPivot()) {\n                copyOfPivotColumns.push(col);\n                rowGroupChanged = true;\n            }\n        };\n        const turnOffAction = (col) => {\n            if (!col.isAnyFunctionActive()) {\n                return;\n            }\n            if (copyOfPivotColumns.indexOf(col) >= 0) {\n                ag_grid_community__WEBPACK_IMPORTED_MODULE_0__._.removeFromArray(copyOfPivotColumns, col);\n                pivotChanged = true;\n            }\n            if (copyOfValueColumns.indexOf(col) >= 0) {\n                ag_grid_community__WEBPACK_IMPORTED_MODULE_0__._.removeFromArray(copyOfValueColumns, col);\n                valueChanged = true;\n            }\n            if (copyOfRowGroupColumns.indexOf(col) >= 0) {\n                ag_grid_community__WEBPACK_IMPORTED_MODULE_0__._.removeFromArray(copyOfRowGroupColumns, col);\n                rowGroupChanged = true;\n            }\n        };\n        const action = value ? turnOnAction : turnOffAction;\n        columns.forEach(action);\n        if (pivotChanged) {\n            const event = {\n                type: ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.Events.EVENT_COLUMN_PIVOT_CHANGE_REQUEST,\n                columns: copyOfPivotColumns\n            };\n            this.eventService.dispatchEvent(event);\n        }\n        if (rowGroupChanged) {\n            const event = {\n                type: ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.Events.EVENT_COLUMN_ROW_GROUP_CHANGE_REQUEST,\n                columns: copyOfRowGroupColumns\n            };\n            this.eventService.dispatchEvent(event);\n        }\n        if (valueChanged) {\n            const event = {\n                type: ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.Events.EVENT_COLUMN_VALUE_CHANGE_REQUEST,\n                columns: copyOfRowGroupColumns\n            };\n            this.eventService.dispatchEvent(event);\n        }\n    }\n    setAllPivotActive(columns, value, eventType) {\n        const colStateItems = [];\n        const turnOnAction = (col) => {\n            // don't change any column that's already got a function active\n            if (col.isAnyFunctionActive()) {\n                return;\n            }\n            if (col.isAllowValue()) {\n                const aggFunc = typeof col.getAggFunc() === 'string'\n                    ? col.getAggFunc()\n                    : this.aggFuncService.getDefaultAggFunc(col);\n                colStateItems.push({\n                    colId: col.getId(),\n                    aggFunc: aggFunc\n                });\n            }\n            else if (col.isAllowRowGroup()) {\n                colStateItems.push({\n                    colId: col.getId(),\n                    rowGroup: true\n                });\n            }\n            else if (col.isAllowPivot()) {\n                colStateItems.push({\n                    colId: col.getId(),\n                    pivot: true\n                });\n            }\n        };\n        const turnOffAction = (col) => {\n            const isActive = col.isPivotActive() || col.isRowGroupActive() || col.isValueActive();\n            if (isActive) {\n                colStateItems.push({\n                    colId: col.getId(),\n                    pivot: false,\n                    rowGroup: false,\n                    aggFunc: null\n                });\n            }\n        };\n        const action = value ? turnOnAction : turnOffAction;\n        columns.forEach(action);\n        if (colStateItems.length > 0) {\n            this.columnModel.applyColumnState({ state: colStateItems }, eventType);\n        }\n    }\n};\n__decorate$22([\n    (0,ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.Autowired)('aggFuncService')\n], ModelItemUtils.prototype, \"aggFuncService\", void 0);\n__decorate$22([\n    (0,ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.Autowired)('columnModel')\n], ModelItemUtils.prototype, \"columnModel\", void 0);\n__decorate$22([\n    (0,ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.Autowired)('gridOptionsService')\n], ModelItemUtils.prototype, \"gridOptionsService\", void 0);\n__decorate$22([\n    (0,ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.Autowired)('eventService')\n], ModelItemUtils.prototype, \"eventService\", void 0);\nModelItemUtils = __decorate$22([\n    (0,ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.Bean)('modelItemUtils')\n], ModelItemUtils);\n\n// DO NOT UPDATE MANUALLY: Generated from script during build time\nconst VERSION$e = '30.0.2';\n\nconst ColumnsToolPanelModule = {\n    version: VERSION$e,\n    moduleName: ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.ModuleNames.ColumnsToolPanelModule,\n    beans: [ModelItemUtils],\n    agStackComponents: [\n        { componentName: 'AgPrimaryColsHeader', componentClass: PrimaryColsHeaderPanel },\n        { componentName: 'AgPrimaryColsList', componentClass: PrimaryColsListPanel },\n        { componentName: 'AgPrimaryCols', componentClass: PrimaryColsPanel }\n    ],\n    userComponents: [\n        { componentName: 'agColumnsToolPanel', componentClass: ColumnToolPanel },\n    ],\n    dependantModules: [\n        EnterpriseCoreModule,\n        RowGroupingModule,\n        SideBarModule\n    ]\n};\n\nconst workbook = {\n    getTemplate() {\n        return {\n            name: \"Workbook\",\n            properties: {\n                prefixedAttributes: [{\n                        prefix: \"xmlns:\",\n                        map: {\n                            o: \"urn:schemas-microsoft-com:office:office\",\n                            x: \"urn:schemas-microsoft-com:office:excel\",\n                            ss: \"urn:schemas-microsoft-com:office:spreadsheet\",\n                            html: \"http://www.w3.org/TR/REC-html40\"\n                        },\n                    }],\n                rawMap: {\n                    xmlns: \"urn:schemas-microsoft-com:office:spreadsheet\"\n                }\n            }\n        };\n    }\n};\n\nconst excelWorkbook = {\n    getTemplate() {\n        return {\n            name: \"ExcelWorkbook\",\n            properties: {\n                rawMap: {\n                    xmlns: \"urn:schemas-microsoft-com:office:excel\"\n                }\n            },\n            children: [{\n                    name: \"WindowHeight\",\n                    textNode: \"8130\"\n                }, {\n                    name: \"WindowWidth\",\n                    textNode: \"15135\"\n                }, {\n                    name: \"WindowHeight\",\n                    textNode: \"8130\"\n                }, {\n                    name: \"WindowTopX\",\n                    textNode: \"120\"\n                }, {\n                    name: \"WindowTopY\",\n                    textNode: \"45\"\n                }, {\n                    name: \"ProtectStructure\",\n                    textNode: \"False\"\n                }, {\n                    name: \"ProtectWindow\",\n                    textNode: \"False\"\n                }]\n        };\n    }\n};\n\nconst column = {\n    getTemplate(c) {\n        const { width } = c;\n        return {\n            name: \"Column\",\n            properties: {\n                prefixedAttributes: [{\n                        prefix: \"ss:\",\n                        map: {\n                            Width: width\n                        }\n                    }]\n            }\n        };\n    }\n};\n\nconst cell = {\n    getTemplate(c) {\n        const { mergeAcross, styleId, data } = c;\n        const properties = {};\n        if (mergeAcross) {\n            properties.MergeAcross = mergeAcross;\n        }\n        if (styleId) {\n            properties.StyleID = styleId;\n        }\n        return {\n            name: \"Cell\",\n            properties: {\n                prefixedAttributes: [{\n                        prefix: \"ss:\",\n                        map: properties\n                    }]\n            },\n            children: [{\n                    name: \"Data\",\n                    properties: {\n                        prefixedAttributes: [{\n                                prefix: \"ss:\",\n                                map: {\n                                    Type: data === null || data === void 0 ? void 0 : data.type\n                                }\n                            }]\n                    },\n                    textNode: data === null || data === void 0 ? void 0 : data.value\n                }]\n        };\n    }\n};\n\nconst row = {\n    getTemplate(r) {\n        const { cells } = r;\n        return {\n            name: \"Row\",\n            children: cells.map(it => cell.getTemplate(it))\n        };\n    }\n};\n\nconst worksheet = {\n    getTemplate(ws) {\n        const { table, name } = ws;\n        const { columns, rows } = table;\n        const c = columns.map(it => column.getTemplate(it));\n        const r = rows.map(it => row.getTemplate(it));\n        return {\n            name: \"Worksheet\",\n            children: [{\n                    name: \"Table\",\n                    children: c.concat(r)\n                }],\n            properties: {\n                prefixedAttributes: [{\n                        prefix: \"ss:\",\n                        map: {\n                            Name: name\n                        }\n                    }]\n            }\n        };\n    }\n};\n\nconst documentProperties = {\n    getTemplate() {\n        return {\n            name: \"DocumentProperties\",\n            properties: {\n                rawMap: {\n                    xmlns: \"urn:schemas-microsoft-com:office:office\"\n                }\n            },\n            children: [{\n                    name: \"Version\",\n                    textNode: \"12.00\"\n                }]\n        };\n    }\n};\n\nconst alignment = {\n    getTemplate(styleProperties) {\n        const { vertical, horizontal, indent, readingOrder, rotate, shrinkToFit, verticalText, wrapText } = styleProperties.alignment;\n        return {\n            name: 'Alignment',\n            properties: {\n                prefixedAttributes: [{\n                        prefix: \"ss:\",\n                        map: {\n                            Vertical: vertical,\n                            Horizontal: horizontal,\n                            Indent: indent,\n                            ReadingOrder: readingOrder,\n                            Rotate: rotate,\n                            ShrinkToFit: shrinkToFit,\n                            VerticalText: verticalText,\n                            WrapText: wrapText\n                        }\n                    }]\n            }\n        };\n    }\n};\n\nconst borders = {\n    getTemplate(styleProperties) {\n        const { borderBottom, borderLeft, borderRight, borderTop } = styleProperties.borders;\n        return {\n            name: 'Borders',\n            children: [borderBottom, borderLeft, borderRight, borderTop].map((it, index) => {\n                const current = index == 0 ? \"Bottom\" : index == 1 ? \"Left\" : index == 2 ? \"Right\" : \"Top\";\n                return {\n                    name: 'Border',\n                    properties: {\n                        prefixedAttributes: [{\n                                prefix: 'ss:',\n                                map: {\n                                    Position: current,\n                                    LineStyle: it.lineStyle,\n                                    Weight: it.weight,\n                                    Color: it.color\n                                }\n                            }]\n                    }\n                };\n            })\n        };\n    }\n};\n\nconst font = {\n    getTemplate(styleProperties) {\n        const { bold, fontName, italic, color, outline, shadow, size, strikeThrough, underline, verticalAlign, charSet, family, } = styleProperties.font;\n        return {\n            name: \"Font\",\n            properties: {\n                prefixedAttributes: [{\n                        prefix: \"ss:\",\n                        map: {\n                            Bold: bold,\n                            FontName: fontName,\n                            Italic: italic,\n                            Color: color,\n                            Outline: outline,\n                            Shadow: shadow,\n                            Size: size,\n                            StrikeThrough: strikeThrough,\n                            Underline: underline,\n                            VerticalAlign: verticalAlign\n                        }\n                    }, {\n                        prefix: \"x:\",\n                        map: {\n                            CharSet: charSet,\n                            Family: family\n                        }\n                    }]\n            }\n        };\n    }\n};\n\nconst interior = {\n    getTemplate(styleProperties) {\n        const { color, pattern, patternColor } = styleProperties.interior;\n        return {\n            name: \"Interior\",\n            properties: {\n                prefixedAttributes: [{\n                        prefix: \"ss:\",\n                        map: {\n                            Color: color,\n                            Pattern: pattern,\n                            PatternColor: patternColor\n                        }\n                    }]\n            }\n        };\n    }\n};\n\nconst protection = {\n    getTemplate(styleProperties) {\n        return {\n            name: \"Protection\",\n            properties: {\n                prefixedAttributes: [{\n                        prefix: \"ss:\",\n                        map: {\n                            Protected: styleProperties.protection.protected,\n                            HideFormula: styleProperties.protection.hideFormula\n                        }\n                    }]\n            }\n        };\n    }\n};\n\nconst numberFormat = {\n    getTemplate(styleProperties) {\n        const { format } = styleProperties.numberFormat;\n        return {\n            name: \"NumberFormat\",\n            properties: {\n                prefixedAttributes: [{\n                        prefix: \"ss:\",\n                        map: {\n                            Format: format\n                        }\n                    }]\n            }\n        };\n    }\n};\n\nconst style = {\n    getTemplate(styleProperties) {\n        const { id, name } = styleProperties;\n        return {\n            name: 'Style',\n            properties: {\n                prefixedAttributes: [{\n                        prefix: \"ss:\",\n                        map: {\n                            ID: id,\n                            Name: name ? name : id\n                        }\n                    }]\n            }\n        };\n    }\n};\n\n/**\n * See https://msdn.microsoft.com/en-us/library/aa140066(v=office.10).aspx\n */\nclass ExcelXmlFactory {\n    static createExcel(styles, currentWorksheet) {\n        const header = this.excelXmlHeader();\n        const docProps = documentProperties.getTemplate();\n        const eWorkbook = excelWorkbook.getTemplate();\n        const wb = this.workbook(docProps, eWorkbook, styles, currentWorksheet);\n        return `${header}${ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.XmlFactory.createXml(wb, boolean => boolean ? '1' : '0')}`;\n    }\n    static workbook(docProperties, eWorkbook, styles, currentWorksheet) {\n        const children = [\n            docProperties,\n            eWorkbook,\n            this.stylesXmlElement(styles)\n        ].concat(worksheet.getTemplate(currentWorksheet));\n        return Object.assign({}, workbook.getTemplate(), { children });\n    }\n    static excelXmlHeader() {\n        return `<?xml version=\"1.0\" ?>\n        <?mso-application progid=\"Excel.Sheet\" ?>\n        `;\n    }\n    static stylesXmlElement(styles) {\n        return {\n            name: 'Styles',\n            children: styles ? styles.map(it => this.styleXmlElement(it)) : []\n        };\n    }\n    static styleXmlElement(styleProperties) {\n        const children = ag_grid_community__WEBPACK_IMPORTED_MODULE_0__._.compose(this.addProperty('alignment', styleProperties), this.addProperty('borders', styleProperties), this.addProperty('font', styleProperties), this.addProperty('interior', styleProperties), this.addProperty('protection', styleProperties), this.addProperty('numberFormat', styleProperties))([]);\n        return Object.assign({}, style.getTemplate(styleProperties), { children });\n    }\n    static addProperty(property, styleProperties) {\n        return (children) => {\n            if (!styleProperties[property]) {\n                return children;\n            }\n            const options = {\n                alignment,\n                borders,\n                font,\n                interior,\n                numberFormat,\n                protection\n            };\n            return children.concat(options[property].getTemplate(styleProperties));\n        };\n    }\n}\nExcelXmlFactory.factoryMode = ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.ExcelFactoryMode.SINGLE_SHEET;\n\nconst INCH_TO_EMU = 9525;\nconst numberFormatMap = {\n    '0': 1,\n    '0.00': 2,\n    '#,##0': 3,\n    '#,##0.00': 4,\n    '0%': 9,\n    '0.00%': 10,\n    '0.00E+00': 11,\n    '# ?/?': 12,\n    '# ??/??': 13,\n    'mm-dd-yy': 14,\n    'd-mmm-yy': 15,\n    'd-mmm': 16,\n    'mmm-yy': 17,\n    'h:mm AM/PM': 18,\n    'h:mm:ss AM/PM': 19,\n    'h:mm': 20,\n    'h:mm:ss': 21,\n    'm/d/yy h:mm': 22,\n    '#,##0 ;(#,##0)': 37,\n    '#,##0 ;[Red](#,##0)': 38,\n    '#,##0.00;(#,##0.00)': 39,\n    '#,##0.00;[Red](#,##0.00)': 40,\n    'mm:ss': 45,\n    '[h]:mm:ss': 46,\n    'mmss.0': 47,\n    '##0.0E+0': 48,\n    '@': 49\n};\n\nconst pixelsToPoint = (pixels) => {\n    return Math.round(pixels * 72 / 96);\n};\nconst pointsToPixel = (points) => {\n    return Math.round(points * 96 / 72);\n};\nconst pixelsToEMU = (value) => {\n    return Math.ceil(value * INCH_TO_EMU);\n};\nconst getFontFamilyId = (name) => {\n    if (name === undefined) {\n        return;\n    }\n    const families = ['Automatic', 'Roman', 'Swiss', 'Modern', 'Script', 'Decorative'];\n    const pos = families.indexOf(name || 'Automatic');\n    return Math.max(pos, 0);\n};\nconst getHeightFromProperty = (rowIndex, height) => {\n    if (!height) {\n        return;\n    }\n    let finalHeight;\n    if (typeof height === 'number') {\n        finalHeight = height;\n    }\n    else {\n        const heightFunc = height;\n        finalHeight = heightFunc({ rowIndex });\n    }\n    return pixelsToPoint(finalHeight);\n};\nconst setExcelImageTotalWidth = (image, columnsToExport) => {\n    const { colSpan, column } = image.position;\n    if (image.width) {\n        if (colSpan) {\n            const columnsInSpan = columnsToExport.slice(column - 1, column + colSpan - 1);\n            let totalWidth = 0;\n            for (let i = 0; i < columnsInSpan.length; i++) {\n                const colWidth = columnsInSpan[i].getActualWidth();\n                if (image.width < totalWidth + colWidth) {\n                    image.position.colSpan = i + 1;\n                    image.totalWidth = image.width;\n                    image.width = image.totalWidth - totalWidth;\n                    break;\n                }\n                totalWidth += colWidth;\n            }\n        }\n        else {\n            image.totalWidth = image.width;\n        }\n    }\n};\nconst setExcelImageTotalHeight = (image, rowHeight) => {\n    const { rowSpan, row } = image.position;\n    if (image.height) {\n        if (rowSpan) {\n            let totalHeight = 0;\n            let counter = 0;\n            for (let i = row; i < row + rowSpan; i++) {\n                const nextRowHeight = pointsToPixel(getHeightFromProperty(i, rowHeight) || 20);\n                if (image.height < totalHeight + nextRowHeight) {\n                    image.position.rowSpan = counter + 1;\n                    image.totalHeight = image.height;\n                    image.height = image.totalHeight - totalHeight;\n                    break;\n                }\n                totalHeight += nextRowHeight;\n                counter++;\n            }\n        }\n        else {\n            image.totalHeight = image.height;\n        }\n    }\n};\nconst createXmlPart = (body) => {\n    const header = ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.XmlFactory.createHeader({\n        encoding: 'UTF-8',\n        standalone: 'yes'\n    });\n    const xmlBody = ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.XmlFactory.createXml(body);\n    return `${header}${xmlBody}`;\n};\nconst getExcelColumnName = (colIdx) => {\n    const startCode = 65;\n    const tableWidth = 26;\n    const fromCharCode = String.fromCharCode;\n    const pos = Math.floor(colIdx / tableWidth);\n    const tableIdx = colIdx % tableWidth;\n    if (!pos || colIdx === tableWidth) {\n        return fromCharCode(startCode + colIdx - 1);\n    }\n    if (!tableIdx) {\n        return getExcelColumnName(pos - 1) + 'Z';\n    }\n    if (pos < tableWidth) {\n        return fromCharCode(startCode + pos - 1) + fromCharCode(startCode + tableIdx - 1);\n    }\n    return getExcelColumnName(pos) + fromCharCode(startCode + tableIdx - 1);\n};\n\nclass BaseExcelSerializingSession extends ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.BaseGridSerializingSession {\n    constructor(config) {\n        super(config);\n        this.mixedStyles = {};\n        this.mixedStyleCounter = 0;\n        this.rows = [];\n        this.config = Object.assign({}, config);\n        this.stylesByIds = {};\n        this.config.baseExcelStyles.forEach(style => {\n            this.stylesByIds[style.id] = style;\n        });\n        this.excelStyles = [...this.config.baseExcelStyles];\n    }\n    addCustomContent(customContent) {\n        customContent.forEach(row => {\n            const rowLen = this.rows.length + 1;\n            let outlineLevel;\n            if (!this.config.suppressRowOutline && row.outlineLevel != null) {\n                outlineLevel = row.outlineLevel;\n            }\n            const rowObj = {\n                height: getHeightFromProperty(rowLen, row.height || this.config.rowHeight),\n                cells: (row.cells || []).map((cell, idx) => {\n                    var _a, _b, _c;\n                    const image = this.addImage(rowLen, this.columnsToExport[idx], (_a = cell.data) === null || _a === void 0 ? void 0 : _a.value);\n                    let excelStyles = null;\n                    if (cell.styleId) {\n                        excelStyles = typeof cell.styleId === 'string' ? [cell.styleId] : cell.styleId;\n                    }\n                    const excelStyleId = this.getStyleId(excelStyles);\n                    if (image) {\n                        return this.createCell(excelStyleId, this.getDataTypeForValue(image.value), image.value == null ? '' : image.value);\n                    }\n                    const value = (_c = (_b = cell.data) === null || _b === void 0 ? void 0 : _b.value) !== null && _c !== void 0 ? _c : '';\n                    const type = this.getDataTypeForValue(value);\n                    if (cell.mergeAcross) {\n                        return this.createMergedCell(excelStyleId, type, value, cell.mergeAcross);\n                    }\n                    return this.createCell(excelStyleId, type, value);\n                }),\n                outlineLevel\n            };\n            if (row.collapsed != null) {\n                rowObj.collapsed = row.collapsed;\n            }\n            if (row.hidden != null) {\n                rowObj.hidden = row.hidden;\n            }\n            this.rows.push(rowObj);\n        });\n    }\n    onNewHeaderGroupingRow() {\n        const currentCells = [];\n        this.rows.push({\n            cells: currentCells,\n            height: getHeightFromProperty(this.rows.length + 1, this.config.headerRowHeight)\n        });\n        return {\n            onColumn: (columnGroup, header, index, span, collapsibleRanges) => {\n                const styleIds = this.config.styleLinker({ rowType: ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.RowType.HEADER_GROUPING, rowIndex: 1, value: `grouping-${header}`, columnGroup });\n                currentCells.push(Object.assign(Object.assign({}, this.createMergedCell(this.getStyleId(styleIds), this.getDataTypeForValue('string'), header, span)), { collapsibleRanges }));\n            }\n        };\n    }\n    onNewHeaderRow() {\n        return this.onNewRow(this.onNewHeaderColumn, this.config.headerRowHeight);\n    }\n    onNewBodyRow(node) {\n        const rowAccumulator = this.onNewRow(this.onNewBodyColumn, this.config.rowHeight);\n        if (node) {\n            this.addRowOutlineIfNecessary(node);\n        }\n        return rowAccumulator;\n    }\n    addRowOutlineIfNecessary(node) {\n        const { gridOptionsService, suppressRowOutline, rowGroupExpandState = 'expanded' } = this.config;\n        const isGroupHideOpenParents = gridOptionsService.is('groupHideOpenParents');\n        if (isGroupHideOpenParents || suppressRowOutline || node.level == null) {\n            return;\n        }\n        const padding = node.footer ? 1 : 0;\n        const currentRow = ag_grid_community__WEBPACK_IMPORTED_MODULE_0__._.last(this.rows);\n        currentRow.outlineLevel = node.level + padding;\n        if (rowGroupExpandState === 'expanded') {\n            return;\n        }\n        const collapseAll = rowGroupExpandState === 'collapsed';\n        if (node.isExpandable()) {\n            const isExpanded = !collapseAll && node.expanded;\n            currentRow.collapsed = !isExpanded;\n        }\n        currentRow.hidden =\n            // always show the node if there is no parent to be expanded\n            !!node.parent &&\n                // or if it is a child of the root node\n                node.parent.level !== -1 &&\n                (collapseAll || this.isAnyParentCollapsed(node.parent));\n    }\n    isAnyParentCollapsed(node) {\n        while (node && node.level !== -1) {\n            if (!node.expanded) {\n                return true;\n            }\n            node = node.parent;\n        }\n        return false;\n    }\n    prepare(columnsToExport) {\n        super.prepare(columnsToExport);\n        this.columnsToExport = [...columnsToExport];\n        this.cols = columnsToExport.map((col, i) => this.convertColumnToExcel(col, i));\n    }\n    parse() {\n        // adding custom content might have made some rows wider than the grid, so add new columns\n        const longestRow = this.rows.reduce((a, b) => Math.max(a, b.cells.length), 0);\n        while (this.cols.length < longestRow) {\n            this.cols.push(this.convertColumnToExcel(null, this.cols.length + 1));\n        }\n        const data = {\n            name: this.config.sheetName,\n            table: {\n                columns: this.cols,\n                rows: this.rows\n            }\n        };\n        return this.createExcel(data);\n    }\n    isFormula(value) {\n        if (value == null) {\n            return false;\n        }\n        return this.config.autoConvertFormulas && value.toString().startsWith('=');\n    }\n    isNumerical(value) {\n        if (typeof value === 'bigint') {\n            return true;\n        }\n        return isFinite(value) && value !== '' && !isNaN(parseFloat(value));\n    }\n    getStyleById(styleId) {\n        if (styleId == null) {\n            return null;\n        }\n        return this.stylesByIds[styleId] || null;\n    }\n    convertColumnToExcel(column, index) {\n        const columnWidth = this.config.columnWidth;\n        if (columnWidth) {\n            if (typeof columnWidth === 'number') {\n                return { width: columnWidth };\n            }\n            return { width: columnWidth({ column, index }) };\n        }\n        if (column) {\n            const smallestUsefulWidth = 75;\n            return { width: Math.max(column.getActualWidth(), smallestUsefulWidth) };\n        }\n        return {};\n    }\n    onNewHeaderColumn(rowIndex, currentCells) {\n        return (column, index) => {\n            const nameForCol = this.extractHeaderValue(column);\n            const styleIds = this.config.styleLinker({ rowType: ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.RowType.HEADER, rowIndex, value: nameForCol, column });\n            currentCells.push(this.createCell(this.getStyleId(styleIds), this.getDataTypeForValue('string'), nameForCol));\n        };\n    }\n    onNewRow(onNewColumnAccumulator, height) {\n        const currentCells = [];\n        this.rows.push({\n            cells: currentCells,\n            height: getHeightFromProperty(this.rows.length + 1, height)\n        });\n        return {\n            onColumn: onNewColumnAccumulator.bind(this, this.rows.length, currentCells)()\n        };\n    }\n    onNewBodyColumn(rowIndex, currentCells) {\n        let skipCols = 0;\n        return (column, index, node) => {\n            if (skipCols > 0) {\n                skipCols -= 1;\n                return;\n            }\n            const { value: valueForCell, valueFormatted } = this.extractRowCellValue(column, index, rowIndex, 'excel', node);\n            const styleIds = this.config.styleLinker({ rowType: ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.RowType.BODY, rowIndex, value: valueForCell, column, node });\n            const excelStyleId = this.getStyleId(styleIds);\n            const colSpan = column.getColSpan(node);\n            const addedImage = this.addImage(rowIndex, column, valueForCell);\n            if (addedImage) {\n                currentCells.push(this.createCell(excelStyleId, this.getDataTypeForValue(addedImage.value), addedImage.value == null ? '' : addedImage.value));\n            }\n            else if (colSpan > 1) {\n                skipCols = colSpan - 1;\n                currentCells.push(this.createMergedCell(excelStyleId, this.getDataTypeForValue(valueForCell), valueForCell, colSpan - 1));\n            }\n            else {\n                currentCells.push(this.createCell(excelStyleId, this.getDataTypeForValue(valueForCell), valueForCell, valueFormatted));\n            }\n        };\n    }\n    getStyleId(styleIds) {\n        if (!styleIds || !styleIds.length) {\n            return null;\n        }\n        if (styleIds.length === 1) {\n            return styleIds[0];\n        }\n        const key = styleIds.join(\"-\");\n        if (!this.mixedStyles[key]) {\n            this.addNewMixedStyle(styleIds);\n        }\n        return this.mixedStyles[key].excelID;\n    }\n    addNewMixedStyle(styleIds) {\n        this.mixedStyleCounter += 1;\n        const excelId = `mixedStyle${this.mixedStyleCounter}`;\n        const resultantStyle = {};\n        styleIds.forEach((styleId) => {\n            this.excelStyles.forEach((excelStyle) => {\n                if (excelStyle.id === styleId) {\n                    ag_grid_community__WEBPACK_IMPORTED_MODULE_0__._.mergeDeep(resultantStyle, ag_grid_community__WEBPACK_IMPORTED_MODULE_0__._.deepCloneObject(excelStyle));\n                }\n            });\n        });\n        resultantStyle.id = excelId;\n        resultantStyle.name = excelId;\n        const key = styleIds.join(\"-\");\n        this.mixedStyles[key] = {\n            excelID: excelId,\n            key: key,\n            result: resultantStyle\n        };\n        this.excelStyles.push(resultantStyle);\n        this.stylesByIds[excelId] = resultantStyle;\n    }\n}\n\nclass ExcelXmlSerializingSession extends BaseExcelSerializingSession {\n    createExcel(data) {\n        return ExcelXmlFactory.createExcel(this.excelStyles, data);\n    }\n    getDataTypeForValue(valueForCell) {\n        return this.isNumerical(valueForCell) ? 'Number' : 'String';\n    }\n    getType(type, style, value) {\n        if (this.isFormula(value)) {\n            return 'Formula';\n        }\n        if (style && style.dataType) {\n            switch (style.dataType.toLocaleLowerCase()) {\n                case 'string':\n                    return 'Formula';\n                case 'number':\n                    return 'Number';\n                case 'datetime':\n                    return 'DateTime';\n                case 'error':\n                    return 'Error';\n                case 'boolean':\n                    return 'Boolean';\n                default:\n                    console.warn(`AG Grid: Unrecognized data type for excel export [${style.id}.dataType=${style.dataType}]`);\n            }\n        }\n        return type;\n    }\n    addImage() {\n        return;\n    }\n    createCell(styleId, type, value, valueFormatted) {\n        const actualStyle = this.getStyleById(styleId);\n        if (!(actualStyle === null || actualStyle === void 0 ? void 0 : actualStyle.dataType) && type === 'String' && valueFormatted) {\n            value = valueFormatted;\n        }\n        const typeTransformed = (this.getType(type, actualStyle, value) || type);\n        return {\n            styleId: !!actualStyle ? styleId : undefined,\n            data: {\n                type: typeTransformed,\n                value: this.getValueTransformed(typeTransformed, value)\n            }\n        };\n    }\n    getValueTransformed(typeTransformed, value) {\n        const wrapText = (val) => {\n            if (this.config.suppressTextAsCDATA) {\n                return ag_grid_community__WEBPACK_IMPORTED_MODULE_0__._.escapeString(val);\n            }\n            const cdataStart = '<![CDATA[';\n            const cdataEnd = ']]>';\n            const cdataEndRegex = new RegExp(cdataEnd, \"g\");\n            return cdataStart\n                // CDATA sections are closed by the character sequence ']]>' and there is no\n                // way of escaping this, so if the text contains the offending sequence, emit\n                // multiple CDATA sections and split the characters between them.\n                + String(val).replace(cdataEndRegex, ']]' + cdataEnd + cdataStart + '>')\n                + cdataEnd;\n        };\n        const convertBoolean = (val) => {\n            if (!val || val === '0' || val === 'false') {\n                return '0';\n            }\n            return '1';\n        };\n        switch (typeTransformed) {\n            case 'String':\n                return wrapText(value);\n            case 'Number':\n                return Number(value).valueOf() + '';\n            case 'Boolean':\n                return convertBoolean(value);\n            default:\n                return value;\n        }\n    }\n    createMergedCell(styleId, type, value, numOfCells) {\n        return {\n            styleId: !!this.getStyleById(styleId) ? styleId : undefined,\n            data: {\n                type: type,\n                value: value\n            },\n            mergeAcross: numOfCells\n        };\n    }\n}\n\nconst coreFactory = {\n    getTemplate(author) {\n        const dt = new Date();\n        const jsonDate = dt.toJSON();\n        return {\n            name: 'cp:coreProperties',\n            properties: {\n                prefixedAttributes: [{\n                        prefix: \"xmlns:\",\n                        map: {\n                            cp: \"http://schemas.openxmlformats.org/package/2006/metadata/core-properties\",\n                            dc: 'http://purl.org/dc/elements/1.1/',\n                            dcterms: 'http://purl.org/dc/terms/',\n                            dcmitype: 'http://purl.org/dc/dcmitype/',\n                            xsi: 'http://www.w3.org/2001/XMLSchema-instance'\n                        }\n                    }]\n            },\n            children: [{\n                    name: 'dc:creator',\n                    textNode: author\n                }, {\n                    name: 'dc:title',\n                    textNode: 'Workbook'\n                }, {\n                    name: 'dcterms:created',\n                    properties: {\n                        rawMap: {\n                            'xsi:type': 'dcterms:W3CDTF'\n                        }\n                    },\n                    textNode: jsonDate\n                }, {\n                    name: 'dcterms:modified',\n                    properties: {\n                        rawMap: {\n                            'xsi:type': 'dcterms:W3CDTF'\n                        }\n                    },\n                    textNode: jsonDate\n                }]\n        };\n    }\n};\n\nconst contentTypeFactory = {\n    getTemplate(config) {\n        const { name, ContentType, Extension, PartName } = config;\n        return {\n            name,\n            properties: {\n                rawMap: {\n                    Extension,\n                    PartName,\n                    ContentType\n                }\n            }\n        };\n    }\n};\n\nconst contentTypesFactory = {\n    getTemplate(sheetLen) {\n        const worksheets = new Array(sheetLen).fill(undefined).map((v, i) => ({\n            name: 'Override',\n            ContentType: 'application/vnd.openxmlformats-officedocument.spreadsheetml.worksheet+xml',\n            PartName: `/xl/worksheets/sheet${i + 1}.xml`\n        }));\n        const sheetsWithImages = ExcelXlsxFactory.worksheetImages.size;\n        const imageTypesObject = {};\n        ExcelXlsxFactory.workbookImageIds.forEach((v) => {\n            imageTypesObject[v.type] = true;\n        });\n        const imageDocs = new Array(sheetsWithImages).fill(undefined).map((v, i) => ({\n            name: 'Override',\n            ContentType: 'application/vnd.openxmlformats-officedocument.drawing+xml',\n            PartName: `/xl/drawings/drawing${i + 1}.xml`\n        }));\n        const imageTypes = Object.keys(imageTypesObject).map(ext => ({\n            name: 'Default',\n            ContentType: `image/${ext}`,\n            Extension: ext\n        }));\n        const children = [\n            ...imageTypes,\n            {\n                name: 'Default',\n                Extension: 'rels',\n                ContentType: 'application/vnd.openxmlformats-package.relationships+xml'\n            }, {\n                name: 'Default',\n                ContentType: 'application/xml',\n                Extension: 'xml'\n            }, {\n                name: 'Override',\n                ContentType: 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet.main+xml',\n                PartName: \"/xl/workbook.xml\"\n            },\n            ...worksheets,\n            {\n                name: 'Override',\n                ContentType: 'application/vnd.openxmlformats-officedocument.theme+xml',\n                PartName: '/xl/theme/theme1.xml'\n            }, {\n                name: 'Override',\n                ContentType: 'application/vnd.openxmlformats-officedocument.spreadsheetml.styles+xml',\n                PartName: '/xl/styles.xml'\n            }, {\n                name: 'Override',\n                ContentType: 'application/vnd.openxmlformats-officedocument.spreadsheetml.sharedStrings+xml',\n                PartName: '/xl/sharedStrings.xml'\n            },\n            ...imageDocs,\n            {\n                name: 'Override',\n                ContentType: 'application/vnd.openxmlformats-package.core-properties+xml',\n                PartName: '/docProps/core.xml'\n            }\n        ].map(contentType => contentTypeFactory.getTemplate(contentType));\n        return {\n            name: \"Types\",\n            properties: {\n                rawMap: {\n                    xmlns: \"http://schemas.openxmlformats.org/package/2006/content-types\"\n                }\n            },\n            children\n        };\n    }\n};\n\nconst getAnchor = (name, imageAnchor) => ({\n    name: `xdr:${name}`,\n    children: [{\n            name: 'xdr:col',\n            textNode: (imageAnchor.col).toString()\n        }, {\n            name: 'xdr:colOff',\n            textNode: imageAnchor.offsetX.toString()\n        }, {\n            name: 'xdr:row',\n            textNode: imageAnchor.row.toString()\n        }, {\n            name: 'xdr:rowOff',\n            textNode: imageAnchor.offsetY.toString()\n        }]\n});\nconst getExt = (image) => {\n    const children = [{\n            name: 'a:ext',\n            properties: {\n                rawMap: {\n                    uri: '{FF2B5EF4-FFF2-40B4-BE49-F238E27FC236}'\n                }\n            },\n            children: [{\n                    name: 'a16:creationId',\n                    properties: {\n                        rawMap: {\n                            'id': '{822E6D20-D7BC-2841-A643-D49A6EF008A2}',\n                            'xmlns:a16': 'http://schemas.microsoft.com/office/drawing/2014/main'\n                        }\n                    }\n                }]\n        }];\n    const recolor = image.recolor && image.recolor.toLowerCase();\n    switch (recolor) {\n        case 'grayscale':\n        case 'sepia':\n        case 'washout':\n            children.push({\n                name: 'a:ext',\n                properties: {\n                    rawMap: {\n                        uri: '{C183D7F6-B498-43B3-948B-1728B52AA6E4}'\n                    }\n                },\n                children: [{\n                        name: 'adec:decorative',\n                        properties: {\n                            rawMap: {\n                                'val': '0',\n                                'xmlns:adec': 'http://schemas.microsoft.com/office/drawing/2017/decorative'\n                            }\n                        }\n                    }]\n            });\n    }\n    return {\n        name: 'a:extLst',\n        children\n    };\n};\nconst getNvPicPr = (image, index) => ({\n    name: 'xdr:nvPicPr',\n    children: [{\n            name: 'xdr:cNvPr',\n            properties: {\n                rawMap: {\n                    id: index,\n                    name: image.id,\n                    descr: image.altText != null ? image.altText : undefined\n                }\n            },\n            children: [getExt(image)]\n        }, {\n            name: 'xdr:cNvPicPr',\n            properties: {\n                rawMap: {\n                    preferRelativeResize: '0'\n                }\n            },\n            children: [{\n                    name: 'a:picLocks'\n                }]\n        }]\n});\nconst getColorDetails = (color) => {\n    if (!color.saturation && !color.tint) {\n        return;\n    }\n    const ret = [];\n    if (color.saturation) {\n        ret.push({\n            name: 'a:satMod',\n            properties: {\n                rawMap: {\n                    val: color.saturation * 1000\n                }\n            }\n        });\n    }\n    if (color.tint) {\n        ret.push({\n            name: 'a:tint',\n            properties: {\n                rawMap: {\n                    val: color.tint * 1000\n                }\n            }\n        });\n    }\n    return ret;\n};\nconst getDuoTone = (primaryColor, secondaryColor) => {\n    return ({\n        name: 'a:duotone',\n        children: [{\n                name: 'a:prstClr',\n                properties: {\n                    rawMap: {\n                        val: primaryColor.color\n                    }\n                },\n                children: getColorDetails(primaryColor)\n            }, {\n                name: 'a:srgbClr',\n                properties: {\n                    rawMap: {\n                        val: secondaryColor.color\n                    }\n                },\n                children: getColorDetails(secondaryColor)\n            }]\n    });\n};\nconst getBlipFill = (image, index) => {\n    let blipChildren;\n    if (image.transparency) {\n        const transparency = Math.min(Math.max(image.transparency, 0), 100);\n        blipChildren = [{\n                name: 'a:alphaModFix',\n                properties: {\n                    rawMap: {\n                        amt: 100000 - Math.round(transparency * 1000),\n                    }\n                }\n            }];\n    }\n    if (image.recolor) {\n        if (!blipChildren) {\n            blipChildren = [];\n        }\n        switch (image.recolor.toLocaleLowerCase()) {\n            case 'grayscale':\n                blipChildren.push({ name: 'a:grayscl' });\n                break;\n            case 'sepia':\n                blipChildren.push(getDuoTone({ color: 'black' }, { color: 'D9C3A5', tint: 50, saturation: 180 }));\n                break;\n            case 'washout':\n                blipChildren.push({\n                    name: 'a:lum',\n                    properties: {\n                        rawMap: {\n                            bright: '70000',\n                            contrast: '-70000'\n                        }\n                    }\n                });\n                break;\n        }\n    }\n    return ({\n        name: 'xdr:blipFill',\n        children: [{\n                name: 'a:blip',\n                properties: {\n                    rawMap: {\n                        'cstate': 'print',\n                        'r:embed': `rId${index}`,\n                        'xmlns:r': 'http://schemas.openxmlformats.org/officeDocument/2006/relationships'\n                    }\n                },\n                children: blipChildren\n            }, {\n                name: 'a:stretch',\n                children: [{\n                        name: 'a:fillRect'\n                    }]\n            }]\n    });\n};\nconst getSpPr = (image, imageBoxSize) => {\n    const xfrm = {\n        name: 'a:xfrm',\n        children: [{\n                name: 'a:off',\n                properties: {\n                    rawMap: {\n                        x: 0,\n                        y: 0\n                    }\n                }\n            }, {\n                name: 'a:ext',\n                properties: {\n                    rawMap: {\n                        cx: imageBoxSize.width,\n                        cy: imageBoxSize.height\n                    }\n                }\n            }]\n    };\n    if (image.rotation) {\n        const rotation = image.rotation;\n        xfrm.properties = {\n            rawMap: {\n                rot: Math.min(Math.max(rotation, 0), 360) * 60000\n            }\n        };\n    }\n    const prstGeom = {\n        name: 'a:prstGeom',\n        properties: {\n            rawMap: {\n                prst: 'rect'\n            }\n        },\n        children: [{ name: 'a:avLst' }]\n    };\n    const ret = {\n        name: 'xdr:spPr',\n        children: [xfrm, prstGeom]\n    };\n    return ret;\n};\nconst getImageBoxSize = (image) => {\n    image.fitCell = !!image.fitCell || (!image.width || !image.height);\n    const { position = {}, fitCell, width = 0, height = 0, totalHeight, totalWidth } = image;\n    const { offsetX = 0, offsetY = 0, row = 1, rowSpan = 1, column = 1, colSpan = 1 } = position;\n    return {\n        from: {\n            row: row - 1,\n            col: column - 1,\n            offsetX: pixelsToEMU(offsetX),\n            offsetY: pixelsToEMU(offsetY)\n        },\n        to: {\n            row: (row - 1) + (fitCell ? 1 : rowSpan - 1),\n            col: (column - 1) + (fitCell ? 1 : colSpan - 1),\n            offsetX: pixelsToEMU(width + offsetX),\n            offsetY: pixelsToEMU(height + offsetY)\n        },\n        height: pixelsToEMU(totalHeight || height),\n        width: pixelsToEMU(totalWidth || width)\n    };\n};\nconst getPicture = (image, currentIndex, worksheetImageIndex, imageBoxSize) => {\n    return {\n        name: 'xdr:pic',\n        children: [\n            getNvPicPr(image, currentIndex + 1),\n            getBlipFill(image, worksheetImageIndex + 1),\n            getSpPr(image, imageBoxSize)\n        ]\n    };\n};\nconst drawingFactory = {\n    getTemplate(config) {\n        const { sheetIndex } = config;\n        const sheetImages = ExcelXlsxFactory.worksheetImages.get(sheetIndex);\n        const sheetImageIds = ExcelXlsxFactory.worksheetImageIds.get(sheetIndex);\n        const children = sheetImages.map((image, idx) => {\n            const boxSize = getImageBoxSize(image);\n            return ({\n                name: 'xdr:twoCellAnchor',\n                properties: {\n                    rawMap: {\n                        editAs: 'absolute'\n                    }\n                },\n                children: [\n                    getAnchor('from', boxSize.from),\n                    getAnchor('to', boxSize.to),\n                    getPicture(image, idx, sheetImageIds.get(image.id).index, boxSize),\n                    { name: 'xdr:clientData' }\n                ]\n            });\n        });\n        return {\n            name: 'xdr:wsDr',\n            properties: {\n                rawMap: {\n                    'xmlns:a': 'http://schemas.openxmlformats.org/drawingml/2006/main',\n                    'xmlns:xdr': 'http://schemas.openxmlformats.org/drawingml/2006/spreadsheetDrawing'\n                }\n            },\n            children\n        };\n    }\n};\n\nconst getColorChildren = (props) => {\n    const [type, innerType, val, lastClr] = props;\n    return {\n        name: `a:${type}`,\n        children: [{\n                name: `a:${innerType}`,\n                properties: {\n                    rawMap: {\n                        val,\n                        lastClr\n                    }\n                }\n            }]\n    };\n};\nconst colorScheme = {\n    getTemplate() {\n        return {\n            name: \"a:clrScheme\",\n            properties: {\n                rawMap: {\n                    name: \"Office\"\n                }\n            },\n            children: [\n                getColorChildren(['dk1', 'sysClr', 'windowText', '000000']),\n                getColorChildren(['lt1', 'sysClr', 'window', 'FFFFFF']),\n                getColorChildren(['dk2', 'srgbClr', '44546A']),\n                getColorChildren(['lt2', 'srgbClr', 'E7E6E6']),\n                getColorChildren(['accent1', 'srgbClr', '4472C4']),\n                getColorChildren(['accent2', 'srgbClr', 'ED7D31']),\n                getColorChildren(['accent3', 'srgbClr', 'A5A5A5']),\n                getColorChildren(['accent4', 'srgbClr', 'FFC000']),\n                getColorChildren(['accent5', 'srgbClr', '5B9BD5']),\n                getColorChildren(['accent6', 'srgbClr', '70AD47']),\n                getColorChildren(['hlink', 'srgbClr', '0563C1']),\n                getColorChildren(['folHlink', 'srgbClr', '954F72'])\n            ]\n        };\n    }\n};\n\nconst getFont$1 = (props) => {\n    const [type, typeface, script, panose] = props;\n    return {\n        name: `a:${type}`,\n        properties: {\n            rawMap: {\n                script,\n                typeface,\n                panose\n            }\n        }\n    };\n};\nconst fontScheme = {\n    getTemplate() {\n        const { utf8_encode } = ag_grid_community__WEBPACK_IMPORTED_MODULE_0__._;\n        return {\n            name: \"a:fontScheme\",\n            properties: {\n                rawMap: {\n                    name: \"Office\"\n                }\n            },\n            children: [{\n                    name: 'a:majorFont',\n                    children: [\n                        getFont$1(['latin', 'Calibri Light', undefined, '020F0302020204030204']),\n                        getFont$1(['ea', '']),\n                        getFont$1(['cs', '']),\n                        getFont$1(['font', utf8_encode('游ゴシック Light'), 'Jpan']),\n                        getFont$1(['font', utf8_encode('맑은 고딕'), 'Hang']),\n                        getFont$1(['font', utf8_encode('等线 Light'), 'Hans']),\n                        getFont$1(['font', utf8_encode('新細明體'), 'Hant']),\n                        getFont$1(['font', 'Times New Roman', 'Arab']),\n                        getFont$1(['font', 'Times New Roman', 'Hebr']),\n                        getFont$1(['font', 'Tahoma', 'Thai']),\n                        getFont$1(['font', 'Nyala', 'Ethi']),\n                        getFont$1(['font', 'Vrinda', 'Beng']),\n                        getFont$1(['font', 'Shruti', 'Gujr']),\n                        getFont$1(['font', 'MoolBoran', 'Khmr']),\n                        getFont$1(['font', 'Tunga', 'Knda']),\n                        getFont$1(['font', 'Raavi', 'Guru']),\n                        getFont$1(['font', 'Euphemia', 'Cans']),\n                        getFont$1(['font', 'Plantagenet Cherokee', 'Cher']),\n                        getFont$1(['font', 'Microsoft Yi Baiti', 'Yiii']),\n                        getFont$1(['font', 'Microsoft Himalaya', 'Tibt']),\n                        getFont$1(['font', 'MV Boli', 'Thaa']),\n                        getFont$1(['font', 'Mangal', 'Deva']),\n                        getFont$1(['font', 'Gautami', 'Telu']),\n                        getFont$1(['font', 'Latha', 'Taml']),\n                        getFont$1(['font', 'Estrangelo Edessa', 'Syrc']),\n                        getFont$1(['font', 'Kalinga', 'Orya']),\n                        getFont$1(['font', 'Kartika', 'Mlym']),\n                        getFont$1(['font', 'DokChampa', 'Laoo']),\n                        getFont$1(['font', 'Iskoola Pota', 'Sinh']),\n                        getFont$1(['font', 'Mongolian Baiti', 'Mong']),\n                        getFont$1(['font', 'Times New Roman', 'Viet']),\n                        getFont$1(['font', 'Microsoft Uighur', 'Uigh']),\n                        getFont$1(['font', 'Sylfaen', 'Geor']),\n                        getFont$1(['font', 'Arial', 'Armn']),\n                        getFont$1(['font', 'Leelawadee UI', 'Bugi']),\n                        getFont$1(['font', 'Microsoft JhengHei', 'Bopo']),\n                        getFont$1(['font', 'Javanese Text', 'Java']),\n                        getFont$1(['font', 'Segoe UI', 'Lisu']),\n                        getFont$1(['font', 'Myanmar Text', 'Mymr']),\n                        getFont$1(['font', 'Ebrima', 'Nkoo']),\n                        getFont$1(['font', 'Nirmala UI', 'Olck']),\n                        getFont$1(['font', 'Ebrima', 'Osma']),\n                        getFont$1(['font', 'Phagspa', 'Phag']),\n                        getFont$1(['font', 'Estrangelo Edessa', 'Syrn']),\n                        getFont$1(['font', 'Estrangelo Edessa', 'Syrj']),\n                        getFont$1(['font', 'Estrangelo Edessa', 'Syre']),\n                        getFont$1(['font', 'Nirmala UI', 'Sora']),\n                        getFont$1(['font', 'Microsoft Tai Le', 'Tale']),\n                        getFont$1(['font', 'Microsoft New Tai Lue', 'Talu']),\n                        getFont$1(['font', 'Ebrima', 'Tfng'])\n                    ]\n                }, {\n                    name: 'a:minorFont',\n                    children: [\n                        getFont$1(['latin', 'Calibri', undefined, '020F0502020204030204']),\n                        getFont$1(['ea', '']),\n                        getFont$1(['cs', '']),\n                        getFont$1(['font', utf8_encode('游ゴシック'), 'Jpan']),\n                        getFont$1(['font', utf8_encode('맑은 고딕'), 'Hang']),\n                        getFont$1(['font', utf8_encode('等线'), 'Hans']),\n                        getFont$1(['font', utf8_encode('新細明體'), 'Hant']),\n                        getFont$1(['font', 'Arial', 'Arab']),\n                        getFont$1(['font', 'Arial', 'Hebr']),\n                        getFont$1(['font', 'Tahoma', 'Thai']),\n                        getFont$1(['font', 'Nyala', 'Ethi']),\n                        getFont$1(['font', 'Vrinda', 'Beng']),\n                        getFont$1(['font', 'Shruti', 'Gujr']),\n                        getFont$1(['font', 'DaunPenh', 'Khmr']),\n                        getFont$1(['font', 'Tunga', 'Knda']),\n                        getFont$1(['font', 'Raavi', 'Guru']),\n                        getFont$1(['font', 'Euphemia', 'Cans']),\n                        getFont$1(['font', 'Plantagenet Cherokee', 'Cher']),\n                        getFont$1(['font', 'Microsoft Yi Baiti', 'Yiii']),\n                        getFont$1(['font', 'Microsoft Himalaya', 'Tibt']),\n                        getFont$1(['font', 'MV Boli', 'Thaa']),\n                        getFont$1(['font', 'Mangal', 'Deva']),\n                        getFont$1(['font', 'Gautami', 'Telu']),\n                        getFont$1(['font', 'Latha', 'Taml']),\n                        getFont$1(['font', 'Estrangelo Edessa', 'Syrc']),\n                        getFont$1(['font', 'Kalinga', 'Orya']),\n                        getFont$1(['font', 'Kartika', 'Mlym']),\n                        getFont$1(['font', 'DokChampa', 'Laoo']),\n                        getFont$1(['font', 'Iskoola Pota', 'Sinh']),\n                        getFont$1(['font', 'Mongolian Baiti', 'Mong']),\n                        getFont$1(['font', 'Arial', 'Viet']),\n                        getFont$1(['font', 'Microsoft Uighur', 'Uigh']),\n                        getFont$1(['font', 'Sylfaen', 'Geor']),\n                        getFont$1(['font', 'Arial', 'Armn']),\n                        getFont$1(['font', 'Leelawadee UI', 'Bugi']),\n                        getFont$1(['font', 'Microsoft JhengHei', 'Bopo']),\n                        getFont$1(['font', 'Javanese Text', 'Java']),\n                        getFont$1(['font', 'Segoe UI', 'Lisu']),\n                        getFont$1(['font', 'Myanmar Text', 'Mymr']),\n                        getFont$1(['font', 'Ebrima', 'Nkoo']),\n                        getFont$1(['font', 'Nirmala UI', 'Olck']),\n                        getFont$1(['font', 'Ebrima', 'Osma']),\n                        getFont$1(['font', 'Phagspa', 'Phag']),\n                        getFont$1(['font', 'Estrangelo Edessa', 'Syrn']),\n                        getFont$1(['font', 'Estrangelo Edessa', 'Syrj']),\n                        getFont$1(['font', 'Estrangelo Edessa', 'Syre']),\n                        getFont$1(['font', 'Nirmala UI', 'Sora']),\n                        getFont$1(['font', 'Microsoft Tai Le', 'Tale']),\n                        getFont$1(['font', 'Microsoft New Tai Lue', 'Talu']),\n                        getFont$1(['font', 'Ebrima', 'Tfng'])\n                    ]\n                }]\n        };\n    }\n};\n\nconst getPropertyVal = (name, val, children) => ({\n    name: `a:${name}`,\n    properties: {\n        rawMap: {\n            val\n        }\n    },\n    children\n});\nconst getGs = (props) => {\n    const [pos, schemeColor, satMod, lumMod, tint, shade] = props;\n    const children = [];\n    children.push(getPropertyVal('satMod', satMod));\n    if (lumMod) {\n        children.push(getPropertyVal('lumMod', lumMod));\n    }\n    if (tint) {\n        children.push(getPropertyVal('tint', tint));\n    }\n    if (shade) {\n        children.push(getPropertyVal('shade', shade));\n    }\n    return {\n        name: 'a:gs',\n        properties: {\n            rawMap: {\n                pos\n            }\n        },\n        children: [{\n                name: 'a:schemeClr',\n                properties: {\n                    rawMap: {\n                        val: schemeColor\n                    }\n                },\n                children\n            }]\n    };\n};\nconst getSolidFill = (val, children) => ({\n    name: 'a:solidFill',\n    children: [getPropertyVal('schemeClr', val, children)]\n});\nconst getGradFill = (props) => {\n    const [rotWithShape, gs1, gs2, gs3, lin] = props;\n    const [ang, scaled] = lin;\n    return {\n        name: 'a:gradFill',\n        properties: {\n            rawMap: {\n                rotWithShape\n            }\n        },\n        children: [{\n                name: 'a:gsLst',\n                children: [\n                    getGs(gs1),\n                    getGs(gs2),\n                    getGs(gs3)\n                ]\n            }, {\n                name: 'a:lin',\n                properties: {\n                    rawMap: {\n                        ang: ang,\n                        scaled: scaled\n                    }\n                }\n            }]\n    };\n};\nconst getLine = (props) => {\n    const [w, cap, cmpd, algn] = props;\n    return {\n        name: 'a:ln',\n        properties: {\n            rawMap: { w, cap, cmpd, algn }\n        },\n        children: [\n            getSolidFill('phClr'),\n            getPropertyVal('prstDash', 'solid'),\n            {\n                name: 'a:miter',\n                properties: {\n                    rawMap: {\n                        lim: '800000'\n                    }\n                }\n            }\n        ]\n    };\n};\nconst getEffectStyle = (shadow) => {\n    const children = [];\n    if (shadow) {\n        const [blurRad, dist, dir, algn, rotWithShape] = shadow;\n        children.push({\n            name: 'a:outerShdw',\n            properties: {\n                rawMap: { blurRad, dist, dir, algn, rotWithShape }\n            },\n            children: [\n                getPropertyVal('srgbClr', '000000', [getPropertyVal('alpha', '63000')])\n            ]\n        });\n    }\n    return {\n        name: 'a:effectStyle',\n        children: [Object.assign({}, {\n                name: 'a:effectLst'\n            }, children.length ? { children } : {})]\n    };\n};\nconst getFillStyleList = () => ({\n    name: 'a:fillStyleLst',\n    children: [\n        getSolidFill('phClr'),\n        getGradFill([\n            '1',\n            ['0', 'phClr', '105000', '110000', '67000'],\n            ['50000', 'phClr', '103000', '105000', '73000'],\n            ['100000', 'phClr', '109000', '105000', '81000'],\n            ['5400000', '0']\n        ]),\n        getGradFill([\n            '1',\n            ['0', 'phClr', '103000', '102000', '94000'],\n            ['50000', 'phClr', '110000', '100000', undefined, '100000'],\n            ['100000', 'phClr', '120000', '99000', undefined, '78000'],\n            ['5400000', '0']\n        ])\n    ]\n});\nconst getLineStyleList = () => ({\n    name: 'a:lnStyleLst',\n    children: [\n        getLine(['6350', 'flat', 'sng', 'ctr']),\n        getLine(['12700', 'flat', 'sng', 'ctr']),\n        getLine(['19050', 'flat', 'sng', 'ctr'])\n    ]\n});\nconst getEffectStyleList = () => ({\n    name: 'a:effectStyleLst',\n    children: [\n        getEffectStyle(),\n        getEffectStyle(),\n        getEffectStyle(['57150', '19050', '5400000', 'ctr', '0'])\n    ]\n});\nconst getBgFillStyleList = () => ({\n    name: 'a:bgFillStyleLst',\n    children: [\n        getSolidFill('phClr'),\n        getSolidFill('phClr', [\n            getPropertyVal('tint', '95000'),\n            getPropertyVal('satMod', '170000'),\n        ]),\n        getGradFill([\n            '1',\n            ['0', 'phClr', '150000', '102000', '93000', '98000'],\n            ['50000', 'phClr', '130000', '103000', '98000', '90000'],\n            ['100000', 'phClr', '120000', undefined, undefined, '63000'],\n            ['5400000', '0']\n        ])\n    ]\n});\nconst formatScheme = {\n    getTemplate() {\n        return {\n            name: \"a:fmtScheme\",\n            properties: {\n                rawMap: {\n                    name: \"Office\"\n                }\n            },\n            children: [\n                getFillStyleList(),\n                getLineStyleList(),\n                getEffectStyleList(),\n                getBgFillStyleList()\n            ]\n        };\n    }\n};\n\nconst themeElements = {\n    getTemplate() {\n        return {\n            name: \"a:themeElements\",\n            children: [\n                colorScheme.getTemplate(),\n                fontScheme.getTemplate(),\n                formatScheme.getTemplate()\n            ]\n        };\n    }\n};\n\nconst officeTheme = {\n    getTemplate() {\n        return {\n            name: \"a:theme\",\n            properties: {\n                prefixedAttributes: [{\n                        prefix: \"xmlns:\",\n                        map: {\n                            a: \"http://schemas.openxmlformats.org/drawingml/2006/main\"\n                        },\n                    }],\n                rawMap: {\n                    name: \"Office Theme\"\n                }\n            },\n            children: [\n                themeElements.getTemplate(),\n                {\n                    name: 'a:objectDefaults'\n                },\n                {\n                    name: 'a:extraClrSchemeLst'\n                }\n            ]\n        };\n    }\n};\n\nconst buildSharedString = (strMap) => {\n    const ret = [];\n    strMap.forEach((val, key) => {\n        const textNode = key.toString();\n        const child = {\n            name: 't',\n            textNode: ag_grid_community__WEBPACK_IMPORTED_MODULE_0__._.utf8_encode(ag_grid_community__WEBPACK_IMPORTED_MODULE_0__._.escapeString(textNode))\n        };\n        // if we have leading or trailing spaces, instruct Excel not to trim them\n        const preserveSpaces = textNode.trim().length !== textNode.length;\n        if (preserveSpaces) {\n            child.properties = {\n                rawMap: {\n                    \"xml:space\": \"preserve\"\n                }\n            };\n        }\n        ret.push({\n            name: 'si',\n            children: [child]\n        });\n    });\n    return ret;\n};\nconst sharedStrings = {\n    getTemplate(strings) {\n        return {\n            name: \"sst\",\n            properties: {\n                rawMap: {\n                    xmlns: 'http://schemas.openxmlformats.org/spreadsheetml/2006/main',\n                    count: strings.size,\n                    uniqueCount: strings.size\n                }\n            },\n            children: buildSharedString(strings)\n        };\n    }\n};\n\nconst numberFormatFactory = {\n    getTemplate(numberFormat) {\n        let { formatCode, numFmtId } = numberFormat;\n        // excel formulas requires $ to be placed between quotes and symbols to be escaped\n        if (formatCode.length) {\n            formatCode = ag_grid_community__WEBPACK_IMPORTED_MODULE_0__._.escapeString(formatCode.replace(/\\$/g, '\"$\"'));\n        }\n        return {\n            name: \"numFmt\",\n            properties: {\n                rawMap: {\n                    formatCode,\n                    numFmtId\n                }\n            }\n        };\n    }\n};\n\nconst numberFormatsFactory = {\n    getTemplate(numberFormats) {\n        return {\n            name: \"numFmts\",\n            properties: {\n                rawMap: {\n                    count: numberFormats.length\n                }\n            },\n            children: numberFormats.map(numberFormat => numberFormatFactory.getTemplate(numberFormat))\n        };\n    }\n};\n\nconst fontFactory = {\n    getTemplate(font) {\n        const { size, colorTheme, color = 'FF000000', fontName = 'Calibri', family, scheme, italic, bold, strikeThrough, outline, shadow, underline, verticalAlign } = font;\n        const children = [\n            { name: 'sz', properties: { rawMap: { val: size } } },\n            { name: 'color', properties: { rawMap: { theme: colorTheme, rgb: color } } },\n            { name: 'name', properties: { rawMap: { val: fontName } } }\n        ];\n        if (family) {\n            children.push({ name: 'family', properties: { rawMap: { val: family } } });\n        }\n        if (scheme) {\n            children.push({ name: 'scheme', properties: { rawMap: { val: scheme } } });\n        }\n        if (italic) {\n            children.push({ name: 'i' });\n        }\n        if (bold) {\n            children.push({ name: 'b' });\n        }\n        if (strikeThrough) {\n            children.push({ name: 'strike' });\n        }\n        if (outline) {\n            children.push({ name: 'outline' });\n        }\n        if (shadow) {\n            children.push({ name: 'shadow' });\n        }\n        if (underline) {\n            children.push({ name: 'u', properties: { rawMap: { val: underline } } });\n        }\n        if (verticalAlign) {\n            children.push({ name: 'vertAlign', properties: { rawMap: { val: verticalAlign } } });\n        }\n        return { name: \"font\", children };\n    }\n};\n\nconst fontsFactory = {\n    getTemplate(fonts) {\n        return {\n            name: \"fonts\",\n            properties: {\n                rawMap: {\n                    count: fonts.length\n                }\n            },\n            children: fonts.map(font => fontFactory.getTemplate(font))\n        };\n    }\n};\n\nconst fillFactory = {\n    getTemplate(fill) {\n        const { patternType, fgTheme, fgTint, fgRgb, bgRgb, bgIndexed } = fill;\n        const pf = {\n            name: 'patternFill',\n            properties: {\n                rawMap: {\n                    patternType\n                }\n            }\n        };\n        if (fgTheme || fgTint || fgRgb) {\n            pf.children = [{\n                    name: 'fgColor',\n                    properties: {\n                        rawMap: {\n                            theme: fgTheme,\n                            tint: fgTint,\n                            rgb: fgRgb\n                        }\n                    }\n                }];\n        }\n        if (bgIndexed || bgRgb) {\n            if (!pf.children) {\n                pf.children = [];\n            }\n            pf.children.push({\n                name: 'bgColor',\n                properties: {\n                    rawMap: {\n                        indexed: bgIndexed,\n                        rgb: bgRgb\n                    }\n                }\n            });\n        }\n        return {\n            name: \"fill\",\n            children: [pf]\n        };\n    }\n};\n\nconst fillsFactory = {\n    getTemplate(fills) {\n        return {\n            name: \"fills\",\n            properties: {\n                rawMap: {\n                    count: fills.length\n                }\n            },\n            children: fills.map(fill => fillFactory.getTemplate(fill))\n        };\n    }\n};\n\nconst getWeightName = (value) => {\n    switch (value) {\n        case 1: return 'thin';\n        case 2: return 'medium';\n        case 3: return 'thick';\n        default: return 'hair';\n    }\n};\nconst mappedBorderNames = {\n    None: 'None',\n    Dot: 'Dotted',\n    Dash: 'Dashed',\n    Double: 'Double',\n    DashDot: 'DashDot',\n    DashDotDot: 'DashDotDot',\n    SlantDashDot: 'SlantDashDot'\n};\nconst mediumBorders = ['Dashed', 'DashDot', 'DashDotDot'];\nconst colorMap = {\n    None: 'none',\n    Solid: 'solid',\n    Gray50: 'mediumGray',\n    Gray75: 'darkGray',\n    Gray25: 'lightGray',\n    HorzStripe: 'darkHorizontal',\n    VertStripe: 'darkVertical',\n    ReverseDiagStripe: 'darkDown',\n    DiagStripe: 'darkUp',\n    DiagCross: 'darkGrid',\n    ThickDiagCross: 'darkTrellis',\n    ThinHorzStripe: 'lightHorizontal',\n    ThinVertStripe: 'lightVertical',\n    ThinReverseDiagStripe: 'lightDown',\n    ThinDiagStripe: 'lightUp',\n    ThinHorzCross: 'lightGrid',\n    ThinDiagCross: 'lightTrellis',\n    Gray125: 'gray125',\n    Gray0625: 'gray0625'\n};\nconst horizontalAlignmentMap = {\n    Automatic: 'general',\n    Left: 'left',\n    Center: 'center',\n    Right: 'right',\n    Fill: 'fill',\n    Justify: 'justify',\n    CenterAcrossSelection: 'centerContinuous',\n    Distributed: 'distributed',\n    JustifyDistributed: 'justify'\n};\nconst verticalAlignmentMap = {\n    Automatic: undefined,\n    Top: 'top',\n    Bottom: 'bottom',\n    Center: 'center',\n    Justify: 'justify',\n    Distributed: 'distributed',\n    JustifyDistributed: 'justify'\n};\nconst convertLegacyPattern = (name) => {\n    if (!name) {\n        return 'none';\n    }\n    return colorMap[name] || name;\n};\nconst convertLegacyColor = (color) => {\n    if (color == undefined) {\n        return color;\n    }\n    if (color.charAt(0) === '#') {\n        color = color.substr(1);\n    }\n    return color.length === 6 ? 'FF' + color : color;\n};\nconst convertLegacyBorder = (type, weight) => {\n    if (!type) {\n        return 'thin';\n    }\n    // Legacy Types are: None, Continuous, Dash, Dot, DashDot, DashDotDot, SlantDashDot, and Double\n    // Weight represents: 0—Hairline, 1—Thin , 2—Medium, 3—Thick\n    // New types: none, thin, medium, dashed, dotted, thick, double, hair, mediumDashed, dashDot, mediumDashDot,\n    // dashDotDot, mediumDashDotDot, slantDashDot\n    const namedWeight = getWeightName(weight);\n    const mappedName = mappedBorderNames[type];\n    if (type === 'Continuous') {\n        return namedWeight;\n    }\n    if (namedWeight === 'medium' && mediumBorders.indexOf(mappedName) !== -1) {\n        return `medium${mappedName}`;\n    }\n    return mappedName.charAt(0).toLowerCase() + mappedName.substr(1);\n};\nconst convertLegacyHorizontalAlignment = (alignment) => {\n    return horizontalAlignmentMap[alignment] || 'general';\n};\nconst convertLegacyVerticalAlignment = (alignment) => {\n    return verticalAlignmentMap[alignment] || undefined;\n};\n\nconst getBorderColor = (color) => {\n    return {\n        name: 'color',\n        properties: {\n            rawMap: {\n                rgb: convertLegacyColor(color || '#000000')\n            }\n        }\n    };\n};\nconst borderFactory$1 = {\n    getTemplate(border) {\n        const { left, right, top, bottom, diagonal } = border;\n        const leftChildren = left ? [getBorderColor(left.color)] : undefined;\n        const rightChildren = right ? [getBorderColor(right.color)] : undefined;\n        const topChildren = top ? [getBorderColor(top.color)] : undefined;\n        const bottomChildren = bottom ? [getBorderColor(bottom.color)] : undefined;\n        const diagonalChildren = diagonal ? [getBorderColor(diagonal.color)] : undefined;\n        return {\n            name: 'border',\n            children: [{\n                    name: 'left',\n                    properties: { rawMap: { style: left && left.style } },\n                    children: leftChildren\n                }, {\n                    name: 'right',\n                    properties: { rawMap: { style: right && right.style } },\n                    children: rightChildren\n                }, {\n                    name: 'top',\n                    properties: { rawMap: { style: top && top.style } },\n                    children: topChildren\n                }, {\n                    name: 'bottom',\n                    properties: { rawMap: { style: bottom && bottom.style } },\n                    children: bottomChildren\n                }, {\n                    name: 'diagonal',\n                    properties: { rawMap: { style: diagonal && diagonal.style } },\n                    children: diagonalChildren\n                }]\n        };\n    }\n};\n\nconst bordersFactory = {\n    getTemplate(borders) {\n        return {\n            name: \"borders\",\n            properties: {\n                rawMap: {\n                    count: borders.length\n                }\n            },\n            children: borders.map(border => borderFactory$1.getTemplate(border))\n        };\n    }\n};\n\nconst getReadingOrderId = (readingOrder) => {\n    const order = ['Context', 'LeftToRight', 'RightToLeft'];\n    const pos = order.indexOf(readingOrder);\n    return Math.max(pos, 0);\n};\nconst alignmentFactory = {\n    getTemplate(alignment) {\n        const { horizontal, indent, readingOrder, rotate, shrinkToFit, vertical, wrapText } = alignment;\n        return {\n            name: 'alignment',\n            properties: {\n                rawMap: {\n                    horizontal: horizontal && convertLegacyHorizontalAlignment(horizontal),\n                    indent,\n                    readingOrder: readingOrder && getReadingOrderId(readingOrder),\n                    textRotation: rotate,\n                    shrinkToFit,\n                    vertical: vertical && convertLegacyVerticalAlignment(vertical),\n                    wrapText\n                }\n            }\n        };\n    }\n};\n\nconst protectionFactory = {\n    getTemplate(protection) {\n        const locked = protection.protected === false ? 0 : 1;\n        const hidden = protection.hideFormula === true ? 1 : 0;\n        return {\n            name: 'protection',\n            properties: {\n                rawMap: {\n                    hidden,\n                    locked\n                }\n            }\n        };\n    }\n};\n\nconst xfFactory = {\n    getTemplate(xf) {\n        const { alignment, borderId, fillId, fontId, numFmtId, protection, xfId } = xf;\n        const children = [];\n        if (alignment) {\n            children.push(alignmentFactory.getTemplate(alignment));\n        }\n        if (protection) {\n            children.push(protectionFactory.getTemplate(protection));\n        }\n        return {\n            name: \"xf\",\n            properties: {\n                rawMap: {\n                    applyAlignment: alignment ? 1 : undefined,\n                    applyProtection: protection ? 1 : undefined,\n                    applyBorder: borderId ? 1 : undefined,\n                    applyFill: fillId ? 1 : undefined,\n                    borderId,\n                    fillId,\n                    applyFont: fontId ? 1 : undefined,\n                    fontId,\n                    applyNumberFormat: numFmtId ? 1 : undefined,\n                    numFmtId,\n                    xfId\n                }\n            },\n            children: children.length ? children : undefined\n        };\n    }\n};\n\nconst cellStylesXfsFactory = {\n    getTemplate(xfs) {\n        return {\n            name: \"cellStyleXfs\",\n            properties: {\n                rawMap: {\n                    count: xfs.length\n                }\n            },\n            children: xfs.map(xf => xfFactory.getTemplate(xf))\n        };\n    }\n};\n\nconst cellXfsFactory = {\n    getTemplate(xfs) {\n        return {\n            name: \"cellXfs\",\n            properties: {\n                rawMap: {\n                    count: xfs.length\n                }\n            },\n            children: xfs.map(xf => xfFactory.getTemplate(xf))\n        };\n    }\n};\n\nconst borderFactory = {\n    getTemplate(cellStyle) {\n        const { builtinId, name, xfId } = cellStyle;\n        return {\n            name: \"cellStyle\",\n            properties: {\n                rawMap: {\n                    builtinId,\n                    name,\n                    xfId\n                }\n            }\n        };\n    }\n};\n\nconst cellStylesFactory = {\n    getTemplate(cellStyles) {\n        return {\n            name: \"cellStyles\",\n            properties: {\n                rawMap: {\n                    count: cellStyles.length\n                }\n            },\n            children: cellStyles.map(cellStyle => borderFactory.getTemplate(cellStyle))\n        };\n    }\n};\n\nlet stylesMap;\nlet registeredNumberFmts;\nlet registeredFonts;\nlet registeredFills;\nlet registeredBorders;\nlet registeredCellStyleXfs;\nlet registeredCellXfs;\nlet registeredCellStyles;\nlet currentSheet;\nconst getStyleName = (name, currentSheet) => {\n    if (name.indexOf('mixedStyle') !== -1 && currentSheet > 1) {\n        name += `_${currentSheet}`;\n    }\n    return name;\n};\nconst resetStylesheetValues = () => {\n    stylesMap = { base: 0 };\n    registeredNumberFmts = [];\n    registeredFonts = [{ fontName: 'Calibri', colorTheme: '1', family: '2', scheme: 'minor' }];\n    registeredFills = [{ patternType: 'none', }, { patternType: 'gray125' }];\n    registeredBorders = [{ left: undefined, right: undefined, top: undefined, bottom: undefined, diagonal: undefined }];\n    registeredCellStyleXfs = [{ borderId: 0, fillId: 0, fontId: 0, numFmtId: 0 }];\n    registeredCellXfs = [{ borderId: 0, fillId: 0, fontId: 0, numFmtId: 0, xfId: 0 }];\n    registeredCellStyles = [{ builtinId: 0, name: 'Normal', xfId: 0 }];\n};\nconst registerFill = (fill) => {\n    const convertedPattern = convertLegacyPattern(fill.pattern);\n    const convertedFillColor = convertLegacyColor(fill.color);\n    const convertedPatternColor = convertLegacyColor(fill.patternColor);\n    let pos = registeredFills.findIndex(currentFill => {\n        const { patternType, fgRgb, bgRgb } = currentFill;\n        if (patternType != convertedPattern ||\n            fgRgb != convertedFillColor ||\n            bgRgb != convertedPatternColor) {\n            return false;\n        }\n        return true;\n    });\n    if (pos === -1) {\n        pos = registeredFills.length;\n        registeredFills.push({ patternType: convertedPattern, fgRgb: convertedFillColor, bgRgb: convertedPatternColor });\n    }\n    return pos;\n};\nconst registerNumberFmt = (format) => {\n    format = ag_grid_community__WEBPACK_IMPORTED_MODULE_0__._.utf8_encode(format);\n    if (numberFormatMap[format]) {\n        return numberFormatMap[format];\n    }\n    let pos = registeredNumberFmts.findIndex(currentFormat => currentFormat.formatCode === format);\n    if (pos === -1) {\n        pos = registeredNumberFmts.length + 164;\n        registeredNumberFmts.push({ formatCode: format, numFmtId: pos });\n    }\n    else {\n        pos = registeredNumberFmts[pos].numFmtId;\n    }\n    return pos;\n};\nconst registerBorders = (borders) => {\n    const { borderBottom, borderTop, borderLeft, borderRight } = borders;\n    let bottomStyle;\n    let topStyle;\n    let leftStyle;\n    let rightStyle;\n    let bottomColor;\n    let topColor;\n    let leftColor;\n    let rightColor;\n    if (borderLeft) {\n        leftStyle = convertLegacyBorder(borderLeft.lineStyle, borderLeft.weight);\n        leftColor = convertLegacyColor(borderLeft.color);\n    }\n    if (borderRight) {\n        rightStyle = convertLegacyBorder(borderRight.lineStyle, borderRight.weight);\n        rightColor = convertLegacyColor(borderRight.color);\n    }\n    if (borderBottom) {\n        bottomStyle = convertLegacyBorder(borderBottom.lineStyle, borderBottom.weight);\n        bottomColor = convertLegacyColor(borderBottom.color);\n    }\n    if (borderTop) {\n        topStyle = convertLegacyBorder(borderTop.lineStyle, borderTop.weight);\n        topColor = convertLegacyColor(borderTop.color);\n    }\n    let pos = registeredBorders.findIndex(currentBorder => {\n        const { left, right, top, bottom } = currentBorder;\n        if (!left && (leftStyle || leftColor)) {\n            return false;\n        }\n        if (!right && (rightStyle || rightColor)) {\n            return false;\n        }\n        if (!top && (topStyle || topColor)) {\n            return false;\n        }\n        if (!bottom && (bottomStyle || bottomColor)) {\n            return false;\n        }\n        const { style: clS, color: clC } = left || {};\n        const { style: crS, color: crC } = right || {};\n        const { style: ctS, color: ctC } = top || {};\n        const { style: cbS, color: cbC } = bottom || {};\n        if (clS != leftStyle || clC != leftColor) {\n            return false;\n        }\n        if (crS != rightStyle || crC != rightColor) {\n            return false;\n        }\n        if (ctS != topStyle || ctC != topColor) {\n            return false;\n        }\n        if (cbS != bottomStyle || cbC != bottomColor) {\n            return false;\n        }\n        return true;\n    });\n    if (pos === -1) {\n        pos = registeredBorders.length;\n        registeredBorders.push({\n            left: {\n                style: leftStyle, color: leftColor\n            },\n            right: {\n                style: rightStyle, color: rightColor\n            },\n            top: {\n                style: topStyle, color: topColor\n            },\n            bottom: {\n                style: bottomStyle, color: bottomColor\n            },\n            diagonal: {\n                style: undefined,\n                color: undefined\n            }\n        });\n    }\n    return pos;\n};\nconst registerFont = (font) => {\n    const { fontName: name = 'Calibri', color, size, bold, italic, outline, shadow, strikeThrough, underline, family, verticalAlign } = font;\n    const utf8Name = name ? ag_grid_community__WEBPACK_IMPORTED_MODULE_0__._.utf8_encode(name) : name;\n    const convertedColor = convertLegacyColor(color);\n    const familyId = getFontFamilyId(family);\n    const convertedUnderline = underline ? underline.toLocaleLowerCase() : undefined;\n    const convertedVerticalAlign = verticalAlign ? verticalAlign.toLocaleLowerCase() : undefined;\n    let pos = registeredFonts.findIndex(currentFont => {\n        if (currentFont.fontName != utf8Name ||\n            currentFont.color != convertedColor ||\n            currentFont.size != size ||\n            currentFont.bold != bold ||\n            currentFont.italic != italic ||\n            currentFont.outline != outline ||\n            currentFont.shadow != shadow ||\n            currentFont.strikeThrough != strikeThrough ||\n            currentFont.underline != convertedUnderline ||\n            currentFont.verticalAlign != convertedVerticalAlign ||\n            // @ts-ignore\n            currentFont.family != familyId) {\n            return false;\n        }\n        return true;\n    });\n    if (pos === -1) {\n        pos = registeredFonts.length;\n        registeredFonts.push({\n            fontName: utf8Name,\n            color: convertedColor,\n            size,\n            bold,\n            italic,\n            outline,\n            shadow,\n            strikeThrough,\n            underline: convertedUnderline,\n            verticalAlign: convertedVerticalAlign,\n            family: familyId != null ? familyId.toString() : undefined\n        });\n    }\n    return pos;\n};\nconst registerStyle = (config) => {\n    const { alignment, borders, font, interior, numberFormat, protection } = config;\n    let { id } = config;\n    let currentFill = 0;\n    let currentBorder = 0;\n    let currentFont = 0;\n    let currentNumberFmt = 0;\n    if (!id) {\n        return;\n    }\n    id = getStyleName(id, currentSheet);\n    if (stylesMap[id] != undefined) {\n        return;\n    }\n    if (interior) {\n        currentFill = registerFill(interior);\n    }\n    if (borders) {\n        currentBorder = registerBorders(borders);\n    }\n    if (font) {\n        currentFont = registerFont(font);\n    }\n    if (numberFormat) {\n        currentNumberFmt = registerNumberFmt(numberFormat.format);\n    }\n    stylesMap[id] = registeredCellXfs.length;\n    registeredCellXfs.push({\n        alignment,\n        borderId: currentBorder || 0,\n        fillId: currentFill || 0,\n        fontId: currentFont || 0,\n        numFmtId: currentNumberFmt || 0,\n        protection,\n        xfId: 0\n    });\n};\nconst stylesheetFactory = {\n    getTemplate(defaultFontSize) {\n        const numberFormats = numberFormatsFactory.getTemplate(registeredNumberFmts);\n        const fonts = fontsFactory.getTemplate(registeredFonts.map(font => (Object.assign(Object.assign({}, font), { size: font.size != null ? font.size : defaultFontSize }))));\n        const fills = fillsFactory.getTemplate(registeredFills);\n        const borders = bordersFactory.getTemplate(registeredBorders);\n        const cellStylesXfs = cellStylesXfsFactory.getTemplate(registeredCellStyleXfs);\n        const cellXfs = cellXfsFactory.getTemplate(registeredCellXfs);\n        const cellStyles = cellStylesFactory.getTemplate(registeredCellStyles);\n        resetStylesheetValues();\n        return {\n            name: 'styleSheet',\n            properties: {\n                rawMap: {\n                    'mc:Ignorable': 'x14ac x16r2 xr',\n                    'xmlns': 'http://schemas.openxmlformats.org/spreadsheetml/2006/main',\n                    'xmlns:mc': 'http://schemas.openxmlformats.org/markup-compatibility/2006',\n                    'xmlns:x14ac': 'http://schemas.microsoft.com/office/spreadsheetml/2009/9/ac',\n                    'xmlns:x16r2': 'http://schemas.microsoft.com/office/spreadsheetml/2015/02/main',\n                    'xmlns:xr': 'http://schemas.microsoft.com/office/spreadsheetml/2014/revision'\n                }\n            },\n            children: [\n                numberFormats,\n                fonts,\n                fills,\n                borders,\n                cellStylesXfs,\n                cellXfs,\n                cellStyles,\n                {\n                    name: 'tableStyles',\n                    properties: {\n                        rawMap: {\n                            count: 0,\n                            defaultPivotStyle: 'PivotStyleLight16',\n                            defaultTableStyle: 'TableStyleMedium2'\n                        }\n                    }\n                }\n            ]\n        };\n    }\n};\nconst getStyleId = (name, currentSheet) => {\n    return stylesMap[getStyleName(name, currentSheet)] || 0;\n};\nconst registerStyles = (styles, _currentSheet) => {\n    currentSheet = _currentSheet;\n    if (currentSheet === 1) {\n        resetStylesheetValues();\n    }\n    styles.forEach(registerStyle);\n};\n\nconst sheetFactory = {\n    getTemplate(name, idx) {\n        const sheetId = (idx + 1).toString();\n        return {\n            name: \"sheet\",\n            properties: {\n                rawMap: {\n                    \"name\": name,\n                    \"sheetId\": sheetId,\n                    \"r:id\": `rId${sheetId}`\n                }\n            }\n        };\n    }\n};\n\nconst sheetsFactory = {\n    getTemplate(names) {\n        return {\n            name: \"sheets\",\n            children: names.map((sheet, idx) => sheetFactory.getTemplate(sheet, idx))\n        };\n    }\n};\n\nconst workbookFactory = {\n    getTemplate(names) {\n        return {\n            name: \"workbook\",\n            properties: {\n                prefixedAttributes: [{\n                        prefix: \"xmlns:\",\n                        map: {\n                            r: \"http://schemas.openxmlformats.org/officeDocument/2006/relationships\"\n                        },\n                    }],\n                rawMap: {\n                    xmlns: \"http://schemas.openxmlformats.org/spreadsheetml/2006/main\"\n                }\n            },\n            children: [sheetsFactory.getTemplate(names)]\n        };\n    }\n};\n\n// https://docs.microsoft.com/en-us/office/troubleshoot/excel/determine-column-widths\nconst getExcelCellWidth = (width) => Math.ceil((width - 12) / 7 + 1);\nconst columnFactory = {\n    getTemplate(config) {\n        const { min, max, outlineLevel, s, width, hidden, bestFit } = config;\n        let excelWidth = 1;\n        let customWidth = '0';\n        if (width > 1) {\n            excelWidth = getExcelCellWidth(width);\n            customWidth = '1';\n        }\n        return {\n            name: 'col',\n            properties: {\n                rawMap: {\n                    min: min,\n                    max: max,\n                    outlineLevel: outlineLevel != null ? outlineLevel : undefined,\n                    width: excelWidth,\n                    style: s,\n                    hidden: hidden ? '1' : '0',\n                    bestFit: bestFit ? '1' : '0',\n                    customWidth: customWidth\n                }\n            }\n        };\n    }\n};\n\nconst convertLegacyType = (type) => {\n    const t = type.charAt(0).toLowerCase();\n    return t === 's' ? 'inlineStr' : t;\n};\nconst cellFactory = {\n    getTemplate(config, idx, currentSheet) {\n        const { ref, data, styleId } = config;\n        const { type, value } = data || { type: 'empty', value: null };\n        let convertedType = type;\n        if (type === 'f') {\n            convertedType = 'str';\n        }\n        else if (type.charAt(0) === type.charAt(0).toUpperCase()) {\n            convertedType = convertLegacyType(type);\n        }\n        const obj = {\n            name: 'c',\n            properties: {\n                rawMap: {\n                    r: ref,\n                    t: convertedType === 'empty' ? undefined : convertedType,\n                    s: styleId ? getStyleId(styleId, currentSheet) : undefined\n                }\n            }\n        };\n        if (convertedType === 'empty') {\n            return obj;\n        }\n        let children;\n        if (convertedType === 'str' && type === 'f') {\n            children = [{\n                    name: 'f',\n                    textNode: ag_grid_community__WEBPACK_IMPORTED_MODULE_0__._.escapeString(ag_grid_community__WEBPACK_IMPORTED_MODULE_0__._.utf8_encode(value))\n                }];\n        }\n        else if (convertedType === 'inlineStr') {\n            children = [{\n                    name: 'is',\n                    children: [{\n                            name: 't',\n                            textNode: ag_grid_community__WEBPACK_IMPORTED_MODULE_0__._.escapeString(ag_grid_community__WEBPACK_IMPORTED_MODULE_0__._.utf8_encode(value))\n                        }]\n                }];\n        }\n        else {\n            children = [{\n                    name: 'v',\n                    textNode: value\n                }];\n        }\n        return Object.assign({}, obj, { children });\n    }\n};\n\nconst addEmptyCells = (cells, rowIdx) => {\n    const mergeMap = [];\n    let posCounter = 0;\n    for (let i = 0; i < cells.length; i++) {\n        const cell = cells[i];\n        if (cell.mergeAcross) {\n            mergeMap.push({\n                pos: i,\n                excelPos: posCounter\n            });\n            posCounter += cell.mergeAcross;\n        }\n        posCounter++;\n    }\n    if (mergeMap.length) {\n        for (let i = mergeMap.length - 1; i >= 0; i--) {\n            const mergedCells = [];\n            const cell = cells[mergeMap[i].pos];\n            for (let j = 1; j <= cell.mergeAcross; j++) {\n                mergedCells.push({\n                    ref: `${getExcelColumnName(mergeMap[i].excelPos + 1 + j)}${rowIdx + 1}`,\n                    styleId: cell.styleId,\n                    data: { type: 'empty', value: null }\n                });\n            }\n            if (mergedCells.length) {\n                cells.splice(mergeMap[i].pos + 1, 0, ...mergedCells);\n            }\n        }\n    }\n};\nconst shouldDisplayCell = (cell) => { var _a; return ((_a = cell.data) === null || _a === void 0 ? void 0 : _a.value) !== '' || cell.styleId !== undefined; };\nconst rowFactory = {\n    getTemplate(config, idx, currentSheet) {\n        const { collapsed, hidden, height, outlineLevel, cells = [] } = config;\n        addEmptyCells(cells, idx);\n        const children = cells.filter(shouldDisplayCell).map((cell, idx) => cellFactory.getTemplate(cell, idx, currentSheet));\n        return {\n            name: \"row\",\n            properties: {\n                rawMap: {\n                    r: idx + 1,\n                    collapsed: collapsed ? '1' : '0',\n                    hidden: hidden ? '1' : '0',\n                    ht: height,\n                    customHeight: height != null ? '1' : '0',\n                    spans: '1:1',\n                    outlineLevel: outlineLevel || undefined\n                }\n            },\n            children\n        };\n    }\n};\n\nconst mergeCellFactory = {\n    getTemplate(ref) {\n        return {\n            name: 'mergeCell',\n            properties: {\n                rawMap: {\n                    ref: ref\n                }\n            }\n        };\n    }\n};\n\nconst getMergedCellsAndAddColumnGroups = (rows, cols, suppressColumnOutline) => {\n    const mergedCells = [];\n    const cellsWithCollapsibleGroups = [];\n    rows.forEach((currentRow, rowIdx) => {\n        const cells = currentRow.cells;\n        let merges = 0;\n        let lastCol;\n        cells.forEach((currentCell, cellIdx) => {\n            const min = cellIdx + merges + 1;\n            const start = getExcelColumnName(min);\n            const outputRow = rowIdx + 1;\n            if (currentCell.mergeAcross) {\n                merges += currentCell.mergeAcross;\n                const end = getExcelColumnName(cellIdx + merges + 1);\n                mergedCells.push(`${start}${outputRow}:${end}${outputRow}`);\n            }\n            if (!cols[min - 1]) {\n                cols[min - 1] = {};\n            }\n            const { collapsibleRanges } = currentCell;\n            if (collapsibleRanges) {\n                collapsibleRanges.forEach(range => {\n                    cellsWithCollapsibleGroups.push([min + range[0], min + range[1]]);\n                });\n            }\n            lastCol = cols[min - 1];\n            lastCol.min = min;\n            lastCol.max = min;\n            currentCell.ref = `${start}${outputRow}`;\n        });\n    });\n    cellsWithCollapsibleGroups.sort((a, b) => {\n        if (a[0] !== b[0]) {\n            return a[0] - b[0];\n        }\n        return b[1] - a[1];\n    });\n    const rangeMap = new Map();\n    const outlineLevel = new Map();\n    cellsWithCollapsibleGroups.filter(currentRange => {\n        const rangeString = currentRange.toString();\n        const inMap = rangeMap.get(rangeString);\n        if (inMap) {\n            return false;\n        }\n        rangeMap.set(rangeString, true);\n        return true;\n    }).forEach(range => {\n        const refCol = cols.find(col => col.min == range[0] && col.max == range[1]);\n        const currentOutlineLevel = outlineLevel.get(range[0]);\n        cols.push({\n            min: range[0],\n            max: range[1],\n            outlineLevel: suppressColumnOutline ? undefined : (currentOutlineLevel || 1),\n            width: (refCol || { width: 100 }).width\n        });\n        outlineLevel.set(range[0], (currentOutlineLevel || 0) + 1);\n    });\n    return mergedCells;\n};\nconst getPageOrientation = (orientation) => {\n    if (!orientation || (orientation !== 'Portrait' && orientation !== 'Landscape')) {\n        return 'portrait';\n    }\n    return orientation.toLocaleLowerCase();\n};\nconst getPageSize = (pageSize) => {\n    if (pageSize == null) {\n        return 1;\n    }\n    const positions = ['Letter', 'Letter Small', 'Tabloid', 'Ledger', 'Legal', 'Statement', 'Executive', 'A3', 'A4', 'A4 Small', 'A5', 'A6', 'B4', 'B5', 'Folio', 'Envelope', 'Envelope DL', 'Envelope C5', 'Envelope B5', 'Envelope C3', 'Envelope C4', 'Envelope C6', 'Envelope Monarch', 'Japanese Postcard', 'Japanese Double Postcard'];\n    const pos = positions.indexOf(pageSize);\n    return pos === -1 ? 1 : (pos + 1);\n};\nconst addColumns = (columns) => {\n    return (children) => {\n        if (columns.length) {\n            children.push({\n                name: 'cols',\n                children: columns.map(column => columnFactory.getTemplate(column))\n            });\n        }\n        return children;\n    };\n};\nconst addSheetData = (rows, sheetNumber) => {\n    return (children) => {\n        if (rows.length) {\n            children.push({\n                name: 'sheetData',\n                children: rows.map((row, idx) => rowFactory.getTemplate(row, idx, sheetNumber))\n            });\n        }\n        return children;\n    };\n};\nconst addMergeCells = (mergeCells) => {\n    return (children) => {\n        if (mergeCells.length) {\n            children.push({\n                name: 'mergeCells',\n                properties: {\n                    rawMap: {\n                        count: mergeCells.length\n                    }\n                },\n                children: mergeCells.map(mergedCell => mergeCellFactory.getTemplate(mergedCell))\n            });\n        }\n        return children;\n    };\n};\nconst addPageMargins = (margins) => {\n    return (children) => {\n        const { top = 0.75, right = 0.7, bottom = 0.75, left = 0.7, header = 0.3, footer = 0.3 } = margins;\n        children.push({\n            name: 'pageMargins',\n            properties: {\n                rawMap: { bottom, footer, header, left, right, top }\n            }\n        });\n        return children;\n    };\n};\nconst addPageSetup = (pageSetup) => {\n    return (children) => {\n        if (pageSetup) {\n            children.push({\n                name: 'pageSetup',\n                properties: {\n                    rawMap: {\n                        horizontalDpi: 0,\n                        verticalDpi: 0,\n                        orientation: getPageOrientation(pageSetup.orientation),\n                        paperSize: getPageSize(pageSetup.pageSize)\n                    }\n                }\n            });\n        }\n        return children;\n    };\n};\nconst replaceHeaderFooterTokens = (value) => {\n    const map = {\n        '&[Page]': '&P',\n        '&[Pages]': '&N',\n        '&[Date]': '&D',\n        '&[Time]': '&T',\n        '&[Tab]': '&A',\n        '&[Path]': '&Z',\n        '&[File]': '&F'\n    };\n    ag_grid_community__WEBPACK_IMPORTED_MODULE_0__._.iterateObject(map, (key, val) => {\n        value = value.replace(key, val);\n    });\n    return value;\n};\nconst getHeaderPosition = (position) => {\n    if (position === 'Center') {\n        return 'C';\n    }\n    if (position === 'Right') {\n        return 'R';\n    }\n    return 'L';\n};\nconst applyHeaderFontStyle = (headerString, font) => {\n    if (!font) {\n        return headerString;\n    }\n    headerString += '&amp;&quot;';\n    headerString += font.fontName || 'Calibri';\n    if (font.bold !== font.italic) {\n        headerString += font.bold ? ',Bold' : ',Italic';\n    }\n    else if (font.bold) {\n        headerString += ',Bold Italic';\n    }\n    else {\n        headerString += ',Regular';\n    }\n    headerString += '&quot;';\n    if (font.size) {\n        headerString += `&amp;${font.size}`;\n    }\n    if (font.strikeThrough) {\n        headerString += '&amp;S';\n    }\n    if (font.underline) {\n        headerString += `&amp;${font.underline === 'Double' ? 'E' : 'U'}`;\n    }\n    if (font.color) {\n        headerString += `&amp;K${font.color.replace('#', '').toUpperCase()}`;\n    }\n    return headerString;\n};\nconst processHeaderFooterContent = (content) => content.reduce((prev, curr) => {\n    const pos = getHeaderPosition(curr.position);\n    const output = applyHeaderFontStyle(`${prev}&amp;${pos}`, curr.font);\n    return `${output}${ag_grid_community__WEBPACK_IMPORTED_MODULE_0__._.escapeString(replaceHeaderFooterTokens(curr.value))}`;\n}, '');\nconst buildHeaderFooter = (headerFooterConfig) => {\n    const rules = ['all', 'first', 'even'];\n    const headersAndFooters = [];\n    rules.forEach(rule => {\n        const headerFooter = headerFooterConfig[rule];\n        const namePrefix = rule === 'all' ? 'odd' : rule;\n        if (!headerFooter || (!headerFooter.header && !headerFooter.footer)) {\n            return;\n        }\n        ag_grid_community__WEBPACK_IMPORTED_MODULE_0__._.iterateObject(headerFooter, (key, value) => {\n            const nameSuffix = `${key.charAt(0).toUpperCase()}${key.slice(1)}`;\n            if (value) {\n                headersAndFooters.push({\n                    name: `${namePrefix}${nameSuffix}`,\n                    properties: {\n                        rawMap: {\n                            'xml:space': 'preserve'\n                        }\n                    },\n                    textNode: processHeaderFooterContent(value)\n                });\n            }\n        });\n    });\n    return headersAndFooters;\n};\nconst addHeaderFooter = (headerFooterConfig) => {\n    return (children) => {\n        if (!headerFooterConfig) {\n            return children;\n        }\n        const differentFirst = headerFooterConfig.first != null ? 1 : 0;\n        const differentOddEven = headerFooterConfig.even != null ? 1 : 0;\n        children.push({\n            name: 'headerFooter',\n            properties: {\n                rawMap: {\n                    differentFirst,\n                    differentOddEven\n                }\n            },\n            children: buildHeaderFooter(headerFooterConfig)\n        });\n        return children;\n    };\n};\nconst addDrawingRel = (currentSheet) => {\n    return (children) => {\n        if (ExcelXlsxFactory.worksheetImages.get(currentSheet)) {\n            children.push({\n                name: 'drawing',\n                properties: {\n                    rawMap: {\n                        'r:id': 'rId1'\n                    }\n                }\n            });\n        }\n        return children;\n    };\n};\nconst addSheetPr = () => {\n    return (children) => {\n        children.push({\n            name: 'sheetPr',\n            children: [{\n                    name: 'outlinePr',\n                    properties: {\n                        rawMap: {\n                            summaryBelow: 0\n                        }\n                    }\n                }]\n        });\n        return children;\n    };\n};\nconst addSheetFormatPr = (rows) => {\n    return (children) => {\n        const maxOutline = rows.reduce((prev, row) => {\n            if (row.outlineLevel && row.outlineLevel > prev) {\n                return row.outlineLevel;\n            }\n            return prev;\n        }, 0);\n        children.push({\n            name: 'sheetFormatPr',\n            properties: {\n                rawMap: {\n                    baseColWidth: 10,\n                    defaultRowHeight: 16,\n                    outlineLevelRow: maxOutline ? maxOutline : undefined\n                }\n            }\n        });\n        return children;\n    };\n};\nconst worksheetFactory = {\n    getTemplate(params) {\n        const { worksheet, currentSheet, config } = params;\n        const { margins = {}, pageSetup, headerFooterConfig, suppressColumnOutline } = config;\n        const { table } = worksheet;\n        const { rows, columns } = table;\n        const mergedCells = (columns && columns.length) ? getMergedCellsAndAddColumnGroups(rows, columns, !!suppressColumnOutline) : [];\n        const createWorksheetChildren = ag_grid_community__WEBPACK_IMPORTED_MODULE_0__._.compose(addSheetPr(), addSheetFormatPr(rows), addColumns(columns), addSheetData(rows, currentSheet + 1), addMergeCells(mergedCells), addPageMargins(margins), addPageSetup(pageSetup), addHeaderFooter(headerFooterConfig), addDrawingRel(currentSheet));\n        const children = createWorksheetChildren([]);\n        return {\n            name: \"worksheet\",\n            properties: {\n                prefixedAttributes: [{\n                        prefix: \"xmlns:\",\n                        map: {\n                            r: \"http://schemas.openxmlformats.org/officeDocument/2006/relationships\"\n                        }\n                    }],\n                rawMap: {\n                    xmlns: \"http://schemas.openxmlformats.org/spreadsheetml/2006/main\"\n                }\n            },\n            children\n        };\n    }\n};\n\nconst relationshipFactory = {\n    getTemplate(config) {\n        const { Id, Type, Target } = config;\n        return {\n            name: \"Relationship\",\n            properties: {\n                rawMap: {\n                    Id,\n                    Type,\n                    Target\n                }\n            }\n        };\n    }\n};\n\nconst relationshipsFactory = {\n    getTemplate(c) {\n        const children = c.map(relationship => relationshipFactory.getTemplate(relationship));\n        return {\n            name: \"Relationships\",\n            properties: {\n                rawMap: {\n                    xmlns: \"http://schemas.openxmlformats.org/package/2006/relationships\"\n                }\n            },\n            children\n        };\n    }\n};\n\n/**\n * See https://www.ecma-international.org/news/TC45_current_work/OpenXML%20White%20Paper.pdf\n */\nclass ExcelXlsxFactory {\n    static createExcel(styles, worksheet, config) {\n        this.addSheetName(worksheet);\n        registerStyles(styles, this.sheetNames.length);\n        return this.createWorksheet(worksheet, config);\n    }\n    static buildImageMap(image, rowIndex, col, columnsToExport, rowHeight) {\n        const currentSheetIndex = this.sheetNames.length;\n        const registeredImage = this.images.get(image.id);\n        if (!image.position || !image.position.row || !image.position.column) {\n            if (!image.position) {\n                image.position = {};\n            }\n            image.position = Object.assign({}, image.position, {\n                row: rowIndex,\n                column: columnsToExport.indexOf(col) + 1\n            });\n        }\n        const calculatedImage = image;\n        setExcelImageTotalWidth(calculatedImage, columnsToExport);\n        setExcelImageTotalHeight(calculatedImage, rowHeight);\n        if (registeredImage) {\n            const currentSheetImages = registeredImage.find(currentImage => currentImage.sheetId === currentSheetIndex);\n            if (currentSheetImages) {\n                currentSheetImages.image.push(calculatedImage);\n            }\n            else {\n                registeredImage.push({\n                    sheetId: currentSheetIndex,\n                    image: [calculatedImage]\n                });\n            }\n        }\n        else {\n            this.images.set(calculatedImage.id, [{ sheetId: currentSheetIndex, image: [calculatedImage] }]);\n            this.workbookImageIds.set(calculatedImage.id, { type: calculatedImage.imageType, index: this.workbookImageIds.size });\n        }\n        this.buildSheetImageMap(currentSheetIndex, calculatedImage);\n    }\n    static buildSheetImageMap(sheetIndex, image) {\n        let worksheetImageIdMap = this.worksheetImageIds.get(sheetIndex);\n        if (!worksheetImageIdMap) {\n            worksheetImageIdMap = new Map();\n            this.worksheetImageIds.set(sheetIndex, worksheetImageIdMap);\n        }\n        const sheetImages = this.worksheetImages.get(sheetIndex);\n        if (!sheetImages) {\n            this.worksheetImages.set(sheetIndex, [image]);\n            worksheetImageIdMap.set(image.id, { index: 0, type: image.imageType });\n        }\n        else {\n            sheetImages.push(image);\n            if (!worksheetImageIdMap.get(image.id)) {\n                worksheetImageIdMap.set(image.id, { index: worksheetImageIdMap.size, type: image.imageType });\n            }\n        }\n    }\n    static addSheetName(worksheet) {\n        const name = ag_grid_community__WEBPACK_IMPORTED_MODULE_0__._.escapeString(worksheet.name) || '';\n        let append = '';\n        while (this.sheetNames.indexOf(`${name}${append}`) !== -1) {\n            if (append === '') {\n                append = '_1';\n            }\n            else {\n                const curr = parseInt(append.slice(1), 10);\n                append = `_${curr + 1}`;\n            }\n        }\n        worksheet.name = `${name}${append}`;\n        this.sheetNames.push(worksheet.name);\n    }\n    static getStringPosition(str) {\n        if (this.sharedStrings.has(str)) {\n            return this.sharedStrings.get(str);\n        }\n        this.sharedStrings.set(str, this.sharedStrings.size);\n        return this.sharedStrings.size - 1;\n    }\n    static resetFactory() {\n        this.sharedStrings = new Map();\n        this.images = new Map();\n        this.worksheetImages = new Map();\n        this.workbookImageIds = new Map();\n        this.worksheetImageIds = new Map();\n        this.sheetNames = [];\n        this.factoryMode = ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.ExcelFactoryMode.SINGLE_SHEET;\n    }\n    static createWorkbook() {\n        return createXmlPart(workbookFactory.getTemplate(this.sheetNames));\n    }\n    static createStylesheet(defaultFontSize) {\n        return createXmlPart(stylesheetFactory.getTemplate(defaultFontSize));\n    }\n    static createSharedStrings() {\n        return createXmlPart(sharedStrings.getTemplate(this.sharedStrings));\n    }\n    static createCore(author) {\n        return createXmlPart(coreFactory.getTemplate(author));\n    }\n    static createContentTypes(sheetLen) {\n        return createXmlPart(contentTypesFactory.getTemplate(sheetLen));\n    }\n    static createRels() {\n        const rs = relationshipsFactory.getTemplate([{\n                Id: 'rId1',\n                Type: 'http://schemas.openxmlformats.org/officeDocument/2006/relationships/officeDocument',\n                Target: 'xl/workbook.xml'\n            }, {\n                Id: 'rId2',\n                Type: 'http://schemas.openxmlformats.org/package/2006/relationships/metadata/core-properties',\n                Target: 'docProps/core.xml'\n            }]);\n        return createXmlPart(rs);\n    }\n    static createTheme() {\n        return createXmlPart(officeTheme.getTemplate());\n    }\n    static createWorkbookRels(sheetLen) {\n        const worksheets = new Array(sheetLen).fill(undefined).map((v, i) => ({\n            Id: `rId${i + 1}`,\n            Type: 'http://schemas.openxmlformats.org/officeDocument/2006/relationships/worksheet',\n            Target: `worksheets/sheet${i + 1}.xml`\n        }));\n        const rs = relationshipsFactory.getTemplate([\n            ...worksheets,\n            {\n                Id: `rId${sheetLen + 1}`,\n                Type: 'http://schemas.openxmlformats.org/officeDocument/2006/relationships/theme',\n                Target: 'theme/theme1.xml'\n            }, {\n                Id: `rId${sheetLen + 2}`,\n                Type: 'http://schemas.openxmlformats.org/officeDocument/2006/relationships/styles',\n                Target: 'styles.xml'\n            }, {\n                Id: `rId${sheetLen + 3}`,\n                Type: 'http://schemas.openxmlformats.org/officeDocument/2006/relationships/sharedStrings',\n                Target: 'sharedStrings.xml'\n            }\n        ]);\n        return createXmlPart(rs);\n    }\n    static createDrawing(sheetIndex) {\n        return createXmlPart(drawingFactory.getTemplate({ sheetIndex }));\n    }\n    static createDrawingRel(sheetIndex) {\n        const worksheetImageIds = this.worksheetImageIds.get(sheetIndex);\n        const XMLArr = [];\n        worksheetImageIds.forEach((value, key) => {\n            XMLArr.push({\n                Id: `rId${value.index + 1}`,\n                Type: 'http://schemas.openxmlformats.org/officeDocument/2006/relationships/image',\n                Target: `../media/image${this.workbookImageIds.get(key).index + 1}.${value.type}`\n            });\n        });\n        return createXmlPart(relationshipsFactory.getTemplate(XMLArr));\n    }\n    static createWorksheetDrawingRel(currentRelationIndex) {\n        const rs = relationshipsFactory.getTemplate([{\n                Id: 'rId1',\n                Type: 'http://schemas.openxmlformats.org/officeDocument/2006/relationships/drawing',\n                Target: `../drawings/drawing${currentRelationIndex + 1}.xml`\n            }]);\n        return createXmlPart(rs);\n    }\n    static createWorksheet(worksheet, config) {\n        return createXmlPart(worksheetFactory.getTemplate({\n            worksheet,\n            currentSheet: this.sheetNames.length - 1,\n            config\n        }));\n    }\n}\nExcelXlsxFactory.sharedStrings = new Map();\nExcelXlsxFactory.sheetNames = [];\n/** Maps images to sheet */\nExcelXlsxFactory.images = new Map();\n/** Maps sheets to images */\nExcelXlsxFactory.worksheetImages = new Map();\n/** Maps all workbook images to a global Id */\nExcelXlsxFactory.workbookImageIds = new Map();\n/** Maps all sheet images to unique Ids */\nExcelXlsxFactory.worksheetImageIds = new Map();\nExcelXlsxFactory.factoryMode = ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.ExcelFactoryMode.SINGLE_SHEET;\n\nclass ExcelXlsxSerializingSession extends BaseExcelSerializingSession {\n    createExcel(data) {\n        const { excelStyles, config } = this;\n        return ExcelXlsxFactory.createExcel(excelStyles, data, config);\n    }\n    getDataTypeForValue(valueForCell) {\n        if (valueForCell === undefined) {\n            return 'empty';\n        }\n        return this.isNumerical(valueForCell) ? 'n' : 's';\n    }\n    getType(type, style, value) {\n        if (this.isFormula(value)) {\n            return 'f';\n        }\n        if (style && style.dataType) {\n            switch (style.dataType.toLocaleLowerCase()) {\n                case 'formula':\n                    return 'f';\n                case 'string':\n                    return 's';\n                case 'number':\n                    return 'n';\n                case 'datetime':\n                    return 'd';\n                case 'error':\n                    return 'e';\n                case 'boolean':\n                    return 'b';\n                default:\n                    console.warn(`AG Grid: Unrecognized data type for excel export [${style.id}.dataType=${style.dataType}]`);\n            }\n        }\n        return type;\n    }\n    addImage(rowIndex, column, value) {\n        if (!this.config.addImageToCell) {\n            return;\n        }\n        const addedImage = this.config.addImageToCell(rowIndex, column, value);\n        if (!addedImage) {\n            return;\n        }\n        ExcelXlsxFactory.buildImageMap(addedImage.image, rowIndex, column, this.columnsToExport, this.config.rowHeight);\n        return addedImage;\n    }\n    createCell(styleId, type, value, valueFormatted) {\n        const actualStyle = this.getStyleById(styleId);\n        if (!(actualStyle === null || actualStyle === void 0 ? void 0 : actualStyle.dataType) && type === 's' && valueFormatted) {\n            value = valueFormatted;\n        }\n        const typeTransformed = this.getType(type, actualStyle, value) || type;\n        return {\n            styleId: actualStyle ? styleId : undefined,\n            data: {\n                type: typeTransformed,\n                value: this.getCellValue(typeTransformed, value)\n            }\n        };\n    }\n    createMergedCell(styleId, type, value, numOfCells) {\n        const valueToUse = value == null ? '' : value;\n        return {\n            styleId: !!this.getStyleById(styleId) ? styleId : undefined,\n            data: {\n                type: type,\n                value: type === 's' ? ExcelXlsxFactory.getStringPosition(valueToUse).toString() : value\n            },\n            mergeAcross: numOfCells\n        };\n    }\n    getCellValue(type, value) {\n        if (value == null) {\n            return ExcelXlsxFactory.getStringPosition('').toString();\n        }\n        switch (type) {\n            case 's':\n                return value === '' ? '' : ExcelXlsxFactory.getStringPosition(value).toString();\n            case 'f':\n                return value.slice(1);\n            case 'n':\n                return Number(value).toString();\n            default:\n                return value;\n        }\n    }\n}\n\nvar __decorate$21 = ( false) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nconst getMultipleSheetsAsExcel = (params) => {\n    const { data, fontSize = 11, author = 'AG Grid' } = params;\n    const hasImages = ExcelXlsxFactory.images.size > 0;\n    ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.ZipContainer.addFolders([\n        '_rels/',\n        'docProps/',\n        'xl/',\n        'xl/theme/',\n        'xl/_rels/',\n        'xl/worksheets/'\n    ]);\n    if (hasImages) {\n        ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.ZipContainer.addFolders([\n            'xl/worksheets/_rels',\n            'xl/drawings/',\n            'xl/drawings/_rels',\n            'xl/media/',\n        ]);\n        let imgCounter = 0;\n        ExcelXlsxFactory.images.forEach(value => {\n            const firstImage = value[0].image[0];\n            const ext = firstImage.imageType;\n            ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.ZipContainer.addFile(`xl/media/image${++imgCounter}.${ext}`, firstImage.base64, true);\n        });\n    }\n    if (!data || data.length === 0) {\n        console.warn(\"AG Grid: Invalid params supplied to getMultipleSheetsAsExcel() - `ExcelExportParams.data` is empty.\");\n        ExcelXlsxFactory.resetFactory();\n        return;\n    }\n    const sheetLen = data.length;\n    let imageRelationCounter = 0;\n    data.forEach((value, idx) => {\n        ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.ZipContainer.addFile(`xl/worksheets/sheet${idx + 1}.xml`, value);\n        if (hasImages && ExcelXlsxFactory.worksheetImages.get(idx)) {\n            createImageRelationsForSheet(idx, imageRelationCounter++);\n        }\n    });\n    ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.ZipContainer.addFile('xl/workbook.xml', ExcelXlsxFactory.createWorkbook());\n    ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.ZipContainer.addFile('xl/styles.xml', ExcelXlsxFactory.createStylesheet(fontSize));\n    ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.ZipContainer.addFile('xl/sharedStrings.xml', ExcelXlsxFactory.createSharedStrings());\n    ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.ZipContainer.addFile('xl/theme/theme1.xml', ExcelXlsxFactory.createTheme());\n    ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.ZipContainer.addFile('xl/_rels/workbook.xml.rels', ExcelXlsxFactory.createWorkbookRels(sheetLen));\n    ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.ZipContainer.addFile('docProps/core.xml', ExcelXlsxFactory.createCore(author));\n    ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.ZipContainer.addFile('[Content_Types].xml', ExcelXlsxFactory.createContentTypes(sheetLen));\n    ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.ZipContainer.addFile('_rels/.rels', ExcelXlsxFactory.createRels());\n    ExcelXlsxFactory.resetFactory();\n    const mimeType = params.mimeType || 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet';\n    return ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.ZipContainer.getContent(mimeType);\n};\nconst exportMultipleSheetsAsExcel = (params) => {\n    const { fileName = 'export.xlsx' } = params;\n    const contents = getMultipleSheetsAsExcel(params);\n    if (contents) {\n        ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.Downloader.download(fileName, contents);\n    }\n};\nconst createImageRelationsForSheet = (sheetIndex, currentRelationIndex) => {\n    const drawingFolder = 'xl/drawings';\n    const drawingFileName = `${drawingFolder}/drawing${currentRelationIndex + 1}.xml`;\n    const relFileName = `${drawingFolder}/_rels/drawing${currentRelationIndex + 1}.xml.rels`;\n    const worksheetRelFile = `xl/worksheets/_rels/sheet${sheetIndex + 1}.xml.rels`;\n    ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.ZipContainer.addFile(relFileName, ExcelXlsxFactory.createDrawingRel(sheetIndex));\n    ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.ZipContainer.addFile(drawingFileName, ExcelXlsxFactory.createDrawing(sheetIndex));\n    ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.ZipContainer.addFile(worksheetRelFile, ExcelXlsxFactory.createWorksheetDrawingRel(currentRelationIndex));\n};\nlet ExcelCreator = class ExcelCreator extends ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.BaseCreator {\n    constructor() {\n        super(...arguments);\n        this.exportMode = 'xlsx';\n    }\n    postConstruct() {\n        this.setBeans({\n            gridSerializer: this.gridSerializer,\n            gridOptionsService: this.gridOptionsService\n        });\n    }\n    getMergedParams(params) {\n        const baseParams = this.gridOptionsService.get('defaultExcelExportParams');\n        return Object.assign({}, baseParams, params);\n    }\n    getData(params) {\n        this.setExportMode(params.exportMode || 'xlsx');\n        return super.getData(params);\n    }\n    export(userParams) {\n        if (this.isExportSuppressed()) {\n            console.warn(`AG Grid: Export cancelled. Export is not allowed as per your configuration.`);\n            return '';\n        }\n        const mergedParams = this.getMergedParams(userParams);\n        const data = this.getData(mergedParams);\n        const exportParams = {\n            data: [data],\n            fontSize: mergedParams.fontSize,\n            author: mergedParams.author,\n            mimeType: mergedParams.mimeType\n        };\n        const packageFile = this.packageFile(exportParams);\n        if (packageFile) {\n            ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.Downloader.download(this.getFileName(mergedParams.fileName), packageFile);\n        }\n        return data;\n    }\n    exportDataAsExcel(params) {\n        return this.export(params);\n    }\n    getDataAsExcel(params) {\n        const mergedParams = this.getMergedParams(params);\n        const data = this.getData(mergedParams);\n        if (params && params.exportMode === 'xml') {\n            return data;\n        }\n        const exportParams = {\n            data: [data],\n            fontSize: mergedParams.fontSize,\n            author: mergedParams.author,\n            mimeType: mergedParams.mimeType\n        };\n        return this.packageFile(exportParams);\n    }\n    setFactoryMode(factoryMode, exportMode = 'xlsx') {\n        const factory = exportMode === 'xlsx' ? ExcelXlsxFactory : ExcelXmlFactory;\n        factory.factoryMode = factoryMode;\n    }\n    getFactoryMode(exportMode) {\n        const factory = exportMode === 'xlsx' ? ExcelXlsxFactory : ExcelXmlFactory;\n        return factory.factoryMode;\n    }\n    getSheetDataForExcel(params) {\n        const mergedParams = this.getMergedParams(params);\n        const data = this.getData(mergedParams);\n        return data;\n    }\n    getMultipleSheetsAsExcel(params) {\n        return getMultipleSheetsAsExcel(params);\n    }\n    exportMultipleSheetsAsExcel(params) {\n        return exportMultipleSheetsAsExcel(params);\n    }\n    getDefaultFileName() {\n        return `export.${this.getExportMode()}`;\n    }\n    getDefaultFileExtension() {\n        return this.getExportMode();\n    }\n    createSerializingSession(params) {\n        const { columnModel, valueService, gridOptionsService, valueFormatterService, valueParserService } = this;\n        const isXlsx = this.getExportMode() === 'xlsx';\n        let sheetName = 'ag-grid';\n        if (params.sheetName != null) {\n            sheetName = ag_grid_community__WEBPACK_IMPORTED_MODULE_0__._.utf8_encode(params.sheetName.toString().substr(0, 31));\n        }\n        const config = Object.assign(Object.assign({}, params), { sheetName,\n            columnModel,\n            valueService,\n            gridOptionsService,\n            valueFormatterService,\n            valueParserService, headerRowHeight: params.headerRowHeight || params.rowHeight, baseExcelStyles: this.gridOptionsService.get('excelStyles') || [], styleLinker: this.styleLinker.bind(this) });\n        return new (isXlsx ? ExcelXlsxSerializingSession : ExcelXmlSerializingSession)(config);\n    }\n    styleLinker(params) {\n        const { rowType, rowIndex, value, column, columnGroup, node } = params;\n        const isHeader = rowType === ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.RowType.HEADER;\n        const isGroupHeader = rowType === ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.RowType.HEADER_GROUPING;\n        const col = (isHeader ? column : columnGroup);\n        let headerClasses = [];\n        if (isHeader || isGroupHeader) {\n            headerClasses.push('header');\n            if (isGroupHeader) {\n                headerClasses.push('headerGroup');\n            }\n            if (col) {\n                headerClasses = headerClasses.concat(ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.CssClassApplier.getHeaderClassesFromColDef(col.getDefinition(), this.gridOptionsService, column || null, columnGroup || null));\n            }\n            return headerClasses;\n        }\n        const styles = this.gridOptionsService.get('excelStyles');\n        const applicableStyles = [\"cell\"];\n        if (!styles || !styles.length) {\n            return applicableStyles;\n        }\n        const styleIds = styles.map((it) => {\n            return it.id;\n        });\n        this.stylingService.processAllCellClasses(column.getDefinition(), {\n            value,\n            data: node.data,\n            node: node,\n            colDef: column.getDefinition(),\n            column: column,\n            rowIndex: rowIndex,\n            api: this.gridOptionsService.api,\n            columnApi: this.gridOptionsService.columnApi,\n            context: this.gridOptionsService.context\n        }, (className) => {\n            if (styleIds.indexOf(className) > -1) {\n                applicableStyles.push(className);\n            }\n        });\n        return applicableStyles.sort((left, right) => {\n            return (styleIds.indexOf(left) < styleIds.indexOf(right)) ? -1 : 1;\n        });\n    }\n    isExportSuppressed() {\n        return this.gridOptionsService.is('suppressExcelExport');\n    }\n    setExportMode(exportMode) {\n        this.exportMode = exportMode;\n    }\n    getExportMode() {\n        return this.exportMode;\n    }\n    packageFile(params) {\n        if (this.getExportMode() === 'xml') {\n            const mimeType = params.mimeType || 'application/vnd.ms-excel';\n            return new Blob([\"\\ufeff\", params.data[0]], { type: mimeType });\n        }\n        return getMultipleSheetsAsExcel(params);\n    }\n};\n__decorate$21([\n    (0,ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.Autowired)('columnModel')\n], ExcelCreator.prototype, \"columnModel\", void 0);\n__decorate$21([\n    (0,ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.Autowired)('valueService')\n], ExcelCreator.prototype, \"valueService\", void 0);\n__decorate$21([\n    (0,ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.Autowired)('stylingService')\n], ExcelCreator.prototype, \"stylingService\", void 0);\n__decorate$21([\n    (0,ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.Autowired)('gridSerializer')\n], ExcelCreator.prototype, \"gridSerializer\", void 0);\n__decorate$21([\n    (0,ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.Autowired)('gridOptionsService')\n], ExcelCreator.prototype, \"gridOptionsService\", void 0);\n__decorate$21([\n    (0,ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.Autowired)('valueFormatterService')\n], ExcelCreator.prototype, \"valueFormatterService\", void 0);\n__decorate$21([\n    (0,ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.Autowired)('valueParserService')\n], ExcelCreator.prototype, \"valueParserService\", void 0);\n__decorate$21([\n    ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.PostConstruct\n], ExcelCreator.prototype, \"postConstruct\", null);\nExcelCreator = __decorate$21([\n    (0,ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.Bean)('excelCreator')\n], ExcelCreator);\n\n// DO NOT UPDATE MANUALLY: Generated from script during build time\nconst VERSION$d = '30.0.2';\n\nconst ExcelExportModule = {\n    version: VERSION$d,\n    moduleName: ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.ModuleNames.ExcelExportModule,\n    beans: [\n        // beans in this module\n        ExcelCreator,\n        // these beans are part of CSV Export module\n        ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.GridSerializer, ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.CsvCreator\n    ],\n    dependantModules: [\n        ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.CsvExportModule,\n        EnterpriseCoreModule\n    ]\n};\n\nvar __decorate$20 = ( false) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nvar EXPAND_STATE;\n(function (EXPAND_STATE) {\n    EXPAND_STATE[EXPAND_STATE[\"EXPANDED\"] = 0] = \"EXPANDED\";\n    EXPAND_STATE[EXPAND_STATE[\"COLLAPSED\"] = 1] = \"COLLAPSED\";\n    EXPAND_STATE[EXPAND_STATE[\"INDETERMINATE\"] = 2] = \"INDETERMINATE\";\n})(EXPAND_STATE || (EXPAND_STATE = {}));\nclass FiltersToolPanelHeaderPanel extends ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.Component {\n    preConstruct() {\n        this.setTemplate(/* html */ `<div class=\"ag-filter-toolpanel-search\" role=\"presentation\">\n                <div ref=\"eExpand\" class=\"ag-filter-toolpanel-expand\"></div>\n                <ag-input-text-field ref=\"eFilterTextField\" class=\"ag-filter-toolpanel-search-input\"></ag-input-text-field>\n            </div>`);\n    }\n    postConstruct() {\n        const translate = this.localeService.getLocaleTextFunc();\n        this.eFilterTextField.onValueChange(this.onSearchTextChanged.bind(this));\n        this.eFilterTextField.setInputAriaLabel(translate('ariaFilterColumnsInput', 'Filter Columns Input'));\n        this.createExpandIcons();\n        this.setExpandState(EXPAND_STATE.EXPANDED);\n        this.addManagedListener(this.eExpand, 'click', this.onExpandClicked.bind(this));\n        this.addManagedListener(this.eventService, ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.Events.EVENT_NEW_COLUMNS_LOADED, this.showOrHideOptions.bind(this));\n    }\n    init(params) {\n        this.params = params;\n        if (this.columnModel.isReady()) {\n            this.showOrHideOptions();\n        }\n    }\n    createExpandIcons() {\n        this.eExpand.appendChild(this.eExpandChecked = ag_grid_community__WEBPACK_IMPORTED_MODULE_0__._.createIconNoSpan('columnSelectOpen', this.gridOptionsService));\n        this.eExpand.appendChild(this.eExpandUnchecked = ag_grid_community__WEBPACK_IMPORTED_MODULE_0__._.createIconNoSpan('columnSelectClosed', this.gridOptionsService));\n        this.eExpand.appendChild(this.eExpandIndeterminate = ag_grid_community__WEBPACK_IMPORTED_MODULE_0__._.createIconNoSpan('columnSelectIndeterminate', this.gridOptionsService));\n    }\n    // we only show expand / collapse if we are showing filters\n    showOrHideOptions() {\n        const showFilterSearch = !this.params.suppressFilterSearch;\n        const showExpand = !this.params.suppressExpandAll;\n        const translate = this.localeService.getLocaleTextFunc();\n        this.eFilterTextField.setInputPlaceholder(translate('searchOoo', 'Search...'));\n        const isFilterGroupPresent = (col) => col.getOriginalParent() && col.isFilterAllowed();\n        const filterGroupsPresent = this.columnModel.getAllGridColumns().some(isFilterGroupPresent);\n        ag_grid_community__WEBPACK_IMPORTED_MODULE_0__._.setDisplayed(this.eFilterTextField.getGui(), showFilterSearch);\n        ag_grid_community__WEBPACK_IMPORTED_MODULE_0__._.setDisplayed(this.eExpand, showExpand && filterGroupsPresent);\n    }\n    onSearchTextChanged() {\n        if (!this.onSearchTextChangedDebounced) {\n            this.onSearchTextChangedDebounced = ag_grid_community__WEBPACK_IMPORTED_MODULE_0__._.debounce(() => {\n                this.dispatchEvent({ type: 'searchChanged', searchText: this.eFilterTextField.getValue() });\n            }, 300);\n        }\n        this.onSearchTextChangedDebounced();\n    }\n    onExpandClicked() {\n        const event = this.currentExpandState === EXPAND_STATE.EXPANDED ? { type: 'collapseAll' } : { type: 'expandAll' };\n        this.dispatchEvent(event);\n    }\n    setExpandState(state) {\n        this.currentExpandState = state;\n        ag_grid_community__WEBPACK_IMPORTED_MODULE_0__._.setDisplayed(this.eExpandChecked, this.currentExpandState === EXPAND_STATE.EXPANDED);\n        ag_grid_community__WEBPACK_IMPORTED_MODULE_0__._.setDisplayed(this.eExpandUnchecked, this.currentExpandState === EXPAND_STATE.COLLAPSED);\n        ag_grid_community__WEBPACK_IMPORTED_MODULE_0__._.setDisplayed(this.eExpandIndeterminate, this.currentExpandState === EXPAND_STATE.INDETERMINATE);\n    }\n}\n__decorate$20([\n    (0,ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.Autowired)('columnModel')\n], FiltersToolPanelHeaderPanel.prototype, \"columnModel\", void 0);\n__decorate$20([\n    (0,ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.RefSelector)('eExpand')\n], FiltersToolPanelHeaderPanel.prototype, \"eExpand\", void 0);\n__decorate$20([\n    (0,ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.RefSelector)('eFilterTextField')\n], FiltersToolPanelHeaderPanel.prototype, \"eFilterTextField\", void 0);\n__decorate$20([\n    ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.PreConstruct\n], FiltersToolPanelHeaderPanel.prototype, \"preConstruct\", null);\n__decorate$20([\n    ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.PostConstruct\n], FiltersToolPanelHeaderPanel.prototype, \"postConstruct\", null);\n\nvar __decorate$1$ = ( false) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nclass ToolPanelFilterComp extends ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.Component {\n    constructor(hideHeader = false) {\n        super(ToolPanelFilterComp.TEMPLATE);\n        this.expanded = false;\n        this.hideHeader = hideHeader;\n    }\n    postConstruct() {\n        this.eExpandChecked = ag_grid_community__WEBPACK_IMPORTED_MODULE_0__._.createIconNoSpan('columnSelectOpen', this.gridOptionsService);\n        this.eExpandUnchecked = ag_grid_community__WEBPACK_IMPORTED_MODULE_0__._.createIconNoSpan('columnSelectClosed', this.gridOptionsService);\n        this.eExpand.appendChild(this.eExpandChecked);\n        this.eExpand.appendChild(this.eExpandUnchecked);\n    }\n    setColumn(column) {\n        this.column = column;\n        this.eFilterName.innerText = this.columnModel.getDisplayNameForColumn(this.column, 'filterToolPanel', false) || '';\n        this.addManagedListener(this.eFilterToolPanelHeader, 'click', this.toggleExpanded.bind(this));\n        this.addManagedListener(this.eFilterToolPanelHeader, 'keydown', (e) => {\n            if (e.key === ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.KeyCode.ENTER) {\n                this.toggleExpanded();\n            }\n        });\n        this.addManagedListener(this.eventService, ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.Events.EVENT_FILTER_OPENED, this.onFilterOpened.bind(this));\n        this.addInIcon('filter', this.eFilterIcon, this.column);\n        ag_grid_community__WEBPACK_IMPORTED_MODULE_0__._.setDisplayed(this.eFilterIcon, this.isFilterActive(), { skipAriaHidden: true });\n        ag_grid_community__WEBPACK_IMPORTED_MODULE_0__._.setDisplayed(this.eExpandChecked, false);\n        if (this.hideHeader) {\n            ag_grid_community__WEBPACK_IMPORTED_MODULE_0__._.setDisplayed(this.eFilterToolPanelHeader, false);\n            this.eFilterToolPanelHeader.removeAttribute('tabindex');\n        }\n        else {\n            this.eFilterToolPanelHeader.setAttribute('tabindex', '0');\n        }\n        this.addManagedListener(this.column, ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.Column.EVENT_FILTER_CHANGED, this.onFilterChanged.bind(this));\n        this.addManagedListener(this.eventService, ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.Events.EVENT_FILTER_DESTROYED, this.onFilterDestroyed.bind(this));\n    }\n    getColumn() {\n        return this.column;\n    }\n    getColumnFilterName() {\n        return this.columnModel.getDisplayNameForColumn(this.column, 'filterToolPanel', false);\n    }\n    addCssClassToTitleBar(cssClass) {\n        this.eFilterToolPanelHeader.classList.add(cssClass);\n    }\n    addInIcon(iconName, eParent, column) {\n        if (eParent == null) {\n            return;\n        }\n        const eIcon = ag_grid_community__WEBPACK_IMPORTED_MODULE_0__._.createIconNoSpan(iconName, this.gridOptionsService, column);\n        eParent.appendChild(eIcon);\n    }\n    isFilterActive() {\n        return this.filterManager.isFilterActive(this.column);\n    }\n    onFilterChanged() {\n        ag_grid_community__WEBPACK_IMPORTED_MODULE_0__._.setDisplayed(this.eFilterIcon, this.isFilterActive(), { skipAriaHidden: true });\n        this.dispatchEvent({ type: ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.Column.EVENT_FILTER_CHANGED });\n    }\n    onFilterDestroyed(event) {\n        if (this.expanded &&\n            event.source === 'api' &&\n            event.column.getId() === this.column.getId() &&\n            this.columnModel.getPrimaryColumn(this.column)) {\n            // filter was visible and has been destroyed by the API. If the column still exists, need to recreate UI component\n            this.removeFilterElement();\n            this.addFilterElement();\n        }\n    }\n    toggleExpanded() {\n        this.expanded ? this.collapse() : this.expand();\n    }\n    expand() {\n        if (this.expanded) {\n            return;\n        }\n        this.expanded = true;\n        ag_grid_community__WEBPACK_IMPORTED_MODULE_0__._.setAriaExpanded(this.eFilterToolPanelHeader, true);\n        ag_grid_community__WEBPACK_IMPORTED_MODULE_0__._.setDisplayed(this.eExpandChecked, true);\n        ag_grid_community__WEBPACK_IMPORTED_MODULE_0__._.setDisplayed(this.eExpandUnchecked, false);\n        this.addFilterElement();\n    }\n    addFilterElement() {\n        const filterPanelWrapper = ag_grid_community__WEBPACK_IMPORTED_MODULE_0__._.loadTemplate(/* html */ `<div class=\"ag-filter-toolpanel-instance-filter\"></div>`);\n        const filterWrapper = this.filterManager.getOrCreateFilterWrapper(this.column, 'TOOLBAR');\n        if (!filterWrapper) {\n            return;\n        }\n        const { filterPromise, guiPromise } = filterWrapper;\n        filterPromise === null || filterPromise === void 0 ? void 0 : filterPromise.then(filter => {\n            this.underlyingFilter = filter;\n            if (!filter) {\n                return;\n            }\n            guiPromise.then(filterContainerEl => {\n                if (filterContainerEl) {\n                    filterPanelWrapper.appendChild(filterContainerEl);\n                }\n                this.agFilterToolPanelBody.appendChild(filterPanelWrapper);\n                if (filter.afterGuiAttached) {\n                    filter.afterGuiAttached({ container: 'toolPanel' });\n                }\n            });\n        });\n    }\n    collapse() {\n        var _a, _b;\n        if (!this.expanded) {\n            return;\n        }\n        this.expanded = false;\n        ag_grid_community__WEBPACK_IMPORTED_MODULE_0__._.setAriaExpanded(this.eFilterToolPanelHeader, false);\n        this.removeFilterElement();\n        ag_grid_community__WEBPACK_IMPORTED_MODULE_0__._.setDisplayed(this.eExpandChecked, false);\n        ag_grid_community__WEBPACK_IMPORTED_MODULE_0__._.setDisplayed(this.eExpandUnchecked, true);\n        (_b = (_a = this.underlyingFilter) === null || _a === void 0 ? void 0 : _a.afterGuiDetached) === null || _b === void 0 ? void 0 : _b.call(_a);\n    }\n    removeFilterElement() {\n        ag_grid_community__WEBPACK_IMPORTED_MODULE_0__._.clearElement(this.agFilterToolPanelBody);\n    }\n    isExpanded() {\n        return this.expanded;\n    }\n    refreshFilter(isDisplayed) {\n        var _a;\n        if (!this.expanded) {\n            return;\n        }\n        const filter = this.underlyingFilter;\n        if (!filter) {\n            return;\n        }\n        if (isDisplayed) {\n            // set filters should be updated when the filter has been changed elsewhere, i.e. via api. Note that we can't\n            // use 'afterGuiAttached' to refresh the virtual list as it also focuses on the mini filter which changes the\n            // scroll position in the filter list panel\n            if (typeof filter.refreshVirtualList === 'function') {\n                filter.refreshVirtualList();\n            }\n        }\n        else {\n            (_a = filter.afterGuiDetached) === null || _a === void 0 ? void 0 : _a.call(filter);\n        }\n    }\n    onFilterOpened(event) {\n        if (event.source !== 'COLUMN_MENU') {\n            return;\n        }\n        if (event.column !== this.column) {\n            return;\n        }\n        if (!this.expanded) {\n            return;\n        }\n        this.collapse();\n    }\n}\nToolPanelFilterComp.TEMPLATE = `\n        <div class=\"ag-filter-toolpanel-instance\">\n            <div class=\"ag-filter-toolpanel-header ag-filter-toolpanel-instance-header\" ref=\"eFilterToolPanelHeader\" role=\"button\" aria-expanded=\"false\">\n                <div ref=\"eExpand\" class=\"ag-filter-toolpanel-expand\"></div>\n                <span ref=\"eFilterName\" class=\"ag-header-cell-text\"></span>\n                <span ref=\"eFilterIcon\" class=\"ag-header-icon ag-filter-icon ag-filter-toolpanel-instance-header-icon\" aria-hidden=\"true\"></span>\n            </div>\n            <div class=\"ag-filter-toolpanel-instance-body ag-filter\" ref=\"agFilterToolPanelBody\"></div>\n        </div>`;\n__decorate$1$([\n    (0,ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.RefSelector)('eFilterToolPanelHeader')\n], ToolPanelFilterComp.prototype, \"eFilterToolPanelHeader\", void 0);\n__decorate$1$([\n    (0,ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.RefSelector)('eFilterName')\n], ToolPanelFilterComp.prototype, \"eFilterName\", void 0);\n__decorate$1$([\n    (0,ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.RefSelector)('agFilterToolPanelBody')\n], ToolPanelFilterComp.prototype, \"agFilterToolPanelBody\", void 0);\n__decorate$1$([\n    (0,ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.RefSelector)('eFilterIcon')\n], ToolPanelFilterComp.prototype, \"eFilterIcon\", void 0);\n__decorate$1$([\n    (0,ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.RefSelector)('eExpand')\n], ToolPanelFilterComp.prototype, \"eExpand\", void 0);\n__decorate$1$([\n    (0,ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.Autowired)('filterManager')\n], ToolPanelFilterComp.prototype, \"filterManager\", void 0);\n__decorate$1$([\n    (0,ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.Autowired)('columnModel')\n], ToolPanelFilterComp.prototype, \"columnModel\", void 0);\n__decorate$1$([\n    ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.PostConstruct\n], ToolPanelFilterComp.prototype, \"postConstruct\", null);\n\nvar __decorate$1_ = ( false) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nclass ToolPanelFilterGroupComp extends ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.Component {\n    constructor(columnGroup, childFilterComps, expandedCallback, depth, showingColumn) {\n        super();\n        this.columnGroup = columnGroup;\n        this.childFilterComps = childFilterComps;\n        this.depth = depth;\n        this.expandedCallback = expandedCallback;\n        this.showingColumn = showingColumn;\n    }\n    preConstruct() {\n        const groupParams = {\n            cssIdentifier: 'filter-toolpanel',\n            direction: 'vertical'\n        };\n        this.setTemplate(ToolPanelFilterGroupComp.TEMPLATE, { filterGroupComp: groupParams });\n    }\n    init() {\n        this.setGroupTitle();\n        this.filterGroupComp.setAlignItems('stretch');\n        this.filterGroupComp.addCssClass(`ag-filter-toolpanel-group-level-${this.depth}`);\n        this.filterGroupComp.addCssClassToTitleBar(`ag-filter-toolpanel-group-level-${this.depth}-header`);\n        this.childFilterComps.forEach(filterComp => {\n            this.filterGroupComp.addItem(filterComp);\n            filterComp.addCssClassToTitleBar(`ag-filter-toolpanel-group-level-${this.depth + 1}-header`);\n        });\n        this.refreshFilterClass();\n        this.addExpandCollapseListeners();\n        this.addFilterChangedListeners();\n        this.setupTooltip();\n    }\n    setupTooltip() {\n        // we don't show tooltips for groups, as when the group expands, it's div contains the columns which also\n        // have tooltips, so the tooltips would clash. Eg mouse over group, tooltip shows, mouse over column, another\n        // tooltip shows but cos we didn't leave the group the group tooltip remains. this should be fixed in the future,\n        // maybe the group shouldn't contain the children form a DOM perspective.\n        if (!this.showingColumn) {\n            return;\n        }\n        const refresh = () => {\n            const newTooltipText = this.columnGroup.getColDef().headerTooltip;\n            this.setTooltip(newTooltipText);\n        };\n        refresh();\n        this.addManagedListener(this.eventService, ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.Events.EVENT_NEW_COLUMNS_LOADED, refresh);\n    }\n    getTooltipParams() {\n        const res = super.getTooltipParams();\n        res.location = 'filterToolPanelColumnGroup';\n        return res;\n    }\n    addCssClassToTitleBar(cssClass) {\n        this.filterGroupComp.addCssClassToTitleBar(cssClass);\n    }\n    refreshFilters(isDisplayed) {\n        this.childFilterComps.forEach(filterComp => {\n            if (filterComp instanceof ToolPanelFilterGroupComp) {\n                filterComp.refreshFilters(isDisplayed);\n            }\n            else {\n                filterComp.refreshFilter(isDisplayed);\n            }\n        });\n    }\n    isColumnGroup() {\n        return this.columnGroup instanceof ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.ProvidedColumnGroup;\n    }\n    isExpanded() {\n        return this.filterGroupComp.isExpanded();\n    }\n    getChildren() {\n        return this.childFilterComps;\n    }\n    getFilterGroupName() {\n        return this.filterGroupName ? this.filterGroupName : '';\n    }\n    getFilterGroupId() {\n        return this.columnGroup.getId();\n    }\n    hideGroupItem(hide, index) {\n        this.filterGroupComp.hideItem(hide, index);\n    }\n    hideGroup(hide) {\n        this.setDisplayed(!hide);\n    }\n    forEachToolPanelFilterChild(action) {\n        this.childFilterComps.forEach(filterComp => {\n            if (filterComp instanceof ToolPanelFilterComp) {\n                action(filterComp);\n            }\n        });\n    }\n    addExpandCollapseListeners() {\n        const expandListener = this.isColumnGroup() ?\n            () => this.expandedCallback() :\n            () => this.forEachToolPanelFilterChild(filterComp => filterComp.expand());\n        const collapseListener = this.isColumnGroup() ?\n            () => this.expandedCallback() :\n            () => this.forEachToolPanelFilterChild(filterComp => filterComp.collapse());\n        this.addManagedListener(this.filterGroupComp, ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.AgGroupComponent.EVENT_EXPANDED, expandListener);\n        this.addManagedListener(this.filterGroupComp, ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.AgGroupComponent.EVENT_COLLAPSED, collapseListener);\n    }\n    getColumns() {\n        if (this.columnGroup instanceof ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.ProvidedColumnGroup) {\n            return this.columnGroup.getLeafColumns();\n        }\n        return [this.columnGroup];\n    }\n    addFilterChangedListeners() {\n        this.getColumns().forEach(column => {\n            this.addManagedListener(column, ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.Column.EVENT_FILTER_CHANGED, () => this.refreshFilterClass());\n        });\n        if (!(this.columnGroup instanceof ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.ProvidedColumnGroup)) {\n            this.addManagedListener(this.eventService, ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.Events.EVENT_FILTER_OPENED, this.onFilterOpened.bind(this));\n        }\n    }\n    refreshFilterClass() {\n        const columns = this.getColumns();\n        const anyChildFiltersActive = () => columns.some(col => col.isFilterActive());\n        this.filterGroupComp.addOrRemoveCssClass('ag-has-filter', anyChildFiltersActive());\n    }\n    onFilterOpened(event) {\n        // when a filter is opened elsewhere, i.e. column menu we close the filter comp so we also need to collapse\n        // the column group. This approach means we don't need to try and sync filter models on the same column.\n        if (event.source !== 'COLUMN_MENU') {\n            return;\n        }\n        if (event.column !== this.columnGroup) {\n            return;\n        }\n        if (!this.isExpanded()) {\n            return;\n        }\n        this.collapse();\n    }\n    expand() {\n        this.filterGroupComp.toggleGroupExpand(true);\n    }\n    collapse() {\n        this.filterGroupComp.toggleGroupExpand(false);\n    }\n    setGroupTitle() {\n        this.filterGroupName = (this.columnGroup instanceof ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.ProvidedColumnGroup) ?\n            this.getColumnGroupName(this.columnGroup) : this.getColumnName(this.columnGroup);\n        this.filterGroupComp.setTitle(this.filterGroupName || '');\n    }\n    getColumnGroupName(columnGroup) {\n        return this.columnModel.getDisplayNameForProvidedColumnGroup(null, columnGroup, 'filterToolPanel');\n    }\n    getColumnName(column) {\n        return this.columnModel.getDisplayNameForColumn(column, 'filterToolPanel', false);\n    }\n    destroyFilters() {\n        this.childFilterComps = this.destroyBeans(this.childFilterComps);\n        ag_grid_community__WEBPACK_IMPORTED_MODULE_0__._.clearElement(this.getGui());\n    }\n    destroy() {\n        this.destroyFilters();\n        super.destroy();\n    }\n}\nToolPanelFilterGroupComp.TEMPLATE = `<div class=\"ag-filter-toolpanel-group-wrapper\">\n            <ag-group-component ref=\"filterGroupComp\"></ag-group-component>\n        </div>`;\n__decorate$1_([\n    (0,ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.RefSelector)('filterGroupComp')\n], ToolPanelFilterGroupComp.prototype, \"filterGroupComp\", void 0);\n__decorate$1_([\n    (0,ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.Autowired)('columnModel')\n], ToolPanelFilterGroupComp.prototype, \"columnModel\", void 0);\n__decorate$1_([\n    ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.PreConstruct\n], ToolPanelFilterGroupComp.prototype, \"preConstruct\", null);\n__decorate$1_([\n    ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.PostConstruct\n], ToolPanelFilterGroupComp.prototype, \"init\", null);\n\nvar __decorate$1Z = ( false) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nclass FiltersToolPanelListPanel extends ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.Component {\n    constructor() {\n        super(FiltersToolPanelListPanel.TEMPLATE);\n        this.initialised = false;\n        this.filterGroupComps = [];\n    }\n    init(params) {\n        this.initialised = true;\n        const defaultParams = {\n            suppressExpandAll: false,\n            suppressFilterSearch: false,\n            suppressSyncLayoutWithGrid: false,\n            api: this.gridApi,\n            columnApi: this.columnApi,\n            context: this.gridOptionsService.context\n        };\n        ag_grid_community__WEBPACK_IMPORTED_MODULE_0__._.mergeDeep(defaultParams, params);\n        this.params = defaultParams;\n        if (!this.params.suppressSyncLayoutWithGrid) {\n            this.addManagedListener(this.eventService, ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.Events.EVENT_COLUMN_MOVED, () => this.onColumnsChanged());\n        }\n        this.addManagedListener(this.eventService, ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.Events.EVENT_NEW_COLUMNS_LOADED, () => this.onColumnsChanged());\n        this.addManagedListener(this.eventService, ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.Events.EVENT_TOOL_PANEL_VISIBLE_CHANGED, (event) => {\n            // when re-entering the filters tool panel we need to refresh the virtual lists in the set filters in case\n            // filters have been changed elsewhere, i.e. via an api call.\n            if (event.key === 'filters') {\n                this.refreshFilters(event.visible);\n            }\n        });\n        if (this.columnModel.isReady()) {\n            this.onColumnsChanged();\n        }\n    }\n    onColumnsChanged() {\n        const pivotModeActive = this.columnModel.isPivotMode();\n        const shouldSyncColumnLayoutWithGrid = !this.params.suppressSyncLayoutWithGrid && !pivotModeActive;\n        shouldSyncColumnLayoutWithGrid ? this.syncFilterLayout() : this.buildTreeFromProvidedColumnDefs();\n    }\n    syncFilterLayout() {\n        this.toolPanelColDefService.syncLayoutWithGrid(this.setFiltersLayout.bind(this));\n    }\n    buildTreeFromProvidedColumnDefs() {\n        const columnTree = this.columnModel.getPrimaryColumnTree();\n        this.recreateFilters(columnTree);\n    }\n    setFiltersLayout(colDefs) {\n        const columnTree = this.toolPanelColDefService.createColumnTree(colDefs);\n        this.recreateFilters(columnTree);\n    }\n    recreateFilters(columnTree) {\n        // Underlying filter comp/element won't get recreated if the column still exists (the element just gets detached/re-attached).\n        // We can therefore restore focus if an element in the filter tool panel was focused.\n        const activeElement = this.gridOptionsService.getDocument().activeElement;\n        // Want to restore the expansion state where possible.\n        const expansionState = this.getExpansionState();\n        this.destroyFilters();\n        this.filterGroupComps = this.recursivelyAddComps(columnTree, 0, expansionState);\n        const len = this.filterGroupComps.length;\n        if (len) {\n            // skip the destroy function because this will be managed\n            // by the `destroyFilters` function\n            this.filterGroupComps.forEach(comp => this.appendChild(comp));\n            this.setFirstAndLastVisible(0, len - 1);\n        }\n        // perform search if searchFilterText exists\n        if (ag_grid_community__WEBPACK_IMPORTED_MODULE_0__._.exists(this.searchFilterText)) {\n            this.searchFilters(this.searchFilterText);\n        }\n        // notify header of expand\n        this.fireExpandedEvent();\n        // We only care about restoring focus if the originally focused element was in the filter tool panel.\n        if (this.getGui().contains(activeElement)) {\n            activeElement.focus();\n        }\n    }\n    recursivelyAddComps(tree, depth, expansionState) {\n        return ag_grid_community__WEBPACK_IMPORTED_MODULE_0__._.flatten(tree.map(child => {\n            if (child instanceof ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.ProvidedColumnGroup) {\n                return ag_grid_community__WEBPACK_IMPORTED_MODULE_0__._.flatten(this.recursivelyAddFilterGroupComps(child, depth, expansionState));\n            }\n            const column = child;\n            if (!this.shouldDisplayFilter(column)) {\n                return [];\n            }\n            const hideFilterCompHeader = depth === 0;\n            const filterComp = new ToolPanelFilterComp(hideFilterCompHeader);\n            this.createBean(filterComp);\n            filterComp.setColumn(column);\n            if (expansionState.get(column.getId())) {\n                // Default state on creation and desired state are both collapsed. Expand if expanded before.\n                filterComp.expand();\n            }\n            if (depth > 0) {\n                return filterComp;\n            }\n            const filterGroupComp = this.createBean(new ToolPanelFilterGroupComp(column, [filterComp], this.onGroupExpanded.bind(this), depth, true));\n            filterGroupComp.addCssClassToTitleBar('ag-filter-toolpanel-header');\n            if (!expansionState.get(filterGroupComp.getFilterGroupId())) {\n                // Default state on creation is expanded. Desired initial state is collapsed. Always collapse unless expanded before.\n                filterGroupComp.collapse();\n            }\n            return filterGroupComp;\n        }));\n    }\n    recursivelyAddFilterGroupComps(columnGroup, depth, expansionState) {\n        if (!this.filtersExistInChildren(columnGroup.getChildren())) {\n            return;\n        }\n        const colGroupDef = columnGroup.getColGroupDef();\n        if (colGroupDef && colGroupDef.suppressFiltersToolPanel) {\n            return [];\n        }\n        const newDepth = columnGroup.isPadding() ? depth : depth + 1;\n        const childFilterComps = ag_grid_community__WEBPACK_IMPORTED_MODULE_0__._.flatten(this.recursivelyAddComps(columnGroup.getChildren(), newDepth, expansionState));\n        if (columnGroup.isPadding()) {\n            return childFilterComps;\n        }\n        const filterGroupComp = new ToolPanelFilterGroupComp(columnGroup, childFilterComps, this.onGroupExpanded.bind(this), depth, false);\n        this.createBean(filterGroupComp);\n        filterGroupComp.addCssClassToTitleBar('ag-filter-toolpanel-header');\n        if (expansionState.get(filterGroupComp.getFilterGroupId()) === false) {\n            // Default state on creation is expanded. Desired initial state is expanded. Only collapse if collapsed before.\n            filterGroupComp.collapse();\n        }\n        return [filterGroupComp];\n    }\n    filtersExistInChildren(tree) {\n        return tree.some(child => {\n            if (child instanceof ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.ProvidedColumnGroup) {\n                return this.filtersExistInChildren(child.getChildren());\n            }\n            return this.shouldDisplayFilter(child);\n        });\n    }\n    shouldDisplayFilter(column) {\n        const suppressFiltersToolPanel = column.getColDef() && column.getColDef().suppressFiltersToolPanel;\n        return column.isFilterAllowed() && !suppressFiltersToolPanel;\n    }\n    getExpansionState() {\n        const expansionState = new Map();\n        const recursiveGetExpansionState = (filterGroupComp) => {\n            expansionState.set(filterGroupComp.getFilterGroupId(), filterGroupComp.isExpanded());\n            filterGroupComp.getChildren().forEach(child => {\n                if (child instanceof ToolPanelFilterGroupComp) {\n                    recursiveGetExpansionState(child);\n                }\n                else {\n                    expansionState.set(child.getColumn().getId(), child.isExpanded());\n                }\n            });\n        };\n        this.filterGroupComps.forEach(recursiveGetExpansionState);\n        return expansionState;\n    }\n    // we don't support refreshing, but must implement because it's on the tool panel interface\n    refresh() { }\n    // lazy initialise the panel\n    setVisible(visible) {\n        super.setDisplayed(visible);\n        if (visible && !this.initialised) {\n            this.init(this.params);\n        }\n    }\n    expandFilterGroups(expand, groupIds) {\n        const updatedGroupIds = [];\n        const updateGroupExpandState = (filterGroup) => {\n            const groupId = filterGroup.getFilterGroupId();\n            const shouldExpandOrCollapse = !groupIds || ag_grid_community__WEBPACK_IMPORTED_MODULE_0__._.includes(groupIds, groupId);\n            if (shouldExpandOrCollapse) {\n                // don't expand 'column groups', i.e. top level columns wrapped in a group\n                if (expand && filterGroup.isColumnGroup()) {\n                    filterGroup.expand();\n                }\n                else {\n                    filterGroup.collapse();\n                }\n                updatedGroupIds.push(groupId);\n            }\n            // recursively look for more groups to expand / collapse\n            filterGroup.getChildren().forEach(child => {\n                if (child instanceof ToolPanelFilterGroupComp) {\n                    updateGroupExpandState(child);\n                }\n            });\n        };\n        this.filterGroupComps.forEach(updateGroupExpandState);\n        // update header expand / collapse icon\n        this.onGroupExpanded();\n        if (groupIds) {\n            const unrecognisedGroupIds = groupIds.filter(groupId => updatedGroupIds.indexOf(groupId) < 0);\n            if (unrecognisedGroupIds.length > 0) {\n                console.warn('AG Grid: unable to find groups for these supplied groupIds:', unrecognisedGroupIds);\n            }\n        }\n    }\n    expandFilters(expand, colIds) {\n        const updatedColIds = [];\n        const updateGroupExpandState = (filterComp) => {\n            if (filterComp instanceof ToolPanelFilterGroupComp) {\n                let anyChildrenChanged = false;\n                filterComp.getChildren().forEach(child => {\n                    const childUpdated = updateGroupExpandState(child);\n                    if (childUpdated) {\n                        if (expand) {\n                            filterComp.expand();\n                            anyChildrenChanged = true;\n                        }\n                        else if (!filterComp.isColumnGroup()) {\n                            // we only collapse columns wrapped in groups\n                            filterComp.collapse();\n                        }\n                    }\n                });\n                return anyChildrenChanged;\n            }\n            const colId = filterComp.getColumn().getColId();\n            const updateFilterExpandState = !colIds || ag_grid_community__WEBPACK_IMPORTED_MODULE_0__._.includes(colIds, colId);\n            if (updateFilterExpandState) {\n                expand ? filterComp.expand() : filterComp.collapse();\n                updatedColIds.push(colId);\n            }\n            return updateFilterExpandState;\n        };\n        this.filterGroupComps.forEach(updateGroupExpandState);\n        // update header expand / collapse icon\n        this.onGroupExpanded();\n        if (colIds) {\n            const unrecognisedColIds = colIds.filter(colId => updatedColIds.indexOf(colId) < 0);\n            if (unrecognisedColIds.length > 0) {\n                console.warn('AG Grid: unable to find columns for these supplied colIds:', unrecognisedColIds);\n            }\n        }\n    }\n    onGroupExpanded() {\n        this.fireExpandedEvent();\n    }\n    fireExpandedEvent() {\n        let expandedCount = 0;\n        let notExpandedCount = 0;\n        const updateExpandCounts = (filterGroup) => {\n            if (!filterGroup.isColumnGroup()) {\n                return;\n            }\n            filterGroup.isExpanded() ? expandedCount++ : notExpandedCount++;\n            filterGroup.getChildren().forEach(child => {\n                if (child instanceof ToolPanelFilterGroupComp) {\n                    updateExpandCounts(child);\n                }\n            });\n        };\n        this.filterGroupComps.forEach(updateExpandCounts);\n        let state;\n        if (expandedCount > 0 && notExpandedCount > 0) {\n            state = EXPAND_STATE.INDETERMINATE;\n        }\n        else if (notExpandedCount > 0) {\n            state = EXPAND_STATE.COLLAPSED;\n        }\n        else {\n            state = EXPAND_STATE.EXPANDED;\n        }\n        this.dispatchEvent({ type: 'groupExpanded', state: state });\n    }\n    performFilterSearch(searchText) {\n        this.searchFilterText = ag_grid_community__WEBPACK_IMPORTED_MODULE_0__._.exists(searchText) ? searchText.toLowerCase() : null;\n        this.searchFilters(this.searchFilterText);\n    }\n    searchFilters(searchFilter) {\n        const passesFilter = (groupName) => {\n            return !ag_grid_community__WEBPACK_IMPORTED_MODULE_0__._.exists(searchFilter) || groupName.toLowerCase().indexOf(searchFilter) !== -1;\n        };\n        const recursivelySearch = (filterItem, parentPasses) => {\n            if (!(filterItem instanceof ToolPanelFilterGroupComp)) {\n                return passesFilter(filterItem.getColumnFilterName() || '');\n            }\n            const children = filterItem.getChildren();\n            const groupNamePasses = passesFilter(filterItem.getFilterGroupName());\n            // if group or parent already passed - ensure this group and all children are visible\n            const alreadyPassed = parentPasses || groupNamePasses;\n            if (alreadyPassed) {\n                // ensure group visible\n                filterItem.hideGroup(false);\n                // ensure all children are visible\n                for (let i = 0; i < children.length; i++) {\n                    recursivelySearch(children[i], alreadyPassed);\n                    filterItem.hideGroupItem(false, i);\n                }\n                return true;\n            }\n            // hide group item filters\n            let anyChildPasses = false;\n            children.forEach((child, index) => {\n                const childPasses = recursivelySearch(child, parentPasses);\n                filterItem.hideGroupItem(!childPasses, index);\n                if (childPasses) {\n                    anyChildPasses = true;\n                }\n            });\n            // hide group if no children pass\n            filterItem.hideGroup(!anyChildPasses);\n            return anyChildPasses;\n        };\n        let firstVisible;\n        let lastVisible;\n        this.filterGroupComps.forEach((filterGroup, idx) => {\n            recursivelySearch(filterGroup, false);\n            if (firstVisible === undefined) {\n                if (!filterGroup.containsCssClass('ag-hidden')) {\n                    firstVisible = idx;\n                    lastVisible = idx;\n                }\n            }\n            else if (!filterGroup.containsCssClass('ag-hidden') && lastVisible !== idx) {\n                lastVisible = idx;\n            }\n        });\n        this.setFirstAndLastVisible(firstVisible, lastVisible);\n    }\n    setFirstAndLastVisible(firstIdx, lastIdx) {\n        this.filterGroupComps.forEach((filterGroup, idx) => {\n            filterGroup.removeCssClass('ag-first-group-visible');\n            filterGroup.removeCssClass('ag-last-group-visible');\n            if (idx === firstIdx) {\n                filterGroup.addCssClass('ag-first-group-visible');\n            }\n            if (idx === lastIdx) {\n                filterGroup.addCssClass('ag-last-group-visible');\n            }\n        });\n    }\n    refreshFilters(isDisplayed) {\n        this.filterGroupComps.forEach(filterGroupComp => filterGroupComp.refreshFilters(isDisplayed));\n    }\n    destroyFilters() {\n        this.filterGroupComps = this.destroyBeans(this.filterGroupComps);\n        ag_grid_community__WEBPACK_IMPORTED_MODULE_0__._.clearElement(this.getGui());\n    }\n    destroy() {\n        this.destroyFilters();\n        super.destroy();\n    }\n}\nFiltersToolPanelListPanel.TEMPLATE = `<div class=\"ag-filter-list-panel\"></div>`;\n__decorate$1Z([\n    (0,ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.Autowired)(\"gridApi\")\n], FiltersToolPanelListPanel.prototype, \"gridApi\", void 0);\n__decorate$1Z([\n    (0,ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.Autowired)(\"columnApi\")\n], FiltersToolPanelListPanel.prototype, \"columnApi\", void 0);\n__decorate$1Z([\n    (0,ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.Autowired)('toolPanelColDefService')\n], FiltersToolPanelListPanel.prototype, \"toolPanelColDefService\", void 0);\n__decorate$1Z([\n    (0,ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.Autowired)('columnModel')\n], FiltersToolPanelListPanel.prototype, \"columnModel\", void 0);\n\nvar __decorate$1Y = ( false) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nclass FiltersToolPanel extends ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.Component {\n    constructor() {\n        super(FiltersToolPanel.TEMPLATE);\n        this.initialised = false;\n        this.listenerDestroyFuncs = [];\n    }\n    init(params) {\n        // if initialised is true, means this is a refresh\n        if (this.initialised) {\n            this.listenerDestroyFuncs.forEach(func => func());\n            this.listenerDestroyFuncs = [];\n        }\n        this.initialised = true;\n        const defaultParams = {\n            suppressExpandAll: false,\n            suppressFilterSearch: false,\n            suppressSyncLayoutWithGrid: false,\n            api: this.gridApi,\n            columnApi: this.columnApi,\n        };\n        this.params = Object.assign(Object.assign(Object.assign({}, defaultParams), params), { context: this.gridOptionsService.context });\n        this.filtersToolPanelHeaderPanel.init(this.params);\n        this.filtersToolPanelListPanel.init(this.params);\n        const hideExpand = this.params.suppressExpandAll;\n        const hideSearch = this.params.suppressFilterSearch;\n        if (hideExpand && hideSearch) {\n            this.filtersToolPanelHeaderPanel.setDisplayed(false);\n        }\n        // this is necessary to prevent a memory leak while refreshing the tool panel\n        this.listenerDestroyFuncs.push(this.addManagedListener(this.filtersToolPanelHeaderPanel, 'expandAll', this.onExpandAll.bind(this)), this.addManagedListener(this.filtersToolPanelHeaderPanel, 'collapseAll', this.onCollapseAll.bind(this)), this.addManagedListener(this.filtersToolPanelHeaderPanel, 'searchChanged', this.onSearchChanged.bind(this)), this.addManagedListener(this.filtersToolPanelListPanel, 'groupExpanded', this.onGroupExpanded.bind(this)));\n    }\n    // lazy initialise the panel\n    setVisible(visible) {\n        super.setDisplayed(visible);\n        if (visible && !this.initialised) {\n            this.init(this.params);\n        }\n    }\n    onExpandAll() {\n        this.filtersToolPanelListPanel.expandFilterGroups(true);\n    }\n    onCollapseAll() {\n        this.filtersToolPanelListPanel.expandFilterGroups(false);\n    }\n    onSearchChanged(event) {\n        this.filtersToolPanelListPanel.performFilterSearch(event.searchText);\n    }\n    setFilterLayout(colDefs) {\n        this.filtersToolPanelListPanel.setFiltersLayout(colDefs);\n    }\n    onGroupExpanded(event) {\n        this.filtersToolPanelHeaderPanel.setExpandState(event.state);\n    }\n    expandFilterGroups(groupIds) {\n        this.filtersToolPanelListPanel.expandFilterGroups(true, groupIds);\n    }\n    collapseFilterGroups(groupIds) {\n        this.filtersToolPanelListPanel.expandFilterGroups(false, groupIds);\n    }\n    expandFilters(colIds) {\n        this.filtersToolPanelListPanel.expandFilters(true, colIds);\n    }\n    collapseFilters(colIds) {\n        this.filtersToolPanelListPanel.expandFilters(false, colIds);\n    }\n    syncLayoutWithGrid() {\n        this.filtersToolPanelListPanel.syncFilterLayout();\n    }\n    refresh() {\n        this.init(this.params);\n    }\n    // this is a user component, and IComponent has \"public destroy()\" as part of the interface.\n    // so we need to override destroy() just to make the method public.\n    destroy() {\n        super.destroy();\n    }\n}\nFiltersToolPanel.TEMPLATE = `<div class=\"ag-filter-toolpanel\">\n            <ag-filters-tool-panel-header ref=\"filtersToolPanelHeaderPanel\"></ag-filters-tool-panel-header>\n            <ag-filters-tool-panel-list ref=\"filtersToolPanelListPanel\"></ag-filters-tool-panel-list>\n         </div>`;\n__decorate$1Y([\n    (0,ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.RefSelector)('filtersToolPanelHeaderPanel')\n], FiltersToolPanel.prototype, \"filtersToolPanelHeaderPanel\", void 0);\n__decorate$1Y([\n    (0,ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.RefSelector)('filtersToolPanelListPanel')\n], FiltersToolPanel.prototype, \"filtersToolPanelListPanel\", void 0);\n__decorate$1Y([\n    (0,ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.Autowired)('gridApi')\n], FiltersToolPanel.prototype, \"gridApi\", void 0);\n__decorate$1Y([\n    (0,ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.Autowired)('columnApi')\n], FiltersToolPanel.prototype, \"columnApi\", void 0);\n\n// DO NOT UPDATE MANUALLY: Generated from script during build time\nconst VERSION$c = '30.0.2';\n\nconst FiltersToolPanelModule = {\n    version: VERSION$c,\n    moduleName: ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.ModuleNames.FiltersToolPanelModule,\n    beans: [],\n    agStackComponents: [\n        { componentName: 'AgFiltersToolPanelHeader', componentClass: FiltersToolPanelHeaderPanel },\n        { componentName: 'AgFiltersToolPanelList', componentClass: FiltersToolPanelListPanel }\n    ],\n    userComponents: [\n        { componentName: 'agFiltersToolPanel', componentClass: FiltersToolPanel },\n    ],\n    dependantModules: [\n        SideBarModule,\n        EnterpriseCoreModule\n    ]\n};\n\n/**\n * The interval methods don't mutate Date parameters.\n */\nclass TimeInterval {\n    constructor(encode, decode, rangeCallback) {\n        this._encode = encode;\n        this._decode = decode;\n        this._rangeCallback = rangeCallback;\n    }\n    /**\n     * Returns a new date representing the latest interval boundary date before or equal to date.\n     * For example, `day.floor(date)` typically returns 12:00 AM local time on the given date.\n     * @param date\n     */\n    floor(date) {\n        const d = new Date(date);\n        const e = this._encode(d);\n        return this._decode(e);\n    }\n    /**\n     * Returns a new date representing the earliest interval boundary date after or equal to date.\n     * @param date\n     */\n    ceil(date) {\n        const d = new Date(Number(date) - 1);\n        const e = this._encode(d);\n        return this._decode(e + 1);\n    }\n    /**\n     * Returns an array of dates representing every interval boundary after or equal to start (inclusive) and before stop (exclusive).\n     * @param start Range start.\n     * @param stop Range end.\n     * @param extend If specified, the requested range will be extended to the closest \"nice\" values.\n     */\n    range(start, stop, extend) {\n        var _a;\n        const rangeCallback = (_a = this._rangeCallback) === null || _a === void 0 ? void 0 : _a.call(this, start, stop);\n        const e0 = this._encode(extend ? this.floor(start) : this.ceil(start));\n        const e1 = this._encode(extend ? this.ceil(stop) : this.floor(stop));\n        if (e1 < e0) {\n            return [];\n        }\n        const range = [];\n        for (let e = e0; e <= e1; e++) {\n            const d = this._decode(e);\n            range.push(d);\n        }\n        rangeCallback === null || rangeCallback === void 0 ? void 0 : rangeCallback();\n        return range;\n    }\n}\nclass CountableTimeInterval extends TimeInterval {\n    getOffset(snapTo, step) {\n        const s = typeof snapTo === 'number' || snapTo instanceof Date ? this._encode(new Date(snapTo)) : 0;\n        return Math.floor(s) % step;\n    }\n    /**\n     * Returns a filtered view of this interval representing every step'th date.\n     * It can be a number of minutes, hours, days etc.\n     * Must be a positive integer.\n     * @param step\n     */\n    every(step, options) {\n        let offset = 0;\n        let rangeCallback;\n        const { snapTo = 'start' } = options !== null && options !== void 0 ? options : {};\n        if (typeof snapTo === 'string') {\n            const initialOffset = offset;\n            rangeCallback = (start, stop) => {\n                const s = snapTo === 'start' ? start : stop;\n                offset = this.getOffset(s, step);\n                return () => (offset = initialOffset);\n            };\n        }\n        else if (typeof snapTo === 'number') {\n            offset = this.getOffset(new Date(snapTo), step);\n        }\n        else if (snapTo instanceof Date) {\n            offset = this.getOffset(snapTo, step);\n        }\n        const encode = (date) => {\n            const e = this._encode(date);\n            return Math.floor((e - offset) / step);\n        };\n        const decode = (encoded) => {\n            return this._decode(encoded * step + offset);\n        };\n        const interval = new TimeInterval(encode, decode, rangeCallback);\n        return interval;\n    }\n}\n\nfunction encode$b(date) {\n    return date.getTime();\n}\nfunction decode$b(encoded) {\n    return new Date(encoded);\n}\nconst millisecond = new CountableTimeInterval(encode$b, decode$b);\n\n// Common time unit sizes in milliseconds.\nnew Date(0).getFullYear();\nconst durationSecond = 1000;\nconst durationMinute = durationSecond * 60;\nconst durationHour = durationMinute * 60;\nconst durationDay = durationHour * 24;\nconst durationWeek = durationDay * 7;\nconst durationMonth = durationDay * 30;\nconst durationYear = durationDay * 365;\n\nconst offset$2 = new Date().getTimezoneOffset() * durationMinute;\nfunction encode$a(date) {\n    return Math.floor((date.getTime() - offset$2) / durationSecond);\n}\nfunction decode$a(encoded) {\n    return new Date(offset$2 + encoded * durationSecond);\n}\nconst second = new CountableTimeInterval(encode$a, decode$a);\n\nconst offset$1 = new Date().getTimezoneOffset() * durationMinute;\nfunction encode$9(date) {\n    return Math.floor((date.getTime() - offset$1) / durationMinute);\n}\nfunction decode$9(encoded) {\n    return new Date(offset$1 + encoded * durationMinute);\n}\nconst minute = new CountableTimeInterval(encode$9, decode$9);\n\nconst offset = new Date().getTimezoneOffset() * durationMinute;\nfunction encode$8(date) {\n    return Math.floor((date.getTime() - offset) / durationHour);\n}\nfunction decode$8(encoded) {\n    return new Date(offset + encoded * durationHour);\n}\nconst hour = new CountableTimeInterval(encode$8, decode$8);\n\nfunction encode$7(date) {\n    const utc = Date.UTC(date.getFullYear(), date.getMonth(), date.getDate());\n    return Math.floor(utc / durationDay);\n}\nfunction decode$7(encoded) {\n    const d = new Date(0);\n    d.setDate(d.getDate() + encoded);\n    d.setHours(0, 0, 0, 0);\n    return d;\n}\nconst day = new CountableTimeInterval(encode$7, decode$7);\n\nconst baseSunday = new Date(2023, 0, 1);\n// Set date to n-th day of the week.\nfunction weekday(n) {\n    // Use UTC for weeks calculation to get into account time zone shifts\n    const base = Date.UTC(baseSunday.getFullYear(), baseSunday.getMonth(), baseSunday.getDate()) + n * durationDay;\n    function encode(date) {\n        const utc = Date.UTC(date.getFullYear(), date.getMonth(), date.getDate());\n        return Math.floor((utc - base) / durationWeek);\n    }\n    function decode(encoded) {\n        const d = new Date(base);\n        d.setDate(d.getDate() + encoded * 7);\n        return d;\n    }\n    return new CountableTimeInterval(encode, decode);\n}\nconst sunday = weekday(0);\nconst monday = weekday(1);\nconst tuesday = weekday(2);\nconst wednesday = weekday(3);\nconst thursday = weekday(4);\nconst friday = weekday(5);\nconst saturday = weekday(6);\n\nfunction encode$6(date) {\n    return date.getFullYear() * 12 + date.getMonth();\n}\nfunction decode$6(encoded) {\n    const year = Math.floor(encoded / 12);\n    const month = encoded - year * 12;\n    return new Date(year, month, 1);\n}\nconst month = new CountableTimeInterval(encode$6, decode$6);\n\nfunction encode$5(date) {\n    return date.getFullYear();\n}\nfunction decode$5(encoded) {\n    // Note: assigning years through the constructor\n    // will break for years 0 - 99 AD (will turn 1900's).\n    const d = new Date();\n    d.setFullYear(encoded);\n    d.setMonth(0, 1);\n    d.setHours(0, 0, 0, 0);\n    return d;\n}\nconst year = new CountableTimeInterval(encode$5, decode$5);\n\nfunction encode$4(date) {\n    return Math.floor(date.getTime() / durationMinute);\n}\nfunction decode$4(encoded) {\n    return new Date(encoded * durationMinute);\n}\nconst utcMinute = new CountableTimeInterval(encode$4, decode$4);\n\nfunction encode$3(date) {\n    return Math.floor(date.getTime() / durationHour);\n}\nfunction decode$3(encoded) {\n    return new Date(encoded * durationHour);\n}\nconst utcHour = new CountableTimeInterval(encode$3, decode$3);\n\nfunction encode$2(date) {\n    return Math.floor(date.getTime() / durationDay);\n}\nfunction decode$2(encoded) {\n    const d = new Date(0);\n    d.setUTCDate(d.getUTCDate() + encoded);\n    d.setUTCHours(0, 0, 0, 0);\n    return d;\n}\nconst utcDay = new CountableTimeInterval(encode$2, decode$2);\n\nfunction encode$1(date) {\n    return date.getUTCFullYear() * 12 + date.getUTCMonth();\n}\nfunction decode$1(encoded) {\n    const year = Math.floor(encoded / 12);\n    const month = encoded - year * 12;\n    return new Date(Date.UTC(year, month, 1));\n}\nconst utcMonth = new CountableTimeInterval(encode$1, decode$1);\n\nfunction encode(date) {\n    return date.getUTCFullYear();\n}\nfunction decode(encoded) {\n    // Note: assigning years through the constructor\n    // will break for years 0 - 99 AD (will turn 1900's).\n    const d = new Date();\n    d.setUTCFullYear(encoded);\n    d.setUTCMonth(0, 1);\n    d.setUTCHours(0, 0, 0, 0);\n    return d;\n}\nconst utcYear = new CountableTimeInterval(encode, decode);\n\nvar time = /*#__PURE__*/Object.freeze({\n    __proto__: null,\n    millisecond: millisecond,\n    second: second,\n    minute: minute,\n    hour: hour,\n    day: day,\n    sunday: sunday,\n    monday: monday,\n    tuesday: tuesday,\n    wednesday: wednesday,\n    thursday: thursday,\n    friday: friday,\n    saturday: saturday,\n    month: month,\n    year: year,\n    utcMinute: utcMinute,\n    utcHour: utcHour,\n    utcDay: utcDay,\n    utcMonth: utcMonth,\n    utcYear: utcYear\n});\n\nconst MOBILE = [/Android/i, /webOS/i, /iPhone/i, /iPad/i, /iPod/i, /BlackBerry/i, /Windows Phone/i];\nfunction isDesktop() {\n    const userAgent = navigator.userAgent;\n    if (MOBILE.some((r) => r.test(userAgent))) {\n        return false;\n    }\n    return true;\n}\n\n/**\n * Wraps the native Canvas element and overrides its CanvasRenderingContext2D to\n * provide resolution independent rendering based on `window.devicePixelRatio`.\n */\nclass HdpiCanvas {\n    // The width/height attributes of the Canvas element default to\n    // 300/150 according to w3.org.\n    constructor({ document = window.document, width = 600, height = 300, domLayer = false, zIndex = 0, name = undefined, overrideDevicePixelRatio = undefined, }) {\n        this._container = undefined;\n        this._enabled = true;\n        // `NaN` is deliberate here, so that overrides are always applied\n        // and the `resetTransform` inside the `resize` method works in IE11.\n        this._pixelRatio = NaN;\n        this._width = 0;\n        this._height = 0;\n        this.document = document;\n        // Create canvas and immediately apply width + height to avoid out-of-memory\n        // errors on iOS/iPadOS Safari.\n        this.element = document.createElement('canvas');\n        this.element.width = width;\n        this.element.height = height;\n        this.context = this.element.getContext('2d');\n        this.imageSource = this.context.canvas;\n        const { style } = this.element;\n        style.userSelect = 'none';\n        style.display = 'block';\n        if (domLayer) {\n            style.position = 'absolute';\n            style.zIndex = String(zIndex);\n            style.top = '0';\n            style.left = '0';\n            style.pointerEvents = 'none';\n            style.opacity = `1`;\n            if (name) {\n                this.element.id = name;\n            }\n        }\n        this.setPixelRatio(overrideDevicePixelRatio);\n        this.resize(width, height);\n    }\n    set container(value) {\n        if (this._container !== value) {\n            this.remove();\n            if (value) {\n                value.appendChild(this.element);\n            }\n            this._container = value;\n        }\n    }\n    get container() {\n        return this._container;\n    }\n    set enabled(value) {\n        this.element.style.display = value ? 'block' : 'none';\n        this._enabled = !!value;\n    }\n    get enabled() {\n        return this._enabled;\n    }\n    remove() {\n        const { parentNode } = this.element;\n        if (parentNode != null) {\n            parentNode.removeChild(this.element);\n        }\n    }\n    destroy() {\n        this.element.remove();\n        // Workaround memory allocation quirks in iOS Safari by resizing to 0x0 and clearing.\n        // See https://bugs.webkit.org/show_bug.cgi?id=195325.\n        this.element.width = 0;\n        this.element.height = 0;\n        this.context.clearRect(0, 0, 0, 0);\n        Object.freeze(this);\n    }\n    snapshot() {\n        // No-op for compatibility with HdpiOffscreenCanvas.\n    }\n    clear() {\n        this.context.save();\n        this.context.resetTransform();\n        this.context.clearRect(0, 0, this.width, this.height);\n        this.context.restore();\n    }\n    toImage() {\n        const img = this.document.createElement('img');\n        img.src = this.getDataURL();\n        return img;\n    }\n    getDataURL(type) {\n        return this.element.toDataURL(type);\n    }\n    /**\n     * @param fileName The name of the downloaded file.\n     * @param fileFormat The file format, the default is `image/png`\n     */\n    download(fileName, fileFormat = 'image/png') {\n        fileName = (fileName !== null && fileName !== void 0 ? fileName : '').trim() || 'image';\n        const dataUrl = this.getDataURL(fileFormat);\n        const document = this.document;\n        const a = document.createElement('a');\n        a.href = dataUrl;\n        a.download = fileName;\n        a.style.display = 'none';\n        document.body.appendChild(a); // required for the `click` to work in Firefox\n        a.click();\n        document.body.removeChild(a);\n    }\n    get pixelRatio() {\n        return this._pixelRatio;\n    }\n    /**\n     * Changes the pixel ratio of the Canvas element to the given value,\n     * or uses the window.devicePixelRatio (default), then resizes the Canvas\n     * element accordingly (default).\n     */\n    setPixelRatio(ratio) {\n        let pixelRatio = ratio !== null && ratio !== void 0 ? ratio : window.devicePixelRatio;\n        if (!isDesktop()) {\n            // Mobile browsers have stricter memory limits, we reduce rendering resolution to\n            // improve stability on mobile browsers. iOS Safari 12->16 are pain-points since they\n            // have memory allocation quirks - see https://bugs.webkit.org/show_bug.cgi?id=195325.\n            pixelRatio = 1;\n        }\n        HdpiCanvas.overrideScale(this.context, pixelRatio);\n        this._pixelRatio = pixelRatio;\n    }\n    set pixelated(value) {\n        this.element.style.imageRendering = value ? 'pixelated' : 'auto';\n    }\n    get pixelated() {\n        return this.element.style.imageRendering === 'pixelated';\n    }\n    get width() {\n        return this._width;\n    }\n    get height() {\n        return this._height;\n    }\n    resize(width, height) {\n        if (!(width > 0 && height > 0)) {\n            return;\n        }\n        const { element, context, pixelRatio } = this;\n        element.width = Math.round(width * pixelRatio);\n        element.height = Math.round(height * pixelRatio);\n        element.style.width = width + 'px';\n        element.style.height = height + 'px';\n        context.resetTransform();\n        this._width = width;\n        this._height = height;\n    }\n    static get textMeasuringContext() {\n        if (this._textMeasuringContext) {\n            return this._textMeasuringContext;\n        }\n        const canvas = document.createElement('canvas');\n        this._textMeasuringContext = canvas.getContext('2d');\n        return this._textMeasuringContext;\n    }\n    static get svgText() {\n        if (this._svgText) {\n            return this._svgText;\n        }\n        const xmlns = 'http://www.w3.org/2000/svg';\n        const svg = document.createElementNS(xmlns, 'svg');\n        svg.setAttribute('width', '100');\n        svg.setAttribute('height', '100');\n        // Add a descriptive class name in case someone sees this SVG element\n        // in devtools and wonders about its purpose:\n        if (svg.classList) {\n            svg.classList.add('text-measuring-svg');\n        }\n        else {\n            svg.setAttribute('class', 'text-measuring-svg');\n        }\n        svg.style.position = 'absolute';\n        svg.style.top = '-1000px';\n        svg.style.visibility = 'hidden';\n        const svgText = document.createElementNS(xmlns, 'text');\n        svgText.setAttribute('x', '0');\n        svgText.setAttribute('y', '30');\n        svgText.setAttribute('text', 'black');\n        svg.appendChild(svgText);\n        document.body.appendChild(svg);\n        this._svgText = svgText;\n        return svgText;\n    }\n    static get has() {\n        if (this._has) {\n            return this._has;\n        }\n        const isChrome = navigator.userAgent.indexOf('Chrome') > -1;\n        const isFirefox = navigator.userAgent.indexOf('Firefox') > -1;\n        const isSafari = !isChrome && navigator.userAgent.indexOf('Safari') > -1;\n        this._has = Object.freeze({\n            textMetrics: this.textMeasuringContext.measureText('test').actualBoundingBoxDescent !== undefined &&\n                // Firefox implemented advanced TextMetrics object in v74:\n                // https://bugzilla.mozilla.org/show_bug.cgi?id=1102584\n                // but it's buggy, so we'll keep using the SVG for text measurement in Firefox for now.\n                !isFirefox &&\n                !isSafari,\n            getTransform: this.textMeasuringContext.getTransform !== undefined,\n        });\n        return this._has;\n    }\n    static measureText(text, font, textBaseline, textAlign) {\n        const ctx = this.textMeasuringContext;\n        ctx.font = font;\n        ctx.textBaseline = textBaseline;\n        ctx.textAlign = textAlign;\n        return ctx.measureText(text);\n    }\n    /**\n     * Returns the width and height of the measured text.\n     * @param text The single-line text to measure.\n     * @param font The font shorthand string.\n     */\n    static getTextSize(text, font) {\n        if (this.has.textMetrics) {\n            const ctx = this.textMeasuringContext;\n            ctx.font = font;\n            const metrics = ctx.measureText(text);\n            return {\n                width: metrics.width,\n                height: metrics.actualBoundingBoxAscent + metrics.actualBoundingBoxDescent,\n            };\n        }\n        else {\n            return this.measureSvgText(text, font);\n        }\n    }\n    static measureSvgText(text, font) {\n        const cache = this.textSizeCache;\n        const fontCache = cache[font];\n        // Note: consider not caching the size of numeric strings.\n        // For example: if (isNaN(+text)) { // skip\n        if (fontCache) {\n            const size = fontCache[text];\n            if (size) {\n                return size;\n            }\n        }\n        else {\n            cache[font] = {};\n        }\n        const svgText = this.svgText;\n        svgText.style.font = font;\n        svgText.textContent = text;\n        // `getBBox` returns an instance of `SVGRect` with the same `width` and `height`\n        // measurements as `DOMRect` instance returned by the `getBoundingClientRect`.\n        // But the `SVGRect` instance has half the properties of the `DOMRect`,\n        // so we use the `getBBox` method.\n        const bbox = svgText.getBBox();\n        const size = {\n            width: bbox.width,\n            height: bbox.height,\n        };\n        cache[font][text] = size;\n        return size;\n    }\n    static overrideScale(ctx, scale) {\n        let depth = 0;\n        const overrides = {\n            save() {\n                this.$save();\n                depth++;\n            },\n            restore() {\n                if (depth > 0) {\n                    this.$restore();\n                    depth--;\n                }\n                else {\n                    throw new Error('AG Charts - Unable to restore() past depth 0');\n                }\n            },\n            setTransform(a, b, c, d, e, f) {\n                if (typeof a === 'object') {\n                    this.$setTransform(a);\n                }\n                else {\n                    this.$setTransform(a * scale, b * scale, c * scale, d * scale, e * scale, f * scale);\n                }\n            },\n            resetTransform() {\n                // As of Jan 8, 2019, `resetTransform` is still an \"experimental technology\",\n                // and doesn't work in IE11 and Edge 44.\n                this.$setTransform(scale, 0, 0, scale, 0, 0);\n            },\n            verifyDepthZero() {\n                if (depth !== 0) {\n                    throw new Error('AG Charts - Save/restore depth is non-zero: ' + depth);\n                }\n            },\n        };\n        for (const name in overrides) {\n            if (Object.prototype.hasOwnProperty.call(overrides, name)) {\n                // Save native methods under prefixed names,\n                // if this hasn't been done by the previous overrides already.\n                if (!ctx['$' + name]) {\n                    ctx['$' + name] = ctx[name];\n                }\n                // Replace native methods with overrides,\n                // or previous overrides with the new ones.\n                ctx[name] = overrides[name];\n            }\n        }\n    }\n}\nHdpiCanvas.textSizeCache = {};\n\n// For small data structs like a bounding box, objects are superior to arrays\n// in terms of performance (by 3-4% in Chrome 71, Safari 12 and by 20% in Firefox 64).\n// They are also self descriptive and harder to abuse.\n// For example, one has to do:\n// `ctx.strokeRect(bbox.x, bbox.y, bbox.width, bbox.height);`\n// rather than become enticed by the much slower:\n// `ctx.strokeRect(...bbox);`\n// https://jsperf.com/array-vs-object-create-access\nclass BBox {\n    constructor(x, y, width, height) {\n        this.x = x;\n        this.y = y;\n        this.width = width;\n        this.height = height;\n    }\n    clone() {\n        const { x, y, width, height } = this;\n        return new BBox(x, y, width, height);\n    }\n    equals(other) {\n        return this.x === other.x && this.y === other.y && this.width === other.width && this.height === other.height;\n    }\n    containsPoint(x, y) {\n        return x >= this.x && x <= this.x + this.width && y >= this.y && y <= this.y + this.height;\n    }\n    collidesBBox(other) {\n        return (this.x < other.x + other.width &&\n            this.x + this.width > other.x &&\n            this.y < other.y + other.height &&\n            this.y + this.height > other.y);\n    }\n    isInfinite() {\n        return (Math.abs(this.x) === Infinity ||\n            Math.abs(this.y) === Infinity ||\n            Math.abs(this.width) === Infinity ||\n            Math.abs(this.height) === Infinity);\n    }\n    shrink(amount, position) {\n        const apply = (pos, amt) => {\n            switch (pos) {\n                case 'top':\n                    this.y += amt;\n                // eslint-disable-next-line no-fallthrough\n                case 'bottom':\n                    this.height -= amt;\n                    break;\n                case 'left':\n                    this.x += amt;\n                // eslint-disable-next-line no-fallthrough\n                case 'right':\n                    this.width -= amt;\n                    break;\n                case 'vertical':\n                    this.y += amt;\n                    this.height -= amt * 2;\n                    break;\n                case 'horizontal':\n                    this.x += amt;\n                    this.width -= amt * 2;\n                    break;\n                default:\n                    this.x += amt;\n                    this.width -= amt * 2;\n                    this.y += amt;\n                    this.height -= amt * 2;\n            }\n        };\n        if (typeof amount === 'number') {\n            apply(position, amount);\n        }\n        else {\n            Object.entries(amount).forEach(([pos, amt]) => apply(pos, amt));\n        }\n        return this;\n    }\n    grow(amount, position) {\n        if (typeof amount === 'number') {\n            this.shrink(-amount, position);\n        }\n        else {\n            const paddingCopy = Object.assign({}, amount);\n            for (const key in paddingCopy) {\n                paddingCopy[key] *= -1;\n            }\n            this.shrink(paddingCopy);\n        }\n        return this;\n    }\n    static merge(boxes) {\n        let left = Infinity;\n        let top = Infinity;\n        let right = -Infinity;\n        let bottom = -Infinity;\n        boxes.forEach((box) => {\n            if (box.x < left) {\n                left = box.x;\n            }\n            if (box.y < top) {\n                top = box.y;\n            }\n            if (box.x + box.width > right) {\n                right = box.x + box.width;\n            }\n            if (box.y + box.height > bottom) {\n                bottom = box.y + box.height;\n            }\n        });\n        return new BBox(left, top, right - left, bottom - top);\n    }\n}\n\n/**\n * As of Jan 8, 2019, Firefox still doesn't implement\n * `getTransform(): DOMMatrix;`\n * `setTransform(transform?: DOMMatrix2DInit)`\n * in the `CanvasRenderingContext2D`.\n * Bug: https://bugzilla.mozilla.org/show_bug.cgi?id=928150\n * IE11 and Edge 44 also don't have the support.\n * Thus this class, to keep track of the current transform and\n * combine transformations.\n * Standards:\n * https://html.spec.whatwg.org/dev/canvas.html\n * https://www.w3.org/TR/geometry-1/\n */\nclass Matrix {\n    constructor(elements = [1, 0, 0, 1, 0, 0]) {\n        this.elements = elements;\n    }\n    get e() {\n        return [...this.elements];\n    }\n    setElements(elements) {\n        const e = this.elements;\n        // `this.elements = elements.slice()` is 4-5 times slower\n        // (in Chrome 71 and FF 64) than manually copying elements,\n        // since slicing allocates new memory.\n        // The performance of passing parameters individually\n        // vs as an array is about the same in both browsers, so we\n        // go with a single (array of elements) parameter, because\n        // `setElements(elements)` and `setElements([a, b, c, d, e, f])`\n        // calls give us roughly the same performance, versus\n        // `setElements(...elements)` and `setElements(a, b, c, d, e, f)`,\n        // where the spread operator causes a 20-30x performance drop\n        // (30x when compiled to ES5's `.apply(this, elements)`\n        //  20x when used natively).\n        e[0] = elements[0];\n        e[1] = elements[1];\n        e[2] = elements[2];\n        e[3] = elements[3];\n        e[4] = elements[4];\n        e[5] = elements[5];\n        return this;\n    }\n    get identity() {\n        const e = this.elements;\n        return e[0] === 1 && e[1] === 0 && e[2] === 0 && e[3] === 1 && e[4] === 0 && e[5] === 0;\n    }\n    /**\n     * Performs the AxB matrix multiplication and saves the result\n     * to `C`, if given, or to `A` otherwise.\n     */\n    AxB(A, B, C) {\n        const a = A[0] * B[0] + A[2] * B[1], b = A[1] * B[0] + A[3] * B[1], c = A[0] * B[2] + A[2] * B[3], d = A[1] * B[2] + A[3] * B[3], e = A[0] * B[4] + A[2] * B[5] + A[4], f = A[1] * B[4] + A[3] * B[5] + A[5];\n        C = C !== null && C !== void 0 ? C : A;\n        C[0] = a;\n        C[1] = b;\n        C[2] = c;\n        C[3] = d;\n        C[4] = e;\n        C[5] = f;\n    }\n    /**\n     * The `other` matrix gets post-multiplied to the current matrix.\n     * Returns the current matrix.\n     * @param other\n     */\n    multiplySelf(other) {\n        this.AxB(this.elements, other.elements);\n        return this;\n    }\n    /**\n     * The `other` matrix gets post-multiplied to the current matrix.\n     * Returns a new matrix.\n     * @param other\n     */\n    multiply(other) {\n        const elements = new Array(6);\n        this.AxB(this.elements, other.elements, elements);\n        return new Matrix(elements);\n    }\n    preMultiplySelf(other) {\n        this.AxB(other.elements, this.elements, this.elements);\n        return this;\n    }\n    /**\n     * Returns the inverse of this matrix as a new matrix.\n     */\n    inverse() {\n        const el = this.elements;\n        let a = el[0], b = el[1], c = el[2], d = el[3];\n        const e = el[4], f = el[5];\n        const rD = 1 / (a * d - b * c); // reciprocal of determinant\n        a *= rD;\n        b *= rD;\n        c *= rD;\n        d *= rD;\n        return new Matrix([d, -b, -c, a, c * f - d * e, b * e - a * f]);\n    }\n    /**\n     * Save the inverse of this matrix to the given matrix.\n     */\n    inverseTo(other) {\n        const el = this.elements;\n        let a = el[0], b = el[1], c = el[2], d = el[3];\n        const e = el[4], f = el[5];\n        const rD = 1 / (a * d - b * c); // reciprocal of determinant\n        a *= rD;\n        b *= rD;\n        c *= rD;\n        d *= rD;\n        other.setElements([d, -b, -c, a, c * f - d * e, b * e - a * f]);\n        return this;\n    }\n    invertSelf() {\n        const el = this.elements;\n        let a = el[0], b = el[1], c = el[2], d = el[3];\n        const e = el[4], f = el[5];\n        const rD = 1 / (a * d - b * c); // reciprocal of determinant\n        a *= rD;\n        b *= rD;\n        c *= rD;\n        d *= rD;\n        el[0] = d;\n        el[1] = -b;\n        el[2] = -c;\n        el[3] = a;\n        el[4] = c * f - d * e;\n        el[5] = b * e - a * f;\n        return this;\n    }\n    transformPoint(x, y) {\n        const e = this.elements;\n        return {\n            x: x * e[0] + y * e[2] + e[4],\n            y: x * e[1] + y * e[3] + e[5],\n        };\n    }\n    transformBBox(bbox, target) {\n        const elements = this.elements;\n        const xx = elements[0];\n        const xy = elements[1];\n        const yx = elements[2];\n        const yy = elements[3];\n        const h_w = bbox.width * 0.5;\n        const h_h = bbox.height * 0.5;\n        const cx = bbox.x + h_w;\n        const cy = bbox.y + h_h;\n        const w = Math.abs(h_w * xx) + Math.abs(h_h * yx);\n        const h = Math.abs(h_w * xy) + Math.abs(h_h * yy);\n        if (!target) {\n            target = new BBox(0, 0, 0, 0);\n        }\n        target.x = cx * xx + cy * yx + elements[4] - w;\n        target.y = cx * xy + cy * yy + elements[5] - h;\n        target.width = w + w;\n        target.height = h + h;\n        return target;\n    }\n    toContext(ctx) {\n        // It's fair to say that matrix multiplications are not cheap.\n        // However, updating path definitions on every frame isn't either, so\n        // it may be cheaper to just translate paths. It's also fair to\n        // say, that most paths will have to be re-rendered anyway, say\n        // rectangle paths in a bar chart, where an animation would happen when\n        // the data set changes and existing bars are morphed into new ones.\n        // Or a pie chart, where old sectors are also morphed into new ones.\n        // Same for the line chart. The only plausible case where translating\n        // existing paths would be enough, is the scatter chart, where marker\n        // icons, typically circles, stay the same size. But if circle radii\n        // are bound to some data points, even circle paths would have to be\n        // updated. And thus it makes sense to optimize for fewer matrix\n        // transforms, where transform matrices of paths are mostly identity\n        // matrices and `x`/`y`, `centerX`/`centerY` and similar properties\n        // are used to define a path at specific coordinates. And only groups\n        // are used to collectively apply a transform to a set of nodes.\n        // If the matrix is mostly identity (95% of the time),\n        // the `if (this.isIdentity)` check can make this call 3-4 times\n        // faster on average: https://jsperf.com/matrix-check-first-vs-always-set\n        if (this.identity) {\n            return;\n        }\n        const e = this.elements;\n        ctx.transform(e[0], e[1], e[2], e[3], e[4], e[5]);\n    }\n    static flyweight(sourceMatrix) {\n        return Matrix.instance.setElements(sourceMatrix.elements);\n    }\n    static updateTransformMatrix(matrix, scalingX, scalingY, rotation, translationX, translationY, opts) {\n        // Assume that centers of scaling and rotation are at the origin.\n        const [bbcx, bbcy] = [0, 0];\n        const sx = scalingX;\n        const sy = scalingY;\n        let scx;\n        let scy;\n        if (sx === 1 && sy === 1) {\n            scx = 0;\n            scy = 0;\n        }\n        else {\n            scx = (opts === null || opts === void 0 ? void 0 : opts.scalingCenterX) == null ? bbcx : opts === null || opts === void 0 ? void 0 : opts.scalingCenterX;\n            scy = (opts === null || opts === void 0 ? void 0 : opts.scalingCenterY) == null ? bbcy : opts === null || opts === void 0 ? void 0 : opts.scalingCenterY;\n        }\n        const r = rotation;\n        const cos = Math.cos(r);\n        const sin = Math.sin(r);\n        let rcx;\n        let rcy;\n        if (r === 0) {\n            rcx = 0;\n            rcy = 0;\n        }\n        else {\n            rcx = (opts === null || opts === void 0 ? void 0 : opts.rotationCenterX) == null ? bbcx : opts === null || opts === void 0 ? void 0 : opts.rotationCenterX;\n            rcy = (opts === null || opts === void 0 ? void 0 : opts.rotationCenterY) == null ? bbcy : opts === null || opts === void 0 ? void 0 : opts.rotationCenterY;\n        }\n        const tx = translationX;\n        const ty = translationY;\n        // The transform matrix `M` is a result of the following transformations:\n        // 1) translate the center of scaling to the origin\n        // 2) scale\n        // 3) translate back\n        // 4) translate the center of rotation to the origin\n        // 5) rotate\n        // 6) translate back\n        // 7) translate\n        //         (7)          (6)             (5)             (4)           (3)           (2)           (1)\n        //     | 1 0 tx |   | 1 0 rcx |   | cos -sin 0 |   | 1 0 -rcx |   | 1 0 scx |   | sx 0 0 |   | 1 0 -scx |\n        // M = | 0 1 ty | * | 0 1 rcy | * | sin  cos 0 | * | 0 1 -rcy | * | 0 1 scy | * | 0 sy 0 | * | 0 1 -scy |\n        //     | 0 0  1 |   | 0 0  1  |   |  0    0  1 |   | 0 0  1   |   | 0 0  1  |   | 0  0 0 |   | 0 0  1   |\n        // Translation after steps 1-4 above:\n        const tx4 = scx * (1 - sx) - rcx;\n        const ty4 = scy * (1 - sy) - rcy;\n        matrix.setElements([\n            cos * sx,\n            sin * sx,\n            -sin * sy,\n            cos * sy,\n            cos * tx4 - sin * ty4 + rcx + tx,\n            sin * tx4 + cos * ty4 + rcy + ty,\n        ]);\n        return matrix;\n    }\n    static fromContext(ctx) {\n        const domMatrix = ctx.getTransform();\n        return new Matrix([domMatrix.a, domMatrix.b, domMatrix.c, domMatrix.d, domMatrix.e, domMatrix.f]);\n    }\n}\nMatrix.instance = new Matrix();\n\nconst ID_MAP = {};\nfunction resetIds() {\n    for (const key in ID_MAP) {\n        delete ID_MAP[key];\n    }\n}\nfunction createId$1(instance) {\n    var _a;\n    const constructor = instance.constructor;\n    const className = Object.prototype.hasOwnProperty.call(constructor, 'className')\n        ? constructor.className\n        : constructor.name;\n    if (!className) {\n        throw new Error(`The ${constructor} is missing the 'className' property.`);\n    }\n    const nextId = ((_a = ID_MAP[className]) !== null && _a !== void 0 ? _a : 0) + 1;\n    ID_MAP[className] = nextId;\n    return className + '-' + nextId;\n}\n\nvar RedrawType;\n(function (RedrawType) {\n    RedrawType[RedrawType[\"NONE\"] = 0] = \"NONE\";\n    // Canvas doesn't need clearing, an incremental re-rerender is sufficient.\n    RedrawType[RedrawType[\"TRIVIAL\"] = 1] = \"TRIVIAL\";\n    // Group needs clearing, a semi-incremental re-render is sufficient.\n    RedrawType[RedrawType[\"MINOR\"] = 2] = \"MINOR\";\n    // Canvas needs to be cleared for these redraw types.\n    RedrawType[RedrawType[\"MAJOR\"] = 3] = \"MAJOR\";\n})(RedrawType || (RedrawType = {}));\n/** @returns true if new Function() is disabled in the current execution context. */\nfunction functionConstructorAvailable() {\n    try {\n        new Function('return true');\n        return true;\n    }\n    catch (e) {\n        return false;\n    }\n}\nconst STRING_FUNCTION_USEABLE = functionConstructorAvailable();\nfunction SceneChangeDetection(opts) {\n    const { changeCb, convertor } = opts !== null && opts !== void 0 ? opts : {};\n    return function (target, key) {\n        // `target` is either a constructor (static member) or prototype (instance member)\n        const privateKey = `__${key}`;\n        if (target[key]) {\n            return;\n        }\n        if (STRING_FUNCTION_USEABLE && changeCb == null && convertor == null) {\n            prepareFastGetSet(target, key, privateKey, opts);\n        }\n        else {\n            prepareSlowGetSet(target, key, privateKey, opts);\n        }\n    };\n}\nfunction prepareFastGetSet(target, key, privateKey, opts) {\n    const { redraw = RedrawType.TRIVIAL, type = 'normal', checkDirtyOnAssignment = false } = opts !== null && opts !== void 0 ? opts : {};\n    // Optimised code-path.\n    // Remove all conditional logic from runtime - generate a setter with the exact necessary\n    // steps, as these setters are called a LOT during update cycles.\n    const setterJs = new Function('value', `\n        const oldValue = this.${privateKey};\n        if (value !== oldValue) {\n            this.${privateKey} = value;\n            ${type === 'normal' ? `this.markDirty(this, ${redraw});` : ''}\n            ${type === 'transform' ? `this.markDirtyTransform(${redraw});` : ''}\n            ${type === 'path'\n        ? `if (!this._dirtyPath) { this._dirtyPath = true; this.markDirty(this, ${redraw}); }`\n        : ''}\n            ${type === 'font'\n        ? `if (!this._dirtyFont) { this._dirtyFont = true; this.markDirty(this, ${redraw}); }`\n        : ''}\n        }\n        ${checkDirtyOnAssignment\n        ? `if (value != null && value._dirty > ${RedrawType.NONE}) { this.markDirty(value, value._dirty); }`\n        : ''}\n`);\n    const getterJs = new Function(`return this.${privateKey};`);\n    Object.defineProperty(target, key, {\n        set: setterJs,\n        get: getterJs,\n        enumerable: true,\n        configurable: true,\n    });\n}\nfunction prepareSlowGetSet(target, key, privateKey, opts) {\n    const { redraw = RedrawType.TRIVIAL, type = 'normal', changeCb, convertor, checkDirtyOnAssignment = false, } = opts !== null && opts !== void 0 ? opts : {};\n    // Unoptimised but 'safe' code-path, for environments with CSP headers and no 'unsafe-eval'.\n    // We deliberately do not support debug branches found in the optimised path above, since\n    // for large data-set series performance deteriorates with every extra branch here.\n    const setter = function (value) {\n        const oldValue = this[privateKey];\n        value = convertor ? convertor(value) : value;\n        if (value !== oldValue) {\n            this[privateKey] = value;\n            if (type === 'normal')\n                this.markDirty(this, redraw);\n            if (type === 'transform')\n                this.markDirtyTransform(redraw);\n            if (type === 'path' && !this._dirtyPath) {\n                this._dirtyPath = true;\n                this.markDirty(this, redraw);\n            }\n            if (type === 'font' && !this._dirtyFont) {\n                this._dirtyFont = true;\n                this.markDirty(this, redraw);\n            }\n            if (changeCb)\n                changeCb(this);\n        }\n        if (checkDirtyOnAssignment && value != null && value._dirty > RedrawType.NONE)\n            this.markDirty(value, value._dirty);\n    };\n    const getter = function () {\n        return this[privateKey];\n    };\n    Object.defineProperty(target, key, {\n        set: setter,\n        get: getter,\n        enumerable: true,\n        configurable: true,\n    });\n}\nclass ChangeDetectable {\n    constructor() {\n        this._dirty = RedrawType.MAJOR;\n    }\n    markDirty(_source, type = RedrawType.TRIVIAL) {\n        if (this._dirty > type) {\n            return;\n        }\n        this._dirty = type;\n    }\n    markClean(_opts) {\n        this._dirty = RedrawType.NONE;\n    }\n    isDirty() {\n        return this._dirty > RedrawType.NONE;\n    }\n}\n\nvar __decorate$1X = ( false) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nvar PointerEvents;\n(function (PointerEvents) {\n    PointerEvents[PointerEvents[\"All\"] = 0] = \"All\";\n    PointerEvents[PointerEvents[\"None\"] = 1] = \"None\";\n})(PointerEvents || (PointerEvents = {}));\nconst zIndexChangedCallback = (o) => {\n    if (o.parent) {\n        o.parent.dirtyZIndex = true;\n    }\n    o.zIndexChanged();\n};\n/**\n * Abstract scene graph node.\n * Each node can have zero or one parent and belong to zero or one scene.\n */\nclass Node extends ChangeDetectable {\n    constructor() {\n        super(...arguments);\n        /** Unique number to allow creation order to be easily determined. */\n        this.serialNumber = Node._nextSerialNumber++;\n        /**\n         * Unique node ID in the form `ClassName-NaturalNumber`.\n         */\n        this.id = createId$1(this);\n        /**\n         * Some number to identify this node, typically within a `Group` node.\n         * Usually this will be some enum value used as a selector.\n         */\n        this.tag = NaN;\n        /**\n         * To simplify the type system (especially in Selections) we don't have the `Parent` node\n         * (one that has children). Instead, we mimic HTML DOM, where any node can have children.\n         * But we still need to distinguish regular leaf nodes from container leafs somehow.\n         */\n        this.isContainerNode = false;\n        this._children = [];\n        // Used to check for duplicate nodes.\n        this.childSet = {}; // new Set<Node>()\n        // These matrices may need to have package level visibility\n        // for performance optimization purposes.\n        this.matrix = new Matrix();\n        this.inverseMatrix = new Matrix();\n        this._dirtyTransform = false;\n        this.scalingX = 1;\n        this.scalingY = 1;\n        /**\n         * The center of scaling.\n         * The default value of `null` means the scaling center will be\n         * determined automatically, as the center of the bounding box\n         * of a node.\n         */\n        this.scalingCenterX = null;\n        this.scalingCenterY = null;\n        this.rotationCenterX = null;\n        this.rotationCenterY = null;\n        /**\n         * Rotation angle in radians.\n         * The value is set as is. No normalization to the [-180, 180) or [0, 360)\n         * interval is performed.\n         */\n        this.rotation = 0;\n        this.translationX = 0;\n        this.translationY = 0;\n        this.visible = true;\n        this.dirtyZIndex = false;\n        this.zIndex = 0;\n        /** Discriminators for render order within a zIndex. */\n        this.zIndexSubOrder = undefined;\n        this.pointerEvents = PointerEvents.All;\n    }\n    /**\n     * Some arbitrary data bound to the node.\n     */\n    get datum() {\n        var _a;\n        if (this._datum !== undefined) {\n            return this._datum;\n        }\n        return (_a = this._parent) === null || _a === void 0 ? void 0 : _a.datum;\n    }\n    set datum(datum) {\n        this._datum = datum;\n    }\n    _setLayerManager(value) {\n        this._layerManager = value;\n        this._debug = value === null || value === void 0 ? void 0 : value.debug;\n        for (const child of this.children) {\n            child._setLayerManager(value);\n        }\n    }\n    get layerManager() {\n        return this._layerManager;\n    }\n    get parent() {\n        return this._parent;\n    }\n    get children() {\n        return this._children;\n    }\n    /**\n     * Appends one or more new node instances to this parent.\n     * If one needs to:\n     * - move a child to the end of the list of children\n     * - move a child from one parent to another (including parents in other scenes)\n     * one should use the {@link insertBefore} method instead.\n     * @param nodes A node or nodes to append.\n     */\n    append(nodes) {\n        // Passing a single parameter to an open-ended version of `append`\n        // would be 30-35% slower than this.\n        if (!Array.isArray(nodes)) {\n            nodes = [nodes];\n        }\n        for (const node of nodes) {\n            if (node.parent) {\n                throw new Error(`${node} already belongs to another parent: ${node.parent}.`);\n            }\n            if (node.layerManager) {\n                throw new Error(`${node} already belongs to a scene: ${node.layerManager}.`);\n            }\n            if (this.childSet[node.id]) {\n                // Cast to `any` to avoid `Property 'name' does not exist on type 'Function'`.\n                throw new Error(`Duplicate ${node.constructor.name} node: ${node}`);\n            }\n            this._children.push(node);\n            this.childSet[node.id] = true;\n            node._parent = this;\n            node._setLayerManager(this.layerManager);\n        }\n        this.dirtyZIndex = true;\n        this.markDirty(this, RedrawType.MAJOR);\n    }\n    appendChild(node) {\n        this.append(node);\n        return node;\n    }\n    removeChild(node) {\n        if (node.parent === this) {\n            const i = this.children.indexOf(node);\n            if (i >= 0) {\n                this._children.splice(i, 1);\n                delete this.childSet[node.id];\n                node._parent = undefined;\n                node._setLayerManager();\n                this.dirtyZIndex = true;\n                this.markDirty(node, RedrawType.MAJOR);\n                return node;\n            }\n        }\n        throw new Error(`The node to be removed is not a child of this node.`);\n    }\n    /**\n     * Inserts the node `node` before the existing child node `nextNode`.\n     * If `nextNode` is null, insert `node` at the end of the list of children.\n     * If the `node` belongs to another parent, it is first removed.\n     * Returns the `node`.\n     * @param node\n     * @param nextNode\n     */\n    insertBefore(node, nextNode) {\n        const parent = node.parent;\n        if (node.parent) {\n            node.parent.removeChild(node);\n        }\n        if (nextNode && nextNode.parent === this) {\n            const i = this.children.indexOf(nextNode);\n            if (i >= 0) {\n                this._children.splice(i, 0, node);\n                this.childSet[node.id] = true;\n                node._parent = this;\n                node._setLayerManager(this.layerManager);\n            }\n            else {\n                throw new Error(`${nextNode} has ${parent} as the parent, ` + `but is not in its list of children.`);\n            }\n            this.dirtyZIndex = true;\n            this.markDirty(node, RedrawType.MAJOR);\n        }\n        else {\n            this.append(node);\n        }\n        return node;\n    }\n    calculateCumulativeMatrix() {\n        this.computeTransformMatrix();\n        const matrix = Matrix.flyweight(this.matrix);\n        let parent = this.parent;\n        while (parent) {\n            parent.computeTransformMatrix();\n            matrix.preMultiplySelf(parent.matrix);\n            parent = parent.parent;\n        }\n        return matrix;\n    }\n    transformPoint(x, y) {\n        const matrix = this.calculateCumulativeMatrix();\n        return matrix.invertSelf().transformPoint(x, y);\n    }\n    inverseTransformPoint(x, y) {\n        const matrix = this.calculateCumulativeMatrix();\n        return matrix.transformPoint(x, y);\n    }\n    transformBBox(bbox) {\n        const matrix = this.calculateCumulativeMatrix();\n        return matrix.invertSelf().transformBBox(bbox);\n    }\n    inverseTransformBBox(bbox) {\n        const matrix = this.calculateCumulativeMatrix();\n        return matrix.transformBBox(bbox);\n    }\n    markDirtyTransform() {\n        this._dirtyTransform = true;\n        this.markDirty(this, RedrawType.MAJOR);\n    }\n    containsPoint(_x, _y) {\n        return false;\n    }\n    /**\n     * Hit testing method.\n     * Recursively checks if the given point is inside this node or any of its children.\n     * Returns the first matching node or `undefined`.\n     * Nodes that render later (show on top) are hit tested first.\n     */\n    pickNode(x, y) {\n        var _a;\n        if (!this.visible || this.pointerEvents === PointerEvents.None || !this.containsPoint(x, y)) {\n            return;\n        }\n        const children = this.children;\n        if (children.length > 1000) {\n            // Try to optimise which children to interrogate; BBox calculation is an approximation\n            // for more complex shapes, so discarding items based on this will save a lot of\n            // processing when the point is nowhere near the child.\n            for (let i = children.length - 1; i >= 0; i--) {\n                const child = children[i];\n                const containsPoint = (_a = child.computeTransformedBBox()) === null || _a === void 0 ? void 0 : _a.containsPoint(x, y);\n                const hit = containsPoint ? child.pickNode(x, y) : undefined;\n                if (hit) {\n                    return hit;\n                }\n            }\n        }\n        else if (children.length) {\n            // Nodes added later should be hit-tested first,\n            // as they are rendered on top of the previously added nodes.\n            for (let i = children.length - 1; i >= 0; i--) {\n                const hit = children[i].pickNode(x, y);\n                if (hit) {\n                    return hit;\n                }\n            }\n        }\n        else if (!this.isContainerNode) {\n            // a leaf node, but not a container leaf\n            return this;\n        }\n    }\n    findNodes(predicate) {\n        const result = predicate(this) ? [this] : [];\n        for (const child of this.children) {\n            const childResult = child.findNodes(predicate);\n            if (childResult) {\n                result.push(...childResult);\n            }\n        }\n        return result;\n    }\n    computeBBox() {\n        return;\n    }\n    computeTransformedBBox() {\n        const bbox = this.computeBBox();\n        if (!bbox) {\n            return undefined;\n        }\n        this.computeTransformMatrix();\n        const matrix = Matrix.flyweight(this.matrix);\n        let parent = this.parent;\n        while (parent) {\n            parent.computeTransformMatrix();\n            matrix.preMultiplySelf(parent.matrix);\n            parent = parent.parent;\n        }\n        matrix.transformBBox(bbox, bbox);\n        return bbox;\n    }\n    computeTransformMatrix() {\n        if (!this._dirtyTransform) {\n            return;\n        }\n        const { matrix, scalingX, scalingY, rotation, translationX, translationY, scalingCenterX, scalingCenterY, rotationCenterX, rotationCenterY, } = this;\n        Matrix.updateTransformMatrix(matrix, scalingX, scalingY, rotation, translationX, translationY, {\n            scalingCenterX,\n            scalingCenterY,\n            rotationCenterX,\n            rotationCenterY,\n        });\n        matrix.inverseTo(this.inverseMatrix);\n        this._dirtyTransform = false;\n    }\n    render(renderCtx) {\n        const { stats } = renderCtx;\n        this._dirty = RedrawType.NONE;\n        if (stats)\n            stats.nodesRendered++;\n    }\n    clearBBox(ctx) {\n        const bbox = this.computeBBox();\n        if (bbox == null) {\n            return;\n        }\n        const { x, y, width, height } = bbox;\n        const topLeft = this.transformPoint(x, y);\n        const bottomRight = this.transformPoint(x + width, y + height);\n        ctx.clearRect(topLeft.x, topLeft.y, bottomRight.x - topLeft.x, bottomRight.y - topLeft.y);\n    }\n    markDirty(_source, type = RedrawType.TRIVIAL, parentType = type) {\n        if (this._dirty > type) {\n            return;\n        }\n        if (this._dirty === type && type === parentType) {\n            return;\n        }\n        this._dirty = type;\n        if (this.parent) {\n            this.parent.markDirty(this, parentType);\n        }\n        else if (this.layerManager) {\n            this.layerManager.markDirty();\n        }\n    }\n    get dirty() {\n        return this._dirty;\n    }\n    markClean(opts) {\n        const { force = false, recursive = true } = opts !== null && opts !== void 0 ? opts : {};\n        if (this._dirty === RedrawType.NONE && !force) {\n            return;\n        }\n        this._dirty = RedrawType.NONE;\n        if (recursive) {\n            for (const child of this.children) {\n                child.markClean();\n            }\n        }\n    }\n    visibilityChanged() {\n        // Override point for sub-classes to react to visibility changes.\n    }\n    get nodeCount() {\n        let count = 1;\n        let dirtyCount = this._dirty >= RedrawType.NONE || this._dirtyTransform ? 1 : 0;\n        let visibleCount = this.visible ? 1 : 0;\n        for (const child of this._children) {\n            const { count: childCount, visibleCount: childVisibleCount, dirtyCount: childDirtyCount } = child.nodeCount;\n            count += childCount;\n            visibleCount += childVisibleCount;\n            dirtyCount += childDirtyCount;\n        }\n        return { count, visibleCount, dirtyCount };\n    }\n    zIndexChanged() {\n        // Override point for sub-classes.\n    }\n}\nNode._nextSerialNumber = 0;\n__decorate$1X([\n    SceneChangeDetection({ type: 'transform' })\n], Node.prototype, \"scalingX\", void 0);\n__decorate$1X([\n    SceneChangeDetection({ type: 'transform' })\n], Node.prototype, \"scalingY\", void 0);\n__decorate$1X([\n    SceneChangeDetection({ type: 'transform' })\n], Node.prototype, \"scalingCenterX\", void 0);\n__decorate$1X([\n    SceneChangeDetection({ type: 'transform' })\n], Node.prototype, \"scalingCenterY\", void 0);\n__decorate$1X([\n    SceneChangeDetection({ type: 'transform' })\n], Node.prototype, \"rotationCenterX\", void 0);\n__decorate$1X([\n    SceneChangeDetection({ type: 'transform' })\n], Node.prototype, \"rotationCenterY\", void 0);\n__decorate$1X([\n    SceneChangeDetection({ type: 'transform' })\n], Node.prototype, \"rotation\", void 0);\n__decorate$1X([\n    SceneChangeDetection({ type: 'transform' })\n], Node.prototype, \"translationX\", void 0);\n__decorate$1X([\n    SceneChangeDetection({ type: 'transform' })\n], Node.prototype, \"translationY\", void 0);\n__decorate$1X([\n    SceneChangeDetection({ redraw: RedrawType.MAJOR, changeCb: (o) => o.visibilityChanged() })\n], Node.prototype, \"visible\", void 0);\n__decorate$1X([\n    SceneChangeDetection({\n        redraw: RedrawType.TRIVIAL,\n        changeCb: zIndexChangedCallback,\n    })\n], Node.prototype, \"zIndex\", void 0);\n__decorate$1X([\n    SceneChangeDetection({\n        redraw: RedrawType.TRIVIAL,\n        changeCb: zIndexChangedCallback,\n    })\n], Node.prototype, \"zIndexSubOrder\", void 0);\n\nfunction ascendingStringNumberUndefined(a, b) {\n    let diff = 0;\n    if (typeof a === 'number' && typeof b === 'number') {\n        diff = a - b;\n    }\n    else if (typeof a === 'string' && typeof b === 'string') {\n        diff = a.localeCompare(b);\n    }\n    else if (a == null && b == null) ;\n    else if (a == null) {\n        diff = -1;\n    }\n    else if (b == null) {\n        diff = 1;\n    }\n    else {\n        diff = String(a).localeCompare(String(b));\n    }\n    return diff;\n}\nfunction compoundAscending(a, b, comparator) {\n    const toLiteral = (v) => {\n        if (typeof v === 'function') {\n            return v();\n        }\n        return v;\n    };\n    for (const idx in a) {\n        const diff = comparator(toLiteral(a[idx]), toLiteral(b[idx]));\n        if (diff !== 0) {\n            return diff;\n        }\n    }\n    return 0;\n}\n\nconst doOnceFlags$1 = {};\n/**\n * If the key was passed before, then doesn't execute the func\n */\nfunction doOnce$1(func, key) {\n    if (doOnceFlags$1[key]) {\n        return;\n    }\n    func();\n    doOnceFlags$1[key] = true;\n}\n\n/* eslint-disable no-console */\nconst Logger = {\n    debug(...logContent) {\n        console.log(...logContent);\n    },\n    warn(message, ...logContent) {\n        console.warn(`AG Charts - ${message}`, ...logContent);\n    },\n    error(message, ...logContent) {\n        if (typeof message === 'object') {\n            console.error(`AG Charts error`, message, ...logContent);\n        }\n        else {\n            console.error(`AG Charts - ${message}`, ...logContent);\n        }\n    },\n    warnOnce(message, ...logContent) {\n        doOnce$1(() => Logger.warn(message, ...logContent), `Logger.warn: ${message}`);\n    },\n    errorOnce(message, ...logContent) {\n        doOnce$1(() => Logger.error(message, ...logContent), `Logger.warn: ${message}`);\n    },\n};\n\nvar __decorate$1W = ( false) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nclass Group extends Node {\n    constructor(opts) {\n        var _a;\n        super();\n        this.opts = opts;\n        this.opacity = 1;\n        this.lastBBox = undefined;\n        const { zIndex, zIndexSubOrder } = opts !== null && opts !== void 0 ? opts : {};\n        this.isContainerNode = true;\n        if (zIndex !== undefined) {\n            this.zIndex = zIndex;\n        }\n        if (zIndexSubOrder !== undefined) {\n            this.zIndexSubOrder = zIndexSubOrder;\n        }\n        this.name = (_a = this.opts) === null || _a === void 0 ? void 0 : _a.name;\n    }\n    zIndexChanged() {\n        var _a;\n        if (this.layer) {\n            (_a = this._layerManager) === null || _a === void 0 ? void 0 : _a.moveLayer(this.layer, this.zIndex, this.zIndexSubOrder);\n        }\n    }\n    isLayer() {\n        return this.layer != null;\n    }\n    _setLayerManager(scene) {\n        var _a, _b;\n        if (this._layerManager && this.layer) {\n            this._layerManager.removeLayer(this.layer);\n            this.layer = undefined;\n        }\n        if (this.layer) {\n            throw new Error('AG Charts - unable to deregister scene rendering layer!');\n        }\n        super._setLayerManager(scene);\n        if (scene && ((_a = this.opts) === null || _a === void 0 ? void 0 : _a.layer)) {\n            const { zIndex, zIndexSubOrder, name } = (_b = this.opts) !== null && _b !== void 0 ? _b : {};\n            const getComputedOpacity = () => this.getComputedOpacity();\n            const getVisibility = () => this.getVisibility();\n            this.layer = scene.addLayer({ zIndex, zIndexSubOrder, name, getComputedOpacity, getVisibility });\n        }\n    }\n    getComputedOpacity() {\n        let opacity = 1;\n        let node = this;\n        do {\n            if (node instanceof Group) {\n                opacity *= node.opacity;\n            }\n        } while ((node = node.parent));\n        return opacity;\n    }\n    getVisibility() {\n        let node = this;\n        let visible = this.visible;\n        while ((node = node.parent)) {\n            if (node.visible) {\n                continue;\n            }\n            visible = node.visible;\n        }\n        return visible;\n    }\n    visibilityChanged() {\n        if (this.layer) {\n            this.layer.enabled = this.visible;\n        }\n    }\n    markDirty(source, type = RedrawType.TRIVIAL) {\n        const parentType = type <= RedrawType.MINOR ? RedrawType.TRIVIAL : type;\n        super.markDirty(source, type, parentType);\n    }\n    // We consider a group to be boundless, thus any point belongs to it.\n    containsPoint(_x, _y) {\n        return true;\n    }\n    computeBBox() {\n        this.computeTransformMatrix();\n        return Group.computeBBox(this.children);\n    }\n    computeTransformedBBox() {\n        return this.computeBBox();\n    }\n    render(renderCtx) {\n        var _a, _b;\n        const { opts: { name = undefined } = {} } = this;\n        const { _debug: { consoleLog = false } = {} } = this;\n        const { dirty, dirtyZIndex, layer, children, clipRect } = this;\n        let { ctx, forceRender, clipBBox } = renderCtx;\n        const { resized, stats } = renderCtx;\n        const canvasCtxTransform = ctx.getTransform();\n        const isDirty = dirty >= RedrawType.MINOR || dirtyZIndex || resized;\n        const isChildDirty = isDirty || children.some((n) => n.dirty >= RedrawType.TRIVIAL);\n        if (name && consoleLog) {\n            Logger.debug({ name, group: this, isDirty, isChildDirty, renderCtx, forceRender });\n        }\n        if (layer) {\n            // If bounding-box of a layer changes, force re-render.\n            const currentBBox = this.computeBBox();\n            if (this.lastBBox === undefined || !this.lastBBox.equals(currentBBox)) {\n                forceRender = true;\n                this.lastBBox = currentBBox;\n            }\n            else if (!currentBBox.isInfinite()) {\n                // bbox for path2D is currently (Infinity) not calculated\n                // If it's not a path2D, turn off forceRender\n                // By default there is no need to force redraw a group which has it's own canvas layer\n                // as the layer is independent of any other layer\n                forceRender = false;\n            }\n        }\n        if (!isDirty && !isChildDirty && !forceRender) {\n            if (name && consoleLog && stats) {\n                const counts = this.nodeCount;\n                Logger.debug({ name, result: 'skipping', renderCtx, counts, group: this });\n            }\n            if (layer && stats) {\n                stats.layersSkipped++;\n                stats.nodesSkipped += this.nodeCount.count;\n            }\n            this.markClean({ recursive: false });\n            // Nothing to do.\n            return;\n        }\n        const groupVisible = this.visible;\n        if (layer) {\n            // Switch context to the canvas layer we use for this group.\n            ctx = layer.context;\n            ctx.save();\n            ctx.resetTransform();\n            forceRender = true;\n            layer.clear();\n            if (clipBBox) {\n                // clipBBox is in the canvas coordinate space, when we hit a layer we apply the new clipping at which point there are no transforms in play\n                const { width, height, x, y } = clipBBox;\n                if (consoleLog) {\n                    Logger.debug({ name, clipBBox, ctxTransform: ctx.getTransform(), renderCtx, group: this });\n                }\n                this.clipCtx(ctx, x, y, width, height);\n            }\n            ctx.setTransform(canvasCtxTransform);\n        }\n        else {\n            // Only apply opacity if this isn't a distinct layer - opacity will be applied\n            // at composition time.\n            ctx.globalAlpha *= this.opacity;\n        }\n        // A group can have `scaling`, `rotation`, `translation` properties\n        // that are applied to the canvas context before children are rendered,\n        // so all children can be transformed at once.\n        this.computeTransformMatrix();\n        this.matrix.toContext(ctx);\n        if (clipRect) {\n            // clipRect is in the group's coordinate space\n            const { x, y, width, height } = clipRect;\n            ctx.save();\n            if (consoleLog) {\n                Logger.debug({ name, clipRect, ctxTransform: ctx.getTransform(), renderCtx, group: this });\n            }\n            this.clipCtx(ctx, x, y, width, height);\n            // clipBBox is in the canvas coordinate space, when we hit a layer we apply the new clipping at which point there are no transforms in play\n            clipBBox = this.matrix.inverse().transformBBox(clipRect);\n        }\n        if (dirtyZIndex) {\n            this.sortChildren();\n            forceRender = true;\n        }\n        // Reduce churn if renderCtx is identical.\n        const renderContextChanged = forceRender !== renderCtx.forceRender || clipBBox !== renderCtx.clipBBox || ctx !== renderCtx.ctx;\n        const childRenderContext = renderContextChanged ? Object.assign(Object.assign({}, renderCtx), { ctx, forceRender, clipBBox }) : renderCtx;\n        // Render visible children.\n        let skipped = 0;\n        for (const child of children) {\n            if (!child.visible || !groupVisible) {\n                // Skip invisible children, but make sure their dirty flag is reset.\n                child.markClean();\n                if (stats)\n                    skipped += child.nodeCount.count;\n                continue;\n            }\n            if (!forceRender && child.dirty === RedrawType.NONE) {\n                // Skip children that don't need to be redrawn.\n                if (stats)\n                    skipped += child.nodeCount.count;\n                continue;\n            }\n            // Render marks this node (and children) as clean - no need to explicitly markClean().\n            ctx.save();\n            child.render(childRenderContext);\n            ctx.restore();\n        }\n        if (stats)\n            stats.nodesSkipped += skipped;\n        // Render marks this node as clean - no need to explicitly markClean().\n        super.render(renderCtx);\n        if (clipRect) {\n            ctx.restore();\n        }\n        if (layer) {\n            if (stats)\n                stats.layersRendered++;\n            ctx.restore();\n            layer.snapshot();\n            // Check for save/restore depth of zero!\n            (_b = (_a = layer.context).verifyDepthZero) === null || _b === void 0 ? void 0 : _b.call(_a);\n        }\n        if (name && consoleLog && stats) {\n            const counts = this.nodeCount;\n            Logger.debug({ name, result: 'rendered', skipped, renderCtx, counts, group: this });\n        }\n    }\n    sortChildren() {\n        this.dirtyZIndex = false;\n        this.children.sort((a, b) => {\n            var _a, _b;\n            return compoundAscending([a.zIndex, ...((_a = a.zIndexSubOrder) !== null && _a !== void 0 ? _a : [undefined, undefined]), a.serialNumber], [b.zIndex, ...((_b = b.zIndexSubOrder) !== null && _b !== void 0 ? _b : [undefined, undefined]), b.serialNumber], ascendingStringNumberUndefined);\n        });\n    }\n    clipCtx(ctx, x, y, width, height) {\n        ctx.beginPath();\n        ctx.moveTo(x, y);\n        ctx.lineTo(x + width, y);\n        ctx.lineTo(x + width, y + height);\n        ctx.lineTo(x, y + height);\n        ctx.closePath();\n        ctx.clip();\n    }\n    static computeBBox(nodes) {\n        let left = Infinity;\n        let right = -Infinity;\n        let top = Infinity;\n        let bottom = -Infinity;\n        nodes.forEach((n) => {\n            if (!n.visible) {\n                return;\n            }\n            const bbox = n.computeTransformedBBox();\n            if (!bbox) {\n                return;\n            }\n            const x = bbox.x;\n            const y = bbox.y;\n            if (x < left) {\n                left = x;\n            }\n            if (y < top) {\n                top = y;\n            }\n            if (x + bbox.width > right) {\n                right = x + bbox.width;\n            }\n            if (y + bbox.height > bottom) {\n                bottom = y + bbox.height;\n            }\n        });\n        return new BBox(left, top, right - left, bottom - top);\n    }\n    /**\n     * Transforms bbox given in the canvas coordinate space to bbox in this group's coordinate space and\n     * sets this group's clipRect to the transformed bbox.\n     * @param bbox clipRect bbox in the canvas coordinate space.\n     */\n    setClipRectInGroupCoordinateSpace(bbox) {\n        this.clipRect = bbox ? this.transformBBox(bbox) : undefined;\n    }\n}\nGroup.className = 'Group';\n__decorate$1W([\n    SceneChangeDetection({\n        convertor: (v) => Math.min(1, Math.max(0, v)),\n    })\n], Group.prototype, \"opacity\", void 0);\n\n/**\n * Wraps a native OffscreenCanvas and overrides its OffscreenCanvasRenderingContext2D to\n * provide resolution independent rendering based on `window.devicePixelRatio`.\n */\nclass HdpiOffscreenCanvas {\n    // The width/height attributes of the Canvas element default to\n    // 300/150 according to w3.org.\n    constructor({ width = 600, height = 300, overrideDevicePixelRatio = undefined }) {\n        this.enabled = true;\n        // `NaN` is deliberate here, so that overrides are always applied\n        // and the `resetTransform` inside the `resize` method works in IE11.\n        this._pixelRatio = NaN;\n        this._width = 0;\n        this._height = 0;\n        this.canvas = new OffscreenCanvas(width, height);\n        this.context = this.canvas.getContext('2d');\n        this.imageSource = this.canvas.transferToImageBitmap();\n        this.setPixelRatio(overrideDevicePixelRatio);\n        this.resize(width, height);\n    }\n    static isSupported() {\n        return window['OffscreenCanvas'] != null;\n    }\n    snapshot() {\n        this.imageSource.close();\n        this.imageSource = this.canvas.transferToImageBitmap();\n    }\n    destroy() {\n        this.imageSource.close();\n        // Workaround memory allocation quirks in iOS Safari by resizing to 0x0 and clearing.\n        // See https://bugs.webkit.org/show_bug.cgi?id=195325.\n        this.canvas.width = 0;\n        this.canvas.height = 0;\n        this.context.clearRect(0, 0, 0, 0);\n    }\n    clear() {\n        this.context.save();\n        this.context.resetTransform();\n        this.context.clearRect(0, 0, this.width, this.height);\n        this.context.restore();\n    }\n    get pixelRatio() {\n        return this._pixelRatio;\n    }\n    /**\n     * Changes the pixel ratio of the Canvas element to the given value,\n     * or uses the window.devicePixelRatio (default), then resizes the Canvas\n     * element accordingly (default).\n     */\n    setPixelRatio(ratio) {\n        let pixelRatio = ratio !== null && ratio !== void 0 ? ratio : window.devicePixelRatio;\n        if (!isDesktop()) {\n            // Mobile browsers have stricter memory limits, we reduce rendering resolution to\n            // improve stability on mobile browsers. iOS Safari 12->16 are pain-points since they\n            // have memory allocation quirks - see https://bugs.webkit.org/show_bug.cgi?id=195325.\n            pixelRatio = 1;\n        }\n        HdpiCanvas.overrideScale(this.context, pixelRatio);\n        this._pixelRatio = pixelRatio;\n    }\n    get width() {\n        return this._width;\n    }\n    get height() {\n        return this._height;\n    }\n    resize(width, height) {\n        if (!(width > 0 && height > 0)) {\n            return;\n        }\n        const { canvas, context, pixelRatio } = this;\n        canvas.width = Math.round(width * pixelRatio);\n        canvas.height = Math.round(height * pixelRatio);\n        context.resetTransform();\n        this._width = width;\n        this._height = height;\n    }\n}\n\nfunction windowValue(name) {\n    /**\n     * Redeclaration of window that is safe for use with Gatsby server-side (webpack) compilation.\n     */\n    const WINDOW = typeof window !== 'undefined'\n        ? window\n        : // typeof global !== 'undefined' ? (global as any) :\n            undefined;\n    return WINDOW === null || WINDOW === void 0 ? void 0 : WINDOW[name];\n}\n\nvar __awaiter$f = ( false) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nfunction buildSceneNodeHighlight() {\n    var _a;\n    let config = (_a = windowValue('agChartsSceneDebug')) !== null && _a !== void 0 ? _a : [];\n    if (typeof config === 'string') {\n        config = [config];\n    }\n    const result = [];\n    config.forEach((name) => {\n        if (name === 'layout') {\n            result.push('seriesRoot', 'legend', 'root', /.*Axis-\\d+-axis.*/);\n        }\n        else {\n            result.push(name);\n        }\n    });\n    return result;\n}\nclass Scene {\n    constructor(opts) {\n        var _a, _b, _c;\n        this.id = createId$1(this);\n        this.layers = [];\n        this._nextZIndex = 0;\n        this._nextLayerId = 0;\n        this._dirty = false;\n        this._root = null;\n        this.debug = {\n            dirtyTree: false,\n            stats: false,\n            renderBoundingBoxes: false,\n            consoleLog: false,\n            sceneNodeHighlight: [],\n        };\n        const { document = window.document, mode = (_a = windowValue('agChartsSceneRenderModel')) !== null && _a !== void 0 ? _a : 'adv-composite', width, height, overrideDevicePixelRatio = undefined, } = opts;\n        this.overrideDevicePixelRatio = overrideDevicePixelRatio;\n        this.opts = { document, mode };\n        this.debug.consoleLog = windowValue('agChartsDebug') === true;\n        this.debug.stats = (_b = windowValue('agChartsSceneStats')) !== null && _b !== void 0 ? _b : false;\n        this.debug.dirtyTree = (_c = windowValue('agChartsSceneDirtyTree')) !== null && _c !== void 0 ? _c : false;\n        this.debug.sceneNodeHighlight = buildSceneNodeHighlight();\n        this.canvas = new HdpiCanvas({ document, width, height, overrideDevicePixelRatio });\n    }\n    set container(value) {\n        this.canvas.container = value;\n    }\n    get container() {\n        return this.canvas.container;\n    }\n    download(fileName, fileFormat) {\n        this.canvas.download(fileName, fileFormat);\n    }\n    getDataURL(type) {\n        return this.canvas.getDataURL(type);\n    }\n    get width() {\n        return this.pendingSize ? this.pendingSize[0] : this.canvas.width;\n    }\n    get height() {\n        return this.pendingSize ? this.pendingSize[1] : this.canvas.height;\n    }\n    resize(width, height) {\n        width = Math.round(width);\n        height = Math.round(height);\n        // HdpiCanvas doesn't allow width/height <= 0.\n        const lessThanZero = width <= 0 || height <= 0;\n        const nan = isNaN(width) || isNaN(height);\n        const unchanged = width === this.width && height === this.height;\n        if (unchanged || nan || lessThanZero) {\n            return false;\n        }\n        this.pendingSize = [width, height];\n        this.markDirty();\n        return true;\n    }\n    addLayer(opts) {\n        var _a;\n        const { mode } = this.opts;\n        const layeredModes = ['composite', 'dom-composite', 'adv-composite'];\n        if (!layeredModes.includes(mode)) {\n            return undefined;\n        }\n        const { zIndex = this._nextZIndex++, name, zIndexSubOrder, getComputedOpacity, getVisibility } = opts;\n        const { width, height, overrideDevicePixelRatio } = this;\n        const domLayer = mode === 'dom-composite';\n        const advLayer = mode === 'adv-composite';\n        const canvas = !advLayer || !HdpiOffscreenCanvas.isSupported()\n            ? new HdpiCanvas({\n                document: this.opts.document,\n                width,\n                height,\n                domLayer,\n                zIndex,\n                name,\n                overrideDevicePixelRatio,\n            })\n            : new HdpiOffscreenCanvas({\n                width,\n                height,\n                overrideDevicePixelRatio,\n            });\n        const newLayer = {\n            id: this._nextLayerId++,\n            name,\n            zIndex,\n            zIndexSubOrder,\n            canvas,\n            getComputedOpacity,\n            getVisibility,\n        };\n        if (zIndex >= this._nextZIndex) {\n            this._nextZIndex = zIndex + 1;\n        }\n        this.layers.push(newLayer);\n        this.sortLayers();\n        if (domLayer) {\n            const domCanvases = this.layers\n                .map((v) => v.canvas)\n                .filter((v) => v instanceof HdpiCanvas);\n            const newLayerIndex = domCanvases.findIndex((v) => v === canvas);\n            const lastLayer = (_a = domCanvases[newLayerIndex - 1]) !== null && _a !== void 0 ? _a : this.canvas;\n            lastLayer.element.insertAdjacentElement('afterend', canvas.element);\n        }\n        if (this.debug.consoleLog) {\n            Logger.debug({ layers: this.layers });\n        }\n        return newLayer.canvas;\n    }\n    removeLayer(canvas) {\n        const index = this.layers.findIndex((l) => l.canvas === canvas);\n        if (index >= 0) {\n            this.layers.splice(index, 1);\n            canvas.destroy();\n            this.markDirty();\n            if (this.debug.consoleLog) {\n                Logger.debug({ layers: this.layers });\n            }\n        }\n    }\n    moveLayer(canvas, newZIndex, newZIndexSubOrder) {\n        const layer = this.layers.find((l) => l.canvas === canvas);\n        if (layer) {\n            layer.zIndex = newZIndex;\n            layer.zIndexSubOrder = newZIndexSubOrder;\n            this.sortLayers();\n            this.markDirty();\n            if (this.debug.consoleLog) {\n                Logger.debug({ layers: this.layers });\n            }\n        }\n    }\n    sortLayers() {\n        this.layers.sort((a, b) => {\n            var _a, _b;\n            return compoundAscending([a.zIndex, ...((_a = a.zIndexSubOrder) !== null && _a !== void 0 ? _a : [undefined, undefined]), a.id], [b.zIndex, ...((_b = b.zIndexSubOrder) !== null && _b !== void 0 ? _b : [undefined, undefined]), b.id], ascendingStringNumberUndefined);\n        });\n    }\n    markDirty() {\n        this._dirty = true;\n    }\n    get dirty() {\n        return this._dirty;\n    }\n    set root(node) {\n        if (node === this._root) {\n            return;\n        }\n        if (this._root) {\n            this._root._setLayerManager();\n        }\n        this._root = node;\n        if (node) {\n            // If `node` is the root node of another scene ...\n            if (node.parent === null && node.layerManager && node.layerManager !== this) {\n                node.layerManager.root = null;\n            }\n            node._setLayerManager(this);\n        }\n        this.markDirty();\n    }\n    get root() {\n        return this._root;\n    }\n    /** Alternative to destroy() that preserves re-usable resources. */\n    strip() {\n        const { layers } = this;\n        for (const layer of layers) {\n            layer.canvas.destroy();\n            delete layer['canvas'];\n        }\n        layers.splice(0, layers.length);\n        this.root = null;\n        this._dirty = false;\n        this.canvas.context.resetTransform();\n    }\n    destroy() {\n        this.container = undefined;\n        this.strip();\n        this.canvas.destroy();\n        Object.assign(this, { canvas: undefined, ctx: undefined });\n    }\n    render(opts) {\n        var _a;\n        return __awaiter$f(this, void 0, void 0, function* () {\n            const { debugSplitTimes = [performance.now()], extraDebugStats = {} } = opts !== null && opts !== void 0 ? opts : {};\n            const { canvas, canvas: { context: ctx }, root, layers, pendingSize, opts: { mode }, } = this;\n            if (pendingSize) {\n                this.canvas.resize(...pendingSize);\n                this.layers.forEach((layer) => layer.canvas.resize(...pendingSize));\n                this.pendingSize = undefined;\n            }\n            if (root && !root.visible) {\n                this._dirty = false;\n                return;\n            }\n            if (root && !this.dirty) {\n                if (this.debug.consoleLog) {\n                    Logger.debug('no-op', {\n                        redrawType: RedrawType[root.dirty],\n                        tree: this.buildTree(root),\n                    });\n                }\n                this.debugStats(debugSplitTimes, ctx, undefined, extraDebugStats);\n                return;\n            }\n            const renderCtx = {\n                ctx,\n                forceRender: true,\n                resized: !!pendingSize,\n                debugNodes: {},\n            };\n            if (this.debug.stats === 'detailed') {\n                renderCtx.stats = { layersRendered: 0, layersSkipped: 0, nodesRendered: 0, nodesSkipped: 0 };\n            }\n            let canvasCleared = false;\n            if (!root || root.dirty >= RedrawType.TRIVIAL) {\n                // start with a blank canvas, clear previous drawing\n                canvasCleared = true;\n                canvas.clear();\n            }\n            if (root && this.debug.dirtyTree) {\n                const { dirtyTree, paths } = this.buildDirtyTree(root);\n                Logger.debug({ dirtyTree, paths });\n            }\n            if (root && canvasCleared) {\n                if (this.debug.consoleLog) {\n                    Logger.debug('before', {\n                        redrawType: RedrawType[root.dirty],\n                        canvasCleared,\n                        tree: this.buildTree(root),\n                    });\n                }\n                if (root.visible) {\n                    ctx.save();\n                    root.render(renderCtx);\n                    ctx.restore();\n                }\n            }\n            if (mode !== 'dom-composite' && layers.length > 0 && canvasCleared) {\n                this.sortLayers();\n                ctx.save();\n                ctx.setTransform(1 / canvas.pixelRatio, 0, 0, 1 / canvas.pixelRatio, 0, 0);\n                layers.forEach(({ canvas: { imageSource, enabled }, getComputedOpacity, getVisibility }) => {\n                    if (!enabled || !getVisibility()) {\n                        return;\n                    }\n                    ctx.globalAlpha = getComputedOpacity();\n                    ctx.drawImage(imageSource, 0, 0);\n                });\n                ctx.restore();\n            }\n            // Check for save/restore depth of zero!\n            (_a = ctx.verifyDepthZero) === null || _a === void 0 ? void 0 : _a.call(ctx);\n            this._dirty = false;\n            this.debugStats(debugSplitTimes, ctx, renderCtx.stats, extraDebugStats);\n            this.debugSceneNodeHighlight(ctx, this.debug.sceneNodeHighlight, renderCtx.debugNodes);\n            if (root && this.debug.consoleLog) {\n                Logger.debug('after', { redrawType: RedrawType[root.dirty], canvasCleared, tree: this.buildTree(root) });\n            }\n        });\n    }\n    debugStats(debugSplitTimes, ctx, renderCtxStats, extraDebugStats = {}) {\n        const end = performance.now();\n        if (this.debug.stats) {\n            const start = debugSplitTimes[0];\n            debugSplitTimes.push(end);\n            const pct = (rendered, skipped) => {\n                const total = rendered + skipped;\n                return `${rendered} / ${total} (${Math.round((100 * rendered) / total)}%)`;\n            };\n            const time = (start, end) => {\n                return `${Math.round((end - start) * 100) / 100}ms`;\n            };\n            const { layersRendered = 0, layersSkipped = 0, nodesRendered = 0, nodesSkipped = 0 } = renderCtxStats !== null && renderCtxStats !== void 0 ? renderCtxStats : {};\n            const splits = debugSplitTimes\n                .map((t, i) => (i > 0 ? time(debugSplitTimes[i - 1], t) : null))\n                .filter((v) => v != null)\n                .join(' + ');\n            const extras = Object.entries(extraDebugStats)\n                .map(([k, v]) => `${k}: ${v}`)\n                .join(' ; ');\n            const stats = [\n                `${time(start, end)} (${splits})`,\n                `${extras}`,\n                this.debug.stats === 'detailed' ? `Layers: ${pct(layersRendered, layersSkipped)}` : null,\n                this.debug.stats === 'detailed' ? `Nodes: ${pct(nodesRendered, nodesSkipped)}` : null,\n            ].filter((v) => v != null);\n            const statsSize = stats.map((t) => [t, HdpiCanvas.getTextSize(t, ctx.font)]);\n            const width = Math.max(...statsSize.map(([, { width }]) => width));\n            const height = statsSize.reduce((total, [, { height }]) => total + height, 0);\n            ctx.save();\n            ctx.fillStyle = 'white';\n            ctx.fillRect(0, 0, width, height);\n            ctx.fillStyle = 'black';\n            let y = 0;\n            for (const [stat, size] of statsSize) {\n                y += size.height;\n                ctx.fillText(stat, 2, y);\n            }\n            ctx.restore();\n        }\n    }\n    debugSceneNodeHighlight(ctx, sceneNodeHighlight, debugNodes) {\n        var _a;\n        const regexpPredicate = (matcher) => (n) => {\n            if (matcher.test(n.id)) {\n                return true;\n            }\n            return n instanceof Group && n.name != null && matcher.test(n.name);\n        };\n        const stringPredicate = (match) => (n) => {\n            if (match === n.id) {\n                return true;\n            }\n            return n instanceof Group && n.name != null && match === n.name;\n        };\n        for (const next of sceneNodeHighlight) {\n            if (typeof next === 'string' && debugNodes[next] != null)\n                continue;\n            const predicate = typeof next === 'string' ? stringPredicate(next) : regexpPredicate(next);\n            const nodes = (_a = this.root) === null || _a === void 0 ? void 0 : _a.findNodes(predicate);\n            if (!nodes || nodes.length === 0) {\n                Logger.debug(`no debugging node with id [${next}] in scene graph.`);\n                continue;\n            }\n            for (const node of nodes) {\n                if (node instanceof Group && node.name) {\n                    debugNodes[node.name] = node;\n                }\n                else {\n                    debugNodes[node.id] = node;\n                }\n            }\n        }\n        ctx.save();\n        for (const [name, node] of Object.entries(debugNodes)) {\n            const bbox = node.computeTransformedBBox();\n            if (!bbox) {\n                Logger.debug(`no bbox for debugged node [${name}].`);\n                continue;\n            }\n            ctx.globalAlpha = 0.8;\n            ctx.strokeStyle = 'red';\n            ctx.lineWidth = 1;\n            ctx.strokeRect(bbox.x, bbox.y, bbox.width, bbox.height);\n            ctx.fillStyle = 'red';\n            ctx.strokeStyle = 'white';\n            ctx.font = '16px sans-serif';\n            ctx.textBaseline = 'top';\n            ctx.textAlign = 'left';\n            ctx.lineWidth = 2;\n            ctx.strokeText(name, bbox.x, bbox.y, bbox.width);\n            ctx.fillText(name, bbox.x, bbox.y, bbox.width);\n        }\n        ctx.restore();\n    }\n    buildTree(node) {\n        var _a;\n        const name = (_a = (node instanceof Group ? node.name : null)) !== null && _a !== void 0 ? _a : node.id;\n        return Object.assign({ name,\n            node, dirty: RedrawType[node.dirty] }, node.children\n            .map((c) => this.buildTree(c))\n            .reduce((result, childTree) => {\n            let { name: treeNodeName } = childTree;\n            const { node: { visible, opacity, zIndex, zIndexSubOrder }, node: childNode, } = childTree;\n            if (!visible || opacity <= 0) {\n                treeNodeName = `(${treeNodeName})`;\n            }\n            if (childNode instanceof Group && childNode.isLayer()) {\n                treeNodeName = `*${treeNodeName}*`;\n            }\n            const key = [\n                `${treeNodeName !== null && treeNodeName !== void 0 ? treeNodeName : '<unknown>'}`,\n                `z: ${zIndex}`,\n                zIndexSubOrder && `zo: ${zIndexSubOrder.join(' / ')}`,\n            ]\n                .filter((v) => !!v)\n                .join(' ');\n            result[key] = childTree;\n            return result;\n        }, {}));\n    }\n    buildDirtyTree(node) {\n        var _a;\n        if (node.dirty === RedrawType.NONE) {\n            return { dirtyTree: {}, paths: [] };\n        }\n        const childrenDirtyTree = node.children.map((c) => this.buildDirtyTree(c)).filter((c) => c.paths.length > 0);\n        const name = (_a = (node instanceof Group ? node.name : null)) !== null && _a !== void 0 ? _a : node.id;\n        const paths = childrenDirtyTree.length === 0\n            ? [name]\n            : childrenDirtyTree\n                .map((c) => c.paths)\n                .reduce((r, p) => r.concat(p), [])\n                .map((p) => `${name}.${p}`);\n        return {\n            dirtyTree: Object.assign({ name,\n                node, dirty: RedrawType[node.dirty] }, childrenDirtyTree\n                .map((c) => c.dirtyTree)\n                .filter((t) => t.dirty !== undefined)\n                .reduce((result, childTree) => {\n                var _a;\n                result[(_a = childTree.name) !== null && _a !== void 0 ? _a : '<unknown>'] = childTree;\n                return result;\n            }, {})),\n            paths,\n        };\n    }\n}\nScene.className = 'Scene';\n\nclass Gradient {\n    constructor() {\n        this.stops = [];\n    }\n}\n\nconst twoPi = Math.PI * 2;\n/**\n * Normalize the given angle to be in the [0, 2π) interval.\n * @param radians Angle in radians.\n */\nfunction normalizeAngle360(radians) {\n    radians %= twoPi;\n    radians += twoPi;\n    radians %= twoPi;\n    return radians;\n}\nfunction normalizeAngle360Inclusive(radians) {\n    radians %= twoPi;\n    radians += twoPi;\n    if (radians !== twoPi) {\n        radians %= twoPi;\n    }\n    return radians;\n}\n/**\n * Normalize the given angle to be in the [-π, π) interval.\n * @param radians Angle in radians.\n */\nfunction normalizeAngle180(radians) {\n    radians %= twoPi;\n    if (radians < -Math.PI) {\n        radians += twoPi;\n    }\n    else if (radians >= Math.PI) {\n        radians -= twoPi;\n    }\n    return radians;\n}\nfunction toRadians$1(degrees) {\n    return (degrees / 180) * Math.PI;\n}\nfunction toDegrees(radians) {\n    return (radians / Math.PI) * 180;\n}\n\nclass LinearGradient extends Gradient {\n    constructor() {\n        super(...arguments);\n        this.angle = 0;\n    }\n    createGradient(ctx, bbox) {\n        // Gradient 0° angle starts at top according to CSS spec\n        const angleOffset = 90;\n        const { stops, angle } = this;\n        const radians = normalizeAngle360(toRadians$1(angle + angleOffset));\n        const cos = Math.cos(radians);\n        const sin = Math.sin(radians);\n        const w = bbox.width;\n        const h = bbox.height;\n        const cx = bbox.x + w * 0.5;\n        const cy = bbox.y + h * 0.5;\n        if (w > 0 && h > 0) {\n            const diagonal = Math.sqrt(h * h + w * w) / 2;\n            const diagonalAngle = Math.atan2(h, w);\n            let quarteredAngle;\n            if (radians < Math.PI / 2) {\n                quarteredAngle = radians;\n            }\n            else if (radians < Math.PI) {\n                quarteredAngle = Math.PI - radians;\n            }\n            else if (radians < (3 * Math.PI) / 2) {\n                quarteredAngle = radians - Math.PI;\n            }\n            else {\n                quarteredAngle = 2 * Math.PI - radians;\n            }\n            const l = diagonal * Math.abs(Math.cos(quarteredAngle - diagonalAngle));\n            const gradient = ctx.createLinearGradient(cx + cos * l, cy + sin * l, cx - cos * l, cy - sin * l);\n            stops.forEach((stop) => {\n                gradient.addColorStop(stop.offset, stop.color);\n            });\n            return gradient;\n        }\n        return 'black';\n    }\n}\n\nvar __decorate$1V = ( false) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nconst LINEAR_GRADIENT_REGEXP = /^linear-gradient\\((.*?)deg,\\s*(.*?)\\s*\\)$/i;\nclass Shape extends Node {\n    constructor() {\n        super(...arguments);\n        this.lastInstanceId = 0;\n        this.fillOpacity = 1;\n        this.strokeOpacity = 1;\n        this.fill = Shape.defaultStyles.fill;\n        /**\n         * Note that `strokeStyle = null` means invisible stroke,\n         * while `lineWidth = 0` means no stroke, and sometimes this can mean different things.\n         * For example, a rect shape with an invisible stroke may not align to the pixel grid\n         * properly because the stroke affects the rules of alignment, and arc shapes forming\n         * a pie chart will have a gap between them if they have an invisible stroke, whereas\n         * there would be not gap if there was no stroke at all.\n         * The preferred way of making the stroke invisible is setting the `lineWidth` to zero,\n         * unless specific looks that is achieved by having an invisible stroke is desired.\n         */\n        this.stroke = Shape.defaultStyles.stroke;\n        this.strokeWidth = Shape.defaultStyles.strokeWidth;\n        this.lineDash = Shape.defaultStyles.lineDash;\n        this.lineDashOffset = Shape.defaultStyles.lineDashOffset;\n        this.lineCap = Shape.defaultStyles.lineCap;\n        this.lineJoin = Shape.defaultStyles.lineJoin;\n        this.opacity = Shape.defaultStyles.opacity;\n        this.fillShadow = Shape.defaultStyles.fillShadow;\n    }\n    /**\n     * Creates a light-weight instance of the given shape (that serves as a template).\n     * The created instance only stores the properites set on the instance itself\n     * and the rest of the properties come via the prototype chain from the template.\n     * This can greatly reduce memory usage in cases where one has many similar shapes,\n     * for example, circles of different size, position and color. The exact memory usage\n     * reduction will depend on the size of the template and the number of own properties\n     * set on its lightweight instances, but will typically be around an order of magnitude\n     * or more.\n     *\n     * Note: template shapes are not supposed to be part of the scene graph (they should not\n     * have a parent).\n     *\n     * @param template\n     */\n    static createInstance(template) {\n        const shape = Object.create(template);\n        shape._setParent(undefined);\n        shape.id = template.id + '-Instance-' + String(++template.lastInstanceId);\n        return shape;\n    }\n    /**\n     * Restores the default styles introduced by this subclass.\n     */\n    restoreOwnStyles() {\n        const styles = this.constructor.defaultStyles;\n        const keys = Object.getOwnPropertyNames(styles);\n        // getOwnPropertyNames is about 2.5 times faster than\n        // for..in with the hasOwnProperty check and in this\n        // case, where most properties are inherited, can be\n        // more then an order of magnitude faster.\n        for (let i = 0, n = keys.length; i < n; i++) {\n            const key = keys[i];\n            this[key] = styles[key];\n        }\n    }\n    restoreAllStyles() {\n        const styles = this.constructor.defaultStyles;\n        for (const property in styles) {\n            this[property] = styles[property];\n        }\n    }\n    /**\n     * Restores the base class default styles that have been overridden by this subclass.\n     */\n    restoreOverriddenStyles() {\n        const styles = this.constructor.defaultStyles;\n        const protoStyles = Object.getPrototypeOf(styles);\n        for (const property in styles) {\n            if (Object.prototype.hasOwnProperty.call(styles, property) &&\n                Object.prototype.hasOwnProperty.call(protoStyles, property)) {\n                this[property] = styles[property];\n            }\n        }\n    }\n    updateGradient() {\n        const { fill } = this;\n        let linearGradientMatch;\n        if ((fill === null || fill === void 0 ? void 0 : fill.startsWith('linear-gradient')) && (linearGradientMatch = LINEAR_GRADIENT_REGEXP.exec(fill))) {\n            const angle = parseFloat(linearGradientMatch[1]);\n            const colors = [];\n            const colorsPart = linearGradientMatch[2];\n            const colorRegex = /(#[0-9a-f]+)|(rgba?\\(.+?\\))|([a-z]+)/gi;\n            let c;\n            while ((c = colorRegex.exec(colorsPart))) {\n                colors.push(c[0]);\n            }\n            this.gradient = new LinearGradient();\n            this.gradient.angle = angle;\n            this.gradient.stops = colors.map((color, index) => {\n                const offset = index / (colors.length - 1);\n                return { offset, color };\n            });\n        }\n        else {\n            this.gradient = undefined;\n        }\n    }\n    /**\n     * Returns a device-pixel aligned coordinate (or length if length is supplied).\n     *\n     * NOTE: Not suitable for strokes, since the stroke needs to be offset to the middle\n     * of a device pixel.\n     */\n    align(start, length) {\n        var _a, _b, _c;\n        const pixelRatio = (_c = (_b = (_a = this.layerManager) === null || _a === void 0 ? void 0 : _a.canvas) === null || _b === void 0 ? void 0 : _b.pixelRatio) !== null && _c !== void 0 ? _c : 1;\n        const alignedStart = Math.round(start * pixelRatio) / pixelRatio;\n        if (length == undefined) {\n            return alignedStart;\n        }\n        if (length === 0) {\n            return 0;\n        }\n        if (length < 1) {\n            // Avoid hiding crisp shapes\n            return Math.ceil(length * pixelRatio) / pixelRatio;\n        }\n        // Account for the rounding of alignedStart by increasing length to compensate before\n        // alignment.\n        return Math.round((length + start) * pixelRatio) / pixelRatio - alignedStart;\n    }\n    fillStroke(ctx) {\n        this.renderFill(ctx);\n        this.renderStroke(ctx);\n    }\n    renderFill(ctx) {\n        if (this.fill) {\n            const { globalAlpha } = ctx;\n            this.applyFill(ctx);\n            this.applyFillAlpha(ctx);\n            this.applyShadow(ctx);\n            ctx.fill();\n            ctx.globalAlpha = globalAlpha;\n        }\n        ctx.shadowColor = 'rgba(0, 0, 0, 0)';\n    }\n    applyFill(ctx) {\n        if (this.gradient) {\n            ctx.fillStyle = this.gradient.createGradient(ctx, this.computeBBox());\n        }\n        else {\n            ctx.fillStyle = this.fill;\n        }\n    }\n    applyFillAlpha(ctx) {\n        const { globalAlpha } = ctx;\n        ctx.globalAlpha = globalAlpha * this.opacity * this.fillOpacity;\n    }\n    applyShadow(ctx) {\n        var _a, _b;\n        // The canvas context scaling (depends on the device's pixel ratio)\n        // has no effect on shadows, so we have to account for the pixel ratio\n        // manually here.\n        const pixelRatio = (_b = (_a = this.layerManager) === null || _a === void 0 ? void 0 : _a.canvas.pixelRatio) !== null && _b !== void 0 ? _b : 1;\n        const fillShadow = this.fillShadow;\n        if (fillShadow === null || fillShadow === void 0 ? void 0 : fillShadow.enabled) {\n            ctx.shadowColor = fillShadow.color;\n            ctx.shadowOffsetX = fillShadow.xOffset * pixelRatio;\n            ctx.shadowOffsetY = fillShadow.yOffset * pixelRatio;\n            ctx.shadowBlur = fillShadow.blur * pixelRatio;\n        }\n    }\n    renderStroke(ctx) {\n        if (this.stroke && this.strokeWidth) {\n            const { globalAlpha } = ctx;\n            ctx.strokeStyle = this.stroke;\n            ctx.globalAlpha = globalAlpha * this.opacity * this.strokeOpacity;\n            ctx.lineWidth = this.strokeWidth;\n            if (this.lineDash) {\n                ctx.setLineDash(this.lineDash);\n            }\n            if (this.lineDashOffset) {\n                ctx.lineDashOffset = this.lineDashOffset;\n            }\n            if (this.lineCap) {\n                ctx.lineCap = this.lineCap;\n            }\n            if (this.lineJoin) {\n                ctx.lineJoin = this.lineJoin;\n            }\n            ctx.stroke();\n            ctx.globalAlpha = globalAlpha;\n        }\n    }\n    containsPoint(x, y) {\n        return this.isPointInPath(x, y);\n    }\n}\n/**\n * Defaults for style properties. Note that properties that affect the position\n * and shape of the node are not considered style properties, for example:\n * `x`, `y`, `width`, `height`, `radius`, `rotation`, etc.\n * Can be used to reset to the original styling after some custom styling\n * has been applied (using the `restoreOwnStyles` and `restoreAllStyles` methods).\n * These static defaults are meant to be inherited by subclasses.\n */\nShape.defaultStyles = Object.assign({}, {\n    fill: 'black',\n    stroke: undefined,\n    strokeWidth: 0,\n    lineDash: undefined,\n    lineDashOffset: 0,\n    lineCap: undefined,\n    lineJoin: undefined,\n    opacity: 1,\n    fillShadow: undefined,\n});\n__decorate$1V([\n    SceneChangeDetection({ redraw: RedrawType.MINOR })\n], Shape.prototype, \"fillOpacity\", void 0);\n__decorate$1V([\n    SceneChangeDetection({ redraw: RedrawType.MINOR })\n], Shape.prototype, \"strokeOpacity\", void 0);\n__decorate$1V([\n    SceneChangeDetection({ redraw: RedrawType.MINOR, changeCb: (s) => s.updateGradient() })\n], Shape.prototype, \"fill\", void 0);\n__decorate$1V([\n    SceneChangeDetection({ redraw: RedrawType.MINOR })\n], Shape.prototype, \"stroke\", void 0);\n__decorate$1V([\n    SceneChangeDetection({ redraw: RedrawType.MINOR })\n], Shape.prototype, \"strokeWidth\", void 0);\n__decorate$1V([\n    SceneChangeDetection({ redraw: RedrawType.MINOR })\n], Shape.prototype, \"lineDash\", void 0);\n__decorate$1V([\n    SceneChangeDetection({ redraw: RedrawType.MINOR })\n], Shape.prototype, \"lineDashOffset\", void 0);\n__decorate$1V([\n    SceneChangeDetection({ redraw: RedrawType.MINOR })\n], Shape.prototype, \"lineCap\", void 0);\n__decorate$1V([\n    SceneChangeDetection({ redraw: RedrawType.MINOR })\n], Shape.prototype, \"lineJoin\", void 0);\n__decorate$1V([\n    SceneChangeDetection({\n        redraw: RedrawType.MINOR,\n        convertor: (v) => Math.min(1, Math.max(0, v)),\n    })\n], Shape.prototype, \"opacity\", void 0);\n__decorate$1V([\n    SceneChangeDetection({ redraw: RedrawType.MINOR, checkDirtyOnAssignment: true })\n], Shape.prototype, \"fillShadow\", void 0);\n\nvar __decorate$1U = ( false) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nconst ellipsis = '\\u2026';\nfunction SceneFontChangeDetection(opts) {\n    const { redraw = RedrawType.MAJOR, changeCb } = opts !== null && opts !== void 0 ? opts : {};\n    return SceneChangeDetection({ redraw, type: 'font', changeCb });\n}\nclass Text extends Shape {\n    constructor() {\n        super(...arguments);\n        this.x = 0;\n        this.y = 0;\n        this.lines = [];\n        this.text = undefined;\n        this._dirtyFont = true;\n        this.fontSize = 10;\n        this.fontFamily = 'sans-serif';\n        this.textAlign = Text.defaultStyles.textAlign;\n        this.textBaseline = Text.defaultStyles.textBaseline;\n        // TextMetrics are used if lineHeight is not defined.\n        this.lineHeight = undefined;\n    }\n    _setLines() {\n        this.lines = splitText(this.text);\n    }\n    get font() {\n        if (this._dirtyFont) {\n            this._dirtyFont = false;\n            this._font = getFont(this);\n        }\n        return this._font;\n    }\n    computeBBox() {\n        return HdpiCanvas.has.textMetrics\n            ? getPreciseBBox(this.lines, this.x, this.y, this)\n            : getApproximateBBox(this.lines, this.x, this.y, this);\n    }\n    getLineHeight(line) {\n        var _a, _b;\n        if (this.lineHeight)\n            return this.lineHeight;\n        if (HdpiCanvas.has.textMetrics) {\n            const metrics = HdpiCanvas.measureText(line, this.font, this.textBaseline, this.textAlign);\n            return (((_a = metrics.fontBoundingBoxAscent) !== null && _a !== void 0 ? _a : metrics.emHeightAscent) +\n                ((_b = metrics.fontBoundingBoxDescent) !== null && _b !== void 0 ? _b : metrics.emHeightDescent));\n        }\n        return HdpiCanvas.getTextSize(line, this.font).height;\n    }\n    isPointInPath(x, y) {\n        const point = this.transformPoint(x, y);\n        const bbox = this.computeBBox();\n        return bbox ? bbox.containsPoint(point.x, point.y) : false;\n    }\n    render(renderCtx) {\n        const { ctx, forceRender, stats } = renderCtx;\n        if (this.dirty === RedrawType.NONE && !forceRender) {\n            if (stats)\n                stats.nodesSkipped += this.nodeCount.count;\n            return;\n        }\n        if (!this.lines.length || !this.layerManager) {\n            if (stats)\n                stats.nodesSkipped += this.nodeCount.count;\n            return;\n        }\n        this.computeTransformMatrix();\n        this.matrix.toContext(ctx);\n        const { fill, stroke, strokeWidth } = this;\n        ctx.font = this.font;\n        ctx.textAlign = this.textAlign;\n        ctx.textBaseline = this.textBaseline;\n        const pixelRatio = this.layerManager.canvas.pixelRatio || 1;\n        const { globalAlpha } = ctx;\n        if (fill) {\n            ctx.fillStyle = fill;\n            ctx.globalAlpha = globalAlpha * this.opacity * this.fillOpacity;\n            const { fillShadow } = this;\n            if (fillShadow === null || fillShadow === void 0 ? void 0 : fillShadow.enabled) {\n                ctx.shadowColor = fillShadow.color;\n                ctx.shadowOffsetX = fillShadow.xOffset * pixelRatio;\n                ctx.shadowOffsetY = fillShadow.yOffset * pixelRatio;\n                ctx.shadowBlur = fillShadow.blur * pixelRatio;\n            }\n            this.renderLines((line, x, y) => ctx.fillText(line, x, y));\n        }\n        if (stroke && strokeWidth) {\n            ctx.strokeStyle = stroke;\n            ctx.lineWidth = strokeWidth;\n            ctx.globalAlpha = globalAlpha * this.opacity * this.strokeOpacity;\n            const { lineDash, lineDashOffset, lineCap, lineJoin } = this;\n            if (lineDash) {\n                ctx.setLineDash(lineDash);\n            }\n            if (lineDashOffset) {\n                ctx.lineDashOffset = lineDashOffset;\n            }\n            if (lineCap) {\n                ctx.lineCap = lineCap;\n            }\n            if (lineJoin) {\n                ctx.lineJoin = lineJoin;\n            }\n            this.renderLines((line, x, y) => ctx.strokeText(line, x, y));\n        }\n        super.render(renderCtx);\n    }\n    renderLines(renderCallback) {\n        const { lines, x, y } = this;\n        const lineHeights = this.lines.map((line) => this.getLineHeight(line));\n        const totalHeight = lineHeights.reduce((a, b) => a + b, 0);\n        let offsetY = -(totalHeight - lineHeights[0]) * getVerticalOffset(this.textBaseline);\n        for (let i = 0; i < lines.length; i++) {\n            renderCallback(lines[i], x, y + offsetY);\n            offsetY += lineHeights[i];\n        }\n    }\n    static wrap(text, maxWidth, maxHeight, textProps, wrapping) {\n        const font = getFont(textProps);\n        const measurer = createTextMeasurer(font);\n        const lines = text.split(/\\r?\\n/g);\n        if (lines.length === 0) {\n            return '';\n        }\n        if (wrapping === 'never') {\n            return Text.truncateLine(lines[0], maxWidth, measurer, false);\n        }\n        const result = [];\n        let cumulativeHeight = 0;\n        for (const line of lines) {\n            const wrappedLine = Text.wrapLine(line, maxWidth, maxHeight, measurer, textProps, wrapping, cumulativeHeight);\n            result.push(wrappedLine.result);\n            cumulativeHeight = wrappedLine.cumulativeHeight;\n            if (wrappedLine.truncated) {\n                break;\n            }\n        }\n        return result.join('\\n').trim();\n    }\n    static wrapLine(text, maxWidth, maxHeight, measurer, textProps, wrapping, cumulativeHeight) {\n        text = text.trim();\n        if (!text) {\n            return { result: '', truncated: false, cumulativeHeight };\n        }\n        const initialSize = measurer.size(text);\n        if (initialSize.width <= maxWidth) {\n            // Text fits into a single line\n            return { result: text, truncated: false, cumulativeHeight: cumulativeHeight + initialSize.height };\n        }\n        if (initialSize.height > maxHeight || measurer.width('W') > maxWidth) {\n            // Not enough space for a single line or character\n            return { result: '', truncated: true, cumulativeHeight };\n        }\n        const words = text.split(/\\s+/g);\n        const wrapResult = Text.wrapLineSequentially(words, maxWidth, maxHeight, measurer, textProps, wrapping, cumulativeHeight);\n        cumulativeHeight = wrapResult.cumulativeHeight;\n        let { lines } = wrapResult;\n        if (!(wrapResult.wordsBrokenOrTruncated || wrapResult.linesTruncated)) {\n            // If no word breaks or truncations, try the balanced wrapping\n            const linesCount = wrapResult.lines.length;\n            const balanced = Text.wrapLineBalanced(words, maxWidth, measurer, linesCount);\n            if (balanced.length === lines.length) {\n                // Some lines can't be balanced properly because of unusually long words\n                lines = balanced;\n            }\n        }\n        const wrappedText = lines.map((ln) => ln.join(' ')).join('\\n');\n        return { result: wrappedText, truncated: wrapResult.linesTruncated, cumulativeHeight };\n    }\n    static breakWord(word, firstLineWidth, maxWidth, hyphens, measurer) {\n        const isPunctuationAt = (index) => Text.punctuationMarks.includes(word[index]);\n        const h = hyphens ? measurer.width('-') : 0;\n        const breaks = [];\n        let partWidth = 0;\n        let p = 0;\n        for (let i = 0; i < word.length; i++) {\n            const c = word[i];\n            const w = measurer.width(c);\n            const limit = p === 0 ? firstLineWidth : maxWidth;\n            if (partWidth + w + h > limit) {\n                breaks.push(i);\n                partWidth = 0;\n                p++;\n            }\n            partWidth += w;\n        }\n        const parts = [];\n        let start = 0;\n        for (const index of breaks) {\n            let part = word.substring(start, index);\n            if (hyphens && part.length > 0 && !isPunctuationAt(index - 1) && !isPunctuationAt(index)) {\n                part += '-';\n            }\n            parts.push(part);\n            start = index;\n        }\n        parts.push(word.substring(start));\n        return parts;\n    }\n    static truncateLine(text, maxWidth, measurer, forceEllipsis) {\n        const lineWidth = measurer.width(text);\n        if (lineWidth < maxWidth && !forceEllipsis) {\n            return text;\n        }\n        const ellipsisWidth = measurer.width(ellipsis);\n        if (lineWidth + ellipsisWidth <= maxWidth) {\n            return `${text}${ellipsis}`;\n        }\n        let index = Math.floor((text.length * maxWidth) / lineWidth) + 1;\n        let trunc;\n        let truncWidth;\n        do {\n            trunc = text.substring(0, index);\n            truncWidth = measurer.width(trunc);\n        } while (--index >= 0 && truncWidth + ellipsisWidth > maxWidth);\n        return `${trunc}${ellipsis}`;\n    }\n    static wrapLineSequentially(words, maxWidth, maxHeight, measurer, textProps, wrapping, cumulativeHeight) {\n        const { fontSize, lineHeight = fontSize * Text.defaultLineHeightRatio } = textProps;\n        const breakWord = wrapping === 'always' || wrapping === 'hyphenate';\n        const hyphenate = wrapping === 'hyphenate';\n        const spaceWidth = measurer.width(' ');\n        let wordsBrokenOrTruncated = false;\n        let linesTruncated = false;\n        const lines = [];\n        let currentLine = [];\n        let lineWidth = 0;\n        const addNewLine = () => {\n            const expectedHeight = cumulativeHeight + lineHeight;\n            if (expectedHeight >= maxHeight) {\n                // Truncate the last line\n                const lastLine = currentLine.join(' ');\n                const trunc = Text.truncateLine(lastLine, maxWidth, measurer, true);\n                currentLine.splice(0, currentLine.length, trunc);\n                linesTruncated = true;\n                return false;\n            }\n            // Add new line\n            currentLine = [];\n            lineWidth = 0;\n            cumulativeHeight = expectedHeight;\n            lines.push(currentLine);\n            return true;\n        };\n        if (!addNewLine()) {\n            return { lines, linesTruncated: true, wordsBrokenOrTruncated, cumulativeHeight };\n        }\n        for (let i = 0; i < words.length; i++) {\n            const word = words[i];\n            const wordWidth = measurer.width(word);\n            const expectedSpaceWidth = currentLine.length === 0 ? 0 : spaceWidth;\n            const expectedLineWidth = lineWidth + expectedSpaceWidth + wordWidth;\n            if (expectedLineWidth <= maxWidth) {\n                // If the word fits, add it to the current line\n                currentLine.push(word);\n                lineWidth = expectedLineWidth;\n                continue;\n            }\n            if (wordWidth <= maxWidth) {\n                // If the word is not too long, put it onto new line\n                if (!addNewLine()) {\n                    break;\n                }\n                currentLine.push(word);\n                lineWidth = wordWidth;\n                continue;\n            }\n            // Handle a long word\n            wordsBrokenOrTruncated = true;\n            if (breakWord) {\n                // Break the word into parts\n                const availWidth = maxWidth - lineWidth - expectedSpaceWidth;\n                const parts = Text.breakWord(word, availWidth, maxWidth, hyphenate, measurer);\n                let breakLoop = false;\n                for (let p = 0; p < parts.length; p++) {\n                    const part = parts[p];\n                    part && currentLine.push(part);\n                    if (p === parts.length - 1) {\n                        lineWidth = measurer.width(part);\n                    }\n                    else if (!addNewLine()) {\n                        breakLoop = true;\n                        break;\n                    }\n                }\n                if (breakLoop)\n                    break;\n            }\n            else {\n                // Truncate the word\n                if (!addNewLine()) {\n                    break;\n                }\n                const trunc = Text.truncateLine(word, maxWidth, measurer, true);\n                currentLine.push(trunc);\n                if (i < words.length - 1) {\n                    linesTruncated = true;\n                }\n                break;\n            }\n        }\n        return { lines, linesTruncated, wordsBrokenOrTruncated, cumulativeHeight };\n    }\n    static wrapLineBalanced(words, maxWidth, measurer, linesCount) {\n        const totalWordsWidth = words.reduce((sum, w) => sum + measurer.width(w), 0);\n        const spaceWidth = measurer.width(' ');\n        const totalSpaceWidth = spaceWidth * (words.length - linesCount - 2);\n        const averageLineWidth = (totalWordsWidth + totalSpaceWidth) / linesCount;\n        const lines = [];\n        let currentLine = [];\n        let lineWidth = measurer.width(words[0]);\n        let newLine = true;\n        for (const word of words) {\n            const width = measurer.width(word);\n            if (newLine) {\n                // New line\n                currentLine = [];\n                currentLine.push(word);\n                lineWidth = width;\n                newLine = false;\n                lines.push(currentLine);\n                continue;\n            }\n            const expectedLineWidth = lineWidth + spaceWidth + width;\n            if (expectedLineWidth <= averageLineWidth) {\n                // Keep adding words to the line\n                currentLine.push(word);\n                lineWidth = expectedLineWidth;\n            }\n            else if (expectedLineWidth <= maxWidth) {\n                // Add the last word to the line\n                currentLine.push(word);\n                newLine = true;\n            }\n            else {\n                // Put the word onto the next line\n                currentLine = [word];\n                lineWidth = width;\n                lines.push(currentLine);\n            }\n        }\n        return lines;\n    }\n}\nText.className = 'Text';\n// The default line spacing for document editors is usually 1.15\nText.defaultLineHeightRatio = 1.15;\nText.defaultStyles = Object.assign({}, Shape.defaultStyles, {\n    textAlign: 'start',\n    fontStyle: undefined,\n    fontWeight: undefined,\n    fontSize: 10,\n    fontFamily: 'sans-serif',\n    textBaseline: 'alphabetic',\n});\nText.punctuationMarks = ['.', ',', '-', ':', ';', '!', '?', `'`, '\"', '(', ')'];\n__decorate$1U([\n    SceneChangeDetection({ redraw: RedrawType.MAJOR })\n], Text.prototype, \"x\", void 0);\n__decorate$1U([\n    SceneChangeDetection({ redraw: RedrawType.MAJOR })\n], Text.prototype, \"y\", void 0);\n__decorate$1U([\n    SceneChangeDetection({ redraw: RedrawType.MAJOR, changeCb: (o) => o._setLines() })\n], Text.prototype, \"text\", void 0);\n__decorate$1U([\n    SceneFontChangeDetection()\n], Text.prototype, \"fontStyle\", void 0);\n__decorate$1U([\n    SceneFontChangeDetection()\n], Text.prototype, \"fontWeight\", void 0);\n__decorate$1U([\n    SceneFontChangeDetection()\n], Text.prototype, \"fontSize\", void 0);\n__decorate$1U([\n    SceneFontChangeDetection()\n], Text.prototype, \"fontFamily\", void 0);\n__decorate$1U([\n    SceneChangeDetection({ redraw: RedrawType.MAJOR })\n], Text.prototype, \"textAlign\", void 0);\n__decorate$1U([\n    SceneChangeDetection({ redraw: RedrawType.MAJOR })\n], Text.prototype, \"textBaseline\", void 0);\n__decorate$1U([\n    SceneChangeDetection({ redraw: RedrawType.MAJOR })\n], Text.prototype, \"lineHeight\", void 0);\nfunction createTextMeasurer(font) {\n    const cache = new Map();\n    const getTextSize = (text) => HdpiCanvas.getTextSize(text, font);\n    const getLineWidth = (text) => {\n        if (cache.has(text)) {\n            return cache.get(text);\n        }\n        const { width } = getTextSize(text);\n        cache.set(text, width);\n        return width;\n    };\n    return { size: getTextSize, width: getLineWidth };\n}\nfunction getFont(fontProps) {\n    const { fontFamily, fontSize, fontStyle, fontWeight } = fontProps;\n    return [fontStyle !== null && fontStyle !== void 0 ? fontStyle : '', fontWeight !== null && fontWeight !== void 0 ? fontWeight : '', fontSize + 'px', fontFamily].join(' ').trim();\n}\nfunction measureText(lines, x, y, textProps) {\n    return HdpiCanvas.has.textMetrics\n        ? getPreciseBBox(lines, x, y, textProps)\n        : getApproximateBBox(lines, x, y, textProps);\n}\nfunction getPreciseBBox(lines, x, y, textProps) {\n    var _a, _b;\n    let left = 0;\n    let top = 0;\n    let width = 0;\n    let height = 0;\n    // Distance between first and last base lines.\n    let baselineDistance = 0;\n    const font = getFont(textProps);\n    const { lineHeight, textBaseline = Text.defaultStyles.textBaseline, textAlign = Text.defaultStyles.textAlign, } = textProps;\n    for (let i = 0; i < lines.length; i++) {\n        const metrics = HdpiCanvas.measureText(lines[i], font, textBaseline, textAlign);\n        left = Math.max(left, metrics.actualBoundingBoxLeft);\n        width = Math.max(width, metrics.width);\n        if (i == 0) {\n            top += metrics.actualBoundingBoxAscent;\n            height += metrics.actualBoundingBoxAscent;\n        }\n        else {\n            baselineDistance += (_a = metrics.fontBoundingBoxAscent) !== null && _a !== void 0 ? _a : metrics.emHeightAscent;\n        }\n        if (i == lines.length - 1) {\n            height += metrics.actualBoundingBoxDescent;\n        }\n        else {\n            baselineDistance += (_b = metrics.fontBoundingBoxDescent) !== null && _b !== void 0 ? _b : metrics.emHeightDescent;\n        }\n    }\n    if (lineHeight !== undefined) {\n        baselineDistance = (lines.length - 1) * lineHeight;\n    }\n    height += baselineDistance;\n    top += baselineDistance * getVerticalOffset(textBaseline);\n    return new BBox(x - left, y - top, width, height);\n}\nfunction getApproximateBBox(lines, x, y, textProps) {\n    let width = 0;\n    let firstLineHeight = 0;\n    // Distance between first and last base lines.\n    let baselineDistance = 0;\n    const font = getFont(textProps);\n    const { lineHeight, textBaseline = Text.defaultStyles.textBaseline, textAlign = Text.defaultStyles.textAlign, } = textProps;\n    if (lines.length > 0) {\n        const lineSize = HdpiCanvas.getTextSize(lines[0], font);\n        width = lineSize.width;\n        firstLineHeight = lineSize.height;\n    }\n    for (let i = 1; i < lines.length; i++) {\n        const lineSize = HdpiCanvas.getTextSize(lines[i], font);\n        width = Math.max(width, lineSize.width);\n        baselineDistance += lineHeight !== null && lineHeight !== void 0 ? lineHeight : lineSize.height;\n    }\n    switch (textAlign) {\n        case 'end':\n        case 'right':\n            x -= width;\n            break;\n        case 'center':\n            x -= width / 2;\n    }\n    switch (textBaseline) {\n        case 'alphabetic':\n            y -= firstLineHeight * 0.7 + baselineDistance * 0.5;\n            break;\n        case 'middle':\n            y -= firstLineHeight * 0.45 + baselineDistance * 0.5;\n            break;\n        case 'ideographic':\n            y -= firstLineHeight + baselineDistance;\n            break;\n        case 'hanging':\n            y -= firstLineHeight * 0.2 + baselineDistance * 0.5;\n            break;\n        case 'bottom':\n            y -= firstLineHeight + baselineDistance;\n            break;\n    }\n    return new BBox(x, y, width, firstLineHeight + baselineDistance);\n}\nfunction getVerticalOffset(textBaseline) {\n    switch (textBaseline) {\n        case 'top':\n        case 'hanging':\n            return 0;\n        case 'bottom':\n        case 'alphabetic':\n        case 'ideographic':\n            return 1;\n        case 'middle':\n            return 0.5;\n    }\n}\nfunction splitText(text) {\n    return typeof text === 'string' ? text.split(/\\r?\\n/g) : [];\n}\n\nclass Observable {\n    constructor() {\n        this.allEventListeners = new Map();\n    }\n    addEventListener(type, listener) {\n        if (typeof listener !== 'function') {\n            throw new Error('AG Charts - listener must be a Function');\n        }\n        const { allEventListeners } = this;\n        let eventListeners = allEventListeners.get(type);\n        if (!eventListeners) {\n            eventListeners = new Set();\n            allEventListeners.set(type, eventListeners);\n        }\n        if (!eventListeners.has(listener)) {\n            eventListeners.add(listener);\n        }\n    }\n    removeEventListener(type, listener) {\n        const { allEventListeners } = this;\n        const eventListeners = allEventListeners.get(type);\n        if (!eventListeners) {\n            return;\n        }\n        eventListeners.delete(listener);\n        if (eventListeners.size === 0) {\n            allEventListeners.delete(type);\n        }\n    }\n    hasEventListener(type) {\n        return this.allEventListeners.has(type);\n    }\n    clearEventListeners() {\n        this.allEventListeners.clear();\n    }\n    fireEvent(event) {\n        const listeners = this.allEventListeners.get(event.type);\n        listeners === null || listeners === void 0 ? void 0 : listeners.forEach((listener) => listener(event));\n    }\n}\n\nconst isString$2 = (v) => typeof v === 'string';\nconst isStringObject$1 = (v) => !!v && Object.prototype.hasOwnProperty.call(v, 'toString') && isString$2(v.toString());\nconst isDate$1 = (v) => v instanceof Date && !isNaN(+v);\nfunction isDiscrete(value) {\n    return isString$2(value) || isStringObject$1(value);\n}\nfunction isContinuous(value) {\n    const isNumberObject = (v) => !!v && Object.prototype.hasOwnProperty.call(v, 'valueOf') && isNumber$4(v.valueOf());\n    const isDate = (v) => v instanceof Date && !isNaN(+v);\n    return isNumber$4(value) || isNumberObject(value) || isDate(value);\n}\nfunction checkDatum(value, isContinuousScale) {\n    if (isContinuousScale && isContinuous(value)) {\n        return value;\n    }\n    else if (!isContinuousScale) {\n        if (!isDiscrete(value)) {\n            return String(value);\n        }\n        return value;\n    }\n    return undefined;\n}\nconst isNumber$4 = (v) => typeof v === 'number' && Number.isFinite(v);\n\nclass Color {\n    /**\n     * Every color component should be in the [0, 1] range.\n     * Some easing functions (such as elastic easing) can overshoot the target value by some amount.\n     * So, when animating colors, if the source or target color components are already near\n     * or at the edge of the allowed [0, 1] range, it is possible for the intermediate color\n     * component value to end up outside of that range mid-animation. For this reason the constructor\n     * performs range checking/constraining.\n     * @param r Red component.\n     * @param g Green component.\n     * @param b Blue component.\n     * @param a Alpha (opacity) component.\n     */\n    constructor(r, g, b, a = 1) {\n        // NaN is treated as 0.\n        this.r = Math.min(1, Math.max(0, r || 0));\n        this.g = Math.min(1, Math.max(0, g || 0));\n        this.b = Math.min(1, Math.max(0, b || 0));\n        this.a = Math.min(1, Math.max(0, a || 0));\n    }\n    /**\n     * A color string can be in one of the following formats to be valid:\n     * - #rgb\n     * - #rrggbb\n     * - rgb(r, g, b)\n     * - rgba(r, g, b, a)\n     * - CSS color name such as 'white', 'orange', 'cyan', etc.\n     */\n    static validColorString(str) {\n        if (str.indexOf('#') >= 0) {\n            return !!Color.parseHex(str);\n        }\n        if (str.indexOf('rgb') >= 0) {\n            return !!Color.stringToRgba(str);\n        }\n        return !!Color.nameToHex[str.toLowerCase()];\n    }\n    /**\n     * The given string can be in one of the following formats:\n     * - #rgb\n     * - #rrggbb\n     * - rgb(r, g, b)\n     * - rgba(r, g, b, a)\n     * - CSS color name such as 'white', 'orange', 'cyan', etc.\n     * @param str\n     */\n    static fromString(str) {\n        // hexadecimal notation\n        if (str.indexOf('#') >= 0) {\n            // there can be some leading whitespace\n            return Color.fromHexString(str);\n        }\n        // color name\n        const hex = Color.nameToHex[str.toLowerCase()];\n        if (hex) {\n            return Color.fromHexString(hex);\n        }\n        // rgb(a) notation\n        if (str.indexOf('rgb') >= 0) {\n            return Color.fromRgbaString(str);\n        }\n        throw new Error(`Invalid color string: '${str}'`);\n    }\n    static tryParseFromString(str) {\n        try {\n            return Color.fromString(str);\n        }\n        catch (e) {\n            Logger.warnOnce(`invalid color string: '${str}'.`);\n            return Color.fromArray([0, 0, 0]);\n        }\n    }\n    // See https://drafts.csswg.org/css-color/#hex-notation\n    static parseHex(input) {\n        input = input.replace(/ /g, '').slice(1);\n        let parts;\n        switch (input.length) {\n            case 6:\n            case 8:\n                parts = [];\n                for (let i = 0; i < input.length; i += 2) {\n                    parts.push(parseInt(`${input[i]}${input[i + 1]}`, 16));\n                }\n                break;\n            case 3:\n            case 4:\n                parts = input\n                    .split('')\n                    .map((p) => parseInt(p, 16))\n                    .map((p) => p + p * 16);\n                break;\n        }\n        if ((parts === null || parts === void 0 ? void 0 : parts.length) >= 3) {\n            if (parts.every((p) => p >= 0)) {\n                if (parts.length === 3) {\n                    parts.push(255);\n                }\n                return parts;\n            }\n        }\n    }\n    static fromHexString(str) {\n        const values = Color.parseHex(str);\n        if (values) {\n            const [r, g, b, a] = values;\n            return new Color(r / 255, g / 255, b / 255, a / 255);\n        }\n        throw new Error(`Malformed hexadecimal color string: '${str}'`);\n    }\n    static stringToRgba(str) {\n        // Find positions of opening and closing parentheses.\n        let [po, pc] = [NaN, NaN];\n        for (let i = 0; i < str.length; i++) {\n            const c = str[i];\n            if (!po && c === '(') {\n                po = i;\n            }\n            else if (c === ')') {\n                pc = i;\n                break;\n            }\n        }\n        const contents = po && pc && str.substring(po + 1, pc);\n        if (!contents) {\n            return;\n        }\n        const parts = contents.split(',');\n        const rgba = [];\n        for (let i = 0; i < parts.length; i++) {\n            const part = parts[i];\n            let value = parseFloat(part);\n            if (isNaN(value)) {\n                return;\n            }\n            if (part.indexOf('%') >= 0) {\n                // percentage r, g, or b value\n                value = Math.max(0, Math.min(100, value));\n                value /= 100;\n            }\n            else {\n                if (i === 3) {\n                    // alpha component\n                    value = Math.max(0, Math.min(1, value));\n                }\n                else {\n                    // absolute r, g, or b value\n                    value = Math.max(0, Math.min(255, value));\n                    value /= 255;\n                }\n            }\n            rgba.push(value);\n        }\n        return rgba;\n    }\n    static fromRgbaString(str) {\n        const rgba = Color.stringToRgba(str);\n        if (rgba) {\n            if (rgba.length === 3) {\n                return new Color(rgba[0], rgba[1], rgba[2]);\n            }\n            else if (rgba.length === 4) {\n                return new Color(rgba[0], rgba[1], rgba[2], rgba[3]);\n            }\n        }\n        throw new Error(`Malformed rgb/rgba color string: '${str}'`);\n    }\n    static fromArray(arr) {\n        if (arr.length === 4) {\n            return new Color(arr[0], arr[1], arr[2], arr[3]);\n        }\n        if (arr.length === 3) {\n            return new Color(arr[0], arr[1], arr[2]);\n        }\n        throw new Error('The given array should contain 3 or 4 color components (numbers).');\n    }\n    static fromHSB(h, s, b, alpha = 1) {\n        const rgb = Color.HSBtoRGB(h, s, b);\n        return new Color(rgb[0], rgb[1], rgb[2], alpha);\n    }\n    static padHex(str) {\n        // Can't use `padStart(2, '0')` here because of IE.\n        return str.length === 1 ? '0' + str : str;\n    }\n    toHexString() {\n        let hex = '#' +\n            Color.padHex(Math.round(this.r * 255).toString(16)) +\n            Color.padHex(Math.round(this.g * 255).toString(16)) +\n            Color.padHex(Math.round(this.b * 255).toString(16));\n        if (this.a < 1) {\n            hex += Color.padHex(Math.round(this.a * 255).toString(16));\n        }\n        return hex;\n    }\n    toRgbaString(fractionDigits = 3) {\n        const components = [Math.round(this.r * 255), Math.round(this.g * 255), Math.round(this.b * 255)];\n        const k = Math.pow(10, fractionDigits);\n        if (this.a !== 1) {\n            components.push(Math.round(this.a * k) / k);\n            return `rgba(${components.join(', ')})`;\n        }\n        return `rgb(${components.join(', ')})`;\n    }\n    toString() {\n        if (this.a === 1) {\n            return this.toHexString();\n        }\n        return this.toRgbaString();\n    }\n    toHSB() {\n        return Color.RGBtoHSB(this.r, this.g, this.b);\n    }\n    /**\n     * Converts the given RGB triple to an array of HSB (HSV) components.\n     * The hue component will be `NaN` for achromatic colors.\n     */\n    static RGBtoHSB(r, g, b) {\n        const min = Math.min(r, g, b);\n        const max = Math.max(r, g, b);\n        const S = max !== 0 ? (max - min) / max : 0;\n        let H = NaN;\n        // min == max, means all components are the same\n        // and the color is a shade of gray with no hue (H is NaN)\n        if (min !== max) {\n            const delta = max - min;\n            const rc = (max - r) / delta;\n            const gc = (max - g) / delta;\n            const bc = (max - b) / delta;\n            if (r === max) {\n                H = bc - gc;\n            }\n            else if (g === max) {\n                H = 2.0 + rc - bc;\n            }\n            else {\n                H = 4.0 + gc - rc;\n            }\n            H /= 6.0;\n            if (H < 0) {\n                H = H + 1.0;\n            }\n        }\n        return [H * 360, S, max];\n    }\n    /**\n     * Converts the given HSB (HSV) triple to an array of RGB components.\n     */\n    static HSBtoRGB(H, S, B) {\n        if (isNaN(H)) {\n            H = 0;\n        }\n        H = (((H % 360) + 360) % 360) / 360; // normalize hue to [0, 360] interval, then scale to [0, 1]\n        let r = 0;\n        let g = 0;\n        let b = 0;\n        if (S === 0) {\n            r = g = b = B;\n        }\n        else {\n            const h = (H - Math.floor(H)) * 6;\n            const f = h - Math.floor(h);\n            const p = B * (1 - S);\n            const q = B * (1 - S * f);\n            const t = B * (1 - S * (1 - f));\n            switch (h >> 0 // discard the floating point part of the number\n            ) {\n                case 0:\n                    r = B;\n                    g = t;\n                    b = p;\n                    break;\n                case 1:\n                    r = q;\n                    g = B;\n                    b = p;\n                    break;\n                case 2:\n                    r = p;\n                    g = B;\n                    b = t;\n                    break;\n                case 3:\n                    r = p;\n                    g = q;\n                    b = B;\n                    break;\n                case 4:\n                    r = t;\n                    g = p;\n                    b = B;\n                    break;\n                case 5:\n                    r = B;\n                    g = p;\n                    b = q;\n                    break;\n            }\n        }\n        return [r, g, b];\n    }\n    derive(hueShift, saturationFactor, brightnessFactor, opacityFactor) {\n        const hsb = Color.RGBtoHSB(this.r, this.g, this.b);\n        let b = hsb[2];\n        if (b == 0 && brightnessFactor > 1.0) {\n            b = 0.05;\n        }\n        const h = (((hsb[0] + hueShift) % 360) + 360) % 360;\n        const s = Math.max(Math.min(hsb[1] * saturationFactor, 1.0), 0.0);\n        b = Math.max(Math.min(b * brightnessFactor, 1.0), 0.0);\n        const a = Math.max(Math.min(this.a * opacityFactor, 1.0), 0.0);\n        const rgba = Color.HSBtoRGB(h, s, b);\n        rgba.push(a);\n        return Color.fromArray(rgba);\n    }\n    brighter() {\n        return this.derive(0, 1.0, 1.0 / 0.7, 1.0);\n    }\n    darker() {\n        return this.derive(0, 1.0, 0.7, 1.0);\n    }\n    static interpolate(color, other) {\n        const c0 = Color.tryParseFromString(color);\n        const c1 = Color.tryParseFromString(other);\n        return (t) => {\n            const i = (x, y) => x * (1 - t) + y * t;\n            const c = new Color(i(c0.r, c1.r), i(c0.g, c1.g), i(c0.b, c1.b), i(c0.a, c1.a));\n            return c.toString();\n        };\n    }\n}\n/**\n * CSS Color Module Level 4:\n * https://drafts.csswg.org/css-color/#named-colors\n */\nColor.nameToHex = Object.freeze({\n    aliceblue: '#F0F8FF',\n    antiquewhite: '#FAEBD7',\n    aqua: '#00FFFF',\n    aquamarine: '#7FFFD4',\n    azure: '#F0FFFF',\n    beige: '#F5F5DC',\n    bisque: '#FFE4C4',\n    black: '#000000',\n    blanchedalmond: '#FFEBCD',\n    blue: '#0000FF',\n    blueviolet: '#8A2BE2',\n    brown: '#A52A2A',\n    burlywood: '#DEB887',\n    cadetblue: '#5F9EA0',\n    chartreuse: '#7FFF00',\n    chocolate: '#D2691E',\n    coral: '#FF7F50',\n    cornflowerblue: '#6495ED',\n    cornsilk: '#FFF8DC',\n    crimson: '#DC143C',\n    cyan: '#00FFFF',\n    darkblue: '#00008B',\n    darkcyan: '#008B8B',\n    darkgoldenrod: '#B8860B',\n    darkgray: '#A9A9A9',\n    darkgreen: '#006400',\n    darkgrey: '#A9A9A9',\n    darkkhaki: '#BDB76B',\n    darkmagenta: '#8B008B',\n    darkolivegreen: '#556B2F',\n    darkorange: '#FF8C00',\n    darkorchid: '#9932CC',\n    darkred: '#8B0000',\n    darksalmon: '#E9967A',\n    darkseagreen: '#8FBC8F',\n    darkslateblue: '#483D8B',\n    darkslategray: '#2F4F4F',\n    darkslategrey: '#2F4F4F',\n    darkturquoise: '#00CED1',\n    darkviolet: '#9400D3',\n    deeppink: '#FF1493',\n    deepskyblue: '#00BFFF',\n    dimgray: '#696969',\n    dimgrey: '#696969',\n    dodgerblue: '#1E90FF',\n    firebrick: '#B22222',\n    floralwhite: '#FFFAF0',\n    forestgreen: '#228B22',\n    fuchsia: '#FF00FF',\n    gainsboro: '#DCDCDC',\n    ghostwhite: '#F8F8FF',\n    gold: '#FFD700',\n    goldenrod: '#DAA520',\n    gray: '#808080',\n    green: '#008000',\n    greenyellow: '#ADFF2F',\n    grey: '#808080',\n    honeydew: '#F0FFF0',\n    hotpink: '#FF69B4',\n    indianred: '#CD5C5C',\n    indigo: '#4B0082',\n    ivory: '#FFFFF0',\n    khaki: '#F0E68C',\n    lavender: '#E6E6FA',\n    lavenderblush: '#FFF0F5',\n    lawngreen: '#7CFC00',\n    lemonchiffon: '#FFFACD',\n    lightblue: '#ADD8E6',\n    lightcoral: '#F08080',\n    lightcyan: '#E0FFFF',\n    lightgoldenrodyellow: '#FAFAD2',\n    lightgray: '#D3D3D3',\n    lightgreen: '#90EE90',\n    lightgrey: '#D3D3D3',\n    lightpink: '#FFB6C1',\n    lightsalmon: '#FFA07A',\n    lightseagreen: '#20B2AA',\n    lightskyblue: '#87CEFA',\n    lightslategray: '#778899',\n    lightslategrey: '#778899',\n    lightsteelblue: '#B0C4DE',\n    lightyellow: '#FFFFE0',\n    lime: '#00FF00',\n    limegreen: '#32CD32',\n    linen: '#FAF0E6',\n    magenta: '#FF00FF',\n    maroon: '#800000',\n    mediumaquamarine: '#66CDAA',\n    mediumblue: '#0000CD',\n    mediumorchid: '#BA55D3',\n    mediumpurple: '#9370DB',\n    mediumseagreen: '#3CB371',\n    mediumslateblue: '#7B68EE',\n    mediumspringgreen: '#00FA9A',\n    mediumturquoise: '#48D1CC',\n    mediumvioletred: '#C71585',\n    midnightblue: '#191970',\n    mintcream: '#F5FFFA',\n    mistyrose: '#FFE4E1',\n    moccasin: '#FFE4B5',\n    navajowhite: '#FFDEAD',\n    navy: '#000080',\n    oldlace: '#FDF5E6',\n    olive: '#808000',\n    olivedrab: '#6B8E23',\n    orange: '#FFA500',\n    orangered: '#FF4500',\n    orchid: '#DA70D6',\n    palegoldenrod: '#EEE8AA',\n    palegreen: '#98FB98',\n    paleturquoise: '#AFEEEE',\n    palevioletred: '#DB7093',\n    papayawhip: '#FFEFD5',\n    peachpuff: '#FFDAB9',\n    peru: '#CD853F',\n    pink: '#FFC0CB',\n    plum: '#DDA0DD',\n    powderblue: '#B0E0E6',\n    purple: '#800080',\n    rebeccapurple: '#663399',\n    red: '#FF0000',\n    rosybrown: '#BC8F8F',\n    royalblue: '#4169E1',\n    saddlebrown: '#8B4513',\n    salmon: '#FA8072',\n    sandybrown: '#F4A460',\n    seagreen: '#2E8B57',\n    seashell: '#FFF5EE',\n    sienna: '#A0522D',\n    silver: '#C0C0C0',\n    skyblue: '#87CEEB',\n    slateblue: '#6A5ACD',\n    slategray: '#708090',\n    slategrey: '#708090',\n    snow: '#FFFAFA',\n    springgreen: '#00FF7F',\n    steelblue: '#4682B4',\n    tan: '#D2B48C',\n    teal: '#008080',\n    thistle: '#D8BFD8',\n    tomato: '#FF6347',\n    transparent: '#00000000',\n    turquoise: '#40E0D0',\n    violet: '#EE82EE',\n    wheat: '#F5DEB3',\n    white: '#FFFFFF',\n    whitesmoke: '#F5F5F5',\n    yellow: '#FFFF00',\n    yellowgreen: '#9ACD32',\n});\n\nconst BREAK_TRANSFORM_CHAIN = Symbol('BREAK');\nconst CONFIG_KEY = '__decorator_config';\nfunction initialiseConfig(target, propertyKeyOrSymbol, propertyKey, valueStoreKey) {\n    if (Object.getOwnPropertyDescriptor(target, CONFIG_KEY) == null) {\n        Object.defineProperty(target, CONFIG_KEY, { value: {} });\n    }\n    const config = target[CONFIG_KEY];\n    if (config[propertyKey] != null) {\n        return config[propertyKey];\n    }\n    config[propertyKey] = { setters: [], getters: [] };\n    const descriptor = Object.getOwnPropertyDescriptor(target, propertyKeyOrSymbol);\n    const prevSet = descriptor === null || descriptor === void 0 ? void 0 : descriptor.set;\n    const prevGet = descriptor === null || descriptor === void 0 ? void 0 : descriptor.get;\n    const getter = function () {\n        var _a, _b;\n        let value = prevGet ? prevGet.call(this) : this[valueStoreKey];\n        for (const transformFn of (_b = (_a = config[propertyKey]) === null || _a === void 0 ? void 0 : _a.getters) !== null && _b !== void 0 ? _b : []) {\n            value = transformFn(this, propertyKeyOrSymbol, value);\n            if (value === BREAK_TRANSFORM_CHAIN) {\n                return undefined;\n            }\n        }\n        return value;\n    };\n    const setter = function (value) {\n        var _a, _b;\n        const setters = (_b = (_a = config[propertyKey]) === null || _a === void 0 ? void 0 : _a.setters) !== null && _b !== void 0 ? _b : [];\n        let oldValue;\n        if (setters.some((f) => f.length > 2)) {\n            // Lazily retrieve old value.\n            oldValue = prevGet ? prevGet.call(this) : this[valueStoreKey];\n        }\n        for (const transformFn of setters) {\n            value = transformFn(this, propertyKeyOrSymbol, value, oldValue);\n            if (value === BREAK_TRANSFORM_CHAIN) {\n                return;\n            }\n        }\n        if (prevSet) {\n            prevSet.call(this, value);\n        }\n        else {\n            this[valueStoreKey] = value;\n        }\n    };\n    Object.defineProperty(target, propertyKeyOrSymbol, {\n        set: setter,\n        get: getter,\n        enumerable: true,\n        configurable: false,\n    });\n    return config[propertyKey];\n}\nfunction addTransformToInstanceProperty(setTransform, getTransform) {\n    return (target, propertyKeyOrSymbol) => {\n        const propertyKey = propertyKeyOrSymbol.toString();\n        const valueStoreKey = `__${propertyKey}`;\n        const { getters, setters } = initialiseConfig(target, propertyKeyOrSymbol, propertyKey, valueStoreKey);\n        setters.push(setTransform);\n        if (getTransform) {\n            getters.splice(0, 0, getTransform);\n        }\n    };\n}\n\nfunction Validate(predicate) {\n    return addTransformToInstanceProperty((target, prop, v) => {\n        var _a, _b, _c;\n        if (predicate(v, { target })) {\n            return v;\n        }\n        const cleanKey = prop.toString().replace(/^_*/, '');\n        let targetClass = (_b = (_a = target.constructor) === null || _a === void 0 ? void 0 : _a.className) !== null && _b !== void 0 ? _b : (_c = target.constructor) === null || _c === void 0 ? void 0 : _c.name;\n        if ((targetClass === null || targetClass === void 0 ? void 0 : targetClass.length) < 3) {\n            targetClass = null;\n        }\n        const targetClassName = targetClass ? `of [${targetClass}] ` : '';\n        if (predicate.message) {\n            Logger.warn(`Property [${cleanKey}] ${targetClassName}cannot be set to [${JSON.stringify(v)}]; ${predicate.message}, ignoring.`);\n        }\n        else {\n            Logger.warn(`Property [${cleanKey}] ${targetClassName}cannot be set to [${JSON.stringify(v)}], ignoring.`);\n        }\n        return BREAK_TRANSFORM_CHAIN;\n    });\n}\nfunction predicateWithMessage(predicate, message) {\n    predicate.message = message;\n    return predicate;\n}\nconst OPTIONAL = (v, ctx, predicate) => v === undefined || predicate(v, ctx);\nconst ARRAY = (length, predicate) => {\n    return predicateWithMessage((v, ctx) => Array.isArray(v) &&\n        (length ? v.length === length : true) &&\n        (predicate ? v.every((e) => predicate(e, ctx)) : true), `expecting an Array`);\n};\nconst OPT_ARRAY = (length) => {\n    return predicateWithMessage((v, ctx) => OPTIONAL(v, ctx, ARRAY(length)), 'expecting an optional Array');\n};\nconst AND = (...predicates) => {\n    return predicateWithMessage((v, ctx) => predicates.every((p) => p(v, ctx)), predicates\n        .map((p) => p.message)\n        .filter((m) => m != null)\n        .join(' AND '));\n};\nconst OR = (...predicates) => {\n    return predicateWithMessage((v, ctx) => predicates.some((p) => p(v, ctx)), predicates\n        .map((p) => p.message)\n        .filter((m) => m != null)\n        .join(' OR '));\n};\nconst isComparable = (v) => {\n    return v != null && !isNaN(v);\n};\nconst LESS_THAN = (otherField) => predicateWithMessage((v, ctx) => !isComparable(v) || !isComparable(ctx.target[otherField]) || v < ctx.target[otherField], `expected to be less than ${otherField}`);\nconst GREATER_THAN = (otherField) => predicateWithMessage((v, ctx) => !isComparable(v) || !isComparable(ctx.target[otherField]) || v > ctx.target[otherField], `expected to be greater than ${otherField}`);\nconst FUNCTION = predicateWithMessage((v) => typeof v === 'function', 'expecting a Function');\nconst OPT_FUNCTION = predicateWithMessage((v, ctx) => OPTIONAL(v, ctx, FUNCTION), `expecting an optional Function`);\nconst BOOLEAN = predicateWithMessage((v) => v === true || v === false, 'expecting a Boolean');\nconst OPT_BOOLEAN = predicateWithMessage((v, ctx) => OPTIONAL(v, ctx, BOOLEAN), 'expecting an optional Boolean');\nconst STRING = predicateWithMessage((v) => typeof v === 'string', 'expecting a String');\nconst OPT_STRING = predicateWithMessage((v, ctx) => OPTIONAL(v, ctx, STRING), 'expecting an optional String');\nconst DATE = predicateWithMessage((v) => v instanceof Date && !isNaN(+v), 'expecting a Date object');\nconst OPT_DATE = predicateWithMessage((v, ctx) => OPTIONAL(v, ctx, DATE), 'expecting an optional Date');\npredicateWithMessage(ARRAY(undefined, DATE), 'expecting an Array of Date objects');\nconst DATETIME_MS = NUMBER(0);\nconst OPT_DATETIME_MS = predicateWithMessage((v, ctx) => OPTIONAL(v, ctx, DATETIME_MS), 'expecting an optional number');\nconst OPT_DATE_OR_DATETIME_MS = OR(OPT_DATE, OPT_DATETIME_MS);\nconst colorMessage = `A color string can be in one of the following formats to be valid: #rgb, #rrggbb, rgb(r, g, b), rgba(r, g, b, a) or a CSS color name such as 'white', 'orange', 'cyan', etc`;\nconst COLOR_STRING = predicateWithMessage((v) => {\n    if (typeof v !== 'string') {\n        return false;\n    }\n    return Color.validColorString(v);\n}, `expecting a color String. ${colorMessage}`);\nconst OPT_COLOR_STRING = predicateWithMessage((v, ctx) => OPTIONAL(v, ctx, COLOR_STRING), `expecting an optional color String. ${colorMessage}`);\nconst COLOR_STRING_ARRAY = predicateWithMessage(ARRAY(undefined, COLOR_STRING), `expecting an Array of color strings. ${colorMessage}`);\nconst OPT_COLOR_STRING_ARRAY = predicateWithMessage((v, ctx) => OPTIONAL(v, ctx, COLOR_STRING_ARRAY), `expecting an optional Array of color strings. ${colorMessage}`);\nfunction NUMBER(min, max) {\n    const message = `expecting a finite Number${(min !== undefined ? ', more than or equal to ' + min : '') +\n        (max !== undefined ? ', less than or equal to ' + max : '')}`;\n    return predicateWithMessage((v) => typeof v === 'number' &&\n        Number.isFinite(v) &&\n        (min !== undefined ? v >= min : true) &&\n        (max !== undefined ? v <= max : true), message);\n}\nfunction OPT_NUMBER(min, max) {\n    const message = `expecting an optional finite Number${(min !== undefined ? ', more than or equal to ' + min : '') +\n        (max !== undefined ? ', less than or equal to ' + max : '')}`;\n    return predicateWithMessage((v, ctx) => OPTIONAL(v, ctx, NUMBER(min, max)), message);\n}\nfunction NUMBER_OR_NAN(min, max) {\n    // Can be NaN or finite number\n    const message = `expecting a finite Number${(min !== undefined ? ', more than or equal to ' + min : '') +\n        (max !== undefined ? ', less than or equal to ' + max : '')}`;\n    return predicateWithMessage((v) => typeof v === 'number' &&\n        (isNaN(v) ||\n            (Number.isFinite(v) && (min !== undefined ? v >= min : true) && (max !== undefined ? v <= max : true))), message);\n}\nconst NUMBER_ARRAY = predicateWithMessage(ARRAY(undefined, NUMBER()), 'expecting an Array of numbers');\nconst OPT_NUMBER_ARRAY = predicateWithMessage((v, ctx) => OPTIONAL(v, ctx, NUMBER_ARRAY), 'expecting an optional Array of numbers');\nconst STRING_ARRAY = predicateWithMessage(ARRAY(undefined, STRING), 'expecting an Array of strings');\npredicateWithMessage((v, ctx) => OPTIONAL(v, ctx, STRING_ARRAY), 'expecting an optional Array of strings');\nfunction STRING_UNION(...values) {\n    const message = `expecting one of: ${values.join(', ')}`;\n    return predicateWithMessage((v) => typeof v === 'string' && values.indexOf(v) >= 0, message);\n}\nconst BOOLEAN_ARRAY = predicateWithMessage(ARRAY(undefined, BOOLEAN), 'expecting an Array of boolean values');\npredicateWithMessage((v, ctx) => OPTIONAL(v, ctx, BOOLEAN_ARRAY), 'expecting an optional Array of boolean values');\nconst FONT_WEIGHTS = [\n    'normal',\n    'bold',\n    'bolder',\n    'lighter',\n    '100',\n    '200',\n    '300',\n    '400',\n    '500',\n    '600',\n    '700',\n    '800',\n    '900',\n];\nconst FONT_STYLE = predicateWithMessage((v) => v === 'normal' || v === 'italic' || v === 'oblique', `expecting a font style keyword such as 'normal', 'italic' or 'oblique'`);\nconst OPT_FONT_STYLE = predicateWithMessage((v, ctx) => OPTIONAL(v, ctx, FONT_STYLE), `expecting an optional font style keyword such as 'normal', 'italic' or 'oblique'`);\nconst FONT_WEIGHT = predicateWithMessage((v) => FONT_WEIGHTS.includes(v), `expecting a font weight keyword such as 'normal', 'bold' or 'bolder' or a numeric value such as 100, 300 or 600`);\nconst OPT_FONT_WEIGHT = predicateWithMessage((v, ctx) => OPTIONAL(v, ctx, FONT_WEIGHT), `expecting an optional font weight keyword such as 'normal', 'bold' or 'bolder' or a numeric value such as 100, 300 or 600`);\nconst LINE_DASH = predicateWithMessage(ARRAY(undefined, NUMBER(0)), 'expecting an Array of numbers specifying the length in pixels of alternating dashes and gaps, for example, [6, 3] means dashes with a length of 6 pixels with gaps between of 3 pixels.');\nconst OPT_LINE_DASH = predicateWithMessage((v, ctx) => OPTIONAL(v, ctx, LINE_DASH), 'expecting an optional Array of numbers specifying the length in pixels of alternating dashes and gaps, for example, [6, 3] means dashes with a length of 6 pixels with gaps between of 3 pixels.');\nconst LINE_CAPS = ['butt', 'round', 'square'];\nconst LINE_CAP = predicateWithMessage((v) => LINE_CAPS.includes(v), `expecting a line cap keyword such as 'butt', 'round' or 'square'`);\npredicateWithMessage((v, ctx) => OPTIONAL(v, ctx, LINE_CAP), `expecting an optional line cap keyword such as 'butt', 'round' or 'square'`);\nconst LINE_JOINS = ['round', 'bevel', 'miter'];\nconst LINE_JOIN = predicateWithMessage((v) => LINE_JOINS.includes(v), `expecting a line join keyword such as 'round', 'bevel' or 'miter'`);\npredicateWithMessage((v, ctx) => OPTIONAL(v, ctx, LINE_JOIN), `expecting an optional line join keyword such as 'round', 'bevel' or 'miter'`);\nconst POSITIONS = ['top', 'right', 'bottom', 'left'];\nconst POSITION = predicateWithMessage((v) => POSITIONS.includes(v), `expecting a position keyword such as 'top', 'right', 'bottom' or 'left`);\nconst INTERACTION_RANGES = ['exact', 'nearest'];\nconst INTERACTION_RANGE = predicateWithMessage((v) => (typeof v === 'number' && Number.isFinite(v)) || INTERACTION_RANGES.includes(v), `expecting an interaction range of 'exact', 'nearest' or a number`);\nconst TEXT_WRAPS = ['never', 'always', 'hyphenate', 'on-space'];\nconst TEXT_WRAP = predicateWithMessage((v) => TEXT_WRAPS.includes(v), `expecting a text wrap strategy keyword such as 'never', 'always', 'hyphenate', 'on-space'`);\n\n/**\n * Constants to declare the expected nominal zIndex for all types of layer in chart rendering.\n */\nvar Layers;\n(function (Layers) {\n    Layers[Layers[\"SERIES_BACKGROUND_ZINDEX\"] = -10] = \"SERIES_BACKGROUND_ZINDEX\";\n    Layers[Layers[\"AXIS_GRID_ZINDEX\"] = 0] = \"AXIS_GRID_ZINDEX\";\n    Layers[Layers[\"AXIS_ZINDEX\"] = 20] = \"AXIS_ZINDEX\";\n    Layers[Layers[\"SERIES_CROSSLINE_RANGE_ZINDEX\"] = 30] = \"SERIES_CROSSLINE_RANGE_ZINDEX\";\n    Layers[Layers[\"SERIES_LAYER_ZINDEX\"] = 500] = \"SERIES_LAYER_ZINDEX\";\n    Layers[Layers[\"SERIES_CROSSHAIR_ZINDEX\"] = 1000] = \"SERIES_CROSSHAIR_ZINDEX\";\n    Layers[Layers[\"SERIES_LABEL_ZINDEX\"] = 1500] = \"SERIES_LABEL_ZINDEX\";\n    Layers[Layers[\"SERIES_CROSSLINE_LINE_ZINDEX\"] = 2500] = \"SERIES_CROSSLINE_LINE_ZINDEX\";\n    Layers[Layers[\"LEGEND_ZINDEX\"] = 3000] = \"LEGEND_ZINDEX\";\n})(Layers || (Layers = {}));\n\nvar ChartAxisDirection;\n(function (ChartAxisDirection) {\n    ChartAxisDirection[\"X\"] = \"x\";\n    ChartAxisDirection[\"Y\"] = \"y\";\n})(ChartAxisDirection || (ChartAxisDirection = {}));\n\nfunction extendDomain(values, domain = [Infinity, -Infinity]) {\n    for (const value of values) {\n        if (typeof value !== 'number') {\n            continue;\n        }\n        if (value < domain[0]) {\n            domain[0] = value;\n        }\n        if (value > domain[1]) {\n            domain[1] = value;\n        }\n    }\n    return domain;\n}\n\nfunction toKeyString(keys) {\n    return keys\n        .map((v) => {\n        if (v == null) {\n            return v;\n        }\n        else if (typeof v === 'number' || typeof v === 'string' || typeof v === 'boolean') {\n            return v;\n        }\n        else if (typeof v === 'object') {\n            return JSON.stringify(v);\n        }\n        return v;\n    })\n        .join('-');\n}\nfunction round(val) {\n    const accuracy = 10000;\n    if (Number.isInteger(val)) {\n        return val;\n    }\n    else if (Math.abs(val) > accuracy) {\n        return Math.trunc(val);\n    }\n    return Math.round(val * accuracy) / accuracy;\n}\nfunction fixNumericExtent(extent) {\n    if (extent === undefined) {\n        // Don't return a range, there is no range.\n        return [];\n    }\n    let [min, max] = extent;\n    min = +min;\n    max = +max;\n    if (min === 0 && max === 0) {\n        // domain has zero length and the single valid value is 0. Use the default of [0, 1].\n        return [0, 1];\n    }\n    if (min === Infinity && max === -Infinity) {\n        // There's no data in the domain.\n        return [];\n    }\n    if (min === Infinity) {\n        min = 0;\n    }\n    if (max === -Infinity) {\n        max = 0;\n    }\n    if (!(isNumber$4(min) && isNumber$4(max))) {\n        return [];\n    }\n    return [min, max];\n}\nconst INVALID_VALUE = Symbol('invalid');\nclass DataModel {\n    constructor(opts) {\n        var _a;\n        const { props } = opts;\n        // Validate that keys appear before values in the definitions, as output ordering depends\n        // on configuration ordering, but we process keys before values.\n        let keys = true;\n        for (const next of props) {\n            if (next.type === 'key' && !keys) {\n                throw new Error('AG Charts - internal config error: keys must come before values.');\n            }\n            if (next.type === 'value' && keys) {\n                keys = false;\n            }\n        }\n        this.opts = Object.assign({ dataVisible: true }, opts);\n        this.keys = props\n            .filter((def) => def.type === 'key')\n            .map((def, index) => (Object.assign(Object.assign({}, def), { index, missing: false })));\n        this.values = props\n            .filter((def) => def.type === 'value')\n            .map((def, index) => (Object.assign(Object.assign({}, def), { index, missing: false })));\n        this.aggregates = props.filter((def) => def.type === 'aggregate');\n        this.groupProcessors = props.filter((def) => def.type === 'group-value-processor');\n        this.propertyProcessors = props.filter((def) => def.type === 'property-value-processor');\n        this.reducers = props.filter((def) => def.type === 'reducer');\n        this.processors = props.filter((def) => def.type === 'processor');\n        for (const { properties } of (_a = this.aggregates) !== null && _a !== void 0 ? _a : []) {\n            if (properties.length === 0)\n                continue;\n            for (const property of properties) {\n                if (typeof property === 'string' && !this.values.some((def) => def.property === property)) {\n                    throw new Error(`AG Charts - internal config error: aggregate properties must match defined properties (${properties}).`);\n                }\n                if (typeof property !== 'string' && !this.values.some((def) => def.id === property.id)) {\n                    throw new Error(`AG Charts - internal config error: aggregate properties must match defined properties (${properties}).`);\n                }\n            }\n        }\n    }\n    resolveProcessedDataIndexById(searchId) {\n        const { keys, values } = this;\n        const def = [...keys, ...values].find(({ id }) => id === searchId);\n        if (!def)\n            return undefined;\n        if ((def === null || def === void 0 ? void 0 : def.type) === 'key' || (def === null || def === void 0 ? void 0 : def.type) === 'value') {\n            return { type: def.type, index: def.index };\n        }\n    }\n    resolveProcessedDataDefById(searchId) {\n        const { keys, values } = this;\n        const def = [...keys, ...values].find(({ id }) => id === searchId);\n        if (!def)\n            return undefined;\n        return def;\n    }\n    getDomain(searchId, processedData) {\n        const idx = this.resolveProcessedDataIndexById(searchId);\n        if (!idx) {\n            return [];\n        }\n        return processedData.domain[idx.type === 'key' ? 'keys' : 'values'][idx.index];\n    }\n    processData(data) {\n        const { opts: { groupByKeys, groupByFn }, aggregates, groupProcessors, reducers, processors, propertyProcessors, } = this;\n        const start = performance.now();\n        for (const def of [...this.keys, ...this.values]) {\n            def.missing = false;\n        }\n        if (groupByKeys && this.keys.length === 0) {\n            return undefined;\n        }\n        let processedData = this.extractData(data);\n        if (groupByKeys) {\n            processedData = this.groupData(processedData);\n        }\n        else if (groupByFn) {\n            processedData = this.groupData(processedData, groupByFn(processedData));\n        }\n        if (groupProcessors.length > 0) {\n            this.postProcessGroups(processedData);\n        }\n        if (aggregates.length > 0) {\n            this.aggregateData(processedData);\n        }\n        if (propertyProcessors.length > 0) {\n            this.postProcessProperties(processedData);\n        }\n        if (reducers.length > 0) {\n            this.reduceData(processedData);\n        }\n        if (processors.length > 0) {\n            this.postProcessData(processedData);\n        }\n        for (const def of [...this.keys, ...this.values]) {\n            if (def.missing) {\n                Logger.warnOnce(`the key '${def.property}' was not found in at least one data element.`);\n            }\n        }\n        const end = performance.now();\n        processedData.time = end - start;\n        if (DataModel.DEBUG()) {\n            logProcessedData(processedData);\n        }\n        return processedData;\n    }\n    valueIdxLookup(prop) {\n        let result;\n        if (typeof prop === 'string') {\n            result = this.values.findIndex((def) => def.property === prop);\n        }\n        else {\n            result = this.values.findIndex((def) => def.id === prop.id);\n        }\n        if (result >= 0) {\n            return result;\n        }\n        throw new Error('AG Charts - configuration error, unknown property: ' + prop);\n    }\n    extractData(data) {\n        const { keys: keyDefs, values: valueDefs, opts: { dataVisible }, } = this;\n        const { dataDomain, processValue } = this.initDataDomainProcessor();\n        const resultData = new Array(dataVisible ? data.length : 0);\n        let resultDataIdx = 0;\n        for (const datum of data) {\n            const keys = dataVisible ? new Array(keyDefs.length) : undefined;\n            let keyIdx = 0;\n            let key;\n            for (const def of keyDefs) {\n                key = processValue(def, datum, key);\n                if (key === INVALID_VALUE)\n                    break;\n                if (keys) {\n                    keys[keyIdx++] = key;\n                }\n            }\n            if (key === INVALID_VALUE)\n                continue;\n            const values = dataVisible && valueDefs.length > 0 ? new Array(valueDefs.length) : undefined;\n            let valueIdx = 0;\n            let value;\n            for (const def of valueDefs) {\n                value = processValue(def, datum, value);\n                if (value === INVALID_VALUE)\n                    break;\n                if (values) {\n                    values[valueIdx++] = value;\n                }\n            }\n            if (value === INVALID_VALUE)\n                continue;\n            if (dataVisible) {\n                resultData[resultDataIdx++] = {\n                    datum,\n                    keys,\n                    values,\n                };\n            }\n        }\n        resultData.length = resultDataIdx;\n        const propertyDomain = (def) => {\n            var _a;\n            const result = dataDomain.get((_a = def.id) !== null && _a !== void 0 ? _a : def.property).domain;\n            if (Array.isArray(result) && result[0] > result[1]) {\n                // Ignore starting values.\n                return [];\n            }\n            return [...result];\n        };\n        return {\n            type: 'ungrouped',\n            data: resultData,\n            domain: {\n                keys: keyDefs.map((def) => propertyDomain(def)),\n                values: valueDefs.map((def) => propertyDomain(def)),\n            },\n            indices: {\n                keys: keyDefs.reduce((r, { property, index }) => {\n                    r[property] = index;\n                    return r;\n                }, {}),\n                values: valueDefs.reduce((r, { property, index }) => {\n                    r[property] = index;\n                    return r;\n                }, {}),\n            },\n            defs: {\n                keys: keyDefs,\n                values: valueDefs,\n            },\n            time: 0,\n        };\n    }\n    groupData(data, groupingFn) {\n        const processedData = new Map();\n        for (const dataEntry of data.data) {\n            const { keys, values, datum } = dataEntry;\n            const group = groupingFn ? groupingFn(dataEntry) : keys;\n            const groupStr = toKeyString(group);\n            if (processedData.has(groupStr)) {\n                const existingData = processedData.get(groupStr);\n                existingData.values.push(values);\n                existingData.datum.push(datum);\n            }\n            else {\n                processedData.set(groupStr, { keys: group, values: [values], datum: [datum] });\n            }\n        }\n        const resultData = new Array(processedData.size);\n        const resultGroups = new Array(processedData.size);\n        let dataIndex = 0;\n        for (const [, { keys, values, datum }] of processedData.entries()) {\n            resultGroups[dataIndex] = keys;\n            resultData[dataIndex++] = {\n                keys,\n                values,\n                datum,\n            };\n        }\n        return Object.assign(Object.assign({}, data), { type: 'grouped', data: resultData, domain: Object.assign(Object.assign({}, data.domain), { groups: resultGroups }) });\n    }\n    aggregateData(processedData) {\n        var _a, _b, _c, _d, _e, _f, _g;\n        const { aggregates: aggDefs } = this;\n        if (!aggDefs)\n            return;\n        const resultAggValues = aggDefs.map(() => [Infinity, -Infinity]);\n        const resultAggValueIndices = aggDefs.map((defs) => defs.properties.map((prop) => this.valueIdxLookup(prop)));\n        const resultAggFns = aggDefs.map((def) => def.aggregateFunction);\n        const resultGroupAggFns = aggDefs.map((def) => def.groupAggregateFunction);\n        const resultFinalFns = aggDefs.map((def) => def.finalFunction);\n        for (const group of processedData.data) {\n            let { values } = group;\n            (_a = group.aggValues) !== null && _a !== void 0 ? _a : (group.aggValues = new Array(resultAggValueIndices.length));\n            if (processedData.type === 'ungrouped') {\n                values = [values];\n            }\n            let resultIdx = 0;\n            for (const indices of resultAggValueIndices) {\n                let groupAggValues = (_c = (_b = resultGroupAggFns[resultIdx]) === null || _b === void 0 ? void 0 : _b.call(resultGroupAggFns)) !== null && _c !== void 0 ? _c : extendDomain([]);\n                for (const distinctValues of values) {\n                    const valuesToAgg = indices.map((valueIdx) => distinctValues[valueIdx]);\n                    const valuesAgg = resultAggFns[resultIdx](valuesToAgg, group.keys);\n                    if (valuesAgg) {\n                        groupAggValues =\n                            (_e = (_d = resultGroupAggFns[resultIdx]) === null || _d === void 0 ? void 0 : _d.call(resultGroupAggFns, valuesAgg, groupAggValues)) !== null && _e !== void 0 ? _e : extendDomain(valuesAgg, groupAggValues);\n                    }\n                }\n                const finalValues = ((_g = (_f = resultFinalFns[resultIdx]) === null || _f === void 0 ? void 0 : _f.call(resultFinalFns, groupAggValues)) !== null && _g !== void 0 ? _g : groupAggValues).map((v) => round(v));\n                extendDomain(finalValues, resultAggValues[resultIdx]);\n                group.aggValues[resultIdx++] = finalValues;\n            }\n        }\n        processedData.domain.aggValues = resultAggValues;\n    }\n    postProcessGroups(processedData) {\n        const { groupProcessors } = this;\n        if (!groupProcessors)\n            return;\n        for (const processor of groupProcessors) {\n            const valueIndexes = processor.properties.map((p) => this.valueIdxLookup(p));\n            const adjustFn = processor.adjust();\n            if (processedData.type === 'grouped') {\n                for (const group of processedData.data) {\n                    for (const values of group.values) {\n                        if (values) {\n                            adjustFn(values, valueIndexes);\n                        }\n                    }\n                }\n            }\n            else {\n                for (const group of processedData.data) {\n                    if (group.values) {\n                        adjustFn(group.values, valueIndexes);\n                    }\n                }\n            }\n        }\n    }\n    postProcessProperties(processedData) {\n        const { propertyProcessors } = this;\n        if (!propertyProcessors)\n            return;\n        for (const { adjust, property } of propertyProcessors) {\n            adjust()(processedData, this.valueIdxLookup(property));\n        }\n    }\n    reduceData(processedData) {\n        var _a;\n        const { reducers: reducerDefs } = this;\n        const reducers = reducerDefs.map((def) => def.reducer());\n        const accValues = reducerDefs.map((def) => def.initialValue);\n        for (const group of processedData.data) {\n            let reducerIndex = 0;\n            for (const reducer of reducers) {\n                accValues[reducerIndex] = reducer(accValues[reducerIndex], group);\n                reducerIndex++;\n            }\n        }\n        for (let accIdx = 0; accIdx < accValues.length; accIdx++) {\n            (_a = processedData.reduced) !== null && _a !== void 0 ? _a : (processedData.reduced = {});\n            processedData.reduced[reducerDefs[accIdx].property] = accValues[accIdx];\n        }\n    }\n    postProcessData(processedData) {\n        var _a;\n        const { processors: processorDefs } = this;\n        for (const def of processorDefs) {\n            (_a = processedData.reduced) !== null && _a !== void 0 ? _a : (processedData.reduced = {});\n            processedData.reduced[def.property] = def.calculate(processedData);\n        }\n    }\n    initDataDomainProcessor() {\n        const { keys: keyDefs, values: valueDefs } = this;\n        const dataDomain = new Map();\n        const processorFns = new Map();\n        const initDataDomainKey = (key, type, updateDataDomain) => {\n            if (type === 'category') {\n                updateDataDomain.set(key, { type, domain: new Set() });\n            }\n            else {\n                updateDataDomain.set(key, { type, domain: [Infinity, -Infinity] });\n            }\n        };\n        const initDataDomain = (updateDataDomain = dataDomain) => {\n            keyDefs.forEach((def) => { var _a; return initDataDomainKey((_a = def.id) !== null && _a !== void 0 ? _a : def.property, def.valueType, updateDataDomain); });\n            valueDefs.forEach((def) => { var _a; return initDataDomainKey((_a = def.id) !== null && _a !== void 0 ? _a : def.property, def.valueType, updateDataDomain); });\n            return updateDataDomain;\n        };\n        initDataDomain();\n        const processValue = (def, datum, previousDatum) => {\n            var _a, _b, _c, _d, _e;\n            const valueInDatum = def.property in datum;\n            const missingValueDef = 'missingValue' in def;\n            if (!def.missing && !valueInDatum && !missingValueDef) {\n                def.missing = true;\n            }\n            if (!dataDomain.has((_a = def.id) !== null && _a !== void 0 ? _a : def.property)) {\n                initDataDomain(dataDomain);\n            }\n            let value = valueInDatum ? datum[def.property] : def.missingValue;\n            if (valueInDatum) {\n                const valid = (_c = (_b = def.validation) === null || _b === void 0 ? void 0 : _b.call(def, value)) !== null && _c !== void 0 ? _c : true;\n                if (!valid) {\n                    if ('invalidValue' in def) {\n                        value = def.invalidValue;\n                    }\n                    else {\n                        return INVALID_VALUE;\n                    }\n                }\n            }\n            if (def.processor) {\n                if (!processorFns.has(def)) {\n                    processorFns.set(def, def.processor());\n                }\n                value = (_d = processorFns.get(def)) === null || _d === void 0 ? void 0 : _d(value, previousDatum !== INVALID_VALUE ? previousDatum : undefined);\n            }\n            const meta = dataDomain.get((_e = def.id) !== null && _e !== void 0 ? _e : def.property);\n            if ((meta === null || meta === void 0 ? void 0 : meta.type) === 'category') {\n                meta.domain.add(value);\n            }\n            else if ((meta === null || meta === void 0 ? void 0 : meta.type) === 'range') {\n                if (meta.domain[0] > value) {\n                    meta.domain[0] = value;\n                }\n                if (meta.domain[1] < value) {\n                    meta.domain[1] = value;\n                }\n            }\n            return value;\n        };\n        return { dataDomain, processValue, initDataDomain };\n    }\n}\nDataModel.DEBUG = () => { var _a; return (_a = [true, 'data-model'].includes(windowValue('agChartsDebug'))) !== null && _a !== void 0 ? _a : false; };\nfunction logProcessedData(processedData) {\n    var _a, _b;\n    const log = (name, data) => {\n        if (data.length > 0) {\n            // eslint-disable-next-line no-console\n            console.log(name);\n            // eslint-disable-next-line no-console\n            console.table(data);\n        }\n    };\n    // eslint-disable-next-line no-console\n    console.log({ processedData });\n    log('Key Domains', processedData.domain.keys);\n    log('Group Domains', (_a = processedData.domain.groups) !== null && _a !== void 0 ? _a : []);\n    log('Value Domains', processedData.domain.values);\n    log('Aggregate Domains', (_b = processedData.domain.aggValues) !== null && _b !== void 0 ? _b : []);\n    if (processedData.type === 'grouped') {\n        const flattenedValues = processedData.data.reduce((acc, next) => {\n            var _a, _b;\n            const keys = (_a = next.keys) !== null && _a !== void 0 ? _a : [];\n            const aggValues = (_b = next.aggValues) !== null && _b !== void 0 ? _b : [];\n            const skipKeys = next.keys.map(() => undefined);\n            const skipAggValues = aggValues === null || aggValues === void 0 ? void 0 : aggValues.map(() => undefined);\n            acc.push(...next.values.map((v, i) => [\n                ...(i === 0 ? keys : skipKeys),\n                ...(v !== null && v !== void 0 ? v : []),\n                ...(i == 0 ? aggValues : skipAggValues),\n            ]));\n            return acc;\n        }, []);\n        log('Values', flattenedValues);\n    }\n    else {\n        const flattenedValues = processedData.data.reduce((acc, next) => {\n            var _a;\n            const aggValues = (_a = next.aggValues) !== null && _a !== void 0 ? _a : [];\n            acc.push([...next.keys, ...next.values, ...aggValues]);\n            return acc;\n        }, []);\n        log('Values', flattenedValues);\n    }\n}\n\nfunction createDeprecationWarning() {\n    return (key, message) => {\n        const msg = [`Property [${key}] is deprecated.`, message].filter((v) => v != null).join(' ');\n        Logger.warnOnce(msg);\n    };\n}\nfunction Deprecated(message, opts) {\n    const def = opts === null || opts === void 0 ? void 0 : opts.default;\n    const warn = createDeprecationWarning();\n    return addTransformToInstanceProperty((_, key, value) => {\n        if (value !== def) {\n            warn(key.toString(), message);\n        }\n        return value;\n    });\n}\nfunction DeprecatedAndRenamedTo(newPropName, mapValue) {\n    const warnDeprecated = createDeprecationWarning();\n    return addTransformToInstanceProperty((target, key, value) => {\n        if (value !== target[newPropName]) {\n            warnDeprecated(key.toString(), `Use [${newPropName}] instead.`);\n            target[newPropName] = mapValue ? mapValue(value) : value;\n        }\n        return BREAK_TRANSFORM_CHAIN;\n    }, (target, key) => {\n        warnDeprecated(key.toString(), `Use [${newPropName}] instead.`);\n        return target[newPropName];\n    });\n}\n\nvar __decorate$1T = ( false) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nconst DEFAULT_TOOLTIP_CLASS = 'ag-chart-tooltip';\nconst defaultTooltipCss$1 = `\n.${DEFAULT_TOOLTIP_CLASS} {\n    transition: transform 0.1s ease;\n    display: table;\n    position: fixed;\n    left: 0px;\n    top: 0px;\n    white-space: nowrap;\n    z-index: 99999;\n    font: 12px Verdana, sans-serif;\n    color: black;\n    background: rgb(244, 244, 244);\n    border-radius: 5px;\n    box-shadow: 0 0 1px rgba(3, 3, 3, 0.7), 0.5vh 0.5vh 1vh rgba(3, 3, 3, 0.25);\n}\n\n.${DEFAULT_TOOLTIP_CLASS}-no-interaction {\n    pointer-events: none;\n    user-select: none;\n}\n\n.${DEFAULT_TOOLTIP_CLASS}-no-animation {\n    transition: none !important;\n}\n\n.${DEFAULT_TOOLTIP_CLASS}-hidden {\n    visibility: hidden;\n}\n\n.${DEFAULT_TOOLTIP_CLASS}-title {\n    font-weight: bold;\n    padding: 7px;\n    border-top-left-radius: 5px;\n    border-top-right-radius: 5px;\n    color: white;\n    background-color: #888888;\n    border-top-left-radius: 5px;\n    border-top-right-radius: 5px;\n}\n\n.${DEFAULT_TOOLTIP_CLASS}-content {\n    padding: 7px;\n    line-height: 1.7em;\n    border-bottom-left-radius: 5px;\n    border-bottom-right-radius: 5px;\n    overflow: hidden;\n}\n\n.${DEFAULT_TOOLTIP_CLASS}-content:empty {\n    padding: 0;\n    height: 7px;\n}\n\n.${DEFAULT_TOOLTIP_CLASS}-arrow::before {\n    content: \"\";\n\n    position: absolute;\n    top: 100%;\n    left: 50%;\n    transform: translateX(-50%);\n\n    border: 6px solid #989898;\n\n    border-left-color: transparent;\n    border-right-color: transparent;\n    border-top-color: #989898;\n    border-bottom-color: transparent;\n\n    width: 0;\n    height: 0;\n\n    margin: 0 auto;\n}\n\n.${DEFAULT_TOOLTIP_CLASS}-arrow::after {\n    content: \"\";\n\n    position: absolute;\n    top: 100%;\n    left: 50%;\n    transform: translateX(-50%);\n\n    border: 5px solid black;\n\n    border-left-color: transparent;\n    border-right-color: transparent;\n    border-top-color: rgb(244, 244, 244);\n    border-bottom-color: transparent;\n\n    width: 0;\n    height: 0;\n\n    margin: 0 auto;\n}\n\n.ag-chart-wrapper {\n    box-sizing: border-box;\n    overflow: hidden;\n}\n`;\nfunction toTooltipHtml$1(input, defaults) {\n    var _a, _b, _c, _d;\n    if (typeof input === 'string') {\n        return input;\n    }\n    defaults = defaults !== null && defaults !== void 0 ? defaults : {};\n    const { content = (_a = defaults.content) !== null && _a !== void 0 ? _a : '', title = (_b = defaults.title) !== null && _b !== void 0 ? _b : undefined, color = (_c = defaults.color) !== null && _c !== void 0 ? _c : 'white', backgroundColor = (_d = defaults.backgroundColor) !== null && _d !== void 0 ? _d : '#888', } = input;\n    const titleHtml = title\n        ? `<div class=\"${DEFAULT_TOOLTIP_CLASS}-title\"\n        style=\"color: ${color}; background-color: ${backgroundColor}\">${title}</div>`\n        : '';\n    return `${titleHtml}<div class=\"${DEFAULT_TOOLTIP_CLASS}-content\">${content}</div>`;\n}\nconst POSITION_TYPES = ['pointer', 'node'];\nconst POSITION_TYPE = predicateWithMessage((v) => POSITION_TYPES.includes(v), `expecting a position type keyword such as 'pointer' or 'node'`);\nclass TooltipPosition {\n    constructor() {\n        /** The type of positioning for the tooltip. By default, the tooltip follows the pointer. */\n        this.type = 'pointer';\n        /** The horizontal offset in pixels for the position of the tooltip. */\n        this.xOffset = 0;\n        /** The vertical offset in pixels for the position of the tooltip. */\n        this.yOffset = 0;\n    }\n}\n__decorate$1T([\n    Validate(POSITION_TYPE)\n], TooltipPosition.prototype, \"type\", void 0);\n__decorate$1T([\n    Validate(NUMBER())\n], TooltipPosition.prototype, \"xOffset\", void 0);\n__decorate$1T([\n    Validate(NUMBER())\n], TooltipPosition.prototype, \"yOffset\", void 0);\nclass Tooltip {\n    constructor(canvasElement, document, container) {\n        this.enableInteraction = false;\n        this.enabled = true;\n        this.showArrow = undefined;\n        this.class = undefined;\n        this.lastClass = undefined;\n        this.delay = 0;\n        this.range = 'nearest';\n        this.position = new TooltipPosition();\n        this.showTimeout = 0;\n        this._showArrow = true;\n        this.tooltipRoot = container;\n        const element = document.createElement('div');\n        this.element = this.tooltipRoot.appendChild(element);\n        this.element.classList.add(DEFAULT_TOOLTIP_CLASS);\n        this.canvasElement = canvasElement;\n        // Detect when the chart becomes invisible and hide the tooltip as well.\n        if (window.IntersectionObserver) {\n            const observer = new IntersectionObserver((entries) => {\n                for (const entry of entries) {\n                    if (entry.target === this.canvasElement && entry.intersectionRatio === 0) {\n                        this.toggle(false);\n                    }\n                }\n            }, { root: this.tooltipRoot });\n            observer.observe(this.canvasElement);\n            this.observer = observer;\n        }\n        if (Tooltip.tooltipDocuments.indexOf(document) < 0) {\n            const styleElement = document.createElement('style');\n            styleElement.innerHTML = defaultTooltipCss$1;\n            // Make sure the default tooltip style goes before other styles so it can be overridden.\n            document.head.insertBefore(styleElement, document.head.querySelector('style'));\n            Tooltip.tooltipDocuments.push(document);\n        }\n    }\n    destroy() {\n        const { parentNode } = this.element;\n        if (parentNode) {\n            parentNode.removeChild(this.element);\n        }\n        if (this.observer) {\n            this.observer.unobserve(this.canvasElement);\n        }\n    }\n    isVisible() {\n        const { element } = this;\n        return !element.classList.contains(DEFAULT_TOOLTIP_CLASS + '-hidden');\n    }\n    updateClass(visible, showArrow) {\n        const { element, class: newClass, lastClass, enableInteraction } = this;\n        const wasVisible = this.isVisible();\n        const toggleClass = (name, include) => {\n            const className = `${DEFAULT_TOOLTIP_CLASS}-${name}`;\n            if (include) {\n                element.classList.add(className);\n            }\n            else {\n                element.classList.remove(className);\n            }\n        };\n        toggleClass('no-animation', !wasVisible && !!visible); // No animation on first show.\n        toggleClass('no-interaction', !enableInteraction); // Prevent interaction.\n        toggleClass('hidden', !visible); // Hide if not visible.\n        toggleClass('arrow', !!showArrow); // Add arrow if tooltip is constrained.\n        if (newClass !== lastClass) {\n            if (lastClass) {\n                element.classList.remove(lastClass);\n            }\n            if (newClass) {\n                element.classList.add(newClass);\n            }\n            this.lastClass = newClass;\n        }\n    }\n    /**\n     * Shows tooltip at the given event's coordinates.\n     * If the `html` parameter is missing, moves the existing tooltip to the new position.\n     */\n    show(meta, html, instantly = false) {\n        var _a, _b, _c, _d, _e, _f, _g;\n        const { element, canvasElement } = this;\n        if (html !== undefined) {\n            element.innerHTML = html;\n        }\n        else if (!element.innerHTML) {\n            return;\n        }\n        const limit = (low, actual, high) => {\n            return Math.max(Math.min(actual, high), low);\n        };\n        const xOffset = (_b = (_a = meta.position) === null || _a === void 0 ? void 0 : _a.xOffset) !== null && _b !== void 0 ? _b : 0;\n        const yOffset = (_d = (_c = meta.position) === null || _c === void 0 ? void 0 : _c.yOffset) !== null && _d !== void 0 ? _d : 0;\n        const canvasRect = canvasElement.getBoundingClientRect();\n        const naiveLeft = canvasRect.left + meta.offsetX - element.clientWidth / 2 + xOffset;\n        const naiveTop = canvasRect.top + meta.offsetY - element.clientHeight - 8 + yOffset;\n        const windowBounds = this.getWindowBoundingBox();\n        const maxLeft = windowBounds.x + windowBounds.width - element.clientWidth - 1;\n        const maxTop = windowBounds.y + windowBounds.height - element.clientHeight;\n        const left = limit(windowBounds.x, naiveLeft, maxLeft);\n        const top = limit(windowBounds.y, naiveTop, maxTop);\n        const constrained = left !== naiveLeft || top !== naiveTop;\n        const defaultShowArrow = !constrained && !xOffset && !yOffset;\n        const showArrow = (_f = (_e = meta.showArrow) !== null && _e !== void 0 ? _e : this.showArrow) !== null && _f !== void 0 ? _f : defaultShowArrow;\n        this.updateShowArrow(showArrow);\n        element.style.transform = `translate(${Math.round(left)}px, ${Math.round(top)}px)`;\n        this.enableInteraction = (_g = meta.enableInteraction) !== null && _g !== void 0 ? _g : false;\n        if (this.delay > 0 && !instantly) {\n            this.toggle(false);\n            this.showTimeout = window.setTimeout(() => {\n                this.toggle(true);\n            }, this.delay);\n            return;\n        }\n        this.toggle(true);\n    }\n    getWindowBoundingBox() {\n        return new BBox(0, 0, window.innerWidth, window.innerHeight);\n    }\n    toggle(visible) {\n        if (!visible) {\n            window.clearTimeout(this.showTimeout);\n        }\n        this.updateClass(visible, this._showArrow);\n    }\n    pointerLeftOntoTooltip(event) {\n        var _a;\n        if (!this.enableInteraction)\n            return false;\n        const classList = (_a = event.sourceEvent.relatedTarget) === null || _a === void 0 ? void 0 : _a.classList;\n        const classes = ['', '-title', '-content'];\n        const classListContains = Boolean(classes.filter((c) => classList === null || classList === void 0 ? void 0 : classList.contains(`${DEFAULT_TOOLTIP_CLASS}${c}`)));\n        return classList !== undefined && classListContains;\n    }\n    updateShowArrow(show) {\n        this._showArrow = show;\n    }\n}\nTooltip.tooltipDocuments = [];\n__decorate$1T([\n    Validate(BOOLEAN)\n], Tooltip.prototype, \"enabled\", void 0);\n__decorate$1T([\n    Validate(OPT_BOOLEAN)\n], Tooltip.prototype, \"showArrow\", void 0);\n__decorate$1T([\n    Validate(OPT_STRING)\n], Tooltip.prototype, \"class\", void 0);\n__decorate$1T([\n    Validate(NUMBER(0))\n], Tooltip.prototype, \"delay\", void 0);\n__decorate$1T([\n    DeprecatedAndRenamedTo('range', (value) => (value ? 'nearest' : 'exact'))\n], Tooltip.prototype, \"tracking\", void 0);\n__decorate$1T([\n    Validate(INTERACTION_RANGE)\n], Tooltip.prototype, \"range\", void 0);\n\nfunction sumValues(values, accumulator = [0, 0]) {\n    for (const value of values) {\n        if (typeof value !== 'number') {\n            continue;\n        }\n        if (value < 0) {\n            accumulator[0] += value;\n        }\n        if (value > 0) {\n            accumulator[1] += value;\n        }\n    }\n    return accumulator;\n}\nfunction sum(props) {\n    const result = {\n        properties: props,\n        type: 'aggregate',\n        aggregateFunction: (values) => sumValues(values),\n    };\n    return result;\n}\nfunction groupSum(props) {\n    return {\n        type: 'aggregate',\n        properties: props,\n        aggregateFunction: (values) => sumValues(values),\n        groupAggregateFunction: (next, acc = [0, 0]) => {\n            var _a, _b;\n            acc[0] += (_a = next === null || next === void 0 ? void 0 : next[0]) !== null && _a !== void 0 ? _a : 0;\n            acc[1] += (_b = next === null || next === void 0 ? void 0 : next[1]) !== null && _b !== void 0 ? _b : 0;\n            return acc;\n        },\n    };\n}\nfunction groupCount() {\n    return {\n        type: 'aggregate',\n        properties: [],\n        aggregateFunction: () => [0, 1],\n        groupAggregateFunction: (next, acc = [0, 0]) => {\n            var _a, _b;\n            acc[0] += (_a = next === null || next === void 0 ? void 0 : next[0]) !== null && _a !== void 0 ? _a : 0;\n            acc[1] += (_b = next === null || next === void 0 ? void 0 : next[1]) !== null && _b !== void 0 ? _b : 0;\n            return acc;\n        },\n    };\n}\nfunction groupAverage(props) {\n    const result = {\n        properties: props,\n        type: 'aggregate',\n        aggregateFunction: (values) => sumValues(values),\n        groupAggregateFunction: (next, acc = [0, 0, -1]) => {\n            var _a, _b;\n            acc[0] += (_a = next === null || next === void 0 ? void 0 : next[0]) !== null && _a !== void 0 ? _a : 0;\n            acc[1] += (_b = next === null || next === void 0 ? void 0 : next[1]) !== null && _b !== void 0 ? _b : 0;\n            acc[2]++;\n            return acc;\n        },\n        finalFunction: (acc = [0, 0, 0]) => {\n            const result = acc[0] + acc[1];\n            if (result >= 0) {\n                return [0, result / acc[2]];\n            }\n            return [result / acc[2], 0];\n        },\n    };\n    return result;\n}\nfunction area(props, aggFn) {\n    const result = {\n        properties: props,\n        type: 'aggregate',\n        aggregateFunction: (values, keyRange = []) => {\n            const keyWidth = keyRange[1] - keyRange[0];\n            return aggFn.aggregateFunction(values).map((v) => v / keyWidth);\n        },\n    };\n    if (aggFn.groupAggregateFunction) {\n        result.groupAggregateFunction = aggFn.groupAggregateFunction;\n    }\n    return result;\n}\nfunction accumulatedValue() {\n    return () => {\n        let value = 0;\n        return (datum) => {\n            if (typeof datum !== 'number')\n                return datum;\n            if (isNaN(datum))\n                return datum;\n            value += datum;\n            return value;\n        };\n    };\n}\n\nvar __decorate$1S = ( false) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nvar __rest$4 = ( false) || function (s, e) {\n    var t = {};\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\n        t[p] = s[p];\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\n                t[p[i]] = s[p[i]];\n        }\n    return t;\n};\n/** Modes of matching user interactions to rendered nodes (e.g. hover or click) */\nvar SeriesNodePickMode;\n(function (SeriesNodePickMode) {\n    /** Pick matches based upon pick coordinates being inside a matching shape/marker. */\n    SeriesNodePickMode[SeriesNodePickMode[\"EXACT_SHAPE_MATCH\"] = 0] = \"EXACT_SHAPE_MATCH\";\n    /** Pick matches by nearest category/X-axis value, then distance within that category/X-value. */\n    SeriesNodePickMode[SeriesNodePickMode[\"NEAREST_BY_MAIN_AXIS_FIRST\"] = 1] = \"NEAREST_BY_MAIN_AXIS_FIRST\";\n    /** Pick matches by nearest category value, then distance within that category. */\n    SeriesNodePickMode[SeriesNodePickMode[\"NEAREST_BY_MAIN_CATEGORY_AXIS_FIRST\"] = 2] = \"NEAREST_BY_MAIN_CATEGORY_AXIS_FIRST\";\n    /** Pick matches based upon distance to ideal position */\n    SeriesNodePickMode[SeriesNodePickMode[\"NEAREST_NODE\"] = 3] = \"NEAREST_NODE\";\n})(SeriesNodePickMode || (SeriesNodePickMode = {}));\nfunction keyProperty(propName, continuous, opts = {}) {\n    const result = Object.assign({ property: propName, type: 'key', valueType: continuous ? 'range' : 'category', validation: (v) => checkDatum(v, continuous) != null }, opts);\n    return result;\n}\nfunction valueProperty(propName, continuous, opts = {}) {\n    const result = Object.assign({ property: propName, type: 'value', valueType: continuous ? 'range' : 'category', validation: (v) => checkDatum(v, continuous) != null }, opts);\n    return result;\n}\nfunction rangedValueProperty(propName, opts = {}) {\n    const { min = -Infinity, max = Infinity } = opts, defOpts = __rest$4(opts, [\"min\", \"max\"]);\n    return Object.assign({ type: 'value', property: propName, valueType: 'range', validation: (v) => checkDatum(v, true) != null, processor: () => (datum) => {\n            if (typeof datum !== 'number')\n                return datum;\n            if (isNaN(datum))\n                return datum;\n            return Math.min(Math.max(datum, min), max);\n        } }, defOpts);\n}\nfunction accumulativeValueProperty(propName, continuous, opts = {}) {\n    const result = Object.assign(Object.assign({}, valueProperty(propName, continuous, opts)), { processor: accumulatedValue() });\n    return result;\n}\nclass SeriesNodeBaseClickEvent {\n    constructor(nativeEvent, datum, series) {\n        this.type = 'nodeClick';\n        this.event = nativeEvent;\n        this.datum = datum.datum;\n        this.seriesId = series.id;\n    }\n}\nclass SeriesNodeClickEvent extends SeriesNodeBaseClickEvent {\n}\nclass SeriesNodeDoubleClickEvent extends SeriesNodeBaseClickEvent {\n    constructor() {\n        super(...arguments);\n        this.type = 'nodeDoubleClick';\n    }\n}\nclass SeriesItemHighlightStyle {\n    constructor() {\n        this.fill = 'yellow';\n        this.fillOpacity = undefined;\n        this.stroke = undefined;\n        this.strokeWidth = undefined;\n    }\n}\n__decorate$1S([\n    Validate(OPT_COLOR_STRING)\n], SeriesItemHighlightStyle.prototype, \"fill\", void 0);\n__decorate$1S([\n    Validate(OPT_NUMBER(0, 1))\n], SeriesItemHighlightStyle.prototype, \"fillOpacity\", void 0);\n__decorate$1S([\n    Validate(OPT_COLOR_STRING)\n], SeriesItemHighlightStyle.prototype, \"stroke\", void 0);\n__decorate$1S([\n    Validate(OPT_NUMBER(0))\n], SeriesItemHighlightStyle.prototype, \"strokeWidth\", void 0);\nclass SeriesHighlightStyle {\n    constructor() {\n        this.strokeWidth = undefined;\n        this.dimOpacity = undefined;\n        this.enabled = undefined;\n    }\n}\n__decorate$1S([\n    Validate(OPT_NUMBER(0))\n], SeriesHighlightStyle.prototype, \"strokeWidth\", void 0);\n__decorate$1S([\n    Validate(OPT_NUMBER(0, 1))\n], SeriesHighlightStyle.prototype, \"dimOpacity\", void 0);\n__decorate$1S([\n    Validate(OPT_BOOLEAN)\n], SeriesHighlightStyle.prototype, \"enabled\", void 0);\nclass TextHighlightStyle {\n    constructor() {\n        this.color = 'black';\n    }\n}\n__decorate$1S([\n    Validate(OPT_COLOR_STRING)\n], TextHighlightStyle.prototype, \"color\", void 0);\nclass HighlightStyle {\n    constructor() {\n        this.item = new SeriesItemHighlightStyle();\n        this.series = new SeriesHighlightStyle();\n        this.text = new TextHighlightStyle();\n    }\n}\nclass SeriesTooltip {\n    constructor() {\n        this.enabled = true;\n        this.showArrow = undefined;\n        this.interaction = new SeriesTooltipInteraction();\n        this.position = new TooltipPosition();\n    }\n}\n__decorate$1S([\n    Validate(BOOLEAN)\n], SeriesTooltip.prototype, \"enabled\", void 0);\n__decorate$1S([\n    Validate(OPT_BOOLEAN)\n], SeriesTooltip.prototype, \"showArrow\", void 0);\nclass SeriesTooltipInteraction {\n    constructor() {\n        this.enabled = false;\n    }\n}\n__decorate$1S([\n    Validate(BOOLEAN)\n], SeriesTooltipInteraction.prototype, \"enabled\", void 0);\nclass Series extends Observable {\n    constructor(opts) {\n        super();\n        this.id = createId$1(this);\n        // The group node that contains all the nodes used to render this series.\n        this.rootGroup = new Group({ name: 'seriesRoot' });\n        this.directions = [ChartAxisDirection.X, ChartAxisDirection.Y];\n        // Flag to determine if we should recalculate node data.\n        this.nodeDataRefresh = true;\n        this._data = undefined;\n        this._visible = true;\n        this.showInLegend = true;\n        this.cursor = 'default';\n        this.nodeClickRange = 'exact';\n        this._declarationOrder = -1;\n        this.highlightStyle = new HighlightStyle();\n        this.ctx = opts.moduleCtx;\n        const { useSeriesGroupLayer = true, useLabelLayer = false, pickModes = [SeriesNodePickMode.NEAREST_BY_MAIN_AXIS_FIRST], directionKeys = {}, directionNames = {}, } = opts;\n        const { rootGroup } = this;\n        this.directionKeys = directionKeys;\n        this.directionNames = directionNames;\n        this.contentGroup = rootGroup.appendChild(new Group({\n            name: `${this.id}-content`,\n            layer: useSeriesGroupLayer,\n            zIndex: Layers.SERIES_LAYER_ZINDEX,\n            zIndexSubOrder: [() => this._declarationOrder, 0],\n        }));\n        this.highlightGroup = rootGroup.appendChild(new Group({\n            name: `${this.id}-highlight`,\n            layer: true,\n            zIndex: Layers.SERIES_LAYER_ZINDEX,\n            zIndexSubOrder: [() => this._declarationOrder, 15000],\n        }));\n        this.highlightNode = this.highlightGroup.appendChild(new Group({ name: 'highlightNode' }));\n        this.highlightLabel = this.highlightGroup.appendChild(new Group({ name: 'highlightLabel' }));\n        this.highlightNode.zIndex = 0;\n        this.highlightLabel.zIndex = 10;\n        this.pickModes = pickModes;\n        if (useLabelLayer) {\n            this.labelGroup = rootGroup.appendChild(new Group({\n                name: `${this.id}-series-labels`,\n                layer: true,\n                zIndex: Layers.SERIES_LABEL_ZINDEX,\n            }));\n        }\n    }\n    get type() {\n        var _a;\n        return (_a = this.constructor.type) !== null && _a !== void 0 ? _a : '';\n    }\n    set data(input) {\n        this._data = input;\n        this.nodeDataRefresh = true;\n    }\n    get data() {\n        return this._data;\n    }\n    hasData() {\n        const { data } = this;\n        return data && (!Array.isArray(data) || data.length > 0);\n    }\n    set visible(value) {\n        this._visible = value;\n        this.visibleChanged();\n    }\n    get visible() {\n        return this._visible;\n    }\n    getBandScalePadding() {\n        return { inner: 1, outer: 0 };\n    }\n    addChartEventListeners() {\n        return;\n    }\n    destroy() {\n        // Override point for sub-classes.\n    }\n    getDirectionValues(direction, properties) {\n        const resolvedDirection = this.resolveKeyDirection(direction);\n        const keys = properties === null || properties === void 0 ? void 0 : properties[resolvedDirection];\n        const values = [];\n        const flatten = (...array) => {\n            for (const value of array) {\n                addValue(value);\n            }\n        };\n        const addValue = (value) => {\n            if (Array.isArray(value)) {\n                flatten(...value);\n            }\n            else if (typeof value === 'object') {\n                flatten(Object.values(value));\n            }\n            else {\n                values.push(value);\n            }\n        };\n        if (!keys)\n            return values;\n        keys.forEach((key) => {\n            const value = this[key];\n            addValue(value);\n        });\n        return values;\n    }\n    getKeys(direction) {\n        return this.getDirectionValues(direction, this.directionKeys);\n    }\n    getNames(direction) {\n        return this.getDirectionValues(direction, this.directionNames);\n    }\n    resolveKeyDirection(direction) {\n        return direction;\n    }\n    // Indicate that something external changed and we should recalculate nodeData.\n    markNodeDataDirty() {\n        this.nodeDataRefresh = true;\n    }\n    visibleChanged() {\n        // Override point for this.visible change post-processing.\n    }\n    getOpacity(datum) {\n        const { highlightStyle: { series: { dimOpacity = 1, enabled = true }, }, } = this;\n        const defaultOpacity = 1;\n        if (enabled === false || dimOpacity === defaultOpacity) {\n            return defaultOpacity;\n        }\n        switch (this.isItemIdHighlighted(datum)) {\n            case 'no-highlight':\n            case 'highlighted':\n                return defaultOpacity;\n            case 'peer-highlighted':\n            case 'other-highlighted':\n                return dimOpacity;\n        }\n    }\n    getStrokeWidth(defaultStrokeWidth, datum) {\n        const { highlightStyle: { series: { strokeWidth, enabled = true }, }, } = this;\n        if (enabled === false || strokeWidth === undefined) {\n            // No change in styling for highlight cases.\n            return defaultStrokeWidth;\n        }\n        switch (this.isItemIdHighlighted(datum)) {\n            case 'highlighted':\n                return strokeWidth;\n            case 'no-highlight':\n            case 'other-highlighted':\n            case 'peer-highlighted':\n                return defaultStrokeWidth;\n        }\n    }\n    isItemIdHighlighted(datum) {\n        var _a;\n        const highlightedDatum = (_a = this.highlightManager) === null || _a === void 0 ? void 0 : _a.getActiveHighlight();\n        const { series, itemId } = highlightedDatum !== null && highlightedDatum !== void 0 ? highlightedDatum : {};\n        const highlighting = series != null;\n        if (!highlighting) {\n            // Highlighting not active.\n            return 'no-highlight';\n        }\n        if (series !== this) {\n            // Highlighting active, this series not highlighted.\n            return 'other-highlighted';\n        }\n        if (itemId === undefined) {\n            // Series doesn't use itemIds - so no further refinement needed, series is highlighted.\n            return 'highlighted';\n        }\n        if (datum && highlightedDatum !== datum && itemId !== datum.itemId) {\n            // A peer (in same Series instance) sub-series has highlight active, but this sub-series\n            // does not.\n            return 'peer-highlighted';\n        }\n        return 'highlighted';\n    }\n    pickNode(point, limitPickModes) {\n        const { pickModes, visible, rootGroup } = this;\n        if (!visible || !rootGroup.visible) {\n            return;\n        }\n        for (const pickMode of pickModes) {\n            if (limitPickModes && !limitPickModes.includes(pickMode)) {\n                continue;\n            }\n            let match = undefined;\n            switch (pickMode) {\n                case SeriesNodePickMode.EXACT_SHAPE_MATCH:\n                    match = this.pickNodeExactShape(point);\n                    break;\n                case SeriesNodePickMode.NEAREST_BY_MAIN_AXIS_FIRST:\n                case SeriesNodePickMode.NEAREST_BY_MAIN_CATEGORY_AXIS_FIRST:\n                    match = this.pickNodeMainAxisFirst(point, pickMode === SeriesNodePickMode.NEAREST_BY_MAIN_CATEGORY_AXIS_FIRST);\n                    break;\n                case SeriesNodePickMode.NEAREST_NODE:\n                    match = this.pickNodeClosestDatum(point);\n                    break;\n            }\n            if (match) {\n                return { pickMode, match: match.datum, distance: match.distance };\n            }\n        }\n    }\n    pickNodeExactShape(point) {\n        const match = this.contentGroup.pickNode(point.x, point.y);\n        if (match) {\n            return {\n                datum: match.datum,\n                distance: 0,\n            };\n        }\n    }\n    pickNodeClosestDatum(_point) {\n        // Override point for sub-classes - but if this is invoked, the sub-class specified it wants\n        // to use this feature.\n        throw new Error('AG Charts - Series.pickNodeClosestDatum() not implemented');\n    }\n    pickNodeMainAxisFirst(_point, _requireCategoryAxis) {\n        // Override point for sub-classes - but if this is invoked, the sub-class specified it wants\n        // to use this feature.\n        throw new Error('AG Charts - Series.pickNodeMainAxisFirst() not implemented');\n    }\n    fireNodeClickEvent(event, _datum) {\n        const eventObject = this.getNodeClickEvent(event, _datum);\n        this.fireEvent(eventObject);\n    }\n    fireNodeDoubleClickEvent(event, _datum) {\n        const eventObject = this.getNodeDoubleClickEvent(event, _datum);\n        this.fireEvent(eventObject);\n    }\n    getNodeClickEvent(event, datum) {\n        return new SeriesNodeClickEvent(event, datum, this);\n    }\n    getNodeDoubleClickEvent(event, datum) {\n        return new SeriesNodeDoubleClickEvent(event, datum, this);\n    }\n    toggleSeriesItem(_itemId, enabled) {\n        this.visible = enabled;\n        this.nodeDataRefresh = true;\n    }\n    isEnabled() {\n        return this.visible;\n    }\n    fixNumericExtent(extent, axis) {\n        var _a;\n        const fixedExtent = fixNumericExtent(extent);\n        if (fixedExtent.length === 0) {\n            return fixedExtent;\n        }\n        let [min, max] = fixedExtent;\n        if (min === max) {\n            // domain has zero length, there is only a single valid value in data\n            const padding = (_a = axis === null || axis === void 0 ? void 0 : axis.calculatePadding(min, max)) !== null && _a !== void 0 ? _a : 1;\n            min -= padding;\n            max += padding;\n        }\n        return [min, max];\n    }\n}\nSeries.highlightedZIndex = 1000000000000;\n__decorate$1S([\n    Validate(STRING)\n], Series.prototype, \"id\", void 0);\n__decorate$1S([\n    Validate(BOOLEAN)\n], Series.prototype, \"_visible\", void 0);\n__decorate$1S([\n    Validate(BOOLEAN)\n], Series.prototype, \"showInLegend\", void 0);\n__decorate$1S([\n    Validate(STRING)\n], Series.prototype, \"cursor\", void 0);\n__decorate$1S([\n    Validate(INTERACTION_RANGE)\n], Series.prototype, \"nodeClickRange\", void 0);\n\nvar __decorate$1R = ( false) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nclass Padding$1 {\n    constructor(top = 0, right = top, bottom = top, left = right) {\n        this.top = top;\n        this.right = right;\n        this.bottom = bottom;\n        this.left = left;\n    }\n    clear() {\n        this.top = this.right = this.bottom = this.left = 0;\n    }\n}\n__decorate$1R([\n    Validate(NUMBER(0))\n], Padding$1.prototype, \"top\", void 0);\n__decorate$1R([\n    Validate(NUMBER(0))\n], Padding$1.prototype, \"right\", void 0);\n__decorate$1R([\n    Validate(NUMBER(0))\n], Padding$1.prototype, \"bottom\", void 0);\n__decorate$1R([\n    Validate(NUMBER(0))\n], Padding$1.prototype, \"left\", void 0);\n\nclass SizeMonitor {\n    static init() {\n        const NativeResizeObserver = window.ResizeObserver;\n        if (NativeResizeObserver) {\n            this.resizeObserver = new NativeResizeObserver((entries) => {\n                for (const entry of entries) {\n                    const { width, height } = entry.contentRect;\n                    this.checkSize(this.elements.get(entry.target), entry.target, width, height);\n                }\n            });\n        }\n        else {\n            // polyfill (more reliable even in browsers that support ResizeObserver)\n            const step = () => {\n                this.elements.forEach((entry, element) => {\n                    this.checkClientSize(element, entry);\n                });\n            };\n            window.setInterval(step, 100);\n        }\n        this.ready = true;\n    }\n    static checkSize(entry, element, width, height) {\n        if (entry) {\n            if (!entry.size || width !== entry.size.width || height !== entry.size.height) {\n                entry.size = { width, height };\n                entry.cb(entry.size, element);\n            }\n        }\n    }\n    // Only a single callback is supported.\n    static observe(element, cb) {\n        if (!this.ready) {\n            this.init();\n        }\n        this.unobserve(element);\n        if (this.resizeObserver) {\n            this.resizeObserver.observe(element);\n        }\n        this.elements.set(element, { cb });\n        // Ensure first size callback happens synchronously.\n        this.checkClientSize(element, { cb });\n    }\n    static unobserve(element) {\n        if (this.resizeObserver) {\n            this.resizeObserver.unobserve(element);\n        }\n        this.elements.delete(element);\n    }\n    static checkClientSize(element, entry) {\n        const width = element.clientWidth ? element.clientWidth : 0;\n        const height = element.clientHeight ? element.clientHeight : 0;\n        this.checkSize(entry, element, width, height);\n    }\n}\nSizeMonitor.elements = new Map();\nSizeMonitor.ready = false;\n\nfunction circleRectOverlap(c, x, y, w, h) {\n    // Find closest horizontal and vertical edges.\n    let edgeX = c.x;\n    if (c.x < x) {\n        edgeX = x;\n    }\n    else if (c.x > x + w) {\n        edgeX = x + w;\n    }\n    let edgeY = c.y;\n    if (c.y < y) {\n        edgeY = y;\n    }\n    else if (c.y > y + h) {\n        edgeY = y + h;\n    }\n    // Find distance to closest edges.\n    const dx = c.x - edgeX;\n    const dy = c.y - edgeY;\n    const d = Math.sqrt(dx * dx + dy * dy);\n    return d <= c.size * 0.5;\n}\nfunction rectRectOverlap(r1, x2, y2, w2, h2) {\n    const xOverlap = r1.x + r1.width > x2 && r1.x < x2 + w2;\n    const yOverlap = r1.y + r1.height > y2 && r1.y < y2 + h2;\n    return xOverlap && yOverlap;\n}\nfunction rectContainsRect(r1, r2x, r2y, r2w, r2h) {\n    return r2x + r2w < r1.x + r1.width && r2x > r1.x && r2y > r1.y && r2y + r2h < r1.y + r1.height;\n}\nfunction isPointLabelDatum(x) {\n    return x != null && typeof x.point === 'object' && typeof x.label === 'object';\n}\n/**\n * @param data Points and labels for one or more series. The order of series determines label placement precedence.\n * @param bounds Bounds to fit the labels into. If a label can't be fully contained, it doesn't fit.\n * @returns Placed labels for the given series (in the given order).\n */\nfunction placeLabels(data, bounds, padding = 5) {\n    const result = [];\n    data = data.map((d) => d.slice().sort((a, b) => b.point.size - a.point.size));\n    for (let j = 0; j < data.length; j++) {\n        const labels = (result[j] = []);\n        const datum = data[j];\n        if (!((datum === null || datum === void 0 ? void 0 : datum.length) && datum[0].label)) {\n            continue;\n        }\n        for (let i = 0, ln = datum.length; i < ln; i++) {\n            const d = datum[i];\n            const l = d.label;\n            const r = d.point.size * 0.5;\n            const x = d.point.x - l.width * 0.5;\n            const y = d.point.y - r - l.height - padding;\n            const { width, height } = l;\n            const withinBounds = !bounds || rectContainsRect(bounds, x, y, width, height);\n            if (!withinBounds) {\n                continue;\n            }\n            const overlapPoints = data.some((datum) => datum.some((d) => circleRectOverlap(d.point, x, y, width, height)));\n            if (overlapPoints) {\n                continue;\n            }\n            const overlapLabels = result.some((labels) => labels.some((l) => rectRectOverlap(l, x, y, width, height)));\n            if (overlapLabels) {\n                continue;\n            }\n            labels.push({\n                index: i,\n                text: l.text,\n                x,\n                y,\n                width,\n                height,\n                datum: d,\n            });\n        }\n    }\n    return result;\n}\nfunction axisLabelsOverlap(data, padding) {\n    const result = [];\n    for (let i = 0; i < data.length; i++) {\n        const datum = data[i];\n        const { point: { x, y }, label: { text }, } = datum;\n        let { label: { width, height }, } = datum;\n        width += padding !== null && padding !== void 0 ? padding : 0;\n        height += padding !== null && padding !== void 0 ? padding : 0;\n        const overlapLabels = result.some((l) => {\n            const overlap = rectRectOverlap(l, x, y, width, height);\n            return overlap;\n        });\n        if (overlapLabels) {\n            return true;\n        }\n        result.push({\n            index: i,\n            text,\n            x,\n            y,\n            width,\n            height,\n            datum,\n        });\n    }\n    return false;\n}\n\nvar __awaiter$e = ( false) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\n/**\n * Wrap a function in debouncing trigger function. A requestAnimationFrame() is scheduled\n * after the first schedule() call, and subsequent schedule() calls will be ignored until the\n * animation callback executes.\n */\nfunction debouncedAnimationFrame(cb) {\n    return buildScheduler((cb) => requestAnimationFrame(cb), cb);\n}\nfunction debouncedCallback(cb) {\n    return buildScheduler((cb) => setTimeout(cb, 0), cb);\n}\nfunction buildScheduler(scheduleFn, cb) {\n    let scheduleCount = 0;\n    let promiseRunning = false;\n    let awaitingPromise;\n    let awaitingDone;\n    const busy = () => {\n        return promiseRunning;\n    };\n    const done = () => {\n        promiseRunning = false;\n        awaitingDone === null || awaitingDone === void 0 ? void 0 : awaitingDone();\n        awaitingDone = undefined;\n        awaitingPromise = undefined;\n        if (scheduleCount > 0) {\n            scheduleFn(scheduleCb);\n        }\n    };\n    const scheduleCb = () => {\n        const count = scheduleCount;\n        scheduleCount = 0;\n        promiseRunning = true;\n        const maybePromise = cb({ count });\n        if (!maybePromise) {\n            done();\n            return;\n        }\n        maybePromise.then(done).catch(done);\n    };\n    return {\n        schedule() {\n            if (scheduleCount === 0 && !busy()) {\n                scheduleFn(scheduleCb);\n            }\n            scheduleCount++;\n        },\n        await() {\n            return __awaiter$e(this, void 0, void 0, function* () {\n                if (!busy()) {\n                    return;\n                }\n                if (!awaitingPromise) {\n                    awaitingPromise = new Promise((resolve) => {\n                        awaitingDone = resolve;\n                    });\n                }\n                while (busy()) {\n                    yield awaitingPromise;\n                }\n            });\n        },\n    };\n}\n\n/**\n * Finds the roots of a parametric linear equation in `t`,\n * where `t` lies in the interval of `[0,1]`.\n */\nfunction linearRoot(a, b) {\n    const t = -b / a;\n    return a !== 0 && t >= 0 && t <= 1 ? [t] : [];\n}\n/**\n * Finds the roots of a parametric quadratic equation in `t`,\n * where `t` lies in the interval of `[0,1]`.\n */\nfunction quadraticRoots(a, b, c) {\n    if (a === 0) {\n        return linearRoot(b, c);\n    }\n    const D = b * b - 4 * a * c; // The polynomial's discriminant.\n    const roots = [];\n    if (D === 0) {\n        // A single real root.\n        const t = -b / (2 * a);\n        if (t >= 0 && t <= 1) {\n            roots.push(t);\n        }\n    }\n    else if (D > 0) {\n        // A pair of distinct real roots.\n        const rD = Math.sqrt(D);\n        const t1 = (-b - rD) / (2 * a);\n        const t2 = (-b + rD) / (2 * a);\n        if (t1 >= 0 && t1 <= 1) {\n            roots.push(t1);\n        }\n        if (t2 >= 0 && t2 <= 1) {\n            roots.push(t2);\n        }\n    }\n    // else -> Complex roots.\n    return roots;\n}\n/**\n * Finds the roots of a parametric cubic equation in `t`,\n * where `t` lies in the interval of `[0,1]`.\n * Returns an array of parametric intersection locations along the cubic,\n * excluding out-of-bounds intersections (before or after the end point\n * or in the imaginary plane).\n * An adaptation of http://www.particleincell.com/blog/2013/cubic-line-intersection/\n */\nfunction cubicRoots(a, b, c, d) {\n    if (a === 0) {\n        return quadraticRoots(b, c, d);\n    }\n    const A = b / a;\n    const B = c / a;\n    const C = d / a;\n    const Q = (3 * B - A * A) / 9;\n    const R = (9 * A * B - 27 * C - 2 * A * A * A) / 54;\n    const D = Q * Q * Q + R * R; // The polynomial's discriminant.\n    const third = 1 / 3;\n    const roots = [];\n    if (D >= 0) {\n        // Complex or duplicate roots.\n        const rD = Math.sqrt(D);\n        const S = Math.sign(R + rD) * Math.pow(Math.abs(R + rD), third);\n        const T = Math.sign(R - rD) * Math.pow(Math.abs(R - rD), third);\n        const Im = Math.abs((Math.sqrt(3) * (S - T)) / 2); // Complex part of the root pair.\n        const t = -third * A + (S + T); // A real root.\n        if (t >= 0 && t <= 1) {\n            roots.push(t);\n        }\n        if (Im === 0) {\n            const t = -third * A - (S + T) / 2; // The real part of a complex root.\n            if (t >= 0 && t <= 1) {\n                roots.push(t);\n            }\n        }\n    }\n    else {\n        // Distinct real roots.\n        const theta = Math.acos(R / Math.sqrt(-Q * Q * Q));\n        const thirdA = third * A;\n        const twoSqrtQ = 2 * Math.sqrt(-Q);\n        const t1 = twoSqrtQ * Math.cos(third * theta) - thirdA;\n        const t2 = twoSqrtQ * Math.cos(third * (theta + 2 * Math.PI)) - thirdA;\n        const t3 = twoSqrtQ * Math.cos(third * (theta + 4 * Math.PI)) - thirdA;\n        if (t1 >= 0 && t1 <= 1) {\n            roots.push(t1);\n        }\n        if (t2 >= 0 && t2 <= 1) {\n            roots.push(t2);\n        }\n        if (t3 >= 0 && t3 <= 1) {\n            roots.push(t3);\n        }\n    }\n    return roots;\n}\n\n/**\n * Returns the intersection point for the given pair of line segments, or null,\n * if the segments are parallel or don't intersect.\n * Based on http://paulbourke.net/geometry/pointlineplane/\n */\nfunction segmentIntersection(ax1, ay1, ax2, ay2, bx1, by1, bx2, by2) {\n    const d = (ax2 - ax1) * (by2 - by1) - (ay2 - ay1) * (bx2 - bx1);\n    if (d === 0) {\n        // The lines are parallel.\n        return null;\n    }\n    const ua = ((bx2 - bx1) * (ay1 - by1) - (ax1 - bx1) * (by2 - by1)) / d;\n    const ub = ((ax2 - ax1) * (ay1 - by1) - (ay2 - ay1) * (ax1 - bx1)) / d;\n    if (ua >= 0 && ua <= 1 && ub >= 0 && ub <= 1) {\n        return {\n            x: ax1 + ua * (ax2 - ax1),\n            y: ay1 + ua * (ay2 - ay1),\n        };\n    }\n    return null; // The intersection point is outside either or both segments.\n}\n/**\n * Returns intersection points of the given cubic curve and the line segment.\n * Takes in x/y components of cubic control points and line segment start/end points\n * as parameters.\n */\nfunction cubicSegmentIntersections(px1, py1, px2, py2, px3, py3, px4, py4, x1, y1, x2, y2) {\n    const intersections = [];\n    // Find line equation coefficients.\n    const A = y1 - y2;\n    const B = x2 - x1;\n    const C = x1 * (y2 - y1) - y1 * (x2 - x1);\n    // Find cubic Bezier curve equation coefficients from control points.\n    const bx = bezierCoefficients(px1, px2, px3, px4);\n    const by = bezierCoefficients(py1, py2, py3, py4);\n    const a = A * bx[0] + B * by[0]; // t^3\n    const b = A * bx[1] + B * by[1]; // t^2\n    const c = A * bx[2] + B * by[2]; // t\n    const d = A * bx[3] + B * by[3] + C; // 1\n    const roots = cubicRoots(a, b, c, d);\n    // Verify that the roots are within bounds of the linear segment.\n    for (const t of roots) {\n        const tt = t * t;\n        const ttt = t * tt;\n        // Find the cartesian plane coordinates for the parametric root `t`.\n        const x = bx[0] * ttt + bx[1] * tt + bx[2] * t + bx[3];\n        const y = by[0] * ttt + by[1] * tt + by[2] * t + by[3];\n        // The parametric cubic roots we found are intersection points\n        // with an infinite line, and so the x/y coordinates above are as well.\n        // Make sure the x/y is also within the bounds of the given segment.\n        let s;\n        if (x1 !== x2) {\n            s = (x - x1) / (x2 - x1);\n        }\n        else {\n            // the line is vertical\n            s = (y - y1) / (y2 - y1);\n        }\n        if (s >= 0 && s <= 1) {\n            intersections.push({ x, y });\n        }\n    }\n    return intersections;\n}\n/**\n * Returns the given coordinates vector multiplied by the coefficient matrix\n * of the parametric cubic Bézier equation.\n */\nfunction bezierCoefficients(P1, P2, P3, P4) {\n    return [\n        // Bézier expressed as matrix operations:\n        -P1 + 3 * P2 - 3 * P3 + P4,\n        3 * P1 - 6 * P2 + 3 * P3,\n        -3 * P1 + 3 * P2,\n        P1, //                 | 1  0  0  0| |P4|\n    ];\n}\n/**\n * Returns intersection points of the arc and the line segment.\n * Takes in arc parameters and line segment start/end points.\n */\nfunction arcIntersections(cx, cy, r, startAngle, endAngle, counterClockwise, x1, y1, x2, y2) {\n    // Solving the quadratic equation:\n    // 1. y = k * x + y0\n    // 2. (x - cx)^2 + (y - cy)^2 = r^2\n    const k = (y2 - y1) / (x2 - x1);\n    const y0 = y1 - k * x1;\n    const a = Math.pow(k, 2) + 1;\n    const b = 2 * (k * (y0 - cy) - cx);\n    const c = Math.pow(cx, 2) + Math.pow(y0 - cy, 2) - Math.pow(r, 2);\n    const d = Math.pow(b, 2) - 4 * a * c;\n    if (d < 0) {\n        return [];\n    }\n    const i1x = (-b + Math.sqrt(d)) / 2 / a;\n    const i2x = (-b - Math.sqrt(d)) / 2 / a;\n    const intersections = [];\n    [i1x, i2x].forEach((x) => {\n        const isXInsideLine = x >= Math.min(x1, x2) && x <= Math.max(x1, x2);\n        if (!isXInsideLine) {\n            return;\n        }\n        const y = k * x;\n        const a1 = normalizeAngle360(counterClockwise ? endAngle : startAngle);\n        let a2 = normalizeAngle360(counterClockwise ? startAngle : endAngle);\n        let intersectionAngle = normalizeAngle360(Math.atan2(y, x));\n        // Order angles clockwise after the start angle\n        // (end angle if counter-clockwise)\n        if (a2 <= a1) {\n            a2 += 2 * Math.PI;\n        }\n        if (intersectionAngle < a1) {\n            intersectionAngle += 2 * Math.PI;\n        }\n        if (intersectionAngle >= a1 && intersectionAngle <= a2) {\n            intersections.push({ x, y });\n        }\n    });\n    return intersections;\n}\n\nvar Command;\n(function (Command) {\n    Command[Command[\"Move\"] = 0] = \"Move\";\n    Command[Command[\"Line\"] = 1] = \"Line\";\n    Command[Command[\"Arc\"] = 2] = \"Arc\";\n    Command[Command[\"Curve\"] = 3] = \"Curve\";\n    Command[Command[\"ClosePath\"] = 4] = \"ClosePath\";\n})(Command || (Command = {}));\nclass Path2D {\n    constructor() {\n        // The methods of this class will likely be called many times per animation frame,\n        // and any allocation can trigger a GC cycle during animation, so we attempt\n        // to minimize the number of allocations.\n        this.previousCommands = [];\n        this.previousParams = [];\n        this.previousClosedPath = false;\n        this.commands = [];\n        this.params = [];\n        this._closedPath = false;\n    }\n    isDirty() {\n        if (this._closedPath !== this.previousClosedPath) {\n            return true;\n        }\n        if (this.previousCommands.length !== this.commands.length) {\n            return true;\n        }\n        if (this.previousParams.length !== this.params.length) {\n            return true;\n        }\n        for (let i = 0; i < this.commands.length; i++) {\n            if (this.commands[i] !== this.previousCommands[i]) {\n                return true;\n            }\n        }\n        for (let i = 0; i < this.params.length; i++) {\n            if (this.params[i] !== this.previousParams[i]) {\n                return true;\n            }\n        }\n        return false;\n    }\n    draw(ctx) {\n        const commands = this.commands;\n        const params = this.params;\n        let j = 0;\n        ctx.beginPath();\n        for (const command of commands) {\n            switch (command) {\n                case Command.Move:\n                    ctx.moveTo(params[j++], params[j++]);\n                    break;\n                case Command.Line:\n                    ctx.lineTo(params[j++], params[j++]);\n                    break;\n                case Command.Curve:\n                    ctx.bezierCurveTo(params[j++], params[j++], params[j++], params[j++], params[j++], params[j++]);\n                    break;\n                case Command.Arc:\n                    ctx.arc(params[j++], params[j++], params[j++], params[j++], params[j++], params[j++] === 1);\n                    break;\n                case Command.ClosePath:\n                    ctx.closePath();\n                    break;\n            }\n        }\n        if (commands.length === 0) {\n            ctx.closePath();\n        }\n    }\n    moveTo(x, y) {\n        if (this.xy) {\n            this.xy[0] = x;\n            this.xy[1] = y;\n        }\n        else {\n            this.xy = [x, y];\n        }\n        this.commands.push(Command.Move);\n        this.params.push(x, y);\n    }\n    lineTo(x, y) {\n        if (this.xy) {\n            this.commands.push(Command.Line);\n            this.params.push(x, y);\n            this.xy[0] = x;\n            this.xy[1] = y;\n        }\n        else {\n            this.moveTo(x, y);\n        }\n    }\n    rect(x, y, width, height) {\n        this.moveTo(x, y);\n        this.lineTo(x + width, y);\n        this.lineTo(x + width, y + height);\n        this.lineTo(x, y + height);\n        this.closePath();\n    }\n    arc(x, y, r, sAngle, eAngle, antiClockwise = false) {\n        const endX = x + r * Math.cos(eAngle);\n        const endY = y + r * Math.sin(eAngle);\n        if (this.xy) {\n            this.xy[0] = endX;\n            this.xy[1] = endY;\n        }\n        else {\n            this.xy = [endX, endY];\n        }\n        this.commands.push(Command.Arc);\n        this.params.push(x, y, r, sAngle, eAngle, antiClockwise ? 1 : 0);\n    }\n    cubicCurveTo(cx1, cy1, cx2, cy2, x, y) {\n        if (!this.xy) {\n            this.moveTo(cx1, cy1);\n        }\n        this.commands.push(Command.Curve);\n        this.params.push(cx1, cy1, cx2, cy2, x, y);\n        this.xy[0] = x;\n        this.xy[1] = y;\n    }\n    get closedPath() {\n        return this._closedPath;\n    }\n    closePath() {\n        if (this.xy) {\n            this.xy = undefined;\n            this.commands.push(Command.ClosePath);\n            this._closedPath = true;\n        }\n    }\n    clear({ trackChanges } = { trackChanges: false }) {\n        if (trackChanges) {\n            this.previousCommands = this.commands;\n            this.previousParams = this.params;\n            this.previousClosedPath = this._closedPath;\n            this.commands = [];\n            this.params = [];\n        }\n        else {\n            this.commands.length = 0;\n            this.params.length = 0;\n        }\n        this.xy = undefined;\n        this._closedPath = false;\n    }\n    isPointInPath(x, y) {\n        const commands = this.commands;\n        const params = this.params;\n        const cn = commands.length;\n        // Hit testing using ray casting method, where the ray's origin is some point\n        // outside the path. In this case, an offscreen point that is remote enough, so that\n        // even if the path itself is large and is partially offscreen, the ray's origin\n        // will likely be outside the path anyway. To test if the given point is inside the\n        // path or not, we cast a ray from the origin to the given point and check the number\n        // of intersections of this segment with the path. If the number of intersections is\n        // even, then the ray both entered and exited the path an equal number of times,\n        // therefore the point is outside the path, and inside the path, if the number of\n        // intersections is odd. Since the path is compound, we check if the ray segment\n        // intersects with each of the path's segments, which can be either a line segment\n        // (one or no intersection points) or a Bézier curve segment (up to 3 intersection\n        // points).\n        const ox = -10000;\n        const oy = -10000;\n        // the starting point of the  current path\n        let sx = NaN;\n        let sy = NaN;\n        // the previous point of the current path\n        let px = 0;\n        let py = 0;\n        let intersectionCount = 0;\n        for (let ci = 0, pi = 0; ci < cn; ci++) {\n            switch (commands[ci]) {\n                case Command.Move:\n                    if (!isNaN(sx)) {\n                        if (segmentIntersection(sx, sy, px, py, ox, oy, x, y)) {\n                            intersectionCount++;\n                        }\n                    }\n                    px = params[pi++];\n                    sx = px;\n                    py = params[pi++];\n                    sy = py;\n                    break;\n                case Command.Line:\n                    if (segmentIntersection(px, py, params[pi++], params[pi++], ox, oy, x, y)) {\n                        intersectionCount++;\n                    }\n                    px = params[pi - 2];\n                    py = params[pi - 1];\n                    break;\n                case Command.Curve:\n                    intersectionCount += cubicSegmentIntersections(px, py, params[pi++], params[pi++], params[pi++], params[pi++], params[pi++], params[pi++], ox, oy, x, y).length;\n                    px = params[pi - 2];\n                    py = params[pi - 1];\n                    break;\n                case Command.Arc:\n                    intersectionCount += arcIntersections(params[pi++], params[pi++], params[pi++], params[pi++], params[pi++], Boolean(params[pi++]), ox, oy, x, y).length;\n                    px = params[pi - 2];\n                    py = params[pi - 1];\n                    break;\n                case Command.ClosePath:\n                    if (!isNaN(sx)) {\n                        if (segmentIntersection(sx, sy, px, py, ox, oy, x, y)) {\n                            intersectionCount++;\n                        }\n                    }\n                    break;\n            }\n        }\n        return intersectionCount % 2 === 1;\n    }\n}\n\nvar __decorate$1Q = ( false) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nfunction ScenePathChangeDetection(opts) {\n    const { redraw = RedrawType.MAJOR, changeCb, convertor } = opts !== null && opts !== void 0 ? opts : {};\n    return SceneChangeDetection({ redraw, type: 'path', convertor, changeCb });\n}\nclass Path extends Shape {\n    constructor() {\n        super(...arguments);\n        /**\n         * Declare a path to retain for later rendering and hit testing\n         * using custom Path2D class. Think of it as a TypeScript version\n         * of the native Path2D (with some differences) that works in all browsers.\n         */\n        this.path = new Path2D();\n        /**\n         * The path only has to be updated when certain attributes change.\n         * For example, if transform attributes (such as `translationX`)\n         * are changed, we don't have to update the path. The `dirtyPath` flag\n         * is how we keep track if the path has to be updated or not.\n         */\n        this._dirtyPath = true;\n    }\n    set dirtyPath(value) {\n        if (this._dirtyPath !== value) {\n            this._dirtyPath = value;\n            if (value) {\n                this.markDirty(this, RedrawType.MAJOR);\n            }\n        }\n    }\n    get dirtyPath() {\n        return this._dirtyPath;\n    }\n    checkPathDirty() {\n        var _a, _b;\n        if (this._dirtyPath) {\n            return;\n        }\n        this.dirtyPath = this.path.isDirty() || ((_b = (_a = this.fillShadow) === null || _a === void 0 ? void 0 : _a.isDirty()) !== null && _b !== void 0 ? _b : false);\n    }\n    isPointInPath(x, y) {\n        const point = this.transformPoint(x, y);\n        return this.path.closedPath && this.path.isPointInPath(point.x, point.y);\n    }\n    isDirtyPath() {\n        // Override point for more expensive dirty checks.\n        return false;\n    }\n    updatePath() {\n        // Override point for subclasses.\n    }\n    render(renderCtx) {\n        var _a, _b;\n        const { ctx, forceRender, stats } = renderCtx;\n        if (this.dirty === RedrawType.NONE && !forceRender) {\n            if (stats)\n                stats.nodesSkipped += this.nodeCount.count;\n            return;\n        }\n        this.computeTransformMatrix();\n        this.matrix.toContext(ctx);\n        if (this.dirtyPath || this.isDirtyPath()) {\n            this.updatePath();\n            this.dirtyPath = false;\n        }\n        if (this.clipPath) {\n            ctx.save();\n            if (this.clipMode === 'normal') {\n                // Bound the shape rendered to the clipping path.\n                this.clipPath.draw(ctx);\n                ctx.clip();\n            }\n            this.path.draw(ctx);\n            this.fillStroke(ctx);\n            if (this.clipMode === 'punch-out') {\n                // Bound the shape rendered to outside the clipping path.\n                this.clipPath.draw(ctx);\n                ctx.clip();\n                // Fallback values, but practically these should never be used.\n                const { x = -10000, y = -10000, width = 20000, height = 20000 } = (_a = this.computeBBox()) !== null && _a !== void 0 ? _a : {};\n                ctx.clearRect(x, y, width, height);\n            }\n            ctx.restore();\n        }\n        else {\n            this.path.draw(ctx);\n            this.fillStroke(ctx);\n        }\n        (_b = this.fillShadow) === null || _b === void 0 ? void 0 : _b.markClean();\n        super.render(renderCtx);\n    }\n}\nPath.className = 'Path';\n__decorate$1Q([\n    ScenePathChangeDetection()\n], Path.prototype, \"clipPath\", void 0);\n__decorate$1Q([\n    ScenePathChangeDetection()\n], Path.prototype, \"clipMode\", void 0);\n\nvar __decorate$1P = ( false) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nclass Marker extends Path {\n    constructor() {\n        super(...arguments);\n        this.x = 0;\n        this.y = 0;\n        this.size = 12;\n    }\n    computeBBox() {\n        const { x, y, size } = this;\n        const half = size / 2;\n        return new BBox(x - half, y - half, size, size);\n    }\n    applyPath(s, moves) {\n        const { path } = this;\n        let { x, y } = this;\n        path.clear();\n        for (const { x: mx, y: my, t } of moves) {\n            x += mx * s;\n            y += my * s;\n            if (t === 'move') {\n                path.moveTo(x, y);\n            }\n            else {\n                path.lineTo(x, y);\n            }\n        }\n        path.closePath();\n    }\n}\n__decorate$1P([\n    ScenePathChangeDetection()\n], Marker.prototype, \"x\", void 0);\n__decorate$1P([\n    ScenePathChangeDetection()\n], Marker.prototype, \"y\", void 0);\n__decorate$1P([\n    ScenePathChangeDetection({ convertor: Math.abs })\n], Marker.prototype, \"size\", void 0);\n\nclass Circle extends Marker {\n    updatePath() {\n        const { x, y, path, size } = this;\n        const r = size / 2;\n        path.clear();\n        path.arc(x, y, r, 0, Math.PI * 2);\n        path.closePath();\n    }\n}\nCircle.className = 'Circle';\n\nvar __decorate$1O = ( false) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nconst MARKER_SHAPES = ['circle', 'cross', 'diamond', 'heart', 'plus', 'square', 'triangle'];\nconst MARKER_SHAPE = predicateWithMessage((v) => MARKER_SHAPES.includes(v) || Object.getPrototypeOf(v) === Marker, `expecting a marker shape keyword such as 'circle', 'diamond' or 'square' or an object extending the Marker class`);\nclass SeriesMarker extends ChangeDetectable {\n    constructor() {\n        super(...arguments);\n        this.enabled = true;\n        /**\n         * One of the predefined marker names, or a marker constructor function (for user-defined markers).\n         * A series will create one marker instance per data point.\n         */\n        this.shape = Circle;\n        this.size = 6;\n        /**\n         * In case a series has the `sizeKey` set, the `sizeKey` values along with the `size` and `maxSize` configs\n         * will be used to determine the size of the marker. All values will be mapped to a marker size\n         * within the `[size, maxSize]` range, where the largest values will correspond to the `maxSize`\n         * and the lowest to the `size`.\n         */\n        this.maxSize = 30;\n        this.domain = undefined;\n        this.fill = undefined;\n        this.stroke = undefined;\n        this.strokeWidth = 1;\n        this.fillOpacity = undefined;\n        this.strokeOpacity = undefined;\n    }\n}\n__decorate$1O([\n    Validate(BOOLEAN),\n    SceneChangeDetection({ redraw: RedrawType.MAJOR })\n], SeriesMarker.prototype, \"enabled\", void 0);\n__decorate$1O([\n    Validate(MARKER_SHAPE),\n    SceneChangeDetection({ redraw: RedrawType.MAJOR })\n], SeriesMarker.prototype, \"shape\", void 0);\n__decorate$1O([\n    Validate(NUMBER(0)),\n    SceneChangeDetection({ redraw: RedrawType.MAJOR })\n], SeriesMarker.prototype, \"size\", void 0);\n__decorate$1O([\n    Validate(NUMBER(0)),\n    SceneChangeDetection({ redraw: RedrawType.MAJOR })\n], SeriesMarker.prototype, \"maxSize\", void 0);\n__decorate$1O([\n    Validate(OPT_NUMBER_ARRAY),\n    SceneChangeDetection({ redraw: RedrawType.MAJOR })\n], SeriesMarker.prototype, \"domain\", void 0);\n__decorate$1O([\n    Validate(OPT_COLOR_STRING),\n    SceneChangeDetection({ redraw: RedrawType.MAJOR })\n], SeriesMarker.prototype, \"fill\", void 0);\n__decorate$1O([\n    Validate(OPT_COLOR_STRING),\n    SceneChangeDetection({ redraw: RedrawType.MAJOR })\n], SeriesMarker.prototype, \"stroke\", void 0);\n__decorate$1O([\n    Validate(OPT_NUMBER(0)),\n    SceneChangeDetection({ redraw: RedrawType.MAJOR })\n], SeriesMarker.prototype, \"strokeWidth\", void 0);\n__decorate$1O([\n    Validate(OPT_NUMBER(0, 1)),\n    SceneChangeDetection({ redraw: RedrawType.MAJOR })\n], SeriesMarker.prototype, \"fillOpacity\", void 0);\n__decorate$1O([\n    Validate(OPT_NUMBER(0, 1)),\n    SceneChangeDetection({ redraw: RedrawType.MAJOR })\n], SeriesMarker.prototype, \"strokeOpacity\", void 0);\n\nclass Selection {\n    constructor(parent, classOrFactory) {\n        this._nodes = [];\n        this._data = [];\n        this._parent = parent;\n        this._factory = Object.prototype.isPrototypeOf.call(Node, classOrFactory)\n            ? () => new classOrFactory()\n            : classOrFactory;\n    }\n    static select(parent, classOrFactory) {\n        return new Selection(parent, classOrFactory);\n    }\n    each(iterate) {\n        this._nodes.forEach((node, i) => iterate(node, node.datum, i));\n        return this;\n    }\n    update(data, init) {\n        const old = this._data;\n        const parent = this._parent;\n        const factory = this._factory;\n        if (data.length > old.length) {\n            data.slice(old.length).forEach((datum) => {\n                const node = factory(datum);\n                node.datum = datum;\n                init === null || init === void 0 ? void 0 : init(node);\n                parent.appendChild(node);\n                this._nodes.push(node);\n            });\n        }\n        else if (data.length < old.length) {\n            this._nodes.splice(data.length).forEach((node) => {\n                parent.removeChild(node);\n            });\n        }\n        this._data = data.slice(0);\n        for (let i = 0; i < data.length; i++) {\n            this._nodes[i].datum = this._data[i];\n        }\n        return this;\n    }\n    clear() {\n        this.update([]);\n        return this;\n    }\n    static selectAll(parent, predicate) {\n        const results = [];\n        const traverse = (node) => {\n            if (predicate(node)) {\n                results.push(node);\n            }\n            node.children.forEach(traverse);\n        };\n        traverse(parent);\n        return results;\n    }\n    static selectByClass(node, Class) {\n        return Selection.selectAll(node, (node) => node instanceof Class);\n    }\n    static selectByTag(node, tag) {\n        return Selection.selectAll(node, (node) => node.tag === tag);\n    }\n    select(predicate) {\n        return Selection.selectAll(this._parent, predicate);\n    }\n    selectByClass(Class) {\n        return this.select((node) => node instanceof Class);\n    }\n    selectByTag(tag) {\n        return this.select((node) => node.tag === tag);\n    }\n    nodes() {\n        return this._nodes;\n    }\n}\n\nfunction clamp(x, min, max) {\n    return Math.max(min, Math.min(max, x));\n}\n/**\n * Maps a discrete domain to a continuous numeric range.\n */\nclass BandScale$5 {\n    constructor() {\n        this.type = 'band';\n        this.cache = null;\n        this.cacheProps = ['_domain', 'range', '_paddingInner', '_paddingOuter', 'round', 'interval'];\n        /**\n         * Maps datum to its index in the {@link domain} array.\n         * Used to check for duplicate datums (not allowed).\n         */\n        this.index = new Map();\n        /**\n         * The output range values for datum at each index.\n         */\n        this.ordinalRange = [];\n        /**\n         * Contains unique datums only. Since `{}` is used in place of `Map`\n         * for IE11 compatibility, the datums are converted `toString` before\n         * the uniqueness check.\n         */\n        this._domain = [];\n        this.range = [0, 1];\n        this._bandwidth = 1;\n        this._rawBandwidth = 1;\n        /**\n         * The ratio of the range that is reserved for space between bands.\n         */\n        this._paddingInner = 0;\n        /**\n         * The ratio of the range that is reserved for space before the first\n         * and after the last band.\n         */\n        this._paddingOuter = 0;\n        this.round = false;\n    }\n    didChange() {\n        const { cache } = this;\n        const didChange = !cache || this.cacheProps.some((p) => this[p] !== cache[p]);\n        if (didChange) {\n            this.cache = {};\n            this.cacheProps.forEach((p) => (this.cache[p] = this[p]));\n            return true;\n        }\n        return false;\n    }\n    refresh() {\n        if (this.didChange()) {\n            this.update();\n        }\n    }\n    set domain(values) {\n        const domain = [];\n        this.index = new Map();\n        const index = this.index;\n        // In case one wants to have duplicate domain values, for example, two 'Italy' categories,\n        // one should use objects rather than strings for domain values like so:\n        // { toString: () => 'Italy' }\n        // { toString: () => 'Italy' }\n        values.forEach((value) => {\n            if (index.get(value) === undefined) {\n                index.set(value, domain.push(value) - 1);\n            }\n        });\n        this._domain = domain;\n    }\n    get domain() {\n        return this._domain;\n    }\n    ticks() {\n        this.refresh();\n        const { interval = 1 } = this;\n        const step = Math.abs(Math.round(interval));\n        return this._domain.filter((_, i) => i % step === 0);\n    }\n    convert(d) {\n        this.refresh();\n        const i = this.index.get(d);\n        if (i === undefined) {\n            return NaN;\n        }\n        const r = this.ordinalRange[i];\n        if (r === undefined) {\n            return NaN;\n        }\n        return r;\n    }\n    invert(position) {\n        this.refresh();\n        const index = this.ordinalRange.findIndex((p) => p === position);\n        return this.domain[index];\n    }\n    get bandwidth() {\n        this.refresh();\n        return this._bandwidth;\n    }\n    get rawBandwidth() {\n        this.refresh();\n        return this._rawBandwidth;\n    }\n    set padding(value) {\n        value = clamp(value, 0, 1);\n        this._paddingInner = value;\n        this._paddingOuter = value;\n    }\n    get padding() {\n        return this._paddingInner;\n    }\n    set paddingInner(value) {\n        this._paddingInner = clamp(value, 0, 1);\n    }\n    get paddingInner() {\n        return this._paddingInner;\n    }\n    set paddingOuter(value) {\n        this._paddingOuter = clamp(value, 0, 1);\n    }\n    get paddingOuter() {\n        return this._paddingOuter;\n    }\n    update() {\n        const count = this._domain.length;\n        if (count === 0) {\n            return;\n        }\n        const round = this.round;\n        const paddingInner = this._paddingInner;\n        const paddingOuter = this._paddingOuter;\n        const [r0, r1] = this.range;\n        const width = r1 - r0;\n        const rawStep = width / Math.max(1, count + 2 * paddingOuter - paddingInner);\n        const step = round ? Math.floor(rawStep) : rawStep;\n        const fullBandWidth = step * (count - paddingInner);\n        const x0 = r0 + (width - fullBandWidth) / 2;\n        const start = round ? Math.round(x0) : x0;\n        const bw = step * (1 - paddingInner);\n        const bandwidth = round ? Math.round(bw) : bw;\n        const rawBandwidth = rawStep * (1 - paddingInner);\n        const values = [];\n        for (let i = 0; i < count; i++) {\n            values.push(start + step * i);\n        }\n        this._bandwidth = bandwidth;\n        this._rawBandwidth = rawBandwidth;\n        this.ordinalRange = values;\n    }\n}\n\nvar __decorate$1N = ( false) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nclass Line extends Shape {\n    constructor() {\n        super();\n        this.x1 = 0;\n        this.y1 = 0;\n        this.x2 = 0;\n        this.y2 = 0;\n        this.restoreOwnStyles();\n    }\n    computeBBox() {\n        return new BBox(this.x1, this.y1, this.x2 - this.x1, this.y2 - this.y1);\n    }\n    isPointInPath(_x, _y) {\n        return false;\n    }\n    render(renderCtx) {\n        var _a;\n        const { ctx, forceRender, stats } = renderCtx;\n        if (this.dirty === RedrawType.NONE && !forceRender) {\n            if (stats)\n                stats.nodesSkipped += this.nodeCount.count;\n            return;\n        }\n        this.computeTransformMatrix();\n        this.matrix.toContext(ctx);\n        let x1 = this.x1;\n        let y1 = this.y1;\n        let x2 = this.x2;\n        let y2 = this.y2;\n        // Align to the pixel grid if the line is strictly vertical\n        // or horizontal (but not both, i.e. a dot).\n        if (x1 === x2) {\n            const x = Math.round(x1) + (Math.floor(this.strokeWidth) % 2) / 2;\n            x1 = x;\n            x2 = x;\n        }\n        else if (y1 === y2) {\n            const y = Math.round(y1) + (Math.floor(this.strokeWidth) % 2) / 2;\n            y1 = y;\n            y2 = y;\n        }\n        ctx.beginPath();\n        ctx.moveTo(x1, y1);\n        ctx.lineTo(x2, y2);\n        this.fillStroke(ctx);\n        (_a = this.fillShadow) === null || _a === void 0 ? void 0 : _a.markClean();\n        super.render(renderCtx);\n    }\n}\nLine.className = 'Line';\nLine.defaultStyles = Object.assign({}, Shape.defaultStyles, {\n    fill: undefined,\n    strokeWidth: 1,\n});\n__decorate$1N([\n    SceneChangeDetection({ redraw: RedrawType.MAJOR })\n], Line.prototype, \"x1\", void 0);\n__decorate$1N([\n    SceneChangeDetection({ redraw: RedrawType.MAJOR })\n], Line.prototype, \"y1\", void 0);\n__decorate$1N([\n    SceneChangeDetection({ redraw: RedrawType.MAJOR })\n], Line.prototype, \"x2\", void 0);\n__decorate$1N([\n    SceneChangeDetection({ redraw: RedrawType.MAJOR })\n], Line.prototype, \"y2\", void 0);\n\nfunction isEqual$2(a, b, epsilon = 1e-10) {\n    return Math.abs(a - b) < epsilon;\n}\n/**\n * `Number.toFixed(n)` always formats a number so that it has `n` digits after the decimal point.\n * For example, `Number(0.00003427).toFixed(2)` returns `0.00`.\n * That's not very helpful, because all the meaningful information is lost.\n * In this case we would want the formatted value to have at least two significant digits: `0.000034`,\n * not two fraction digits.\n * @param value\n * @param fractionOrSignificantDigits\n */\nfunction toFixed(value, fractionOrSignificantDigits = 2) {\n    const power = Math.floor(Math.log(Math.abs(value)) / Math.LN10);\n    if (power >= 0 || !isFinite(power)) {\n        return value.toFixed(fractionOrSignificantDigits); // fraction digits\n    }\n    return value.toFixed(Math.abs(power) - 1 + fractionOrSignificantDigits); // significant digits\n}\n/**\n * Returns the mathematically correct n modulus of m. For context, the JS % operator is remainder\n * NOT modulus, which is why this is needed.\n */\nfunction mod(n, m) {\n    if (n >= 0) {\n        return Math.floor(n % m);\n    }\n    return Math.floor((n % m) + m);\n}\n\nvar __decorate$1M = ( false) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nvar ArcType;\n(function (ArcType) {\n    ArcType[ArcType[\"Open\"] = 0] = \"Open\";\n    ArcType[ArcType[\"Chord\"] = 1] = \"Chord\";\n    ArcType[ArcType[\"Round\"] = 2] = \"Round\";\n})(ArcType || (ArcType = {}));\n/**\n * Elliptical arc node.\n */\nclass Arc extends Path {\n    constructor() {\n        super();\n        this.centerX = 0;\n        this.centerY = 0;\n        this.radius = 10;\n        this.startAngle = 0;\n        this.endAngle = Math.PI * 2;\n        this.counterClockwise = false;\n        /**\n         * The type of arc to render:\n         * - {@link ArcType.Open} - end points of the arc segment are not connected (default)\n         * - {@link ArcType.Chord} - end points of the arc segment are connected by a line segment\n         * - {@link ArcType.Round} - each of the end points of the arc segment are connected\n         *                           to the center of the arc\n         * Arcs with {@link ArcType.Open} do not support hit testing, even if they have their\n         * {@link Shape.fillStyle} set, because they are not closed paths. Hit testing support\n         * would require using two paths - one for rendering, another for hit testing - and there\n         * doesn't seem to be a compelling reason to do that, when one can just use {@link ArcType.Chord}\n         * to create a closed path.\n         */\n        this.type = ArcType.Open;\n        this.restoreOwnStyles();\n    }\n    get fullPie() {\n        return isEqual$2(normalizeAngle360(this.startAngle), normalizeAngle360(this.endAngle));\n    }\n    updatePath() {\n        const path = this.path;\n        path.clear(); // No need to recreate the Path, can simply clear the existing one.\n        path.arc(this.centerX, this.centerY, this.radius, this.startAngle, this.endAngle, this.counterClockwise);\n        if (this.type === ArcType.Chord) {\n            path.closePath();\n        }\n        else if (this.type === ArcType.Round && !this.fullPie) {\n            path.lineTo(this.centerX, this.centerY);\n            path.closePath();\n        }\n    }\n    computeBBox() {\n        // Only works with full arcs (circles) and untransformed ellipses.\n        return new BBox(this.centerX - this.radius, this.centerY - this.radius, this.radius * 2, this.radius * 2);\n    }\n    isPointInPath(x, y) {\n        const point = this.transformPoint(x, y);\n        const bbox = this.computeBBox();\n        return (this.type !== ArcType.Open &&\n            bbox.containsPoint(point.x, point.y) &&\n            this.path.isPointInPath(point.x, point.y));\n    }\n}\nArc.className = 'Arc';\nArc.defaultStyles = Object.assign({}, Shape.defaultStyles, {\n    lineWidth: 1,\n    fillStyle: null,\n});\n__decorate$1M([\n    ScenePathChangeDetection()\n], Arc.prototype, \"centerX\", void 0);\n__decorate$1M([\n    ScenePathChangeDetection()\n], Arc.prototype, \"centerY\", void 0);\n__decorate$1M([\n    ScenePathChangeDetection()\n], Arc.prototype, \"radius\", void 0);\n__decorate$1M([\n    ScenePathChangeDetection()\n], Arc.prototype, \"startAngle\", void 0);\n__decorate$1M([\n    ScenePathChangeDetection()\n], Arc.prototype, \"endAngle\", void 0);\n__decorate$1M([\n    ScenePathChangeDetection()\n], Arc.prototype, \"counterClockwise\", void 0);\n__decorate$1M([\n    ScenePathChangeDetection()\n], Arc.prototype, \"type\", void 0);\n\nfunction ProxyPropertyOnWrite(childName, childProperty) {\n    return addTransformToInstanceProperty((target, key, value) => {\n        target[childName][childProperty !== null && childProperty !== void 0 ? childProperty : key] = value;\n        return value;\n    });\n}\n/**\n * Allows side-effects to be triggered on property write.\n *\n * @param opts.newValue called when a new value is set - never called for undefined values.\n * @param opts.oldValue called with the old value before a new value is set - never called for\n *                      undefined values.\n * @param opts.changeValue called on any change to the value - always called.\n */\nfunction ActionOnSet(opts) {\n    const { newValue: newValueFn, oldValue: oldValueFn, changeValue: changeValueFn } = opts;\n    return addTransformToInstanceProperty((target, _, newValue, oldValue) => {\n        if (newValue !== oldValue) {\n            if (oldValue !== undefined) {\n                oldValueFn === null || oldValueFn === void 0 ? void 0 : oldValueFn.call(target, oldValue);\n            }\n            if (newValue !== undefined) {\n                newValueFn === null || newValueFn === void 0 ? void 0 : newValueFn.call(target, newValue);\n            }\n            changeValueFn === null || changeValueFn === void 0 ? void 0 : changeValueFn.call(target, newValue, oldValue);\n        }\n        return newValue;\n    });\n}\n\nvar __decorate$1L = ( false) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nclass Caption {\n    constructor() {\n        this.node = new Text();\n        this.enabled = false;\n        this.text = undefined;\n        this.fontSize = 10;\n        this.fontFamily = 'sans-serif';\n        this.spacing = Caption.PADDING;\n        this.lineHeight = undefined;\n        this.maxWidth = undefined;\n        this.maxHeight = undefined;\n        this.wrapping = 'always';\n        const node = this.node;\n        node.textAlign = 'center';\n        node.pointerEvents = PointerEvents.None;\n    }\n    computeTextWrap(containerWidth, containerHeight) {\n        var _a, _b;\n        const { text, wrapping } = this;\n        const maxWidth = Math.min((_a = this.maxWidth) !== null && _a !== void 0 ? _a : Infinity, containerWidth);\n        const maxHeight = (_b = this.maxHeight) !== null && _b !== void 0 ? _b : containerHeight;\n        if (!isFinite(maxWidth) && !isFinite(maxHeight)) {\n            this.node.text = text;\n            return;\n        }\n        const wrapped = Text.wrap(text !== null && text !== void 0 ? text : '', maxWidth, maxHeight, this, wrapping);\n        this.node.text = wrapped;\n    }\n}\nCaption.PADDING = 10;\n__decorate$1L([\n    Validate(BOOLEAN)\n], Caption.prototype, \"enabled\", void 0);\n__decorate$1L([\n    Validate(OPT_STRING),\n    ProxyPropertyOnWrite('node')\n], Caption.prototype, \"text\", void 0);\n__decorate$1L([\n    Validate(OPT_FONT_STYLE),\n    ProxyPropertyOnWrite('node')\n], Caption.prototype, \"fontStyle\", void 0);\n__decorate$1L([\n    Validate(OPT_FONT_WEIGHT),\n    ProxyPropertyOnWrite('node')\n], Caption.prototype, \"fontWeight\", void 0);\n__decorate$1L([\n    Validate(NUMBER(0)),\n    ProxyPropertyOnWrite('node')\n], Caption.prototype, \"fontSize\", void 0);\n__decorate$1L([\n    Validate(STRING),\n    ProxyPropertyOnWrite('node')\n], Caption.prototype, \"fontFamily\", void 0);\n__decorate$1L([\n    Validate(OPT_COLOR_STRING),\n    ProxyPropertyOnWrite('node', 'fill')\n], Caption.prototype, \"color\", void 0);\n__decorate$1L([\n    Validate(OPT_NUMBER(0))\n], Caption.prototype, \"spacing\", void 0);\n__decorate$1L([\n    Validate(OPT_NUMBER(0))\n], Caption.prototype, \"lineHeight\", void 0);\n__decorate$1L([\n    Validate(OPT_NUMBER(0))\n], Caption.prototype, \"maxWidth\", void 0);\n__decorate$1L([\n    Validate(OPT_NUMBER(0))\n], Caption.prototype, \"maxHeight\", void 0);\n__decorate$1L([\n    Validate(TEXT_WRAP)\n], Caption.prototype, \"wrapping\", void 0);\n\nfunction areArrayItemsStrictlyEqual(arrA, arrB) {\n    return (arrA.length === arrB.length &&\n        arrA.every((a, i) => {\n            const b = arrB[i];\n            if (Array.isArray(a) && Array.isArray(b)) {\n                return areArrayItemsStrictlyEqual(a, b);\n            }\n            return a === b;\n        }));\n}\nfunction areArrayNumbersEqual(arrA, arrB) {\n    return arrA.length === arrB.length && arrA.every((item, i) => Number(item) === Number(arrB[i]));\n}\n\nclass ContinuousScale {\n    constructor(domain, range) {\n        this.domain = domain;\n        this.range = range;\n        this.nice = false;\n        this.tickCount = ContinuousScale.defaultTickCount;\n        this.minTickCount = 0;\n        this.maxTickCount = Infinity;\n        this.niceDomain = null;\n        this.strictClampByDefault = false;\n        this.cache = null;\n        this.cacheProps = ['domain', 'range', 'nice', 'tickCount', 'minTickCount', 'maxTickCount'];\n    }\n    transform(x) {\n        return x;\n    }\n    transformInvert(x) {\n        return x;\n    }\n    fromDomain(d) {\n        if (typeof d === 'number') {\n            return d;\n        }\n        else if (d instanceof Date) {\n            return d.getTime();\n        }\n        return NaN;\n    }\n    getDomain() {\n        if (this.nice) {\n            this.refresh();\n            if (this.niceDomain) {\n                return this.niceDomain;\n            }\n        }\n        return this.domain;\n    }\n    convert(x, params) {\n        var _a;\n        if (!this.domain || this.domain.length < 2) {\n            return NaN;\n        }\n        this.refresh();\n        const strict = (_a = params === null || params === void 0 ? void 0 : params.strict) !== null && _a !== void 0 ? _a : this.strictClampByDefault;\n        const domain = this.getDomain().map((d) => this.transform(d));\n        const [d0, d1] = domain;\n        const { range } = this;\n        const [r0, r1] = range;\n        x = this.transform(x);\n        if (x < d0) {\n            return strict ? NaN : r0;\n        }\n        else if (x > d1) {\n            return strict ? NaN : r1;\n        }\n        if (d0 === d1) {\n            return (r0 + r1) / 2;\n        }\n        else if (x === d0) {\n            return r0;\n        }\n        else if (x === d1) {\n            return r1;\n        }\n        return (r0 + ((this.fromDomain(x) - this.fromDomain(d0)) / (this.fromDomain(d1) - this.fromDomain(d0))) * (r1 - r0));\n    }\n    invert(x) {\n        this.refresh();\n        const domain = this.getDomain().map((d) => this.transform(d));\n        const [d0, d1] = domain;\n        const { range } = this;\n        const [r0, r1] = range;\n        const isReversed = r0 > r1;\n        const rMin = isReversed ? r1 : r0;\n        const rMax = isReversed ? r0 : r1;\n        let d;\n        if (x < rMin) {\n            return isReversed ? d1 : d0;\n        }\n        else if (x > rMax) {\n            return isReversed ? d0 : d1;\n        }\n        else if (r0 === r1) {\n            d = this.toDomain((this.fromDomain(d0) + this.fromDomain(d1)) / 2);\n        }\n        else {\n            d = this.toDomain(this.fromDomain(d0) + ((x - r0) / (r1 - r0)) * (this.fromDomain(d1) - this.fromDomain(d0)));\n        }\n        return this.transformInvert(d);\n    }\n    didChange() {\n        const { cache } = this;\n        const didChange = !cache || this.cacheProps.some((p) => this[p] !== cache[p]);\n        if (didChange) {\n            this.cache = {};\n            this.cacheProps.forEach((p) => (this.cache[p] = this[p]));\n            return true;\n        }\n        return false;\n    }\n    refresh() {\n        if (this.didChange()) {\n            this.update();\n        }\n    }\n    isDenseInterval({ start, stop, interval, count, }) {\n        const { range } = this;\n        const domain = stop - start;\n        const min = Math.min(range[0], range[1]);\n        const max = Math.max(range[0], range[1]);\n        const availableRange = max - min;\n        const step = typeof interval === 'number' ? interval : 1;\n        count !== null && count !== void 0 ? count : (count = domain / step);\n        if (count >= availableRange) {\n            Logger.warn(`the configured tick interval results in more than 1 tick per pixel, ignoring. Supply a larger tick interval or omit this configuration.`);\n            return true;\n        }\n        return false;\n    }\n}\nContinuousScale.defaultTickCount = 5;\nContinuousScale.defaultMaxTickCount = 6;\n\nfunction ticks (start, stop, count, minCount, maxCount) {\n    if (count < 2) {\n        return range(start, stop, stop - start);\n    }\n    const step = tickStep(start, stop, count, minCount, maxCount);\n    if (isNaN(step)) {\n        return new NumericTicks(0);\n    }\n    start = Math.ceil(start / step) * step;\n    stop = Math.floor(stop / step) * step;\n    return range(start, stop, step);\n}\nconst tickMultipliers = [1, 2, 5, 10];\nfunction tickStep(a, b, count, minCount = 0, maxCount = Infinity) {\n    const rawStep = (b - a) / count;\n    const power = Math.floor(Math.log10(rawStep));\n    const step = Math.pow(10, power);\n    const m = tickMultipliers\n        .map((multiplier) => {\n        const s = multiplier * step;\n        const c = Math.ceil((b - a) / s);\n        const isWithinBounds = c >= minCount && c <= maxCount;\n        const diffCount = Math.abs(c - count);\n        return { multiplier, isWithinBounds, diffCount };\n    })\n        .sort((a, b) => {\n        if (a.isWithinBounds !== b.isWithinBounds) {\n            return a.isWithinBounds ? -1 : 1;\n        }\n        return a.diffCount - b.diffCount;\n    })[0].multiplier;\n    if (!m || isNaN(m)) {\n        return NaN;\n    }\n    return m * step;\n}\nfunction singleTickDomain(a, b) {\n    const power = Math.floor(Math.log10(b - a));\n    const step = Math.pow(10, power);\n    return tickMultipliers\n        .map((multiplier) => {\n        const s = multiplier * step;\n        const start = Math.floor(a / s) * s;\n        const end = Math.ceil(b / s) * s;\n        const error = 1 - (b - a) / (end - start);\n        const domain = [start, end];\n        return { error, domain };\n    })\n        .sort((a, b) => a.error - b.error)[0].domain;\n}\nclass NumericTicks extends Array {\n    constructor(fractionDigits, elements) {\n        super();\n        if (elements) {\n            for (let i = 0, n = elements.length; i < n; i++) {\n                this[i] = elements[i];\n            }\n        }\n        this.fractionDigits = fractionDigits;\n    }\n}\nfunction range(start, stop, step) {\n    const countDigits = (expNo) => {\n        var _a, _b;\n        const parts = expNo.split('e');\n        return Math.max(((_b = (_a = parts[0].split('.')[1]) === null || _a === void 0 ? void 0 : _a.length) !== null && _b !== void 0 ? _b : 0) - Number(parts[1]), 0);\n    };\n    const fractionalDigits = countDigits((step % 1).toExponential());\n    const f = Math.pow(10, fractionalDigits);\n    const n = Math.ceil((stop - start) / step);\n    const values = new NumericTicks(fractionalDigits);\n    for (let i = 0; i <= n; i++) {\n        const value = start + step * i;\n        values.push(Math.round(value * f) / f);\n    }\n    return values;\n}\n\nconst CONSTANTS = {\n    periods: ['AM', 'PM'],\n    days: ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'],\n    shortDays: ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'],\n    months: [\n        'January',\n        'February',\n        'March',\n        'April',\n        'May',\n        'June',\n        'July',\n        'August',\n        'September',\n        'October',\n        'November',\n        'December',\n    ],\n    shortMonths: ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'],\n};\nfunction dayOfYear(date, startOfYear = new Date(date.getFullYear(), 0, 1)) {\n    const startOffset = date.getTimezoneOffset() - startOfYear.getTimezoneOffset();\n    const timeDiff = date.getTime() - startOfYear.getTime() + startOffset * 60000;\n    const timeOneDay = 3600000 * 24;\n    return Math.floor(timeDiff / timeOneDay);\n}\nfunction weekOfYear(date, startDay) {\n    const startOfYear = new Date(date.getFullYear(), 0, 1);\n    const startOfYearDay = startOfYear.getDay();\n    const firstWeekStartOffset = (startDay - startOfYearDay + 7) % 7;\n    const startOffset = new Date(date.getFullYear(), 0, firstWeekStartOffset + 1);\n    if (startOffset <= date) {\n        return Math.floor(dayOfYear(date, startOffset) / 7) + 1;\n    }\n    // Days before week 1 are in week 0.\n    return 0;\n}\nconst SUNDAY = 0;\nconst MONDAY = 1;\nconst THURSDAY = 4;\nfunction isoWeekOfYear(date, year = date.getFullYear()) {\n    const firstOfYear = new Date(year, 0, 1);\n    const firstOfYearDay = firstOfYear.getDay();\n    const firstThursdayOffset = (THURSDAY - firstOfYearDay + 7) % 7;\n    const startOffset = new Date(year, 0, firstThursdayOffset - (THURSDAY - MONDAY) + 1);\n    if (startOffset <= date) {\n        return Math.floor(dayOfYear(date, startOffset) / 7) + 1;\n    }\n    // Days before week 1 are in week 52/53 of previous year.\n    return isoWeekOfYear(date, year - 1);\n}\nfunction timezone(date) {\n    const offset = date.getTimezoneOffset();\n    const unsignedOffset = Math.abs(offset);\n    const sign = offset > 0 ? '-' : '+';\n    return `${sign}${pad(Math.floor(unsignedOffset / 60), 2, '0')}${pad(Math.floor(unsignedOffset % 60), 2, '0')}`;\n}\nconst FORMATTERS = {\n    a: (d) => CONSTANTS.shortDays[d.getDay()],\n    A: (d) => CONSTANTS.days[d.getDay()],\n    b: (d) => CONSTANTS.shortMonths[d.getMonth()],\n    B: (d) => CONSTANTS.months[d.getMonth()],\n    c: '%x, %X',\n    d: (d, p) => pad(d.getDate(), 2, p !== null && p !== void 0 ? p : '0'),\n    e: '%_d',\n    f: (d, p) => pad(d.getMilliseconds() * 1000, 6, p !== null && p !== void 0 ? p : '0'),\n    H: (d, p) => pad(d.getHours(), 2, p !== null && p !== void 0 ? p : '0'),\n    I: (d, p) => {\n        const hours = d.getHours() % 12;\n        return hours === 0 ? '12' : pad(hours, 2, p !== null && p !== void 0 ? p : '0');\n    },\n    j: (d, p) => pad(dayOfYear(d) + 1, 3, p !== null && p !== void 0 ? p : '0'),\n    m: (d, p) => pad(d.getMonth() + 1, 2, p !== null && p !== void 0 ? p : '0'),\n    M: (d, p) => pad(d.getMinutes(), 2, p !== null && p !== void 0 ? p : '0'),\n    L: (d, p) => pad(d.getMilliseconds(), 3, p !== null && p !== void 0 ? p : '0'),\n    p: (d) => (d.getHours() < 12 ? 'AM' : 'PM'),\n    Q: (d) => String(d.getTime()),\n    s: (d) => String(Math.floor(d.getTime() / 1000)),\n    S: (d, p) => pad(d.getSeconds(), 2, p !== null && p !== void 0 ? p : '0'),\n    u: (d) => {\n        let day = d.getDay();\n        if (day < 1)\n            day += 7;\n        return String(day % 7);\n    },\n    U: (d, p) => pad(weekOfYear(d, SUNDAY), 2, p !== null && p !== void 0 ? p : '0'),\n    V: (d, p) => pad(isoWeekOfYear(d), 2, p !== null && p !== void 0 ? p : '0'),\n    w: (d, p) => pad(d.getDay(), 2, p !== null && p !== void 0 ? p : '0'),\n    W: (d, p) => pad(weekOfYear(d, MONDAY), 2, p !== null && p !== void 0 ? p : '0'),\n    x: '%-m/%-d/%Y',\n    X: '%-I:%M:%S %p',\n    y: (d, p) => pad(d.getFullYear() % 100, 2, p !== null && p !== void 0 ? p : '0'),\n    Y: (d, p) => pad(d.getFullYear(), 4, p !== null && p !== void 0 ? p : '0'),\n    Z: (d) => timezone(d),\n    '%': () => '%',\n};\nconst PADS = {\n    _: ' ',\n    '0': '0',\n    '-': '',\n};\nfunction pad(value, size, padChar) {\n    const output = String(Math.floor(value));\n    if (output.length >= size) {\n        return output;\n    }\n    return `${padChar.repeat(size - output.length)}${output}`;\n}\nfunction buildFormatter(formatString) {\n    const formatParts = [];\n    while (formatString.length > 0) {\n        let nextEscapeIdx = formatString.indexOf('%');\n        if (nextEscapeIdx !== 0) {\n            const literalPart = nextEscapeIdx > 0 ? formatString.substring(0, nextEscapeIdx) : formatString;\n            formatParts.push(literalPart);\n        }\n        if (nextEscapeIdx < 0)\n            break;\n        const maybePadSpecifier = formatString[nextEscapeIdx + 1];\n        const maybePad = PADS[maybePadSpecifier];\n        if (maybePad != null) {\n            nextEscapeIdx++;\n        }\n        const maybeFormatterSpecifier = formatString[nextEscapeIdx + 1];\n        const maybeFormatter = FORMATTERS[maybeFormatterSpecifier];\n        if (typeof maybeFormatter === 'function') {\n            formatParts.push([maybeFormatter, maybePad]);\n        }\n        else if (typeof maybeFormatter === 'string') {\n            const formatter = buildFormatter(maybeFormatter);\n            formatParts.push([formatter, maybePad]);\n        }\n        else {\n            formatParts.push(`${maybePad !== null && maybePad !== void 0 ? maybePad : ''}${maybeFormatterSpecifier}`);\n        }\n        formatString = formatString.substring(nextEscapeIdx + 2);\n    }\n    return (dateTime) => {\n        const dateTimeAsDate = typeof dateTime === 'number' ? new Date(dateTime) : dateTime;\n        return formatParts.map((c) => (typeof c === 'string' ? c : c[0](dateTimeAsDate, c[1]))).join('');\n    };\n}\n\nvar DefaultTimeFormats;\n(function (DefaultTimeFormats) {\n    DefaultTimeFormats[DefaultTimeFormats[\"MILLISECOND\"] = 0] = \"MILLISECOND\";\n    DefaultTimeFormats[DefaultTimeFormats[\"SECOND\"] = 1] = \"SECOND\";\n    DefaultTimeFormats[DefaultTimeFormats[\"MINUTE\"] = 2] = \"MINUTE\";\n    DefaultTimeFormats[DefaultTimeFormats[\"HOUR\"] = 3] = \"HOUR\";\n    DefaultTimeFormats[DefaultTimeFormats[\"WEEK_DAY\"] = 4] = \"WEEK_DAY\";\n    DefaultTimeFormats[DefaultTimeFormats[\"SHORT_MONTH\"] = 5] = \"SHORT_MONTH\";\n    DefaultTimeFormats[DefaultTimeFormats[\"MONTH\"] = 6] = \"MONTH\";\n    DefaultTimeFormats[DefaultTimeFormats[\"SHORT_YEAR\"] = 7] = \"SHORT_YEAR\";\n    DefaultTimeFormats[DefaultTimeFormats[\"YEAR\"] = 8] = \"YEAR\";\n})(DefaultTimeFormats || (DefaultTimeFormats = {}));\nconst formatStrings = {\n    [DefaultTimeFormats.MILLISECOND]: '.%L',\n    [DefaultTimeFormats.SECOND]: ':%S',\n    [DefaultTimeFormats.MINUTE]: '%I:%M',\n    [DefaultTimeFormats.HOUR]: '%I %p',\n    [DefaultTimeFormats.WEEK_DAY]: '%a',\n    [DefaultTimeFormats.SHORT_MONTH]: '%b %d',\n    [DefaultTimeFormats.MONTH]: '%B',\n    [DefaultTimeFormats.SHORT_YEAR]: '%y',\n    [DefaultTimeFormats.YEAR]: '%Y',\n};\nfunction toNumber(x) {\n    return x instanceof Date ? x.getTime() : x;\n}\nclass TimeScale$1 extends ContinuousScale {\n    constructor() {\n        super([new Date(2022, 11, 7), new Date(2022, 11, 8)], [0, 1]);\n        this.type = 'time';\n        this.cacheProps = [\n            'domain',\n            'range',\n            'nice',\n            'tickCount',\n            'interval',\n            'minTickCount',\n            'maxTickCount',\n        ];\n        this.year = year;\n        this.month = month;\n        this.week = sunday;\n        this.day = day;\n        this.hour = hour;\n        this.minute = minute;\n        this.second = second;\n        this.millisecond = millisecond;\n        /**\n         * Array of default tick intervals in the following format:\n         *\n         *     [\n         *         interval (unit of time),\n         *         number of units (step),\n         *         the length of that number of units in milliseconds\n         *     ]\n         */\n        this.tickIntervals = [\n            [this.second, 1, durationSecond],\n            [this.second, 5, 5 * durationSecond],\n            [this.second, 15, 15 * durationSecond],\n            [this.second, 30, 30 * durationSecond],\n            [this.minute, 1, durationMinute],\n            [this.minute, 5, 5 * durationMinute],\n            [this.minute, 15, 15 * durationMinute],\n            [this.minute, 30, 30 * durationMinute],\n            [this.hour, 1, durationHour],\n            [this.hour, 3, 3 * durationHour],\n            [this.hour, 6, 6 * durationHour],\n            [this.hour, 12, 12 * durationHour],\n            [this.day, 1, durationDay],\n            [this.day, 2, 2 * durationDay],\n            [this.week, 1, durationWeek],\n            [this.week, 2, 2 * durationWeek],\n            [this.week, 3, 3 * durationWeek],\n            [this.month, 1, durationMonth],\n            [this.month, 2, 2 * durationMonth],\n            [this.month, 3, 3 * durationMonth],\n            [this.month, 4, 4 * durationMonth],\n            [this.month, 6, 6 * durationMonth],\n            [this.year, 1, durationYear],\n        ];\n    }\n    toDomain(d) {\n        return new Date(d);\n    }\n    calculateDefaultTickFormat(ticks = []) {\n        let defaultTimeFormat = DefaultTimeFormats.YEAR;\n        const updateFormat = (format) => {\n            if (format < defaultTimeFormat) {\n                defaultTimeFormat = format;\n            }\n        };\n        for (const value of ticks) {\n            const format = this.getLowestGranularityFormat(value);\n            updateFormat(format);\n        }\n        const firstTick = toNumber(ticks[0]);\n        const lastTick = toNumber(ticks[ticks.length - 1]);\n        const startYear = new Date(firstTick).getFullYear();\n        const stopYear = new Date(lastTick).getFullYear();\n        const yearChange = stopYear - startYear > 0;\n        return this.buildFormatString(defaultTimeFormat, yearChange);\n    }\n    buildFormatString(defaultTimeFormat, yearChange) {\n        let formatStringArray = [formatStrings[defaultTimeFormat]];\n        let timeEndIndex = 0;\n        const domain = this.getDomain();\n        const start = Math.min(...domain.map(toNumber));\n        const stop = Math.max(...domain.map(toNumber));\n        const extent = stop - start;\n        switch (defaultTimeFormat) {\n            case DefaultTimeFormats.SECOND:\n                if (extent / durationMinute > 1) {\n                    formatStringArray.push(formatStrings[DefaultTimeFormats.MINUTE]);\n                }\n            // fall through deliberately\n            case DefaultTimeFormats.MINUTE:\n                if (extent / durationHour > 1) {\n                    formatStringArray.push(formatStrings[DefaultTimeFormats.HOUR]);\n                }\n            // fall through deliberately\n            case DefaultTimeFormats.HOUR:\n                timeEndIndex = formatStringArray.length;\n                if (extent / durationDay > 1) {\n                    formatStringArray.push(formatStrings[DefaultTimeFormats.WEEK_DAY]);\n                }\n            // fall through deliberately\n            case DefaultTimeFormats.WEEK_DAY:\n                if (extent / durationWeek > 1 || yearChange) {\n                    // if it's more than a week or there is a year change, don't show week day\n                    const weekDayIndex = formatStringArray.indexOf(formatStrings[DefaultTimeFormats.WEEK_DAY]);\n                    if (weekDayIndex > -1) {\n                        formatStringArray.splice(weekDayIndex, 1, formatStrings[DefaultTimeFormats.SHORT_MONTH]);\n                    }\n                }\n            // fall through deliberately\n            case DefaultTimeFormats.SHORT_MONTH:\n            case DefaultTimeFormats.MONTH:\n                if (extent / durationYear > 1 || yearChange) {\n                    formatStringArray.push(formatStrings[DefaultTimeFormats.YEAR]);\n                }\n        }\n        if (timeEndIndex < formatStringArray.length) {\n            // Insert a gap between all date components.\n            formatStringArray = [\n                ...formatStringArray.slice(0, timeEndIndex),\n                formatStringArray.slice(timeEndIndex).join(' '),\n            ];\n        }\n        if (timeEndIndex > 0) {\n            // Reverse order of time components, since they should be displayed in descending\n            // granularity.\n            formatStringArray = [\n                ...formatStringArray.slice(0, timeEndIndex).reverse(),\n                ...formatStringArray.slice(timeEndIndex),\n            ];\n            if (timeEndIndex < formatStringArray.length) {\n                // Insert a gap between time and date components.\n                formatStringArray.splice(timeEndIndex, 0, ' ');\n            }\n        }\n        return formatStringArray.join('');\n    }\n    getLowestGranularityFormat(value) {\n        if (this.second.floor(value) < value) {\n            return DefaultTimeFormats.MILLISECOND;\n        }\n        else if (this.minute.floor(value) < value) {\n            return DefaultTimeFormats.SECOND;\n        }\n        else if (this.hour.floor(value) < value) {\n            return DefaultTimeFormats.MINUTE;\n        }\n        else if (this.day.floor(value) < value) {\n            return DefaultTimeFormats.HOUR;\n        }\n        else if (this.month.floor(value) < value) {\n            if (this.week.floor(value) < value) {\n                return DefaultTimeFormats.WEEK_DAY;\n            }\n            return DefaultTimeFormats.SHORT_MONTH;\n        }\n        else if (this.year.floor(value) < value) {\n            return DefaultTimeFormats.MONTH;\n        }\n        return DefaultTimeFormats.YEAR;\n    }\n    defaultTickFormat(ticks) {\n        const formatString = this.calculateDefaultTickFormat(ticks);\n        return (date) => buildFormatter(formatString)(date);\n    }\n    /**\n     * @param options Tick interval options.\n     * @param options.start The start time (timestamp).\n     * @param options.stop The end time (timestamp).\n     * @param options.count Number of intervals between ticks.\n     */\n    getTickInterval({ start, stop, count, minCount, maxCount, }) {\n        const { tickIntervals } = this;\n        let countableTimeInterval;\n        let step;\n        const tickCount = count !== null && count !== void 0 ? count : ContinuousScale.defaultTickCount;\n        const target = Math.abs(stop - start) / Math.max(tickCount, 1);\n        let i = 0;\n        while (i < tickIntervals.length && target > tickIntervals[i][2]) {\n            i++;\n        }\n        if (i === 0) {\n            step = Math.max(tickStep(start, stop, tickCount, minCount, maxCount), 1);\n            countableTimeInterval = this.millisecond;\n        }\n        else if (i === tickIntervals.length) {\n            const y0 = start / durationYear;\n            const y1 = stop / durationYear;\n            step = tickStep(y0, y1, tickCount, minCount, maxCount);\n            countableTimeInterval = this.year;\n        }\n        else {\n            const diff0 = target - tickIntervals[i - 1][2];\n            const diff1 = tickIntervals[i][2] - target;\n            const index = diff0 < diff1 ? i - 1 : i;\n            [countableTimeInterval, step] = tickIntervals[index];\n        }\n        return countableTimeInterval.every(step);\n    }\n    invert(y) {\n        return new Date(super.invert(y));\n    }\n    /**\n     * Returns uniformly-spaced dates that represent the scale's domain.\n     */\n    ticks() {\n        if (!this.domain || this.domain.length < 2) {\n            return [];\n        }\n        this.refresh();\n        const [t0, t1] = this.getDomain().map(toNumber);\n        if (this.interval !== undefined) {\n            return this.getTicksForInterval({ start: t0, stop: t1 });\n        }\n        if (this.nice) {\n            const { tickCount } = this;\n            if (tickCount === 2) {\n                return this.niceDomain;\n            }\n            if (tickCount === 1) {\n                return this.niceDomain.slice(0, 1);\n            }\n        }\n        return this.getDefaultTicks({ start: t0, stop: t1 });\n    }\n    getDefaultTicks({ start, stop }) {\n        const t = this.getTickInterval({\n            start,\n            stop,\n            count: this.tickCount,\n            minCount: this.minTickCount,\n            maxCount: this.maxTickCount,\n        });\n        return t ? t.range(new Date(start), new Date(stop)) : []; // inclusive stop\n    }\n    getTicksForInterval({ start, stop }) {\n        const { interval, tickIntervals } = this;\n        if (!interval) {\n            return [];\n        }\n        if (interval instanceof TimeInterval) {\n            const ticks = interval.range(new Date(start), new Date(stop));\n            if (this.isDenseInterval({ start, stop, interval, count: ticks.length })) {\n                return this.getDefaultTicks({ start, stop });\n            }\n            return ticks;\n        }\n        const absInterval = Math.abs(interval);\n        if (this.isDenseInterval({ start, stop, interval: absInterval })) {\n            return this.getDefaultTicks({ start, stop });\n        }\n        const reversedInterval = [...tickIntervals];\n        reversedInterval.reverse();\n        const timeInterval = reversedInterval.find((tickInterval) => absInterval % tickInterval[2] === 0);\n        if (timeInterval) {\n            const i = timeInterval[0].every(absInterval / (timeInterval[2] / timeInterval[1]));\n            return i.range(new Date(start), new Date(stop));\n        }\n        let date = new Date(start);\n        const stopDate = new Date(stop);\n        const ticks = [];\n        while (date <= stopDate) {\n            ticks.push(date);\n            date = new Date(date);\n            date.setMilliseconds(date.getMilliseconds() + absInterval);\n        }\n        return ticks;\n    }\n    /**\n     * Returns a time format function suitable for displaying tick values.\n     * @param specifier If the specifier string is provided, this method is equivalent to\n     * the {@link TimeLocaleObject.format} method.\n     * If no specifier is provided, this method returns the default time format function.\n     */\n    tickFormat({ ticks, specifier }) {\n        return specifier == undefined ? this.defaultTickFormat(ticks) : buildFormatter(specifier);\n    }\n    update() {\n        if (!this.domain || this.domain.length < 2) {\n            return;\n        }\n        if (this.nice) {\n            this.updateNiceDomain();\n        }\n    }\n    /**\n     * Extends the domain so that it starts and ends on nice round values.\n     * This method typically modifies the scale’s domain, and may only extend the bounds to the nearest round value.\n     */\n    updateNiceDomain() {\n        const maxAttempts = 4;\n        let [d0, d1] = this.domain;\n        for (let i = 0; i < maxAttempts; i++) {\n            this.updateNiceDomainIteration(d0, d1);\n            const [n0, n1] = this.niceDomain;\n            if (toNumber(d0) === toNumber(n0) && toNumber(d1) === toNumber(n1)) {\n                break;\n            }\n            d0 = n0;\n            d1 = n1;\n        }\n    }\n    updateNiceDomainIteration(d0, d1) {\n        const start = toNumber(d0);\n        const stop = toNumber(d1);\n        const { interval } = this;\n        let i;\n        if (interval instanceof TimeInterval) {\n            i = interval;\n        }\n        else {\n            const tickCount = typeof interval === 'number' ? (stop - start) / Math.max(interval, 1) : this.tickCount;\n            i = this.getTickInterval({\n                start,\n                stop,\n                count: tickCount,\n                minCount: this.minTickCount,\n                maxCount: this.maxTickCount,\n            });\n        }\n        if (i) {\n            const intervalRange = i.range(d0, d1, true);\n            const n0 = intervalRange[0];\n            const n1 = intervalRange[intervalRange.length - 1];\n            this.niceDomain = [n0, n1];\n        }\n    }\n}\n\nconst group = (content) => `(${content})`;\nconst optionalGroup = (content) => `${group(content)}?`;\nconst nonCapturingGroup = (content) => optionalGroup(`?:${content}`);\nconst formatRegEx = (() => {\n    const fill = '.';\n    const align = '[<>=^]';\n    const sign = '[+\\\\-( ]';\n    const symbol = '[$€£¥₣₹#]';\n    const zero = '0';\n    const width = '\\\\d+';\n    const comma = ',';\n    const precision = '\\\\d+';\n    const tilde = '~';\n    const type = '[%a-z]';\n    return new RegExp([\n        '^',\n        nonCapturingGroup(`${optionalGroup(fill)}${group(align)}`),\n        optionalGroup(sign),\n        optionalGroup(symbol),\n        optionalGroup(zero),\n        optionalGroup(width),\n        optionalGroup(comma),\n        nonCapturingGroup(`\\\\.${group(precision)}`),\n        optionalGroup(tilde),\n        optionalGroup(type),\n        '$',\n    ].join(''), 'i');\n})();\nconst surroundedRegEx = (() => {\n    const prefix = '.*?';\n    const content = '.+?';\n    const suffix = '.*?';\n    return new RegExp(['^', group(prefix), `#\\\\{${group(content)}\\\\}`, group(suffix), '$'].join(''));\n})();\nfunction parseFormatter(formatter) {\n    let prefix;\n    let suffix;\n    const surrounded = surroundedRegEx.exec(formatter);\n    if (surrounded) {\n        [, prefix, formatter, suffix] = surrounded;\n    }\n    const match = formatRegEx.exec(formatter);\n    if (!match) {\n        throw new Error(`The number formatter is invalid: ${formatter}`);\n    }\n    const [, fill, align, sign, symbol, zero, width, comma, precision, trim, type] = match;\n    return {\n        fill,\n        align,\n        sign,\n        symbol,\n        zero,\n        width: parseInt(width),\n        comma,\n        precision: parseInt(precision),\n        trim: Boolean(trim),\n        type,\n        prefix,\n        suffix,\n    };\n}\nfunction format(formatter) {\n    const options = typeof formatter === 'string' ? parseFormatter(formatter) : formatter;\n    const { fill, align, sign = '-', symbol, zero, width, comma, type, prefix = '', suffix = '' } = options;\n    let { precision, trim } = options;\n    let formatBody;\n    if (!type) {\n        formatBody = decimalTypes['g'];\n        trim = true;\n    }\n    else if (type in decimalTypes && type in integerTypes) {\n        formatBody = isNaN(precision) ? integerTypes[type] : decimalTypes[type];\n    }\n    else if (type in decimalTypes) {\n        formatBody = decimalTypes[type];\n    }\n    else if (type in integerTypes) {\n        formatBody = integerTypes[type];\n    }\n    else {\n        throw new Error(`The number formatter type is invalid: ${type}`);\n    }\n    if (isNaN(precision)) {\n        precision = type ? 6 : 12;\n    }\n    return (n) => {\n        let result = formatBody(n, precision);\n        if (trim) {\n            result = removeTrailingZeros(result);\n        }\n        if (comma) {\n            result = insertSeparator(result, comma);\n        }\n        result = addSign(n, result, sign);\n        if (symbol && symbol !== '#') {\n            result = `${symbol}${result}`;\n        }\n        if (symbol === '#' && type === 'x') {\n            result = `0x${result}`;\n        }\n        if (type === 's') {\n            result = `${result}${getSIPrefix(n)}`;\n        }\n        if (type === '%' || type === 'p') {\n            result = `${result}%`;\n        }\n        if (!isNaN(width)) {\n            result = addPadding(result, width, fill !== null && fill !== void 0 ? fill : zero, align);\n        }\n        result = `${prefix}${result}${suffix}`;\n        return result;\n    };\n}\nconst absFloor = (n) => Math.floor(Math.abs(n));\nconst integerTypes = {\n    b: (n) => absFloor(n).toString(2),\n    c: (n) => String.fromCharCode(n),\n    d: (n) => Math.round(Math.abs(n)).toFixed(0),\n    o: (n) => absFloor(n).toString(8),\n    x: (n) => absFloor(n).toString(16),\n    X: (n) => integerTypes.x(n).toUpperCase(),\n    n: (n) => integerTypes.d(n),\n    '%': (n) => `${absFloor(n * 100).toFixed(0)}`,\n};\nconst decimalTypes = {\n    e: (n, f) => Math.abs(n).toExponential(f),\n    E: (n, f) => decimalTypes.e(n, f).toUpperCase(),\n    f: (n, f) => Math.abs(n).toFixed(f),\n    F: (n, f) => decimalTypes.f(n, f).toUpperCase(),\n    g: (n, f) => {\n        if (n === 0) {\n            return '0';\n        }\n        const a = Math.abs(n);\n        const p = Math.floor(Math.log10(a));\n        if (p >= -4 && p < f) {\n            return a.toFixed(f - 1 - p);\n        }\n        return a.toExponential(f - 1);\n    },\n    G: (n, f) => decimalTypes.g(n, f).toUpperCase(),\n    n: (n, f) => decimalTypes.g(n, f),\n    p: (n, f) => decimalTypes.r(n * 100, f),\n    r: (n, f) => {\n        if (n === 0) {\n            return '0';\n        }\n        const a = Math.abs(n);\n        const p = Math.floor(Math.log10(a));\n        const q = p - (f - 1);\n        if (q <= 0) {\n            return a.toFixed(-q);\n        }\n        const x = Math.pow(10, q);\n        return (Math.round(a / x) * x).toFixed();\n    },\n    s: (n, f) => {\n        const p = getSIPrefixPower(n);\n        return decimalTypes.r(n / Math.pow(10, p), f);\n    },\n    '%': (n, f) => decimalTypes.f(n * 100, f),\n};\nfunction removeTrailingZeros(numString) {\n    return numString.replace(/\\.0+$/, '').replace(/(\\.[1-9])0+$/, '$1');\n}\nfunction insertSeparator(numString, separator) {\n    let dotIndex = numString.indexOf('.');\n    if (dotIndex < 0) {\n        dotIndex = numString.length;\n    }\n    const integerChars = numString.substring(0, dotIndex).split('');\n    const fractionalPart = numString.substring(dotIndex);\n    for (let i = integerChars.length - 3; i > 0; i -= 3) {\n        integerChars.splice(i, 0, separator);\n    }\n    return `${integerChars.join('')}${fractionalPart}`;\n}\nfunction getSIPrefix(n) {\n    return siPrefixes[getSIPrefixPower(n)];\n}\nfunction getSIPrefixPower(n) {\n    const power = Math.log10(Math.abs(n));\n    const p = Math.floor(power / 3) * 3;\n    return Math.max(minSIPrefix, Math.min(maxSIPrefix, p));\n}\nconst minSIPrefix = -24;\nconst maxSIPrefix = 24;\nconst siPrefixes = {\n    [minSIPrefix]: 'y',\n    [-21]: 'z',\n    [-18]: 'a',\n    [-15]: 'f',\n    [-12]: 'p',\n    [-9]: 'n',\n    [-6]: 'µ',\n    [-3]: 'm',\n    [0]: '',\n    [3]: 'k',\n    [6]: 'M',\n    [9]: 'G',\n    [12]: 'T',\n    [15]: 'P',\n    [18]: 'E',\n    [21]: 'Z',\n    [maxSIPrefix]: 'Y',\n};\nconst minusSign = '\\u2212';\nfunction addSign(num, numString, signType = '') {\n    if (signType === '(') {\n        return num >= 0 ? numString : `(${numString})`;\n    }\n    const plusSign = signType === '+' ? '+' : '';\n    return `${num >= 0 ? plusSign : minusSign}${numString}`;\n}\nfunction addPadding(numString, width, fill = ' ', align = '>') {\n    let result = numString;\n    if (align === '>' || !align) {\n        result = result.padStart(width, fill);\n    }\n    else if (align === '<') {\n        result = result.padEnd(width, fill);\n    }\n    else if (align === '^') {\n        const padWidth = Math.max(0, width - result.length);\n        const padLeft = Math.ceil(padWidth / 2);\n        const padRight = Math.floor(padWidth / 2);\n        result = result.padStart(padLeft + result.length, fill);\n        result = result.padEnd(padRight + result.length, fill);\n    }\n    return result;\n}\nfunction tickFormat(ticks, formatter) {\n    const options = parseFormatter(formatter !== null && formatter !== void 0 ? formatter : ',f');\n    if (isNaN(options.precision)) {\n        if (options.type === 'f' || options.type === '%') {\n            options.precision = Math.max(...ticks.map((x) => {\n                if (typeof x !== 'number' || x === 0) {\n                    return 0;\n                }\n                const l = Math.floor(Math.log10(Math.abs(x)));\n                const digits = options.type ? 6 : 12;\n                const exp = x.toExponential(digits - 1).replace(/\\.?0+e/, 'e');\n                const dotIndex = exp.indexOf('.');\n                if (dotIndex < 0) {\n                    return l >= 0 ? 0 : -l;\n                }\n                const s = exp.indexOf('e') - dotIndex;\n                return Math.max(0, s - l - 1);\n            }));\n        }\n        else if (!options.type || options.type in decimalTypes) {\n            options.precision = Math.max(...ticks.map((x) => {\n                if (typeof x !== 'number') {\n                    return 0;\n                }\n                const exp = x.toExponential((options.type ? 6 : 12) - 1).replace(/\\.?0+e/, 'e');\n                return exp.substring(0, exp.indexOf('e')).replace('.', '').length;\n            }));\n        }\n    }\n    const f = format(options);\n    return (n) => f(Number(n));\n}\n\nvar __decorate$1K = ( false) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nconst identity = (x) => x;\nclass LogScale extends ContinuousScale {\n    constructor() {\n        super([1, 10], [0, 1]);\n        this.type = 'log';\n        this.base = 10;\n        this.cacheProps = ['domain', 'range', 'nice', 'tickCount', 'base'];\n        this.baseLog = identity;\n        this.basePow = identity;\n        this.log = (x) => {\n            return this.domain[0] >= 0 ? this.baseLog(x) : -this.baseLog(-x);\n        };\n        this.pow = (x) => {\n            return this.domain[0] >= 0 ? this.basePow(x) : -this.basePow(-x);\n        };\n    }\n    toDomain(d) {\n        return d;\n    }\n    transform(x) {\n        return this.domain[0] >= 0 ? Math.log(x) : -Math.log(-x);\n    }\n    transformInvert(x) {\n        return this.domain[0] >= 0 ? Math.exp(x) : -Math.exp(-x);\n    }\n    update() {\n        if (!this.domain || this.domain.length < 2) {\n            return;\n        }\n        this.updateLogFn();\n        this.updatePowFn();\n        if (this.nice) {\n            this.updateNiceDomain();\n        }\n    }\n    updateLogFn() {\n        const { base } = this;\n        let log;\n        if (base === 10) {\n            log = Math.log10;\n        }\n        else if (base === Math.E) {\n            log = Math.log;\n        }\n        else if (base === 2) {\n            log = Math.log2;\n        }\n        else {\n            const logBase = Math.log(base);\n            log = (x) => Math.log(x) / logBase;\n        }\n        this.baseLog = log;\n    }\n    updatePowFn() {\n        const { base } = this;\n        let pow;\n        if (base === 10) {\n            pow = LogScale.pow10;\n        }\n        else if (base === Math.E) {\n            pow = Math.exp;\n        }\n        else {\n            pow = (x) => Math.pow(base, x);\n        }\n        this.basePow = pow;\n    }\n    updateNiceDomain() {\n        const [d0, d1] = this.domain;\n        const n0 = this.pow(Math.floor(this.log(d0)));\n        const n1 = this.pow(Math.ceil(this.log(d1)));\n        this.niceDomain = [n0, n1];\n    }\n    static pow10(x) {\n        return x >= 0 ? Math.pow(10, x) : 1 / Math.pow(10, -x);\n    }\n    ticks() {\n        var _a;\n        const count = (_a = this.tickCount) !== null && _a !== void 0 ? _a : 10;\n        if (!this.domain || this.domain.length < 2 || count < 1) {\n            return [];\n        }\n        this.refresh();\n        const base = this.base;\n        const [d0, d1] = this.getDomain();\n        let p0 = this.log(d0);\n        let p1 = this.log(d1);\n        if (this.interval) {\n            const step = Math.abs(this.interval);\n            const absDiff = Math.abs(p1 - p0);\n            const ticks = range(p0, p1, Math.min(absDiff, step))\n                .map((x) => this.pow(x))\n                .filter((t) => t >= d0 && t <= d1);\n            if (!this.isDenseInterval({ start: d0, stop: d1, interval: step, count: ticks.length })) {\n                return ticks;\n            }\n        }\n        const isBaseInteger = base % 1 === 0;\n        const isDiffLarge = p1 - p0 >= count;\n        if (!isBaseInteger || isDiffLarge) {\n            // Returns [10^1, 10^2, 10^3, 10^4, ...]\n            return ticks(p0, p1, Math.min(p1 - p0, count)).map((x) => this.pow(x));\n        }\n        const ticks$1 = [];\n        const isPositive = d0 > 0;\n        p0 = Math.floor(p0) - 1;\n        p1 = Math.round(p1) + 1;\n        const min = Math.min(...this.range);\n        const max = Math.max(...this.range);\n        const availableSpacing = (max - min) / count;\n        let lastTickPosition = Infinity;\n        for (let p = p0; p <= p1; p++) {\n            const nextMagnitudeTickPosition = this.convert(this.pow(p + 1));\n            for (let k = 1; k < base; k++) {\n                const q = isPositive ? k : base - k + 1;\n                const t = this.pow(p) * q;\n                const tickPosition = this.convert(t);\n                const prevSpacing = Math.abs(lastTickPosition - tickPosition);\n                const nextSpacing = Math.abs(tickPosition - nextMagnitudeTickPosition);\n                const fits = prevSpacing >= availableSpacing && nextSpacing >= availableSpacing;\n                if (t >= d0 && t <= d1 && (k === 1 || fits)) {\n                    ticks$1.push(t);\n                    lastTickPosition = tickPosition;\n                }\n            }\n        }\n        return ticks$1;\n    }\n    tickFormat({ count, ticks, specifier, }) {\n        const { base } = this;\n        if (specifier == null) {\n            specifier = (base === 10 ? '.0e' : ',');\n        }\n        if (typeof specifier !== 'function') {\n            specifier = format(specifier);\n        }\n        if (count === Infinity) {\n            return specifier;\n        }\n        if (ticks == null) {\n            this.ticks();\n        }\n        return (d) => {\n            return specifier(d);\n        };\n    }\n}\n__decorate$1K([\n    Validate(NUMBER(0))\n], LogScale.prototype, \"base\", void 0);\n\nfunction Default(defaultValue, replaces = [undefined]) {\n    return addTransformToInstanceProperty((_, __, v) => {\n        if (replaces.includes(v)) {\n            return defaultValue;\n        }\n        return v;\n    });\n}\n\nfunction extent$4(values) {\n    const { length } = values;\n    if (length === 0) {\n        return undefined;\n    }\n    let min = Infinity;\n    let max = -Infinity;\n    for (let i = 0; i < length; i++) {\n        let v = values[i];\n        if (v instanceof Date) {\n            v = v.getTime();\n        }\n        if (typeof v !== 'number') {\n            continue;\n        }\n        if (v < min) {\n            min = v;\n        }\n        if (v > max) {\n            max = v;\n        }\n    }\n    const extent = [min, max];\n    if (extent.some((v) => !isFinite(v))) {\n        return undefined;\n    }\n    return extent;\n}\n\nvar __decorate$1J = ( false) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nclass Label$1 {\n    constructor() {\n        this.enabled = true;\n        this.fontSize = 12;\n        this.fontFamily = 'Verdana, sans-serif';\n        this.fontStyle = undefined;\n        this.fontWeight = undefined;\n        this.color = 'rgba(70, 70, 70, 1)';\n    }\n    getFont() {\n        return getFont(this);\n    }\n}\n__decorate$1J([\n    Validate(BOOLEAN)\n], Label$1.prototype, \"enabled\", void 0);\n__decorate$1J([\n    Validate(NUMBER(0))\n], Label$1.prototype, \"fontSize\", void 0);\n__decorate$1J([\n    Validate(STRING)\n], Label$1.prototype, \"fontFamily\", void 0);\n__decorate$1J([\n    Validate(OPT_FONT_STYLE)\n], Label$1.prototype, \"fontStyle\", void 0);\n__decorate$1J([\n    Validate(OPT_FONT_WEIGHT)\n], Label$1.prototype, \"fontWeight\", void 0);\n__decorate$1J([\n    Validate(COLOR_STRING)\n], Label$1.prototype, \"color\", void 0);\nfunction calculateLabelRotation(opts) {\n    const { parallelFlipRotation = 0, regularFlipRotation = 0 } = opts;\n    const configuredRotation = opts.rotation ? normalizeAngle360(toRadians$1(opts.rotation)) : 0;\n    const parallelFlipFlag = !configuredRotation && parallelFlipRotation >= 0 && parallelFlipRotation <= Math.PI ? -1 : 1;\n    // Flip if the axis rotation angle is in the top hemisphere.\n    const regularFlipFlag = !configuredRotation && regularFlipRotation >= 0 && regularFlipRotation <= Math.PI ? -1 : 1;\n    let defaultRotation = 0;\n    if (opts.parallel) {\n        defaultRotation = (parallelFlipFlag * Math.PI) / 2;\n    }\n    else if (regularFlipFlag === -1) {\n        defaultRotation = Math.PI;\n    }\n    return { configuredRotation, defaultRotation, parallelFlipFlag, regularFlipFlag };\n}\nfunction getLabelSpacing(minSpacing, rotated) {\n    if (!isNaN(minSpacing)) {\n        return minSpacing;\n    }\n    return rotated ? 0 : 10;\n}\nfunction getTextBaseline(parallel, labelRotation, sideFlag, parallelFlipFlag) {\n    if (parallel && !labelRotation) {\n        if (sideFlag * parallelFlipFlag === -1) {\n            return 'hanging';\n        }\n        else {\n            return 'bottom';\n        }\n    }\n    return 'middle';\n}\nfunction getTextAlign(parallel, labelRotation, labelAutoRotation, sideFlag, regularFlipFlag) {\n    const labelRotated = labelRotation > 0 && labelRotation <= Math.PI;\n    const labelAutoRotated = labelAutoRotation > 0 && labelAutoRotation <= Math.PI;\n    const alignFlag = labelRotated || labelAutoRotated ? -1 : 1;\n    if (parallel) {\n        if (labelRotation || labelAutoRotation) {\n            if (sideFlag * alignFlag === -1) {\n                return 'end';\n            }\n        }\n        else {\n            return 'center';\n        }\n    }\n    else if (sideFlag * regularFlipFlag === -1) {\n        return 'end';\n    }\n    return 'start';\n}\nfunction calculateLabelBBox(text, bbox, labelX, labelY, labelMatrix) {\n    // Text.computeBBox() does not take into account any of the transformations that have been applied to the label nodes, only the width and height are useful.\n    // Rather than taking into account all transformations including those of parent nodes which would be the result of `computeTransformedBBox()`, giving the x and y in the entire axis coordinate space,\n    // take into account only the rotation and translation applied to individual label nodes to get the x y coordinates of the labels relative to each other\n    // this makes label collision detection a lot simpler\n    const { width, height } = bbox;\n    const translatedBBox = new BBox(labelX, labelY, 0, 0);\n    labelMatrix.transformBBox(translatedBBox, bbox);\n    const { x = 0, y = 0 } = bbox;\n    bbox.width = width;\n    bbox.height = height;\n    return {\n        point: {\n            x,\n            y,\n            size: 0,\n        },\n        label: {\n            width,\n            height,\n            text,\n        },\n    };\n}\n\nvar __decorate$1I = ( false) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nvar __rest$3 = ( false) || function (s, e) {\n    var t = {};\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\n        t[p] = s[p];\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\n                t[p[i]] = s[p[i]];\n        }\n    return t;\n};\nconst TICK_COUNT = predicateWithMessage((v, ctx) => NUMBER(0)(v, ctx) || v instanceof TimeInterval, `expecting a tick count Number value or, for a time axis, a Time Interval such as 'agCharts.time.month'`);\nconst OPT_TICK_COUNT = predicateWithMessage((v, ctx) => OPTIONAL(v, ctx, TICK_COUNT), `expecting an optional tick count Number value or, for a time axis, a Time Interval such as 'agCharts.time.month'`);\nconst OPT_TICK_INTERVAL = predicateWithMessage((v, ctx) => OPTIONAL(v, ctx, (v, ctx) => (v !== 0 && NUMBER(0)(v, ctx)) || v instanceof TimeInterval), `expecting an optional non-zero positive Number value or, for a time axis, a Time Interval such as 'agCharts.time.month'`);\nconst GRID_STYLE_KEYS = ['stroke', 'lineDash'];\nconst GRID_STYLE = predicateWithMessage(ARRAY(undefined, (o) => {\n    for (const key in o) {\n        if (!GRID_STYLE_KEYS.includes(key)) {\n            return false;\n        }\n    }\n    return true;\n}), `expecting an Array of objects with gridline style properties such as 'stroke' and 'lineDash'`);\nvar Tags;\n(function (Tags) {\n    Tags[Tags[\"TickLine\"] = 0] = \"TickLine\";\n    Tags[Tags[\"TickLabel\"] = 1] = \"TickLabel\";\n    Tags[Tags[\"GridLine\"] = 2] = \"GridLine\";\n    Tags[Tags[\"GridArc\"] = 3] = \"GridArc\";\n    Tags[Tags[\"AxisLine\"] = 4] = \"AxisLine\";\n})(Tags || (Tags = {}));\nvar TickGenerationType;\n(function (TickGenerationType) {\n    TickGenerationType[TickGenerationType[\"CREATE\"] = 0] = \"CREATE\";\n    TickGenerationType[TickGenerationType[\"CREATE_SECONDARY\"] = 1] = \"CREATE_SECONDARY\";\n    TickGenerationType[TickGenerationType[\"FILTER\"] = 2] = \"FILTER\";\n    TickGenerationType[TickGenerationType[\"VALUES\"] = 3] = \"VALUES\";\n})(TickGenerationType || (TickGenerationType = {}));\nclass AxisLine {\n    constructor() {\n        this.width = 1;\n        this.color = 'rgba(195, 195, 195, 1)';\n    }\n}\n__decorate$1I([\n    Validate(NUMBER(0))\n], AxisLine.prototype, \"width\", void 0);\n__decorate$1I([\n    Validate(OPT_COLOR_STRING)\n], AxisLine.prototype, \"color\", void 0);\nclass BaseAxisTick {\n    constructor() {\n        this.enabled = true;\n        /**\n         * The line width to be used by axis ticks.\n         */\n        this.width = 1;\n        /**\n         * The line length to be used by axis ticks.\n         */\n        this.size = 6;\n        /**\n         * The color of the axis ticks.\n         * Use `undefined` rather than `rgba(0, 0, 0, 0)` to make the ticks invisible.\n         */\n        this.color = 'rgba(195, 195, 195, 1)';\n        /**\n         * A hint of how many ticks to use (the exact number of ticks might differ),\n         * a `TimeInterval` or a `CountableTimeInterval`.\n         * For example:\n         *\n         *     axis.tick.count = 5;\n         *     axis.tick.count = year;\n         *     axis.tick.count = month.every(6);\n         */\n        this.count = undefined;\n        this.interval = undefined;\n        this.values = undefined;\n        this.minSpacing = NaN;\n    }\n}\n__decorate$1I([\n    Validate(BOOLEAN)\n], BaseAxisTick.prototype, \"enabled\", void 0);\n__decorate$1I([\n    Validate(NUMBER(0))\n], BaseAxisTick.prototype, \"width\", void 0);\n__decorate$1I([\n    Validate(NUMBER(0))\n], BaseAxisTick.prototype, \"size\", void 0);\n__decorate$1I([\n    Validate(OPT_COLOR_STRING)\n], BaseAxisTick.prototype, \"color\", void 0);\n__decorate$1I([\n    Validate(OPT_TICK_COUNT),\n    Deprecated('Use tick.interval or tick.minSpacing and tick.maxSpacing instead')\n], BaseAxisTick.prototype, \"count\", void 0);\n__decorate$1I([\n    Validate(OPT_TICK_INTERVAL)\n], BaseAxisTick.prototype, \"interval\", void 0);\n__decorate$1I([\n    Validate(OPT_ARRAY())\n], BaseAxisTick.prototype, \"values\", void 0);\n__decorate$1I([\n    Validate(AND(NUMBER_OR_NAN(1), LESS_THAN('maxSpacing'))),\n    Default(NaN)\n], BaseAxisTick.prototype, \"minSpacing\", void 0);\nclass AxisLabel {\n    constructor() {\n        this.enabled = true;\n        /** If set to `false`, axis labels will not be wrapped on multiple lines. */\n        this.autoWrap = false;\n        /** Used to constrain the width of the label when `autoWrap` is `true`, if the label text width exceeds the `maxWidth`, it will be wrapped on multiple lines automatically. If `maxWidth` is omitted, a default width constraint will be applied. */\n        this.maxWidth = undefined;\n        /** Used to constrain the height of the multiline label, if the label text height exceeds the `maxHeight`, it will be truncated automatically. If `maxHeight` is omitted, a default height constraint will be applied. */\n        this.maxHeight = undefined;\n        this.fontStyle = undefined;\n        this.fontWeight = undefined;\n        this.fontSize = 12;\n        this.fontFamily = 'Verdana, sans-serif';\n        /**\n         * The padding between the labels and the ticks.\n         */\n        this.padding = 5;\n        /**\n         * Minimum gap in pixels between the axis labels before being removed to avoid collisions.\n         */\n        this.minSpacing = NaN;\n        /**\n         * The color of the labels.\n         * Use `undefined` rather than `rgba(0, 0, 0, 0)` to make labels invisible.\n         */\n        this.color = 'rgba(87, 87, 87, 1)';\n        /**\n         * Custom label rotation in degrees.\n         * Labels are rendered perpendicular to the axis line by default.\n         * Or parallel to the axis line, if the {@link parallel} is set to `true`.\n         * The value of this config is used as the angular offset/deflection\n         * from the default rotation.\n         */\n        this.rotation = undefined;\n        /**\n         * If specified and axis labels may collide, they are rotated to reduce collisions. If the\n         * `rotation` property is specified, it takes precedence.\n         */\n        this.autoRotate = undefined;\n        /**\n         * Rotation angle to use when autoRotate is applied.\n         */\n        this.autoRotateAngle = 335;\n        /**\n         * Avoid axis label collision by automatically reducing the number of ticks displayed. If set to `false`, axis labels may collide.\n         */\n        this.avoidCollisions = true;\n        /**\n         * By default labels and ticks are positioned to the left of the axis line.\n         * `true` positions the labels to the right of the axis line.\n         * However, if the axis is rotated, it's easier to think in terms\n         * of this side or the opposite side, rather than left and right.\n         * We use the term `mirror` for conciseness, although it's not\n         * true mirroring - for example, when a label is rotated, so that\n         * it is inclined at the 45 degree angle, text flowing from north-west\n         * to south-east, ending at the tick to the left of the axis line,\n         * and then we set this config to `true`, the text will still be flowing\n         * from north-west to south-east, _starting_ at the tick to the right\n         * of the axis line.\n         */\n        this.mirrored = false;\n        /**\n         * Labels are rendered perpendicular to the axis line by default.\n         * Setting this config to `true` makes labels render parallel to the axis line\n         * and center aligns labels' text at the ticks.\n         */\n        this.parallel = false;\n        /**\n         * In case {@param value} is a number, the {@param fractionDigits} parameter will\n         * be provided as well. The `fractionDigits` corresponds to the number of fraction\n         * digits used by the tick step. For example, if the tick step is `0.0005`,\n         * the `fractionDigits` is 4.\n         */\n        this.formatter = undefined;\n        this.format = undefined;\n    }\n    /**\n     * The side of the axis line to position the labels on.\n     * -1 = left (default)\n     * 1 = right\n     */\n    getSideFlag() {\n        return this.mirrored ? 1 : -1;\n    }\n    getFont() {\n        return getFont(this);\n    }\n}\n__decorate$1I([\n    Validate(BOOLEAN)\n], AxisLabel.prototype, \"enabled\", void 0);\n__decorate$1I([\n    Validate(OPT_BOOLEAN)\n], AxisLabel.prototype, \"autoWrap\", void 0);\n__decorate$1I([\n    Validate(OPT_NUMBER(0))\n], AxisLabel.prototype, \"maxWidth\", void 0);\n__decorate$1I([\n    Validate(OPT_NUMBER(0))\n], AxisLabel.prototype, \"maxHeight\", void 0);\n__decorate$1I([\n    Validate(OPT_FONT_STYLE)\n], AxisLabel.prototype, \"fontStyle\", void 0);\n__decorate$1I([\n    Validate(OPT_FONT_WEIGHT)\n], AxisLabel.prototype, \"fontWeight\", void 0);\n__decorate$1I([\n    Validate(NUMBER(1))\n], AxisLabel.prototype, \"fontSize\", void 0);\n__decorate$1I([\n    Validate(STRING)\n], AxisLabel.prototype, \"fontFamily\", void 0);\n__decorate$1I([\n    Validate(NUMBER(0))\n], AxisLabel.prototype, \"padding\", void 0);\n__decorate$1I([\n    Validate(NUMBER_OR_NAN()),\n    Default(NaN)\n], AxisLabel.prototype, \"minSpacing\", void 0);\n__decorate$1I([\n    Validate(OPT_COLOR_STRING)\n], AxisLabel.prototype, \"color\", void 0);\n__decorate$1I([\n    Validate(OPT_NUMBER(-360, 360))\n], AxisLabel.prototype, \"rotation\", void 0);\n__decorate$1I([\n    Validate(OPT_BOOLEAN)\n], AxisLabel.prototype, \"autoRotate\", void 0);\n__decorate$1I([\n    Validate(NUMBER(-360, 360))\n], AxisLabel.prototype, \"autoRotateAngle\", void 0);\n__decorate$1I([\n    Validate(BOOLEAN)\n], AxisLabel.prototype, \"avoidCollisions\", void 0);\n__decorate$1I([\n    Validate(BOOLEAN)\n], AxisLabel.prototype, \"mirrored\", void 0);\n__decorate$1I([\n    Validate(BOOLEAN)\n], AxisLabel.prototype, \"parallel\", void 0);\n__decorate$1I([\n    Validate(OPT_STRING)\n], AxisLabel.prototype, \"format\", void 0);\nclass AxisTitle {\n    constructor() {\n        this.enabled = false;\n        this.text = undefined;\n        this.fontStyle = undefined;\n        this.fontWeight = undefined;\n        this.fontSize = 10;\n        this.fontFamily = 'sans-serif';\n        this.color = undefined;\n        this.wrapping = 'always';\n        this.formatter = undefined;\n    }\n}\n__decorate$1I([\n    Validate(BOOLEAN)\n], AxisTitle.prototype, \"enabled\", void 0);\n__decorate$1I([\n    Validate(OPT_STRING)\n], AxisTitle.prototype, \"text\", void 0);\n__decorate$1I([\n    Validate(OPT_FONT_STYLE)\n], AxisTitle.prototype, \"fontStyle\", void 0);\n__decorate$1I([\n    Validate(OPT_FONT_WEIGHT)\n], AxisTitle.prototype, \"fontWeight\", void 0);\n__decorate$1I([\n    Validate(NUMBER(0))\n], AxisTitle.prototype, \"fontSize\", void 0);\n__decorate$1I([\n    Validate(STRING)\n], AxisTitle.prototype, \"fontFamily\", void 0);\n__decorate$1I([\n    Validate(OPT_COLOR_STRING)\n], AxisTitle.prototype, \"color\", void 0);\n__decorate$1I([\n    Validate(TEXT_WRAP)\n], AxisTitle.prototype, \"wrapping\", void 0);\n__decorate$1I([\n    Validate(OPT_FUNCTION)\n], AxisTitle.prototype, \"formatter\", void 0);\n/**\n * A general purpose linear axis with no notion of orientation.\n * The axis is always rendered vertically, with horizontal labels positioned to the left\n * of the axis line by default. The axis can be {@link rotation | rotated} by an arbitrary angle,\n * so that it can be used as a top, right, bottom, left, radial or any other kind\n * of linear axis.\n * The generic `D` parameter is the type of the domain of the axis' scale.\n * The output range of the axis' scale is always numeric (screen coordinates).\n */\nclass Axis {\n    constructor(moduleCtx, scale) {\n        this.moduleCtx = moduleCtx;\n        this.id = createId$1(this);\n        this.nice = true;\n        this.dataDomain = [];\n        this.axisGroup = new Group({ name: `${this.id}-axis`, zIndex: Layers.AXIS_ZINDEX });\n        this.lineNode = this.axisGroup.appendChild(new Line());\n        this.tickLineGroup = this.axisGroup.appendChild(new Group({ name: `${this.id}-Axis-tick-lines`, zIndex: Layers.AXIS_ZINDEX }));\n        this.tickLabelGroup = this.axisGroup.appendChild(new Group({ name: `${this.id}-Axis-tick-labels`, zIndex: Layers.AXIS_ZINDEX }));\n        this.crossLineGroup = new Group({ name: `${this.id}-CrossLines` });\n        this.gridGroup = new Group({ name: `${this.id}-Axis-grid` });\n        this.gridLineGroup = this.gridGroup.appendChild(new Group({\n            name: `${this.id}-gridLines`,\n            zIndex: Layers.AXIS_GRID_ZINDEX,\n        }));\n        this.gridArcGroup = this.gridGroup.appendChild(new Group({\n            name: `${this.id}-gridArcs`,\n            zIndex: Layers.AXIS_GRID_ZINDEX,\n        }));\n        this.tickLineGroupSelection = Selection.select(this.tickLineGroup, Line);\n        this.tickLabelGroupSelection = Selection.select(this.tickLabelGroup, Text);\n        this.gridLineGroupSelection = Selection.select(this.gridLineGroup, Line);\n        this.gridArcGroupSelection = Selection.select(this.gridArcGroup, Arc);\n        this._crossLines = [];\n        this.line = new AxisLine();\n        this.tick = this.createTick();\n        this.label = new AxisLabel();\n        this.translation = { x: 0, y: 0 };\n        this.rotation = 0; // axis rotation angle in degrees\n        this.layout = {\n            label: {\n                fractionDigits: 0,\n                padding: this.label.padding,\n                format: this.label.format,\n            },\n        };\n        this.range = [0, 1];\n        this.visibleRange = [0, 1];\n        this.title = undefined;\n        this._titleCaption = new Caption();\n        /**\n         * The length of the grid. The grid is only visible in case of a non-zero value.\n         * In case {@link radialGrid} is `true`, the value is interpreted as an angle\n         * (in degrees).\n         */\n        this._gridLength = 0;\n        /**\n         * The array of styles to cycle through when rendering grid lines.\n         * For example, use two {@link GridStyle} objects for alternating styles.\n         * Contains only one {@link GridStyle} object by default, meaning all grid lines\n         * have the same style.\n         */\n        this.gridStyle = [\n            {\n                stroke: 'rgba(219, 219, 219, 1)',\n                lineDash: [4, 2],\n            },\n        ];\n        /**\n         * `false` - render grid as lines of {@link gridLength} that extend the ticks\n         *           on the opposite side of the axis\n         * `true` - render grid as concentric circles that go through the ticks\n         */\n        this._radialGrid = false;\n        this.fractionDigits = 0;\n        /**\n         * The distance between the grid ticks and the axis ticks.\n         */\n        this.gridPadding = 0;\n        /**\n         * Is used to avoid collisions between axis labels and series.\n         */\n        this.seriesAreaPadding = 0;\n        this.thickness = 0;\n        this.maxThickness = Infinity;\n        this._scale = scale;\n        this.refreshScale();\n        this._titleCaption.node.rotation = -Math.PI / 2;\n        this.axisGroup.appendChild(this._titleCaption.node);\n    }\n    get scale() {\n        return this._scale;\n    }\n    set crossLines(value) {\n        var _a, _b;\n        (_a = this._crossLines) === null || _a === void 0 ? void 0 : _a.forEach((crossLine) => this.detachCrossLine(crossLine));\n        this._crossLines = value;\n        (_b = this._crossLines) === null || _b === void 0 ? void 0 : _b.forEach((crossLine) => {\n            this.attachCrossLine(crossLine);\n            this.initCrossLine(crossLine);\n        });\n    }\n    get crossLines() {\n        return this._crossLines;\n    }\n    attachCrossLine(crossLine) {\n        this.crossLineGroup.appendChild(crossLine.group);\n    }\n    detachCrossLine(crossLine) {\n        this.crossLineGroup.removeChild(crossLine.group);\n    }\n    destroy() {\n        // For override by sub-classes.\n    }\n    refreshScale() {\n        var _a;\n        this.range = this.scale.range.slice();\n        (_a = this.crossLines) === null || _a === void 0 ? void 0 : _a.forEach((crossLine) => {\n            this.initCrossLine(crossLine);\n        });\n    }\n    updateRange() {\n        var _a;\n        const { range: rr, visibleRange: vr, scale } = this;\n        const span = (rr[1] - rr[0]) / (vr[1] - vr[0]);\n        const shift = span * vr[0];\n        const start = rr[0] - shift;\n        scale.range = [start, start + span];\n        (_a = this.crossLines) === null || _a === void 0 ? void 0 : _a.forEach((crossLine) => {\n            crossLine.clippedRange = [rr[0], rr[1]];\n        });\n    }\n    setCrossLinesVisible(visible) {\n        this.crossLineGroup.visible = visible;\n    }\n    attachAxis(node, nextNode) {\n        node.insertBefore(this.gridGroup, nextNode);\n        node.insertBefore(this.axisGroup, nextNode);\n        node.insertBefore(this.crossLineGroup, nextNode);\n    }\n    detachAxis(node) {\n        node.removeChild(this.gridGroup);\n        node.removeChild(this.axisGroup);\n        node.removeChild(this.crossLineGroup);\n    }\n    /**\n     * Checks if a point or an object is in range.\n     * @param x A point (or object's starting point).\n     * @param width Object's width.\n     * @param tolerance Expands the range on both ends by this amount.\n     */\n    inRange(x, width = 0, tolerance = 0) {\n        return this.inRangeEx(x, width, tolerance) === 0;\n    }\n    inRangeEx(x, width = 0, tolerance = 0) {\n        const { range } = this;\n        // Account for inverted ranges, for example [500, 100] as well as [100, 500]\n        const min = Math.min(range[0], range[1]);\n        const max = Math.max(range[0], range[1]);\n        if (x + width < min - tolerance) {\n            return -1; // left of range\n        }\n        if (x > max + tolerance) {\n            return 1; // right of range\n        }\n        return 0; // in range\n    }\n    onLabelFormatChange(ticks, format) {\n        const { scale, fractionDigits } = this;\n        const logScale = scale instanceof LogScale;\n        const defaultLabelFormatter = !logScale && fractionDigits > 0\n            ? (x) => (typeof x === 'number' ? x.toFixed(fractionDigits) : String(x))\n            : (x) => String(x);\n        if (format && scale && scale.tickFormat) {\n            try {\n                this.labelFormatter = scale.tickFormat({\n                    ticks,\n                    specifier: format,\n                });\n            }\n            catch (e) {\n                this.labelFormatter = defaultLabelFormatter;\n                Logger.warnOnce(`the axis label format string ${format} is invalid. No formatting will be applied`);\n            }\n        }\n        else {\n            this.labelFormatter = defaultLabelFormatter;\n        }\n    }\n    setDomain() {\n        var _a;\n        const { scale, dataDomain, tick: { values: tickValues }, } = this;\n        if (tickValues && scale instanceof ContinuousScale) {\n            const [tickMin, tickMax] = (_a = extent$4(tickValues)) !== null && _a !== void 0 ? _a : [Infinity, -Infinity];\n            const min = Math.min(scale.fromDomain(dataDomain[0]), tickMin);\n            const max = Math.max(scale.fromDomain(dataDomain[1]), tickMax);\n            scale.domain = [scale.toDomain(min), scale.toDomain(max)];\n        }\n        else {\n            scale.domain = dataDomain;\n        }\n    }\n    setTickInterval(interval) {\n        var _a;\n        this.scale.interval = (_a = this.tick.interval) !== null && _a !== void 0 ? _a : interval;\n    }\n    setTickCount(count, minTickCount, maxTickCount) {\n        const { scale } = this;\n        if (!(count && scale instanceof ContinuousScale)) {\n            return;\n        }\n        if (typeof count === 'number') {\n            scale.tickCount = count;\n            scale.minTickCount = minTickCount !== null && minTickCount !== void 0 ? minTickCount : 0;\n            scale.maxTickCount = maxTickCount !== null && maxTickCount !== void 0 ? maxTickCount : Infinity;\n            return;\n        }\n        if (scale instanceof TimeScale$1) {\n            this.setTickInterval(count);\n        }\n    }\n    set gridLength(value) {\n        var _a;\n        // Was visible and now invisible, or was invisible and now visible.\n        if ((this._gridLength && !value) || (!this._gridLength && value)) {\n            this.gridLineGroupSelection = this.gridLineGroupSelection.clear();\n            this.gridArcGroupSelection = this.gridArcGroupSelection.clear();\n        }\n        this._gridLength = value;\n        (_a = this.crossLines) === null || _a === void 0 ? void 0 : _a.forEach((crossLine) => {\n            this.initCrossLine(crossLine);\n        });\n    }\n    get gridLength() {\n        return this._gridLength;\n    }\n    set radialGrid(value) {\n        if (this._radialGrid !== value) {\n            this._radialGrid = value;\n            this.gridLineGroupSelection = this.gridLineGroupSelection.clear();\n            this.gridArcGroupSelection = this.gridArcGroupSelection.clear();\n        }\n    }\n    get radialGrid() {\n        return this._radialGrid;\n    }\n    createTick() {\n        return new BaseAxisTick();\n    }\n    /**\n     * Creates/removes/updates the scene graph nodes that constitute the axis.\n     */\n    update(primaryTickCount) {\n        const { rotation, parallelFlipRotation, regularFlipRotation } = this.calculateRotations();\n        const sideFlag = this.label.getSideFlag();\n        const labelX = sideFlag * (this.tick.size + this.label.padding + this.seriesAreaPadding);\n        this.updateScale();\n        this.updatePosition({ rotation, sideFlag });\n        this.updateLine();\n        const _a = this.generateTicks({\n            primaryTickCount,\n            parallelFlipRotation,\n            regularFlipRotation,\n            labelX,\n            sideFlag,\n        }), { tickData, combinedRotation, textBaseline, textAlign } = _a, ticksResult = __rest$3(_a, [\"tickData\", \"combinedRotation\", \"textBaseline\", \"textAlign\"]);\n        this.updateSelections(tickData.ticks);\n        this.updateLabels({\n            tickLabelGroupSelection: this.tickLabelGroupSelection,\n            combinedRotation,\n            textBaseline,\n            textAlign,\n            labelX,\n        });\n        this.updateVisibility();\n        this.updateGridLines(sideFlag);\n        this.updateTickLines(sideFlag);\n        this.updateTitle({ anyTickVisible: tickData.ticks.length > 0, sideFlag });\n        this.updateCrossLines({ rotation, parallelFlipRotation, regularFlipRotation, sideFlag });\n        this.updateLayoutState();\n        primaryTickCount = ticksResult.primaryTickCount;\n        return primaryTickCount;\n    }\n    updateLayoutState() {\n        this.layout.label = {\n            fractionDigits: this.fractionDigits,\n            padding: this.label.padding,\n            format: this.label.format,\n        };\n    }\n    updateScale() {\n        this.updateRange();\n        this.calculateDomain();\n        this.setDomain();\n        this.setTickInterval(this.tick.interval);\n        const { scale, nice } = this;\n        if (!(scale instanceof ContinuousScale)) {\n            return;\n        }\n        this.setTickCount(this.tick.count);\n        scale.nice = nice;\n        scale.update();\n    }\n    calculateRotations() {\n        const rotation = toRadians$1(this.rotation);\n        // When labels are parallel to the axis line, the `parallelFlipFlag` is used to\n        // flip the labels to avoid upside-down text, when the axis is rotated\n        // such that it is in the right hemisphere, i.e. the angle of rotation\n        // is in the [0, π] interval.\n        // The rotation angle is normalized, so that we have an easier time checking\n        // if it's in the said interval. Since the axis is always rendered vertically\n        // and then rotated, zero rotation means 12 (not 3) o-clock.\n        // -1 = flip\n        //  1 = don't flip (default)\n        const parallelFlipRotation = normalizeAngle360(rotation);\n        const regularFlipRotation = normalizeAngle360(rotation - Math.PI / 2);\n        return { rotation, parallelFlipRotation, regularFlipRotation };\n    }\n    generateTicks({ primaryTickCount, parallelFlipRotation, regularFlipRotation, labelX, sideFlag, }) {\n        var _a;\n        const { scale, tick, label: { parallel, rotation, fontFamily, fontSize, fontStyle, fontWeight }, } = this;\n        const secondaryAxis = primaryTickCount !== undefined;\n        const { defaultRotation, configuredRotation, parallelFlipFlag, regularFlipFlag } = calculateLabelRotation({\n            rotation,\n            parallel,\n            regularFlipRotation,\n            parallelFlipRotation,\n        });\n        const initialRotation = configuredRotation + defaultRotation;\n        const labelMatrix = new Matrix();\n        const { maxTickCount } = this.estimateTickCount({\n            minSpacing: tick.minSpacing,\n            maxSpacing: (_a = tick.maxSpacing) !== null && _a !== void 0 ? _a : NaN,\n        });\n        const continuous = scale instanceof ContinuousScale;\n        const maxIterations = tick.count || !continuous || isNaN(maxTickCount) ? 10 : maxTickCount;\n        let textAlign = getTextAlign(parallel, configuredRotation, 0, sideFlag, regularFlipFlag);\n        const textBaseline = getTextBaseline(parallel, configuredRotation, sideFlag, parallelFlipFlag);\n        const textProps = {\n            fontFamily,\n            fontSize,\n            fontStyle,\n            fontWeight,\n            textBaseline,\n            textAlign,\n        };\n        let tickData = {\n            rawTicks: [],\n            ticks: [],\n            labelCount: 0,\n        };\n        let index = 0;\n        let autoRotation = 0;\n        let labelOverlap = true;\n        let terminate = false;\n        while (labelOverlap && index <= maxIterations) {\n            if (terminate) {\n                break;\n            }\n            autoRotation = 0;\n            textAlign = getTextAlign(parallel, configuredRotation, 0, sideFlag, regularFlipFlag);\n            const tickStrategies = this.getTickStrategies({ secondaryAxis, index });\n            for (const strategy of tickStrategies) {\n                ({ tickData, index, autoRotation, terminate } = strategy({\n                    index,\n                    tickData,\n                    textProps,\n                    labelOverlap,\n                    terminate,\n                    primaryTickCount,\n                }));\n                const ticksResult = tickData.ticks;\n                textAlign = getTextAlign(parallel, configuredRotation, autoRotation, sideFlag, regularFlipFlag);\n                const rotated = configuredRotation !== 0 || autoRotation !== 0;\n                const rotation = initialRotation + autoRotation;\n                labelOverlap = this.checkLabelOverlap(rotation, rotated, labelMatrix, ticksResult, labelX, Object.assign(Object.assign({}, textProps), { textAlign }));\n            }\n        }\n        const combinedRotation = defaultRotation + configuredRotation + autoRotation;\n        if (!secondaryAxis && tickData.rawTicks.length > 0) {\n            primaryTickCount = tickData.rawTicks.length;\n        }\n        return { tickData, primaryTickCount, combinedRotation, textBaseline, textAlign };\n    }\n    getTickStrategies({ index, secondaryAxis }) {\n        const { scale, label, tick } = this;\n        const continuous = scale instanceof ContinuousScale;\n        const avoidLabelCollisions = label.enabled && label.avoidCollisions;\n        const filterTicks = !(continuous && this.tick.count === undefined) && index !== 0 && avoidLabelCollisions;\n        const autoRotate = label.autoRotate === true && label.rotation === undefined;\n        const strategies = [];\n        let tickGenerationType;\n        if (this.tick.values) {\n            tickGenerationType = TickGenerationType.VALUES;\n        }\n        else if (secondaryAxis) {\n            tickGenerationType = TickGenerationType.CREATE_SECONDARY;\n        }\n        else if (filterTicks) {\n            tickGenerationType = TickGenerationType.FILTER;\n        }\n        else {\n            tickGenerationType = TickGenerationType.CREATE;\n        }\n        const tickGenerationStrategy = ({ index, tickData, primaryTickCount, terminate }) => this.createTickData(tickGenerationType, index, tickData, terminate, primaryTickCount);\n        strategies.push(tickGenerationStrategy);\n        if (!continuous && !isNaN(tick.minSpacing)) {\n            const tickFilterStrategy = ({ index, tickData, primaryTickCount, terminate }) => this.createTickData(TickGenerationType.FILTER, index, tickData, terminate, primaryTickCount);\n            strategies.push(tickFilterStrategy);\n        }\n        if (!avoidLabelCollisions) {\n            return strategies;\n        }\n        if (label.autoWrap) {\n            const autoWrapStrategy = ({ index, tickData, textProps }) => this.wrapLabels(tickData, index, textProps);\n            strategies.push(autoWrapStrategy);\n        }\n        else if (autoRotate) {\n            const autoRotateStrategy = ({ index, tickData, labelOverlap, terminate }) => ({\n                index,\n                tickData,\n                autoRotation: this.getAutoRotation(labelOverlap),\n                terminate,\n            });\n            strategies.push(autoRotateStrategy);\n        }\n        return strategies;\n    }\n    createTickData(tickGenerationType, index, tickData, terminate, primaryTickCount) {\n        var _a, _b, _c;\n        const { scale, tick } = this;\n        const { maxTickCount, minTickCount, defaultTickCount } = this.estimateTickCount({\n            minSpacing: tick.minSpacing,\n            maxSpacing: (_a = tick.maxSpacing) !== null && _a !== void 0 ? _a : NaN,\n        });\n        const continuous = scale instanceof ContinuousScale;\n        const maxIterations = tick.count || !continuous || isNaN(maxTickCount) ? 10 : maxTickCount;\n        let tickCount = (_b = tick.count) !== null && _b !== void 0 ? _b : (continuous ? Math.max(defaultTickCount - index, minTickCount) : maxTickCount);\n        const regenerateTicks = tick.interval === undefined &&\n            tick.values === undefined &&\n            tick.count === undefined &&\n            tickCount > minTickCount &&\n            (continuous || tickGenerationType === TickGenerationType.FILTER);\n        let unchanged = true;\n        while (unchanged && index <= maxIterations) {\n            const prevTicks = tickData.rawTicks;\n            tickCount = (_c = tick.count) !== null && _c !== void 0 ? _c : (continuous ? Math.max(defaultTickCount - index, minTickCount) : maxTickCount);\n            const { rawTicks, ticks, labelCount } = this.getTicks({\n                tickGenerationType,\n                previousTicks: prevTicks,\n                tickCount,\n                minTickCount,\n                maxTickCount,\n                primaryTickCount,\n            });\n            tickData.rawTicks = rawTicks;\n            tickData.ticks = ticks;\n            tickData.labelCount = labelCount;\n            unchanged = regenerateTicks ? areArrayNumbersEqual(rawTicks, prevTicks) : false;\n            index++;\n        }\n        const shouldTerminate = tick.interval !== undefined || tick.values !== undefined;\n        terminate || (terminate = shouldTerminate);\n        return { tickData, index, autoRotation: 0, terminate };\n    }\n    checkLabelOverlap(rotation, rotated, labelMatrix, tickData, labelX, textProps) {\n        Matrix.updateTransformMatrix(labelMatrix, 1, 1, rotation, 0, 0);\n        const labelData = this.createLabelData(tickData, labelX, textProps, labelMatrix);\n        const labelSpacing = getLabelSpacing(this.label.minSpacing, rotated);\n        return axisLabelsOverlap(labelData, labelSpacing);\n    }\n    createLabelData(tickData, labelX, textProps, labelMatrix) {\n        const labelData = [];\n        for (const tickDatum of tickData) {\n            const { tickLabel, translationY } = tickDatum;\n            if (tickLabel === '' || tickLabel == undefined) {\n                // skip user hidden ticks\n                continue;\n            }\n            const lines = splitText(tickLabel);\n            const { width, height } = measureText(lines, labelX, translationY, textProps);\n            const bbox = new BBox(labelX, translationY, width, height);\n            const labelDatum = calculateLabelBBox(tickLabel, bbox, labelX, translationY, labelMatrix);\n            labelData.push(labelDatum);\n        }\n        return labelData;\n    }\n    getAutoRotation(labelOveralap) {\n        return labelOveralap ? normalizeAngle360(toRadians$1(this.label.autoRotateAngle)) : 0;\n    }\n    getTicks({ tickGenerationType, previousTicks, tickCount, minTickCount, maxTickCount, primaryTickCount, }) {\n        var _a;\n        const { scale } = this;\n        let rawTicks = [];\n        switch (tickGenerationType) {\n            case TickGenerationType.VALUES:\n                rawTicks = this.tick.values;\n                break;\n            case TickGenerationType.CREATE_SECONDARY:\n                // `updateSecondaryAxisTicks` mutates `scale.domain` based on `primaryTickCount`\n                rawTicks = this.updateSecondaryAxisTicks(primaryTickCount);\n                break;\n            case TickGenerationType.FILTER:\n                rawTicks = this.filterTicks(previousTicks, tickCount);\n                break;\n            default:\n                rawTicks = this.createTicks(tickCount, minTickCount, maxTickCount);\n                break;\n        }\n        // When the scale domain or the ticks change, the label format may change\n        this.onLabelFormatChange(rawTicks, this.label.format);\n        // `ticks instanceof NumericTicks` doesn't work here, so we feature detect.\n        this.fractionDigits = rawTicks.fractionDigits >= 0 ? rawTicks.fractionDigits : 0;\n        const halfBandwidth = ((_a = this.scale.bandwidth) !== null && _a !== void 0 ? _a : 0) / 2;\n        const ticks = [];\n        let labelCount = 0;\n        for (let i = 0; i < rawTicks.length; i++) {\n            const rawTick = rawTicks[i];\n            const translationY = scale.convert(rawTick) + halfBandwidth;\n            const tickLabel = this.formatTick(rawTick, i);\n            ticks.push({ tick: rawTick, tickLabel, translationY });\n            if (tickLabel === '' || tickLabel == undefined) {\n                continue;\n            }\n            labelCount++;\n        }\n        return { rawTicks, ticks, labelCount };\n    }\n    filterTicks(ticks, tickCount) {\n        var _a;\n        const tickSpacing = !isNaN(this.tick.minSpacing) || !isNaN((_a = this.tick.maxSpacing) !== null && _a !== void 0 ? _a : NaN);\n        const keepEvery = tickSpacing ? Math.ceil(ticks.length / tickCount) : 2;\n        return ticks.filter((_, i) => i % keepEvery === 0);\n    }\n    createTicks(tickCount, minTickCount, maxTickCount) {\n        this.setTickCount(tickCount, minTickCount, maxTickCount);\n        return this.scale.ticks();\n    }\n    estimateTickCount({ minSpacing, maxSpacing }) {\n        const availableRange = this.calculateAvailableRange();\n        const defaultMinSpacing = Math.max(Axis.defaultTickMinSpacing, availableRange / ContinuousScale.defaultMaxTickCount);\n        if (isNaN(minSpacing) && isNaN(maxSpacing)) {\n            minSpacing = defaultMinSpacing;\n            maxSpacing = availableRange;\n            if (minSpacing > maxSpacing) {\n                // Take automatic minSpacing if there is a conflict.\n                maxSpacing = minSpacing;\n            }\n        }\n        else if (isNaN(minSpacing)) {\n            minSpacing = defaultMinSpacing;\n            if (minSpacing > maxSpacing) {\n                // Take user-suplied maxSpacing if there is a conflict.\n                minSpacing = maxSpacing;\n            }\n        }\n        else if (isNaN(maxSpacing)) {\n            maxSpacing = availableRange;\n            if (minSpacing > maxSpacing) {\n                // Take user-suplied minSpacing if there is a conflict.\n                maxSpacing = minSpacing;\n            }\n        }\n        const maxTickCount = Math.max(1, Math.floor(availableRange / minSpacing));\n        const minTickCount = Math.min(maxTickCount, Math.ceil(availableRange / maxSpacing));\n        let defaultTickCount = ContinuousScale.defaultTickCount;\n        if (defaultTickCount > maxTickCount) {\n            defaultTickCount = maxTickCount;\n        }\n        else if (defaultTickCount < minTickCount) {\n            defaultTickCount = minTickCount;\n        }\n        return { minTickCount, maxTickCount, defaultTickCount };\n    }\n    updateVisibility() {\n        const { range: requestedRange } = this;\n        const requestedRangeMin = Math.min(...requestedRange);\n        const requestedRangeMax = Math.max(...requestedRange);\n        const visibleFn = (node) => {\n            const min = Math.floor(requestedRangeMin);\n            const max = Math.ceil(requestedRangeMax);\n            if (min === max) {\n                node.visible = false;\n                return;\n            }\n            // Fix an effect of rounding error\n            if (node.translationY >= min - 1 && node.translationY < min) {\n                node.translationY = min;\n            }\n            if (node.translationY > max && node.translationY <= max + 1) {\n                node.translationY = max;\n            }\n            const visible = node.translationY >= min && node.translationY <= max;\n            node.visible = visible;\n        };\n        const { gridLineGroupSelection, gridArcGroupSelection, tickLineGroupSelection, tickLabelGroupSelection } = this;\n        gridLineGroupSelection.each(visibleFn);\n        gridArcGroupSelection.each(visibleFn);\n        tickLineGroupSelection.each(visibleFn);\n        tickLabelGroupSelection.each(visibleFn);\n        this.tickLineGroup.visible = this.tick.enabled;\n        this.tickLabelGroup.visible = this.label.enabled;\n    }\n    updateCrossLines({ rotation, parallelFlipRotation, regularFlipRotation, sideFlag, }) {\n        var _a;\n        const anySeriesActive = this.isAnySeriesActive();\n        (_a = this.crossLines) === null || _a === void 0 ? void 0 : _a.forEach((crossLine) => {\n            var _a;\n            crossLine.sideFlag = -sideFlag;\n            crossLine.direction = rotation === -Math.PI / 2 ? ChartAxisDirection.X : ChartAxisDirection.Y;\n            crossLine.label.parallel = (_a = crossLine.label.parallel) !== null && _a !== void 0 ? _a : this.label.parallel;\n            crossLine.parallelFlipRotation = parallelFlipRotation;\n            crossLine.regularFlipRotation = regularFlipRotation;\n            crossLine.update(anySeriesActive);\n        });\n    }\n    updateTickLines(sideFlag) {\n        const { tick } = this;\n        this.tickLineGroupSelection.each((line) => {\n            line.strokeWidth = tick.width;\n            line.stroke = tick.color;\n            line.x1 = sideFlag * tick.size;\n            line.x2 = 0;\n            line.y1 = 0;\n            line.y2 = 0;\n        });\n    }\n    calculateAvailableRange() {\n        const { range: requestedRange } = this;\n        const min = Math.min(...requestedRange);\n        const max = Math.max(...requestedRange);\n        return max - min;\n    }\n    calculateDomain() {\n        // Placeholder for subclasses to override.\n    }\n    updatePosition({ rotation, sideFlag }) {\n        const { crossLineGroup, axisGroup, gridGroup, translation, gridLineGroupSelection, gridPadding, gridLength } = this;\n        const translationX = Math.floor(translation.x);\n        const translationY = Math.floor(translation.y);\n        crossLineGroup.translationX = translationX;\n        crossLineGroup.translationY = translationY;\n        crossLineGroup.rotation = rotation;\n        axisGroup.translationX = translationX;\n        axisGroup.translationY = translationY;\n        axisGroup.rotation = rotation;\n        gridGroup.translationX = translationX;\n        gridGroup.translationY = translationY;\n        gridGroup.rotation = rotation;\n        gridLineGroupSelection.each((line) => {\n            line.x1 = gridPadding;\n            line.x2 = -sideFlag * gridLength + gridPadding;\n            line.y1 = 0;\n            line.y2 = 0;\n        });\n    }\n    updateSecondaryAxisTicks(_primaryTickCount) {\n        throw new Error('AG Charts - unexpected call to updateSecondaryAxisTicks() - check axes configuration.');\n    }\n    updateSelections(data) {\n        const gridData = this.gridLength ? data : [];\n        const gridLineGroupSelection = this.radialGrid\n            ? this.gridLineGroupSelection\n            : this.gridLineGroupSelection.update(gridData, (group) => {\n                const node = new Line();\n                node.tag = Tags.GridLine;\n                group.append(node);\n            });\n        const gridArcGroupSelection = this.radialGrid\n            ? this.gridArcGroupSelection.update(gridData, (group) => {\n                const node = new Arc();\n                node.tag = Tags.GridArc;\n                group.append(node);\n            })\n            : this.gridArcGroupSelection;\n        const tickLineGroupSelection = this.tickLineGroupSelection.update(data, (group) => {\n            const line = new Line();\n            line.tag = Tags.TickLine;\n            group.appendChild(line);\n        });\n        const tickLabelGroupSelection = this.tickLabelGroupSelection.update(data, (group) => {\n            const text = new Text();\n            text.tag = Tags.TickLabel;\n            group.appendChild(text);\n        });\n        // We need raw `translationY` values on `datum` for accurate label collision detection in axes.update()\n        // But node `translationY` values must be rounded to get pixel grid alignment\n        const translationFn = (node) => (node.translationY = Math.round(node.datum.translationY));\n        gridLineGroupSelection.each(translationFn);\n        gridArcGroupSelection.each(translationFn);\n        tickLineGroupSelection.each(translationFn);\n        tickLabelGroupSelection.each(translationFn);\n        this.tickLineGroupSelection = tickLineGroupSelection;\n        this.tickLabelGroupSelection = tickLabelGroupSelection;\n        this.gridLineGroupSelection = gridLineGroupSelection;\n        this.gridArcGroupSelection = gridArcGroupSelection;\n    }\n    updateGridLines(sideFlag) {\n        var _a;\n        const { gridStyle, scale, tick, gridPadding, gridLength } = this;\n        if (gridLength && gridStyle.length) {\n            const styleCount = gridStyle.length;\n            let grid;\n            if (this.radialGrid) {\n                const angularGridLength = normalizeAngle360Inclusive(toRadians$1(gridLength));\n                const halfBandwidth = ((_a = this.scale.bandwidth) !== null && _a !== void 0 ? _a : 0) / 2;\n                grid = this.gridArcGroupSelection.each((arc, datum) => {\n                    const radius = Math.round(scale.convert(datum) + halfBandwidth);\n                    arc.centerX = 0;\n                    arc.centerY = scale.range[0] - radius;\n                    arc.endAngle = angularGridLength;\n                    arc.radius = radius;\n                });\n            }\n            else {\n                grid = this.gridLineGroupSelection.each((line) => {\n                    line.x1 = gridPadding;\n                    line.x2 = -sideFlag * gridLength + gridPadding;\n                    line.y1 = 0;\n                    line.y2 = 0;\n                });\n            }\n            grid.each((node, _, index) => {\n                const style = gridStyle[index % styleCount];\n                node.stroke = style.stroke;\n                node.strokeWidth = tick.width;\n                node.lineDash = style.lineDash;\n                node.fill = undefined;\n            });\n        }\n    }\n    updateLabels({ tickLabelGroupSelection, combinedRotation, textBaseline, textAlign, labelX, }) {\n        const { label, label: { enabled: labelsEnabled }, } = this;\n        if (!labelsEnabled) {\n            return { labelData: [], rotated: false };\n        }\n        // Apply label option values\n        tickLabelGroupSelection.each((node, datum) => {\n            const { tickLabel } = datum;\n            node.fontStyle = label.fontStyle;\n            node.fontWeight = label.fontWeight;\n            node.fontSize = label.fontSize;\n            node.fontFamily = label.fontFamily;\n            node.fill = label.color;\n            node.text = tickLabel;\n            const userHidden = node.text === '' || node.text == undefined;\n            if (userHidden) {\n                node.visible = false; // hide empty labels\n                return;\n            }\n            // Position labels\n            node.textBaseline = textBaseline;\n            node.textAlign = textAlign;\n            node.x = labelX;\n            node.rotationCenterX = labelX;\n            node.rotation = combinedRotation;\n            node.visible = true;\n        });\n    }\n    wrapLabels(tickData, index, labelProps) {\n        const { label: { parallel, maxWidth, maxHeight }, } = this;\n        const defaultMaxLabelWidth = parallel\n            ? Math.round(this.calculateAvailableRange() / tickData.labelCount)\n            : this.maxThickness;\n        const maxLabelWidth = maxWidth !== null && maxWidth !== void 0 ? maxWidth : defaultMaxLabelWidth;\n        const defaultMaxLabelHeight = parallel\n            ? this.maxThickness\n            : Math.round(this.calculateAvailableRange() / tickData.labelCount);\n        const maxLabelHeight = maxHeight !== null && maxHeight !== void 0 ? maxHeight : defaultMaxLabelHeight;\n        tickData.ticks.forEach((tickDatum) => {\n            const { tickLabel } = tickDatum;\n            const wrapping = 'hyphenate';\n            const wrappedTickLabel = Text.wrap(tickLabel, maxLabelWidth, maxLabelHeight, labelProps, wrapping);\n            tickDatum.tickLabel = wrappedTickLabel;\n        });\n        return { tickData, index, autoRotation: 0, terminate: true };\n    }\n    updateLine() {\n        // Render axis line.\n        const { lineNode, range: requestedRange } = this;\n        lineNode.x1 = 0;\n        lineNode.x2 = 0;\n        lineNode.y1 = requestedRange[0];\n        lineNode.y2 = requestedRange[1];\n        lineNode.strokeWidth = this.line.width;\n        lineNode.stroke = this.line.color;\n        lineNode.visible = true;\n    }\n    updateTitle({ anyTickVisible, sideFlag }) {\n        var _a;\n        const identityFormatter = (params) => params.defaultValue;\n        const { rotation, title, _titleCaption, lineNode, range: requestedRange, tickLineGroup, tickLabelGroup, moduleCtx: { callbackCache }, } = this;\n        const { formatter = identityFormatter } = (_a = this.title) !== null && _a !== void 0 ? _a : {};\n        if (!title) {\n            _titleCaption.enabled = false;\n            return;\n        }\n        _titleCaption.enabled = title.enabled;\n        _titleCaption.fontFamily = title.fontFamily;\n        _titleCaption.fontSize = title.fontSize;\n        _titleCaption.fontStyle = title.fontStyle;\n        _titleCaption.fontWeight = title.fontWeight;\n        _titleCaption.color = title.color;\n        _titleCaption.wrapping = title.wrapping;\n        let titleVisible = false;\n        const titleNode = _titleCaption.node;\n        if (title.enabled && lineNode.visible) {\n            titleVisible = true;\n            const parallelFlipRotation = normalizeAngle360(rotation);\n            const padding = Caption.PADDING;\n            const titleRotationFlag = sideFlag === -1 && parallelFlipRotation > Math.PI && parallelFlipRotation < Math.PI * 2 ? -1 : 1;\n            titleNode.rotation = (titleRotationFlag * sideFlag * Math.PI) / 2;\n            titleNode.x = Math.floor((titleRotationFlag * sideFlag * (requestedRange[0] + requestedRange[1])) / 2);\n            let bboxYDimension = 0;\n            if (anyTickVisible) {\n                const tickBBox = Group.computeBBox([tickLineGroup, tickLabelGroup]);\n                const tickWidth = rotation === 0 ? tickBBox.width : tickBBox.height;\n                if (Math.abs(tickWidth) < Infinity) {\n                    bboxYDimension += tickWidth;\n                }\n            }\n            if (sideFlag === -1) {\n                titleNode.y = Math.floor(titleRotationFlag * (-padding - bboxYDimension));\n            }\n            else {\n                titleNode.y = Math.floor(-padding - bboxYDimension);\n            }\n            titleNode.textBaseline = titleRotationFlag === 1 ? 'bottom' : 'top';\n            titleNode.text = callbackCache.call(formatter, this.getTitleFormatterParams());\n        }\n        titleNode.visible = titleVisible;\n    }\n    // For formatting (nice rounded) tick values.\n    formatTick(datum, index) {\n        var _a, _b;\n        const { label, labelFormatter, fractionDigits, moduleCtx: { callbackCache }, } = this;\n        if (label.formatter) {\n            const defaultValue = fractionDigits > 0 ? datum : String(datum);\n            return ((_a = callbackCache.call(label.formatter, {\n                value: defaultValue,\n                index,\n                fractionDigits,\n                formatter: labelFormatter,\n            })) !== null && _a !== void 0 ? _a : defaultValue);\n        }\n        else if (labelFormatter) {\n            return (_b = callbackCache.call(labelFormatter, datum)) !== null && _b !== void 0 ? _b : String(datum);\n        }\n        // The axis is using a logScale or the`datum` is an integer, a string or an object\n        return String(datum);\n    }\n    // For formatting arbitrary values between the ticks.\n    formatDatum(datum) {\n        return String(datum);\n    }\n    computeBBox() {\n        return this.axisGroup.computeBBox();\n    }\n    initCrossLine(crossLine) {\n        crossLine.scale = this.scale;\n        crossLine.gridLength = this.gridLength;\n    }\n    isAnySeriesActive() {\n        return false;\n    }\n    clipTickLines(x, y, width, height) {\n        this.tickLineGroup.setClipRectInGroupCoordinateSpace(new BBox(x, y, width, height));\n    }\n    clipGrid(x, y, width, height) {\n        this.gridGroup.setClipRectInGroupCoordinateSpace(new BBox(x, y, width, height));\n    }\n    calculatePadding(min, _max) {\n        return Math.abs(min * 0.01);\n    }\n}\nAxis.defaultTickMinSpacing = 50;\n__decorate$1I([\n    Validate(BOOLEAN)\n], Axis.prototype, \"nice\", void 0);\n__decorate$1I([\n    Validate(GRID_STYLE)\n], Axis.prototype, \"gridStyle\", void 0);\n__decorate$1I([\n    Validate(NUMBER(0))\n], Axis.prototype, \"thickness\", void 0);\n\n/**\n * Maps continuous domain to a continuous range.\n */\nclass LinearScale$1 extends ContinuousScale {\n    constructor() {\n        super([0, 1], [0, 1]);\n        this.type = 'linear';\n    }\n    toDomain(d) {\n        return d;\n    }\n    ticks() {\n        var _a;\n        const count = (_a = this.tickCount) !== null && _a !== void 0 ? _a : ContinuousScale.defaultTickCount;\n        if (!this.domain || this.domain.length < 2 || count < 1 || this.domain.some((d) => !isFinite(d))) {\n            return [];\n        }\n        this.refresh();\n        const [d0, d1] = this.getDomain();\n        const { interval } = this;\n        if (interval) {\n            const step = Math.abs(interval);\n            if (!this.isDenseInterval({ start: d0, stop: d1, interval: step })) {\n                return range(d0, d1, step);\n            }\n        }\n        return ticks(d0, d1, count, this.minTickCount, this.maxTickCount);\n    }\n    update() {\n        if (!this.domain || this.domain.length < 2) {\n            return;\n        }\n        if (this.nice) {\n            this.updateNiceDomain();\n        }\n    }\n    /**\n     * Extends the domain so that it starts and ends on nice round values.\n     * @param count Tick count.\n     */\n    updateNiceDomain() {\n        var _a, _b;\n        const count = (_a = this.tickCount) !== null && _a !== void 0 ? _a : ContinuousScale.defaultTickCount;\n        let [start, stop] = this.domain;\n        if (count < 1) {\n            this.niceDomain = [start, stop];\n            return;\n        }\n        if (count === 1) {\n            this.niceDomain = singleTickDomain(start, stop);\n            return;\n        }\n        const maxAttempts = 4;\n        let prev0 = start;\n        let prev1 = stop;\n        for (let i = 0; i < maxAttempts; i++) {\n            const step = (_b = this.interval) !== null && _b !== void 0 ? _b : tickStep(start, stop, count, this.minTickCount, this.maxTickCount);\n            const [d0, d1] = this.domain;\n            if (step >= 1) {\n                start = Math.floor(d0 / step) * step;\n                stop = Math.ceil(d1 / step) * step;\n            }\n            else {\n                // Prevent floating point error\n                const s = 1 / step;\n                start = Math.floor(d0 * s) / s;\n                stop = Math.ceil(d1 * s) / s;\n            }\n            if (start === prev0 && stop === prev1) {\n                break;\n            }\n            prev0 = start;\n            prev1 = stop;\n        }\n        this.niceDomain = [start, stop];\n    }\n    tickFormat({ ticks, specifier }) {\n        return tickFormat(ticks !== null && ticks !== void 0 ? ticks : this.ticks(), specifier);\n    }\n}\n\nvar __decorate$1H = ( false) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nclass ChartAxis extends Axis {\n    constructor(moduleCtx, scale) {\n        super(moduleCtx, scale);\n        this.keys = [];\n        this.boundSeries = [];\n        this.includeInvisibleDomains = false;\n        this.modules = {};\n        this.position = 'left';\n    }\n    get type() {\n        var _a;\n        return (_a = this.constructor.type) !== null && _a !== void 0 ? _a : '';\n    }\n    get direction() {\n        return ['top', 'bottom'].includes(this.position) ? ChartAxisDirection.X : ChartAxisDirection.Y;\n    }\n    useCalculatedTickCount() {\n        // We only want to use the new algorithm for number axes. Category axes don't use a\n        // calculated or user-supplied tick-count, and time axes need special handling depending on\n        // the time-range involved.\n        return this.scale instanceof LinearScale$1;\n    }\n    update(primaryTickCount) {\n        this.updateDirection();\n        return super.update(primaryTickCount);\n    }\n    updateDirection() {\n        switch (this.position) {\n            case 'top':\n                this.rotation = -90;\n                this.label.mirrored = true;\n                this.label.parallel = true;\n                break;\n            case 'right':\n                this.rotation = 0;\n                this.label.mirrored = true;\n                this.label.parallel = false;\n                break;\n            case 'bottom':\n                this.rotation = -90;\n                this.label.mirrored = false;\n                this.label.parallel = true;\n                break;\n            case 'left':\n                this.rotation = 0;\n                this.label.mirrored = false;\n                this.label.parallel = false;\n                break;\n        }\n        if (this.axisContext) {\n            this.axisContext.position = this.position;\n            this.axisContext.direction = this.direction;\n        }\n    }\n    calculateDomain() {\n        const { direction, boundSeries, includeInvisibleDomains } = this;\n        if (this.linkedTo) {\n            this.dataDomain = this.linkedTo.dataDomain;\n        }\n        else {\n            const domains = [];\n            const visibleSeries = boundSeries.filter((s) => includeInvisibleDomains || s.isEnabled());\n            for (const series of visibleSeries) {\n                domains.push(series.getDomain(direction));\n            }\n            const domain = new Array().concat(...domains);\n            this.dataDomain = this.normaliseDataDomain(domain);\n        }\n    }\n    normaliseDataDomain(d) {\n        return d;\n    }\n    isAnySeriesActive() {\n        return this.boundSeries.some((s) => this.includeInvisibleDomains || s.isEnabled());\n    }\n    getLayoutState() {\n        return Object.assign({ rect: this.computeBBox(), gridPadding: this.gridPadding, seriesAreaPadding: this.seriesAreaPadding, tickSize: this.tick.size }, this.layout);\n    }\n    addModule(module) {\n        if (this.modules[module.optionsKey] != null) {\n            throw new Error('AG Charts - module already initialised: ' + module.optionsKey);\n        }\n        if (this.axisContext == null) {\n            const keys = () => {\n                return this.boundSeries\n                    .map((s) => s.getKeys(this.direction))\n                    .reduce((keys, seriesKeys) => {\n                    keys.push(...seriesKeys);\n                    return keys;\n                }, []);\n            };\n            this.axisContext = {\n                axisId: this.id,\n                position: this.position,\n                direction: this.direction,\n                continuous: this.scale instanceof ContinuousScale,\n                keys,\n                scaleValueFormatter: (specifier) => { var _a, _b, _c; return (_c = (_b = (_a = this.scale).tickFormat) === null || _b === void 0 ? void 0 : _b.call(_a, { specifier })) !== null && _c !== void 0 ? _c : undefined; },\n                scaleBandwidth: () => { var _a; return (_a = this.scale.bandwidth) !== null && _a !== void 0 ? _a : 0; },\n                scaleConvert: (val) => this.scale.convert(val),\n                scaleInvert: (val) => { var _a, _b, _c; return (_c = (_b = (_a = this.scale).invert) === null || _b === void 0 ? void 0 : _b.call(_a, val)) !== null && _c !== void 0 ? _c : undefined; },\n            };\n        }\n        const moduleInstance = new module.instanceConstructor(Object.assign(Object.assign({}, this.moduleCtx), { parent: this.axisContext }));\n        this.modules[module.optionsKey] = { instance: moduleInstance };\n        this[module.optionsKey] = moduleInstance;\n    }\n    removeModule(module) {\n        var _a, _b;\n        (_b = (_a = this.modules[module.optionsKey]) === null || _a === void 0 ? void 0 : _a.instance) === null || _b === void 0 ? void 0 : _b.destroy();\n        delete this.modules[module.optionsKey];\n        delete this[module.optionsKey];\n    }\n    isModuleEnabled(module) {\n        return this.modules[module.optionsKey] != null;\n    }\n    destroy() {\n        super.destroy();\n        for (const [key, module] of Object.entries(this.modules)) {\n            module.instance.destroy();\n            delete this.modules[key];\n            delete this[key];\n        }\n    }\n    getTitleFormatterParams() {\n        var _a;\n        const boundSeries = this.boundSeries.reduce((acc, next) => {\n            const keys = next.getKeys(this.direction);\n            const names = next.getNames(this.direction);\n            for (let idx = 0; idx < keys.length; idx++) {\n                acc.push({\n                    key: keys[idx],\n                    name: names[idx],\n                });\n            }\n            return acc;\n        }, []);\n        return {\n            direction: this.direction,\n            boundSeries,\n            defaultValue: (_a = this.title) === null || _a === void 0 ? void 0 : _a.text,\n        };\n    }\n}\n__decorate$1H([\n    Validate(STRING_ARRAY)\n], ChartAxis.prototype, \"keys\", void 0);\n__decorate$1H([\n    Validate(POSITION)\n], ChartAxis.prototype, \"position\", void 0);\n\nvar __decorate$1G = ( false) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nclass CategoryAxis extends ChartAxis {\n    constructor(moduleCtx) {\n        super(moduleCtx, new BandScale$5());\n        this._paddingOverrideEnabled = false;\n        this.groupPaddingInner = 0.1;\n        this.includeInvisibleDomains = true;\n    }\n    set paddingInner(value) {\n        this._paddingOverrideEnabled = true;\n        this.scale.paddingInner = value;\n    }\n    get paddingInner() {\n        this._paddingOverrideEnabled = true;\n        return this.scale.paddingInner;\n    }\n    set paddingOuter(value) {\n        this.scale.paddingOuter = value;\n    }\n    get paddingOuter() {\n        return this.scale.paddingOuter;\n    }\n    normaliseDataDomain(d) {\n        // Prevent duplicate categories.\n        const valuesSet = new Set(d);\n        return new Array(...valuesSet.values());\n    }\n    calculateDomain() {\n        if (!this._paddingOverrideEnabled) {\n            const { boundSeries } = this;\n            const paddings = boundSeries.map((s) => { var _a; return (_a = s.getBandScalePadding) === null || _a === void 0 ? void 0 : _a.call(s); }).filter((p) => p != null);\n            if (paddings.length > 0) {\n                this.scale.paddingInner = Math.min(...paddings.map((p) => p.inner));\n                this.scale.paddingOuter = Math.max(...paddings.map((p) => p.outer));\n            }\n        }\n        return super.calculateDomain();\n    }\n}\nCategoryAxis.className = 'CategoryAxis';\nCategoryAxis.type = 'category';\n__decorate$1G([\n    Validate(NUMBER(0, 1))\n], CategoryAxis.prototype, \"groupPaddingInner\", void 0);\n\n/**\n * Performs a JSON-diff between a source and target JSON structure.\n *\n * On a per property basis, takes the target property value where:\n * - types are different.\n * - type is primitive.\n * - type is array and length or content have changed.\n *\n * Recurses for object types.\n *\n * @param source starting point for diff\n * @param target target for diff vs. source\n *\n * @returns `null` if no differences, or an object with the subset of properties that have changed.\n */\nfunction jsonDiff(source, target) {\n    const sourceType = classify(source);\n    const targetType = classify(target);\n    if (targetType === 'array') {\n        const targetArray = target;\n        if (sourceType !== 'array' || source.length !== targetArray.length) {\n            return [...targetArray];\n        }\n        if (targetArray.some((targetElement, i) => { var _a; return jsonDiff((_a = source) === null || _a === void 0 ? void 0 : _a[i], targetElement) != null; })) {\n            return [...targetArray];\n        }\n        return null;\n    }\n    if (targetType === 'primitive') {\n        if (sourceType !== 'primitive') {\n            return Object.assign({}, target);\n        }\n        if (source !== target) {\n            return target;\n        }\n        return null;\n    }\n    const lhs = source || {};\n    const rhs = target || {};\n    const allProps = new Set([...Object.keys(lhs), ...Object.keys(rhs)]);\n    let propsChangedCount = 0;\n    const result = {};\n    for (const prop of allProps) {\n        // Cheap-and-easy equality check.\n        if (lhs[prop] === rhs[prop]) {\n            continue;\n        }\n        const take = (v) => {\n            result[prop] = v;\n            propsChangedCount++;\n        };\n        const lhsType = classify(lhs[prop]);\n        const rhsType = classify(rhs[prop]);\n        if (lhsType !== rhsType) {\n            // Types changed, just take RHS.\n            take(rhs[prop]);\n            continue;\n        }\n        if (rhsType === 'primitive' || rhsType === null) {\n            take(rhs[prop]);\n            continue;\n        }\n        if (rhsType === 'array' && lhs[prop].length !== rhs[prop].length) {\n            // Arrays are different sizes, so just take target array.\n            take(rhs[prop]);\n            continue;\n        }\n        if (rhsType === 'class-instance') {\n            // Don't try to do anything tricky with array diffs!\n            take(rhs[prop]);\n            continue;\n        }\n        if (rhsType === 'function' && lhs[prop] !== rhs[prop]) {\n            take(rhs[prop]);\n            continue;\n        }\n        const diff = jsonDiff(lhs[prop], rhs[prop]);\n        if (diff !== null) {\n            take(diff);\n        }\n    }\n    return propsChangedCount === 0 ? null : result;\n}\n/**\n * Special value used by `jsonMerge` to signal that a property should be removed from the merged\n * output.\n */\nconst DELETE = Symbol('<delete-property>');\nconst NOT_SPECIFIED = Symbol('<unspecified-property>');\n/**\n * Merge together the provide JSON object structures, with the precedence of application running\n * from higher indexes to lower indexes.\n *\n * Deep-clones all objects to avoid mutation of the inputs changing the output object. For arrays,\n * just performs a deep-clone of the entire array, no merging of elements attempted.\n *\n * @param json all json objects to merge\n * @param opts merge options\n * @param opts.avoidDeepClone contains a list of properties where deep clones should be avoided\n *\n * @returns the combination of all of the json inputs\n */\nfunction jsonMerge(json, opts) {\n    var _a;\n    const avoidDeepClone = (_a = opts === null || opts === void 0 ? void 0 : opts.avoidDeepClone) !== null && _a !== void 0 ? _a : [];\n    const jsonTypes = json.map((v) => classify(v));\n    if (jsonTypes.some((v) => v === 'array')) {\n        // Clone final array.\n        const finalValue = json[json.length - 1];\n        if (finalValue instanceof Array) {\n            return finalValue.map((v) => {\n                const type = classify(v);\n                if (type === 'array')\n                    return jsonMerge([[], v], opts);\n                if (type === 'object')\n                    return jsonMerge([{}, v], opts);\n                return v;\n            });\n        }\n        return finalValue;\n    }\n    const result = {};\n    const props = new Set(json.map((v) => (v != null ? Object.keys(v) : [])).reduce((r, n) => r.concat(n), []));\n    for (const nextProp of props) {\n        const values = json\n            .map((j) => (j != null && nextProp in j ? j[nextProp] : NOT_SPECIFIED))\n            .filter((v) => v !== NOT_SPECIFIED);\n        if (values.length === 0) {\n            continue;\n        }\n        const lastValue = values[values.length - 1];\n        if (lastValue === DELETE) {\n            continue;\n        }\n        const types = values.map((v) => classify(v));\n        const type = types[0];\n        if (types.some((t) => t !== type)) {\n            // Short-circuit if mismatching types.\n            result[nextProp] = lastValue;\n            continue;\n        }\n        if ((type === 'array' || type === 'object') && !avoidDeepClone.includes(nextProp)) {\n            result[nextProp] = jsonMerge(values, opts);\n        }\n        else if (type === 'array') {\n            // Arrays need to be shallow copied to avoid external mutation and allow jsonDiff to\n            // detect changes.\n            result[nextProp] = [...lastValue];\n        }\n        else {\n            // Just directly assign/overwrite.\n            result[nextProp] = lastValue;\n        }\n    }\n    return result;\n}\n/**\n * Recursively apply a JSON object into a class-hierarchy, optionally instantiating certain classes\n * by property name.\n *\n * @param target to apply source JSON properties into\n * @param source to be applied\n * @param params.path path for logging/error purposes, to aid with pinpointing problems\n * @param params.matcherPath path for pattern matching, to lookup allowedTypes override.\n * @param params.skip property names to skip from the source\n * @param params.constructors dictionary of property name to class constructors for properties that\n *                            require object construction\n * @param params.allowedTypes overrides by path for allowed property types\n */\nfunction jsonApply(target, source, params = {}) {\n    var _a, _b;\n    const { path = undefined, matcherPath = path ? path.replace(/(\\[[0-9+]+\\])/i, '[]') : undefined, skip = [], constructors = {}, allowedTypes = {}, idx, } = params;\n    if (target == null) {\n        throw new Error(`AG Charts - target is uninitialised: ${path !== null && path !== void 0 ? path : '<root>'}`);\n    }\n    if (source == null) {\n        return target;\n    }\n    const targetAny = target;\n    if (idx != null && '_declarationOrder' in targetAny) {\n        targetAny['_declarationOrder'] = idx;\n    }\n    const targetType = classify(target);\n    for (const property in source) {\n        const propertyMatcherPath = `${matcherPath ? matcherPath + '.' : ''}${property}`;\n        if (skip.indexOf(propertyMatcherPath) >= 0) {\n            continue;\n        }\n        const newValue = source[property];\n        const propertyPath = `${path ? path + '.' : ''}${property}`;\n        const targetClass = targetAny.constructor;\n        const currentValue = targetAny[property];\n        let ctr = (_a = constructors[propertyMatcherPath]) !== null && _a !== void 0 ? _a : constructors[property];\n        try {\n            const currentValueType = classify(currentValue);\n            const newValueType = classify(newValue);\n            if (targetType === 'class-instance' &&\n                !(property in target || Object.prototype.hasOwnProperty.call(targetAny, property))) {\n                Logger.warn(`unable to set [${propertyPath}] in ${targetClass === null || targetClass === void 0 ? void 0 : targetClass.name} - property is unknown`);\n                continue;\n            }\n            const allowableTypes = (_b = allowedTypes[propertyMatcherPath]) !== null && _b !== void 0 ? _b : [currentValueType];\n            if (currentValueType === 'class-instance' && newValueType === 'object') {\n                // Allowed, this is the common case! - do not error.\n            }\n            else if (currentValueType != null && newValueType != null && !allowableTypes.includes(newValueType)) {\n                Logger.warn(`unable to set [${propertyPath}] in ${targetClass === null || targetClass === void 0 ? void 0 : targetClass.name} - can't apply type of [${newValueType}], allowed types are: [${allowableTypes}]`);\n                continue;\n            }\n            if (newValueType === 'array') {\n                ctr = ctr !== null && ctr !== void 0 ? ctr : constructors[`${propertyMatcherPath}[]`];\n                if (ctr != null) {\n                    const newValueArray = newValue;\n                    targetAny[property] = newValueArray.map((v, idx) => jsonApply(new ctr(), v, Object.assign(Object.assign({}, params), { path: propertyPath, matcherPath: propertyMatcherPath + '[]', idx })));\n                }\n                else {\n                    targetAny[property] = newValue;\n                }\n            }\n            else if (newValueType === 'class-instance') {\n                targetAny[property] = newValue;\n            }\n            else if (newValueType === 'object') {\n                if (currentValue != null) {\n                    jsonApply(currentValue, newValue, Object.assign(Object.assign({}, params), { path: propertyPath, matcherPath: propertyMatcherPath, idx: undefined }));\n                }\n                else if (ctr != null) {\n                    targetAny[property] = jsonApply(new ctr(), newValue, Object.assign(Object.assign({}, params), { path: propertyPath, matcherPath: propertyMatcherPath, idx: undefined }));\n                }\n                else {\n                    targetAny[property] = newValue;\n                }\n            }\n            else {\n                targetAny[property] = newValue;\n            }\n        }\n        catch (error) {\n            const err = error;\n            Logger.warn(`unable to set [${propertyPath}] in [${targetClass === null || targetClass === void 0 ? void 0 : targetClass.name}]; nested error is: ${err.message}`);\n            continue;\n        }\n    }\n    return target;\n}\n/**\n * Walk the given JSON object graphs, invoking the visit() callback for every object encountered.\n * Arrays are descended into without a callback, however their elements will have the visit()\n * callback invoked if they are objects.\n *\n * @param json to traverse\n * @param visit callback for each non-primitive and non-array object found\n * @param opts.skip property names to skip when walking\n * @param jsons to traverse in parallel\n */\nfunction jsonWalk(json, visit, opts, ...jsons) {\n    var _a;\n    const jsonType = classify(json);\n    const skip = (_a = opts.skip) !== null && _a !== void 0 ? _a : [];\n    if (jsonType === 'array') {\n        json.forEach((element, index) => {\n            jsonWalk(element, visit, opts, ...(jsons !== null && jsons !== void 0 ? jsons : []).map((o) => o === null || o === void 0 ? void 0 : o[index]));\n        });\n        return;\n    }\n    else if (jsonType !== 'object') {\n        return;\n    }\n    visit(jsonType, json, ...jsons);\n    for (const property in json) {\n        if (skip.indexOf(property) >= 0) {\n            continue;\n        }\n        const value = json[property];\n        const otherValues = jsons === null || jsons === void 0 ? void 0 : jsons.map((o) => o === null || o === void 0 ? void 0 : o[property]);\n        const valueType = classify(value);\n        if (valueType === 'object' || valueType === 'array') {\n            jsonWalk(value, visit, opts, ...otherValues);\n        }\n    }\n}\nconst isBrowser = typeof window !== 'undefined';\n/**\n * Classify the type of a value to assist with handling for merge purposes.\n */\nfunction classify(value) {\n    if (value == null) {\n        return null;\n    }\n    else if (isBrowser && value instanceof HTMLElement) {\n        return 'primitive';\n    }\n    else if (value instanceof Array) {\n        return 'array';\n    }\n    else if (value instanceof Date) {\n        return 'primitive';\n    }\n    else if (typeof value === 'object' && value.constructor === Object) {\n        return 'object';\n    }\n    else if (typeof value === 'function') {\n        return 'function';\n    }\n    else if (typeof value === 'object' && value.constructor != null) {\n        return 'class-instance';\n    }\n    return 'primitive';\n}\n\nclass Square extends Marker {\n    updatePath() {\n        const { path, x, y } = this;\n        const hs = this.size / 2;\n        path.clear();\n        path.moveTo(this.align(x - hs), this.align(y - hs));\n        path.lineTo(this.align(x + hs), this.align(y - hs));\n        path.lineTo(this.align(x + hs), this.align(y + hs));\n        path.lineTo(this.align(x - hs), this.align(y + hs));\n        path.closePath();\n    }\n}\nSquare.className = 'Square';\n\nclass Cross extends Marker {\n    updatePath() {\n        const s = this.size / 4.2;\n        super.applyPath(s, Cross.moves);\n    }\n}\nCross.className = 'Cross';\nCross.moves = [\n    { x: -1, y: 0, t: 'move' },\n    { x: -1, y: -1 },\n    { x: +1, y: -1 },\n    { x: +1, y: +1 },\n    { x: +1, y: -1 },\n    { x: +1, y: +1 },\n    { x: -1, y: +1 },\n    { x: +1, y: +1 },\n    { x: -1, y: +1 },\n    { x: -1, y: -1 },\n    { x: -1, y: +1 },\n    { x: -1, y: -1 },\n];\n\nclass Diamond extends Marker {\n    updatePath() {\n        const s = this.size / 2;\n        super.applyPath(s, Diamond.moves);\n    }\n}\nDiamond.className = 'Diamond';\nDiamond.moves = [\n    { x: 0, y: -1, t: 'move' },\n    { x: +1, y: +1 },\n    { x: -1, y: +1 },\n    { x: -1, y: -1 },\n    { x: +1, y: -1 },\n];\n\nclass Heart extends Marker {\n    rad(degree) {\n        return (degree / 180) * Math.PI;\n    }\n    updatePath() {\n        const { x, path, size, rad } = this;\n        const r = size / 4;\n        const y = this.y + r / 2;\n        path.clear();\n        path.arc(x - r, y - r, r, rad(130), rad(330));\n        path.arc(x + r, y - r, r, rad(220), rad(50));\n        path.lineTo(x, y + r);\n        path.closePath();\n    }\n}\nHeart.className = 'Heart';\n\nclass Plus extends Marker {\n    updatePath() {\n        const s = this.size / 3;\n        super.applyPath(s, Plus.moves);\n    }\n}\nPlus.className = 'Plus';\nPlus.moves = [\n    { x: -0.5, y: -0.5, t: 'move' },\n    { x: 0, y: -1 },\n    { x: +1, y: 0 },\n    { x: 0, y: +1 },\n    { x: +1, y: 0 },\n    { x: 0, y: +1 },\n    { x: -1, y: 0 },\n    { x: 0, y: +1 },\n    { x: -1, y: 0 },\n    { x: 0, y: -1 },\n    { x: -1, y: 0 },\n    { x: 0, y: -1 },\n];\n\nclass Triangle extends Marker {\n    updatePath() {\n        const s = this.size * 1.1;\n        super.applyPath(s, Triangle.moves);\n    }\n}\nTriangle.className = 'Triangle';\nTriangle.moves = [\n    { x: 0, y: -0.48, t: 'move' },\n    { x: 0.5, y: 0.87 },\n    { x: -1, y: 0 },\n];\n\n// This function is in its own file because putting it into SeriesMarker makes the Legend\n// suddenly aware of the series (it's an agnostic component), and putting it into Marker\n// introduces circular dependencies.\nfunction getMarker$1(shape = Square) {\n    if (typeof shape === 'string') {\n        switch (shape) {\n            case 'circle':\n                return Circle;\n            case 'cross':\n                return Cross;\n            case 'diamond':\n                return Diamond;\n            case 'heart':\n                return Heart;\n            case 'plus':\n                return Plus;\n            case 'triangle':\n                return Triangle;\n            default:\n                return Square;\n        }\n    }\n    if (typeof shape === 'function') {\n        return shape;\n    }\n    return Square;\n}\n\nclass StateMachine {\n    constructor(initialState, states) {\n        this.debug = false;\n        this.state = initialState;\n        this.states = states;\n        if (this.debug)\n            Logger.debug(`%c${this.constructor.name} | init -> ${initialState}`, 'color: green');\n    }\n    transition(event, data) {\n        var _a, _b, _c, _d, _e;\n        const currentStateConfig = this.states[this.state];\n        const destinationTransition = (_a = currentStateConfig === null || currentStateConfig === void 0 ? void 0 : currentStateConfig.on) === null || _a === void 0 ? void 0 : _a[event];\n        if (!destinationTransition) {\n            if (this.debug) {\n                Logger.debug(`%c${this.constructor.name} | ${this.state} -> ${event} -> ${this.state}`, 'color: grey');\n            }\n            return;\n        }\n        const destinationState = destinationTransition.target;\n        const destinationStateConfig = this.states[destinationState];\n        if (this.debug) {\n            Logger.debug(`%c${this.constructor.name} | ${this.state} -> ${event} -> ${destinationState}`, 'color: green');\n        }\n        destinationTransition.action(data);\n        (_c = (_b = currentStateConfig === null || currentStateConfig === void 0 ? void 0 : currentStateConfig.actions) === null || _b === void 0 ? void 0 : _b.onExit) === null || _c === void 0 ? void 0 : _c.call(_b);\n        (_e = (_d = destinationStateConfig === null || destinationStateConfig === void 0 ? void 0 : destinationStateConfig.actions) === null || _d === void 0 ? void 0 : _d.onEnter) === null || _e === void 0 ? void 0 : _e.call(_d);\n        this.state = destinationState;\n        return this.state;\n    }\n}\n\nvar __decorate$1F = ( false) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nvar __awaiter$d = ( false) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nconst DEFAULT_DIRECTION_KEYS = {\n    [ChartAxisDirection.X]: ['xKey'],\n    [ChartAxisDirection.Y]: ['yKey'],\n};\nconst DEFAULT_DIRECTION_NAMES = {\n    [ChartAxisDirection.X]: ['xName'],\n    [ChartAxisDirection.Y]: ['yName'],\n};\nclass CartesianSeriesNodeBaseClickEvent extends SeriesNodeBaseClickEvent {\n    constructor(xKey, yKey, nativeEvent, datum, series) {\n        super(nativeEvent, datum, series);\n        this.xKey = xKey;\n        this.yKey = yKey;\n    }\n}\nclass CartesianSeriesNodeClickEvent extends CartesianSeriesNodeBaseClickEvent {\n    constructor() {\n        super(...arguments);\n        this.type = 'nodeClick';\n    }\n}\nclass CartesianSeriesNodeDoubleClickEvent extends CartesianSeriesNodeBaseClickEvent {\n    constructor() {\n        super(...arguments);\n        this.type = 'nodeDoubleClick';\n    }\n}\nclass CartesianStateMachine extends StateMachine {\n}\nclass CartesianSeries extends Series {\n    constructor(opts) {\n        var _a, _b;\n        super(Object.assign(Object.assign({}, opts), { useSeriesGroupLayer: true, directionKeys: (_a = opts.directionKeys) !== null && _a !== void 0 ? _a : DEFAULT_DIRECTION_KEYS, directionNames: (_b = opts.directionNames) !== null && _b !== void 0 ? _b : DEFAULT_DIRECTION_NAMES }));\n        this._contextNodeData = [];\n        this.nodeDataDependencies = {};\n        this.highlightSelection = Selection.select(this.highlightNode, () => this.opts.hasMarkers ? this.markerFactory() : this.nodeFactory());\n        this.highlightLabelSelection = Selection.select(this.highlightLabel, Text);\n        this.subGroups = [];\n        this.subGroupId = 0;\n        /**\n         * The assumption is that the values will be reset (to `true`)\n         * in the {@link yKeys} setter.\n         */\n        this.seriesItemEnabled = new Map();\n        const { pathsPerSeries = 1, hasMarkers = false, pathsZIndexSubOrderOffset = [] } = opts;\n        this.opts = { pathsPerSeries, hasMarkers, pathsZIndexSubOrderOffset };\n        this.animationState = new CartesianStateMachine('empty', {\n            empty: {\n                on: {\n                    update: {\n                        target: 'ready',\n                        action: (data) => this.animateEmptyUpdateReady(data),\n                    },\n                },\n            },\n            ready: {\n                on: {\n                    update: {\n                        target: 'ready',\n                        action: (data) => this.animateReadyUpdate(data),\n                    },\n                    highlight: {\n                        target: 'ready',\n                        action: (data) => this.animateReadyHighlight(data),\n                    },\n                    highlightMarkers: {\n                        target: 'ready',\n                        action: (data) => this.animateReadyHighlightMarkers(data),\n                    },\n                    resize: {\n                        target: 'ready',\n                        action: (data) => this.animateReadyResize(data),\n                    },\n                },\n            },\n        });\n    }\n    get contextNodeData() {\n        var _a;\n        return (_a = this._contextNodeData) === null || _a === void 0 ? void 0 : _a.slice();\n    }\n    addChartEventListeners() {\n        var _a, _b;\n        (_a = this.chartEventManager) === null || _a === void 0 ? void 0 : _a.addListener('legend-item-click', (event) => this.onLegendItemClick(event));\n        (_b = this.chartEventManager) === null || _b === void 0 ? void 0 : _b.addListener('legend-item-double-click', (event) => this.onLegendItemDoubleClick(event));\n    }\n    destroy() {\n        super.destroy();\n        this._contextNodeData.splice(0, this._contextNodeData.length);\n        this.subGroups.splice(0, this.subGroups.length);\n    }\n    /**\n     * Note: we are passing `isContinuousX` and `isContinuousY` into this method because it will\n     *       typically be called inside a loop and this check only needs to happen once.\n     * @param x A domain value to be plotted along the x-axis.\n     * @param y A domain value to be plotted along the y-axis.\n     * @param isContinuousX Typically this will be the value of `xAxis.scale instanceof ContinuousScale`.\n     * @param isContinuousY Typically this will be the value of `yAxis.scale instanceof ContinuousScale`.\n     * @returns `[x, y]`, if both x and y are valid domain values for their respective axes/scales, or `undefined`.\n     */\n    checkDomainXY(x, y, isContinuousX, isContinuousY) {\n        const isValidDatum = ((isContinuousX && isContinuous(x)) || (!isContinuousX && isDiscrete(x))) &&\n            ((isContinuousY && isContinuous(y)) || (!isContinuousY && isDiscrete(y)));\n        return isValidDatum ? [x, y] : undefined;\n    }\n    /**\n     * Note: we are passing the xAxis and yAxis because the calling code is supposed to make sure\n     *       that series has both of them defined, and also to avoid one level of indirection,\n     *       e.g. `this.xAxis!.inRange(x)`, both of which are suboptimal in tight loops where this method is used.\n     * @param x A range value to be plotted along the x-axis.\n     * @param y A range value to be plotted along the y-axis.\n     * @param xAxis The series' x-axis.\n     * @param yAxis The series' y-axis.\n     * @returns\n     */\n    checkRangeXY(x, y, xAxis, yAxis) {\n        return !isNaN(x) && !isNaN(y) && xAxis.inRange(x) && yAxis.inRange(y);\n    }\n    update({ seriesRect }) {\n        var _a, _b;\n        return __awaiter$d(this, void 0, void 0, function* () {\n            const { seriesItemEnabled, visible } = this;\n            const { series } = (_b = (_a = this.highlightManager) === null || _a === void 0 ? void 0 : _a.getActiveHighlight()) !== null && _b !== void 0 ? _b : {};\n            const seriesHighlighted = series ? series === this : undefined;\n            const anySeriesItemEnabled = (visible && seriesItemEnabled.size === 0) || [...seriesItemEnabled.values()].some((v) => v === true);\n            const newNodeDataDependencies = {\n                seriesRectWidth: seriesRect === null || seriesRect === void 0 ? void 0 : seriesRect.width,\n                seriesRectHeight: seriesRect === null || seriesRect === void 0 ? void 0 : seriesRect.height,\n            };\n            if (jsonDiff(this.nodeDataDependencies, newNodeDataDependencies) != null) {\n                this.nodeDataDependencies = newNodeDataDependencies;\n                this.markNodeDataDirty();\n                this.animationState.transition('resize', {\n                    datumSelections: this.subGroups.map(({ datumSelection }) => datumSelection),\n                    markerSelections: this.subGroups.map(({ markerSelection }) => markerSelection),\n                    contextData: this._contextNodeData,\n                    paths: this.subGroups.map(({ paths }) => paths),\n                });\n            }\n            yield this.updateSelections(seriesHighlighted, anySeriesItemEnabled);\n            yield this.updateNodes(seriesHighlighted, anySeriesItemEnabled);\n            this.animationState.transition('update', {\n                datumSelections: this.subGroups.map(({ datumSelection }) => datumSelection),\n                markerSelections: this.subGroups.map(({ markerSelection }) => markerSelection),\n                labelSelections: this.subGroups.map(({ labelSelection }) => labelSelection),\n                contextData: this._contextNodeData,\n                paths: this.subGroups.map(({ paths }) => paths),\n                seriesRect,\n            });\n        });\n    }\n    updateSelections(seriesHighlighted, anySeriesItemEnabled) {\n        return __awaiter$d(this, void 0, void 0, function* () {\n            yield this.updateHighlightSelection(seriesHighlighted);\n            if (!anySeriesItemEnabled) {\n                return;\n            }\n            if (!this.nodeDataRefresh && !this.isPathOrSelectionDirty()) {\n                return;\n            }\n            if (this.nodeDataRefresh) {\n                this.nodeDataRefresh = false;\n                this._contextNodeData = yield this.createNodeData();\n                yield this.updateSeriesGroups();\n            }\n            yield Promise.all(this.subGroups.map((g, i) => this.updateSeriesGroupSelections(g, i)));\n        });\n    }\n    updateSeriesGroupSelections(subGroup, seriesIdx) {\n        return __awaiter$d(this, void 0, void 0, function* () {\n            const { datumSelection, labelSelection, markerSelection } = subGroup;\n            const contextData = this._contextNodeData[seriesIdx];\n            const { nodeData, labelData } = contextData;\n            subGroup.datumSelection = yield this.updateDatumSelection({ nodeData, datumSelection, seriesIdx });\n            subGroup.labelSelection = yield this.updateLabelSelection({ labelData, labelSelection, seriesIdx });\n            if (markerSelection) {\n                subGroup.markerSelection = yield this.updateMarkerSelection({\n                    nodeData,\n                    markerSelection,\n                    seriesIdx,\n                });\n            }\n        });\n    }\n    nodeFactory() {\n        return new Group();\n    }\n    markerFactory() {\n        const MarkerShape = getMarker$1();\n        return new MarkerShape();\n    }\n    updateSeriesGroups() {\n        var _a;\n        return __awaiter$d(this, void 0, void 0, function* () {\n            const { _contextNodeData: contextNodeData, contentGroup, subGroups, opts: { pathsPerSeries, hasMarkers, pathsZIndexSubOrderOffset }, } = this;\n            if (contextNodeData.length === subGroups.length) {\n                return;\n            }\n            if (contextNodeData.length < subGroups.length) {\n                subGroups.splice(contextNodeData.length).forEach(({ dataNodeGroup, markerGroup, labelGroup, paths }) => {\n                    contentGroup.removeChild(dataNodeGroup);\n                    if (markerGroup) {\n                        contentGroup.removeChild(markerGroup);\n                    }\n                    if (labelGroup) {\n                        contentGroup.removeChild(labelGroup);\n                    }\n                    for (const path of paths) {\n                        contentGroup.removeChild(path);\n                    }\n                });\n            }\n            const totalGroups = contextNodeData.length;\n            while (totalGroups > subGroups.length) {\n                const layer = false;\n                const subGroupId = this.subGroupId++;\n                const subGroupZOffset = subGroupId;\n                const dataNodeGroup = new Group({\n                    name: `${this.id}-series-sub${subGroupId}-dataNodes`,\n                    layer,\n                    zIndex: Layers.SERIES_LAYER_ZINDEX,\n                    zIndexSubOrder: [() => this._declarationOrder, subGroupZOffset],\n                });\n                const markerGroup = hasMarkers\n                    ? new Group({\n                        name: `${this.id}-series-sub${this.subGroupId++}-markers`,\n                        layer,\n                        zIndex: Layers.SERIES_LAYER_ZINDEX,\n                        zIndexSubOrder: [() => this._declarationOrder, 10000 + subGroupId],\n                    })\n                    : undefined;\n                const labelGroup = new Group({\n                    name: `${this.id}-series-sub${this.subGroupId++}-labels`,\n                    layer,\n                    zIndex: Layers.SERIES_LABEL_ZINDEX,\n                    zIndexSubOrder: [() => this._declarationOrder, subGroupId],\n                });\n                contentGroup.appendChild(dataNodeGroup);\n                contentGroup.appendChild(labelGroup);\n                if (markerGroup) {\n                    contentGroup.appendChild(markerGroup);\n                }\n                const paths = [];\n                for (let index = 0; index < pathsPerSeries; index++) {\n                    paths[index] = new Path();\n                    paths[index].zIndex = Layers.SERIES_LAYER_ZINDEX;\n                    paths[index].zIndexSubOrder = [\n                        () => this._declarationOrder,\n                        ((_a = pathsZIndexSubOrderOffset[index]) !== null && _a !== void 0 ? _a : 0) + subGroupZOffset,\n                    ];\n                    contentGroup.appendChild(paths[index]);\n                }\n                subGroups.push({\n                    paths,\n                    dataNodeGroup,\n                    markerGroup,\n                    labelGroup,\n                    labelSelection: Selection.select(labelGroup, Text),\n                    datumSelection: Selection.select(dataNodeGroup, () => this.nodeFactory()),\n                    markerSelection: markerGroup ? Selection.select(markerGroup, () => this.markerFactory()) : undefined,\n                });\n            }\n        });\n    }\n    updateNodes(seriesHighlighted, anySeriesItemEnabled) {\n        var _a;\n        return __awaiter$d(this, void 0, void 0, function* () {\n            const { highlightSelection, highlightLabelSelection, _contextNodeData: contextNodeData, seriesItemEnabled, opts: { hasMarkers }, } = this;\n            const visible = this.visible && ((_a = this._contextNodeData) === null || _a === void 0 ? void 0 : _a.length) > 0 && anySeriesItemEnabled;\n            this.rootGroup.visible = visible;\n            this.contentGroup.visible = visible;\n            this.highlightGroup.visible = visible && !!seriesHighlighted;\n            const seriesOpacity = this.getOpacity();\n            const subGroupOpacities = this.subGroups.map((_, index) => {\n                const { itemId } = contextNodeData[index];\n                return this.getOpacity({ itemId });\n            });\n            const isSubGroupOpacityDifferent = subGroupOpacities.some((subOp) => subOp !== seriesOpacity);\n            this.contentGroup.opacity = isSubGroupOpacityDifferent ? 1 : seriesOpacity;\n            if (hasMarkers) {\n                yield this.updateMarkerNodes({\n                    markerSelection: highlightSelection,\n                    isHighlight: true,\n                    seriesIdx: -1,\n                });\n                this.animationState.transition('highlightMarkers', highlightSelection);\n            }\n            else {\n                yield this.updateDatumNodes({ datumSelection: highlightSelection, isHighlight: true, seriesIdx: -1 });\n                this.animationState.transition('highlight', highlightSelection);\n            }\n            yield this.updateLabelNodes({ labelSelection: highlightLabelSelection, seriesIdx: -1 });\n            yield Promise.all(this.subGroups.map((subGroup, seriesIdx) => __awaiter$d(this, void 0, void 0, function* () {\n                var _b;\n                const { dataNodeGroup, markerGroup, datumSelection, labelSelection, markerSelection, paths, labelGroup, } = subGroup;\n                const { itemId } = contextNodeData[seriesIdx];\n                const subGroupVisible = visible && ((_b = seriesItemEnabled.get(itemId)) !== null && _b !== void 0 ? _b : true);\n                const subGroupOpacity = isSubGroupOpacityDifferent ? subGroupOpacities[seriesIdx] : 1;\n                dataNodeGroup.opacity = subGroupOpacity;\n                dataNodeGroup.visible = subGroupVisible;\n                labelGroup.visible = subGroupVisible;\n                if (markerGroup) {\n                    markerGroup.opacity = subGroupOpacity;\n                    markerGroup.zIndex =\n                        dataNodeGroup.zIndex >= Layers.SERIES_LAYER_ZINDEX\n                            ? dataNodeGroup.zIndex\n                            : dataNodeGroup.zIndex + 1;\n                    markerGroup.visible = subGroupVisible;\n                }\n                if (labelGroup) {\n                    labelGroup.opacity = subGroupOpacity;\n                }\n                for (const path of paths) {\n                    path.opacity = subGroupOpacity;\n                    path.visible = subGroupVisible;\n                }\n                if (!dataNodeGroup.visible) {\n                    return;\n                }\n                yield this.updateDatumNodes({ datumSelection, isHighlight: false, seriesIdx });\n                yield this.updateLabelNodes({ labelSelection, seriesIdx });\n                if (hasMarkers && markerSelection) {\n                    yield this.updateMarkerNodes({ markerSelection, isHighlight: false, seriesIdx });\n                }\n            })));\n        });\n    }\n    updateHighlightSelection(seriesHighlighted) {\n        var _a;\n        return __awaiter$d(this, void 0, void 0, function* () {\n            const { highlightSelection, highlightLabelSelection, _contextNodeData: contextNodeData } = this;\n            const highlightedDatum = (_a = this.highlightManager) === null || _a === void 0 ? void 0 : _a.getActiveHighlight();\n            const item = seriesHighlighted && (highlightedDatum === null || highlightedDatum === void 0 ? void 0 : highlightedDatum.datum) ? highlightedDatum : undefined;\n            this.highlightSelection = yield this.updateHighlightSelectionItem({ item, highlightSelection });\n            let labelItem;\n            if (this.isLabelEnabled() && item != null) {\n                const { itemId = undefined } = item;\n                for (const { labelData } of contextNodeData) {\n                    labelItem = labelData.find((ld) => ld.datum === item.datum && ld.itemId === itemId);\n                    if (labelItem != null) {\n                        break;\n                    }\n                }\n            }\n            this.highlightLabelSelection = yield this.updateHighlightSelectionLabel({\n                item: labelItem,\n                highlightLabelSelection,\n            });\n        });\n    }\n    pickNodeExactShape(point) {\n        const result = super.pickNodeExactShape(point);\n        if (result) {\n            return result;\n        }\n        const { x, y } = point;\n        const { opts: { hasMarkers }, } = this;\n        for (const { dataNodeGroup, markerGroup } of this.subGroups) {\n            let match = dataNodeGroup.pickNode(x, y);\n            if (!match && hasMarkers) {\n                match = markerGroup === null || markerGroup === void 0 ? void 0 : markerGroup.pickNode(x, y);\n            }\n            if (match) {\n                return { datum: match.datum, distance: 0 };\n            }\n        }\n    }\n    pickNodeClosestDatum(point) {\n        var _a, _b;\n        const { x, y } = point;\n        const { xAxis, yAxis, rootGroup, _contextNodeData: contextNodeData } = this;\n        const hitPoint = rootGroup.transformPoint(x, y);\n        let minDistance = Infinity;\n        let closestDatum;\n        for (const context of contextNodeData) {\n            for (const datum of context.nodeData) {\n                const { point: { x: datumX = NaN, y: datumY = NaN } = {} } = datum;\n                if (isNaN(datumX) || isNaN(datumY)) {\n                    continue;\n                }\n                const isInRange = (xAxis === null || xAxis === void 0 ? void 0 : xAxis.inRange(datumX)) && (yAxis === null || yAxis === void 0 ? void 0 : yAxis.inRange(datumY));\n                if (!isInRange) {\n                    continue;\n                }\n                // No need to use Math.sqrt() since x < y implies Math.sqrt(x) < Math.sqrt(y) for\n                // values > 1\n                const distance = Math.max(Math.pow((hitPoint.x - datumX), 2) + Math.pow((hitPoint.y - datumY), 2), 0);\n                if (distance < minDistance) {\n                    minDistance = distance;\n                    closestDatum = datum;\n                }\n            }\n        }\n        if (closestDatum) {\n            const distance = Math.max(Math.sqrt(minDistance) - ((_b = (_a = closestDatum.point) === null || _a === void 0 ? void 0 : _a.size) !== null && _b !== void 0 ? _b : 0), 0);\n            return { datum: closestDatum, distance };\n        }\n    }\n    pickNodeMainAxisFirst(point, requireCategoryAxis) {\n        var _a, _b;\n        const { x, y } = point;\n        const { xAxis, yAxis, rootGroup, _contextNodeData: contextNodeData } = this;\n        // Prefer to start search with any available category axis.\n        const directions = [xAxis, yAxis]\n            .filter((a) => a instanceof CategoryAxis)\n            .map((a) => a.direction);\n        if (requireCategoryAxis && directions.length === 0) {\n            return;\n        }\n        // Default to X-axis unless we found a suitable category axis.\n        const [primaryDirection = ChartAxisDirection.X] = directions;\n        const hitPoint = rootGroup.transformPoint(x, y);\n        const hitPointCoords = primaryDirection === ChartAxisDirection.X ? [hitPoint.x, hitPoint.y] : [hitPoint.y, hitPoint.x];\n        const minDistance = [Infinity, Infinity];\n        let closestDatum = undefined;\n        for (const context of contextNodeData) {\n            for (const datum of context.nodeData) {\n                const { point: { x: datumX = NaN, y: datumY = NaN } = {} } = datum;\n                if (isNaN(datumX) || isNaN(datumY)) {\n                    continue;\n                }\n                const isInRange = (xAxis === null || xAxis === void 0 ? void 0 : xAxis.inRange(datumX)) && (yAxis === null || yAxis === void 0 ? void 0 : yAxis.inRange(datumY));\n                if (!isInRange) {\n                    continue;\n                }\n                const point = primaryDirection === ChartAxisDirection.X ? [datumX, datumY] : [datumY, datumX];\n                // Compare distances from most significant dimension to least.\n                let newMinDistance = true;\n                for (let i = 0; i < point.length; i++) {\n                    const dist = Math.abs(point[i] - hitPointCoords[i]);\n                    if (dist > minDistance[i]) {\n                        newMinDistance = false;\n                        break;\n                    }\n                    if (dist < minDistance[i]) {\n                        minDistance[i] = dist;\n                        minDistance.fill(Infinity, i + 1, minDistance.length);\n                    }\n                }\n                if (newMinDistance) {\n                    closestDatum = datum;\n                }\n            }\n        }\n        if (closestDatum) {\n            const distance = Math.max(Math.sqrt(Math.pow(minDistance[0], 2) + Math.pow(minDistance[1], 2)) - ((_b = (_a = closestDatum.point) === null || _a === void 0 ? void 0 : _a.size) !== null && _b !== void 0 ? _b : 0), 0);\n            return { datum: closestDatum, distance };\n        }\n    }\n    onLegendItemClick(event) {\n        const { enabled, itemId, series } = event;\n        if (series.id !== this.id)\n            return;\n        this.toggleSeriesItem(itemId, enabled);\n    }\n    onLegendItemDoubleClick(event) {\n        const { enabled, itemId, series, numVisibleItems } = event;\n        const totalVisibleItems = Object.values(numVisibleItems).reduce((p, v) => p + v, 0);\n        const wasClicked = series.id === this.id;\n        const newEnabled = wasClicked || (enabled && totalVisibleItems === 1);\n        this.toggleSeriesItem(itemId, newEnabled);\n    }\n    toggleSeriesItem(itemId, enabled) {\n        if (this.seriesItemEnabled.size > 0) {\n            this.seriesItemEnabled.set(itemId, enabled);\n            this.nodeDataRefresh = true;\n        }\n        else {\n            super.toggleSeriesItem(itemId, enabled);\n        }\n    }\n    isEnabled() {\n        if (this.seriesItemEnabled.size > 0) {\n            for (const [, enabled] of this.seriesItemEnabled) {\n                if (enabled) {\n                    return true;\n                }\n            }\n            return false;\n        }\n        return super.isEnabled();\n    }\n    isPathOrSelectionDirty() {\n        // Override point to allow more sophisticated dirty selection detection.\n        return false;\n    }\n    getLabelData() {\n        return [];\n    }\n    isAnySeriesVisible() {\n        for (const visible of this.seriesItemEnabled.values()) {\n            if (visible) {\n                return true;\n            }\n        }\n        return false;\n    }\n    updateHighlightSelectionItem(opts) {\n        return __awaiter$d(this, void 0, void 0, function* () {\n            const { opts: { hasMarkers }, } = this;\n            const { item, highlightSelection } = opts;\n            const nodeData = item ? [item] : [];\n            if (hasMarkers) {\n                const markerSelection = highlightSelection;\n                return this.updateMarkerSelection({ nodeData, markerSelection, seriesIdx: -1 });\n            }\n            else {\n                return this.updateDatumSelection({ nodeData, datumSelection: highlightSelection, seriesIdx: -1 });\n            }\n        });\n    }\n    updateHighlightSelectionLabel(opts) {\n        return __awaiter$d(this, void 0, void 0, function* () {\n            const { item, highlightLabelSelection } = opts;\n            const labelData = item ? [item] : [];\n            return this.updateLabelSelection({ labelData, labelSelection: highlightLabelSelection, seriesIdx: -1 });\n        });\n    }\n    updateDatumSelection(opts) {\n        return __awaiter$d(this, void 0, void 0, function* () {\n            // Override point for sub-classes.\n            return opts.datumSelection;\n        });\n    }\n    updateDatumNodes(_opts) {\n        return __awaiter$d(this, void 0, void 0, function* () {\n            // Override point for sub-classes.\n        });\n    }\n    updateMarkerSelection(opts) {\n        return __awaiter$d(this, void 0, void 0, function* () {\n            // Override point for sub-classes.\n            return opts.markerSelection;\n        });\n    }\n    updateMarkerNodes(_opts) {\n        return __awaiter$d(this, void 0, void 0, function* () {\n            // Override point for sub-classes.\n        });\n    }\n    animateEmptyUpdateReady(_data) {\n        // Override point for sub-classes.\n    }\n    animateReadyUpdate(_data) {\n        // Override point for sub-classes.\n    }\n    animateReadyHighlight(_data) {\n        // Override point for sub-classes.\n    }\n    animateReadyHighlightMarkers(_data) {\n        // Override point for sub-classes.\n    }\n    animateReadyResize(_data) {\n        // Override point for sub-classes.\n    }\n}\nclass CartesianSeriesMarker extends SeriesMarker {\n    constructor() {\n        super(...arguments);\n        this.formatter = undefined;\n    }\n}\n__decorate$1F([\n    Validate(OPT_FUNCTION),\n    SceneChangeDetection({ redraw: RedrawType.MAJOR })\n], CartesianSeriesMarker.prototype, \"formatter\", void 0);\n\nfunction sleep(sleepTimeoutMs) {\n    return new Promise((resolve) => {\n        setTimeout(() => resolve(undefined), sleepTimeoutMs);\n    });\n}\n\nvar __decorate$1E = ( false) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nclass Overlay {\n    constructor(className, parent) {\n        this.renderer = undefined;\n        this.text = undefined;\n        this.className = className;\n        this.parentElement = parent;\n    }\n    show(rect) {\n        var _a, _b;\n        let element = this.element;\n        if (!this.element) {\n            element = document.createElement('div');\n            element.className = this.className;\n            this.element = element;\n        }\n        element.style.position = 'absolute';\n        element.style.left = `${rect.x}px`;\n        element.style.top = `${rect.y}px`;\n        element.style.width = `${rect.width}px`;\n        element.style.height = `${rect.height}px`;\n        if (this.renderer) {\n            this.element.innerHTML = this.renderer();\n        }\n        else {\n            const content = document.createElement('div');\n            content.style.alignItems = 'center';\n            content.style.boxSizing = 'border-box';\n            content.style.display = 'flex';\n            content.style.justifyContent = 'center';\n            content.style.margin = '8px';\n            content.style.height = '100%';\n            content.style.font = '12px Verdana, sans-serif';\n            content.innerText = (_a = this.text) !== null && _a !== void 0 ? _a : 'No data to display';\n            element.append(content);\n        }\n        (_b = this.parentElement) === null || _b === void 0 ? void 0 : _b.append(element);\n    }\n    hide() {\n        var _a;\n        (_a = this.element) === null || _a === void 0 ? void 0 : _a.remove();\n        this.element = undefined;\n    }\n}\n__decorate$1E([\n    Validate(OPT_FUNCTION)\n], Overlay.prototype, \"renderer\", void 0);\n__decorate$1E([\n    Validate(OPT_STRING)\n], Overlay.prototype, \"text\", void 0);\n\nclass ChartOverlays {\n    constructor(parent) {\n        this.noData = new Overlay('ag-chart-no-data-overlay', parent);\n    }\n}\n\nclass Listeners {\n    constructor() {\n        this.registeredListeners = {};\n    }\n    addListener(type, cb) {\n        var _a;\n        const symbol = Symbol(type);\n        if (!this.registeredListeners[type]) {\n            this.registeredListeners[type] = [];\n        }\n        (_a = this.registeredListeners[type]) === null || _a === void 0 ? void 0 : _a.push({ symbol, handler: cb });\n        return symbol;\n    }\n    dispatch(type, ...params) {\n        var _a;\n        const listeners = (_a = this.registeredListeners[type]) !== null && _a !== void 0 ? _a : [];\n        const results = [];\n        for (const listener of listeners) {\n            try {\n                results.push(listener.handler(...params));\n            }\n            catch (e) {\n                Logger.errorOnce(e);\n                results.push(undefined);\n            }\n        }\n        return results;\n    }\n    cancellableDispatch(type, cancelled, ...params) {\n        var _a;\n        const listeners = (_a = this.registeredListeners[type]) !== null && _a !== void 0 ? _a : [];\n        const results = [];\n        for (const listener of listeners) {\n            if (cancelled())\n                break;\n            results.push(listener.handler(...params));\n        }\n        return results;\n    }\n    reduceDispatch(type, reduceFn, ...params) {\n        var _a;\n        const listeners = (_a = this.registeredListeners[type]) !== null && _a !== void 0 ? _a : [];\n        let listenerResult = undefined;\n        for (const listener of listeners) {\n            listenerResult = listener.handler(...params);\n            params = reduceFn(listenerResult, ...params);\n        }\n        return listenerResult;\n    }\n    removeListener(listenerSymbol) {\n        for (const type in this.registeredListeners) {\n            const listeners = this.registeredListeners[type];\n            const match = listeners === null || listeners === void 0 ? void 0 : listeners.findIndex((entry) => entry.symbol === listenerSymbol);\n            if (match != null && match >= 0) {\n                listeners === null || listeners === void 0 ? void 0 : listeners.splice(match, 1);\n            }\n            if (match != null && (listeners === null || listeners === void 0 ? void 0 : listeners.length) === 0) {\n                delete this.registeredListeners[type];\n            }\n        }\n    }\n}\n\nclass BaseManager {\n    constructor() {\n        this.listeners = new Listeners();\n    }\n    addListener(type, cb) {\n        return this.listeners.addListener(type, cb);\n    }\n    removeListener(listenerSymbol) {\n        this.listeners.removeListener(listenerSymbol);\n    }\n}\n\nfunction number (a, b) {\n    a = +a;\n    b = +b;\n    return (t) => a * (1 - t) + b * t;\n}\n\nfunction interpolateColor (a, b) {\n    if (typeof a === 'string') {\n        try {\n            a = Color.fromString(a);\n        }\n        catch (e) {\n            a = Color.fromArray([0, 0, 0]);\n        }\n    }\n    if (typeof b === 'string') {\n        try {\n            b = Color.fromString(b);\n        }\n        catch (e) {\n            b = Color.fromArray([0, 0, 0]);\n        }\n    }\n    const red = number(a.r, b.r);\n    const green = number(a.g, b.g);\n    const blue = number(a.b, b.b);\n    const alpha = number(a.a, b.a);\n    return function (t) {\n        return Color.fromArray([red(t), green(t), blue(t), alpha(t)]).toRgbaString();\n    };\n}\n\nfunction interpolate$1 (a, b) {\n    const t = typeof b;\n    let c;\n    if (t === 'number') {\n        return number(a, b);\n    }\n    if (t === 'string') {\n        try {\n            c = Color.fromString(b);\n            b = c;\n            return interpolateColor(a, b);\n        }\n        catch (e) {\n            // Error-case handled below.\n        }\n    }\n    throw new Error('Unable to interpolate values');\n}\n\nfunction createEase(fn) {\n    return ({ from, to }) => {\n        const interp = interpolate$1(from, to);\n        return (time) => interp(fn(time));\n    };\n}\nfunction linear({ from, to }) {\n    return interpolate$1(from, to);\n}\nconst easeOut = createEase((x) => Math.sin((x * Math.PI) / 2));\n\nvar RepeatType;\n(function (RepeatType) {\n    RepeatType[\"Loop\"] = \"loop\";\n    RepeatType[\"Reverse\"] = \"reverse\";\n})(RepeatType || (RepeatType = {}));\nfunction animate({ driver, duration, from, to, autoplay = true, delay = 0, ease = linear, repeat: repeatMax = Infinity, repeatType = RepeatType.Loop, onComplete, onPlay, onRepeat, onStop, onUpdate, }) {\n    let state;\n    let delayElapsed = 0;\n    let elapsed = 0;\n    let iteration = 0;\n    let isForward = true;\n    let isComplete = false;\n    const easing = ease({ from, to });\n    const controls = { isPlaying: false, play, pause, stop, reset };\n    const driverControls = driver(update);\n    function play() {\n        controls.isPlaying = true;\n        driverControls.start();\n        onPlay === null || onPlay === void 0 ? void 0 : onPlay();\n        return controls;\n    }\n    function pause() {\n        controls.isPlaying = false;\n        return controls;\n    }\n    function stop() {\n        controls.isPlaying = false;\n        driverControls.stop();\n        onStop === null || onStop === void 0 ? void 0 : onStop();\n        return controls;\n    }\n    function reset() {\n        isComplete = false;\n        elapsed = 0;\n        iteration = 0;\n        driverControls.reset();\n        return controls;\n    }\n    function repeat() {\n        iteration++;\n        if (repeatType === RepeatType.Reverse) {\n            isForward = iteration % 2 === 0;\n            elapsed = isForward ? elapsed % duration : duration - (elapsed % duration);\n        }\n        else {\n            elapsed = elapsed % duration;\n        }\n        isComplete = false;\n        onRepeat === null || onRepeat === void 0 ? void 0 : onRepeat();\n    }\n    function complete() {\n        stop();\n        onComplete === null || onComplete === void 0 ? void 0 : onComplete();\n    }\n    function update(delta) {\n        if (!isForward)\n            delta = -delta;\n        if (delayElapsed >= delay) {\n            elapsed += delta;\n        }\n        else {\n            delayElapsed += delta;\n            return;\n        }\n        if (!isComplete) {\n            state = easing(Math.min(1, Math.max(0, elapsed / duration)));\n            isComplete = isForward ? elapsed >= duration : elapsed <= 0;\n        }\n        onUpdate === null || onUpdate === void 0 ? void 0 : onUpdate(state);\n        if (isComplete) {\n            if (iteration < repeatMax) {\n                repeat();\n            }\n            else {\n                complete();\n            }\n        }\n    }\n    if (autoplay)\n        play();\n    return controls;\n}\nfunction tween(opts) {\n    let handleUpdate;\n    const animateOpts = Object.assign(Object.assign({}, opts), { repeat: 0, autoplay: false, onUpdate: (value) => {\n            handleUpdate === null || handleUpdate === void 0 ? void 0 : handleUpdate(value);\n        } });\n    const animationControls = animate(animateOpts);\n    const controls = {\n        start: (onUpdate) => {\n            animationControls.stop();\n            animationControls.reset();\n            animationControls.play();\n            handleUpdate = onUpdate;\n            return controls;\n        },\n        stop: () => {\n            animationControls.stop();\n            return controls;\n        },\n    };\n    return controls;\n}\n\nconst DEBOUNCE_DELAY = 300;\nclass AnimationManager extends BaseManager {\n    constructor(interactionManager) {\n        super();\n        this.controllers = {};\n        this.debouncers = {};\n        this.updaters = [];\n        this.isPlaying = false;\n        this.readyToPlay = false;\n        this.skipAnimations = false;\n        this.interactionManager = interactionManager;\n        window.addEventListener('DOMContentLoaded', () => {\n            this.readyToPlay = true;\n        });\n        // Fallback if `DOMContentLoaded` event is not fired, e.g. in an iframe\n        setTimeout(() => {\n            this.readyToPlay = true;\n        }, 10);\n    }\n    play() {\n        if (this.isPlaying)\n            return;\n        this.isPlaying = true;\n        for (const id in this.controllers) {\n            this.controllers[id].play();\n        }\n        this.startAnimationCycle();\n    }\n    pause() {\n        if (!this.isPlaying)\n            return;\n        this.isPlaying = false;\n        this.cancelAnimationFrame();\n        for (const id in this.controllers) {\n            this.controllers[id].pause();\n        }\n    }\n    stop() {\n        this.isPlaying = false;\n        this.cancelAnimationFrame();\n        for (const id in this.controllers) {\n            this.controllers[id].stop();\n        }\n    }\n    animate(id, opts) {\n        var _a, _b;\n        const optsExtra = Object.assign(Object.assign({}, opts), { autoplay: this.isPlaying ? opts.autoplay : false, driver: this.createDriver(id, opts.disableInteractions) });\n        const controller = animate(optsExtra);\n        if (this.controllers[id]) {\n            this.controllers[id].stop();\n            delete this.controllers[id];\n        }\n        this.controllers[id] = controller;\n        if (this.skipAnimations) {\n            // Initialise the animation with the final values immediately and then stop the animation\n            (_a = opts.onUpdate) === null || _a === void 0 ? void 0 : _a.call(opts, opts.to);\n            controller.stop();\n        }\n        else {\n            // Initialise the animation immediately without requesting a frame to prevent flashes\n            (_b = opts.onUpdate) === null || _b === void 0 ? void 0 : _b.call(opts, opts.from);\n        }\n        return controller;\n    }\n    animateMany(id, props, opts) {\n        const state = props.map((prop) => prop.from);\n        let updateBatch = 0;\n        let completeBatch = 0;\n        const onUpdate = (index) => (v) => {\n            var _a;\n            state[index] = v;\n            if (++updateBatch >= props.length) {\n                (_a = opts.onUpdate) === null || _a === void 0 ? void 0 : _a.call(opts, state);\n                updateBatch = 0;\n            }\n        };\n        const onComplete = () => {\n            var _a;\n            if (++completeBatch >= props.length) {\n                (_a = opts.onComplete) === null || _a === void 0 ? void 0 : _a.call(opts);\n            }\n        };\n        const drivers = props.map((prop, index) => {\n            const inner_id = `${id}-${index}`;\n            return this.animate(inner_id, Object.assign(Object.assign(Object.assign({}, opts), prop), { onUpdate: onUpdate(index), onComplete: onComplete }));\n        });\n        const controls = {\n            get isPlaying() {\n                return drivers.some((driver) => driver.isPlaying);\n            },\n            play() {\n                drivers.forEach((driver) => driver.play());\n                return controls;\n            },\n            pause() {\n                drivers.forEach((driver) => driver.pause());\n                return controls;\n            },\n            stop() {\n                drivers.forEach((driver) => driver.stop());\n                return controls;\n            },\n            reset() {\n                drivers.forEach((driver) => driver.reset());\n                return controls;\n            },\n        };\n        return controls;\n    }\n    debouncedAnimate(id, opts) {\n        var _a;\n        if (this.debouncers[id] && Date.now() - this.debouncers[id] < ((_a = opts.duration) !== null && _a !== void 0 ? _a : DEBOUNCE_DELAY)) {\n            return this.controllers[id];\n        }\n        this.debouncers[id] = Date.now();\n        return this.animate(id, opts);\n    }\n    tween(opts) {\n        const id = `tween-${btoa(JSON.stringify(opts))}`;\n        const optsExtra = Object.assign(Object.assign({}, opts), { driver: this.createDriver(id) });\n        return tween(optsExtra);\n    }\n    createDriver(id, disableInteractions) {\n        return (update) => {\n            return {\n                start: () => {\n                    this.updaters.push([id, update]);\n                    if (this.requestId == null) {\n                        this.startAnimationCycle();\n                    }\n                    if (disableInteractions) {\n                        this.interactionManager.pause(`animation_${id}`);\n                    }\n                },\n                stop: () => {\n                    this.updaters = this.updaters.filter(([uid]) => uid !== id);\n                    if (this.updaters.length <= 0) {\n                        this.cancelAnimationFrame();\n                    }\n                    if (disableInteractions) {\n                        this.interactionManager.resume(`animation_${id}`);\n                    }\n                },\n                reset: () => { },\n            };\n        };\n    }\n    startAnimationCycle() {\n        const frame = (time) => {\n            this.requestId = requestAnimationFrame(frame);\n            if (!this.readyToPlay) {\n                return;\n            }\n            if (this.lastTime === undefined)\n                this.lastTime = time;\n            const deltaMs = time - this.lastTime;\n            this.lastTime = time;\n            this.updaters.forEach(([_, update]) => {\n                update(deltaMs);\n            });\n            this.listeners.dispatch('animation-frame', { type: 'animation-frame', deltaMs });\n        };\n        this.requestId = requestAnimationFrame(frame);\n    }\n    cancelAnimationFrame() {\n        if (!this.requestId)\n            return;\n        cancelAnimationFrame(this.requestId);\n        this.requestId = undefined;\n    }\n}\n\n/**\n * Manages the cursor styling for an element. Tracks the requested styling from distinct\n * dependents and handles conflicting styling requests.\n */\nclass CursorManager {\n    constructor(element) {\n        this.states = {};\n        this.element = element;\n    }\n    updateCursor(callerId, style) {\n        delete this.states[callerId];\n        if (style != null) {\n            this.states[callerId] = { style };\n        }\n        this.applyStates();\n    }\n    applyStates() {\n        let styleToApply = 'default';\n        // Last added entry wins.\n        Object.entries(this.states)\n            .reverse()\n            .slice(0, 1)\n            .forEach(([_, { style }]) => (styleToApply = style));\n        this.element.style.cursor = styleToApply;\n    }\n}\n\nclass ChartEventManager extends BaseManager {\n    legendItemClick(series, itemId, enabled) {\n        const event = {\n            type: 'legend-item-click',\n            series,\n            itemId,\n            enabled,\n        };\n        this.listeners.dispatch('legend-item-click', event);\n    }\n    legendItemDoubleClick(series, itemId, enabled, numVisibleItems) {\n        const event = {\n            type: 'legend-item-double-click',\n            series,\n            itemId,\n            enabled,\n            numVisibleItems,\n        };\n        this.listeners.dispatch('legend-item-double-click', event);\n    }\n}\n\nfunction isEqual$1(a, b) {\n    if (a === b)\n        return true;\n    if ((a === null || a === void 0 ? void 0 : a.series) !== (b === null || b === void 0 ? void 0 : b.series))\n        return false;\n    if ((a === null || a === void 0 ? void 0 : a.itemId) !== (b === null || b === void 0 ? void 0 : b.itemId))\n        return false;\n    if ((a === null || a === void 0 ? void 0 : a.datum) !== (b === null || b === void 0 ? void 0 : b.datum))\n        return false;\n    return true;\n}\n/**\n * Manages the actively highlighted series/datum for a chart. Tracks the requested highlights from\n * distinct dependents and handles conflicting highlight requests.\n */\nclass HighlightManager extends BaseManager {\n    constructor() {\n        super();\n        this.states = {};\n        this.activeHighlight = undefined;\n    }\n    updateHighlight(callerId, highlightedDatum) {\n        delete this.states[callerId];\n        if (highlightedDatum != null) {\n            this.states[callerId] = { highlightedDatum };\n        }\n        this.applyStates();\n    }\n    getActiveHighlight() {\n        return this.activeHighlight;\n    }\n    applyStates() {\n        const previousHighlight = this.activeHighlight;\n        let highlightToApply = undefined;\n        // Last added entry wins.\n        Object.entries(this.states)\n            .reverse()\n            .slice(0, 1)\n            .forEach(([_, { highlightedDatum }]) => (highlightToApply = highlightedDatum));\n        this.activeHighlight = highlightToApply;\n        const changed = !isEqual$1(previousHighlight, this.activeHighlight);\n        if (changed) {\n            const event = {\n                type: 'highlight-change',\n                previousHighlight,\n                currentHighlight: this.activeHighlight,\n            };\n            this.listeners.dispatch('highlight-change', event);\n        }\n    }\n}\n\nvar __awaiter$c = ( false) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nconst WINDOW_EVENT_HANDLERS = ['pagehide', 'mousemove', 'mouseup', 'wheel'];\nconst EVENT_HANDLERS = [\n    'click',\n    'dblclick',\n    'contextmenu',\n    'mousedown',\n    'mouseout',\n    'mouseenter',\n    'touchstart',\n    'touchmove',\n    'touchend',\n    'touchcancel',\n];\nconst CSS = `\n.ag-chart-wrapper {\n    touch-action: none;\n}\n`;\n/**\n * Manages user interactions with a specific HTMLElement (or interactions that bubble from it's\n * children)\n */\nclass InteractionManager extends BaseManager {\n    constructor(element, doc = document) {\n        super();\n        this.eventHandler = (event) => this.processEvent(event);\n        this.mouseDown = false;\n        this.touchDown = false;\n        this.enabled = true;\n        this.pausers = [];\n        this.rootElement = doc.body;\n        this.element = element;\n        for (const type of EVENT_HANDLERS) {\n            if (type.startsWith('touch')) {\n                element.addEventListener(type, this.eventHandler, { passive: true });\n            }\n            else {\n                element.addEventListener(type, this.eventHandler);\n            }\n        }\n        for (const type of WINDOW_EVENT_HANDLERS) {\n            if (type === 'wheel') {\n                window.addEventListener(type, this.eventHandler, { passive: false });\n            }\n            else {\n                window.addEventListener(type, this.eventHandler);\n            }\n        }\n        if (InteractionManager.interactionDocuments.indexOf(doc) < 0) {\n            const styleElement = document.createElement('style');\n            styleElement.innerHTML = CSS;\n            document.head.insertBefore(styleElement, document.head.querySelector('style'));\n            InteractionManager.interactionDocuments.push(doc);\n        }\n    }\n    destroy() {\n        for (const type of WINDOW_EVENT_HANDLERS) {\n            window.removeEventListener(type, this.eventHandler);\n        }\n        for (const type of EVENT_HANDLERS) {\n            this.element.removeEventListener(type, this.eventHandler);\n        }\n    }\n    resume(callerId) {\n        this.pausers = this.pausers.filter((id) => id !== callerId);\n        this.enabled = this.pausers.length <= 0;\n        return this.enabled;\n    }\n    pause(callerId) {\n        this.enabled = false;\n        this.pausers.push(callerId);\n    }\n    processEvent(event) {\n        const types = this.decideInteractionEventTypes(event);\n        if (types.length > 0 && this.enabled) {\n            // Async dispatch to avoid blocking the event-processing thread.\n            this.dispatchEvent(event, types).catch((e) => Logger.errorOnce(e));\n        }\n    }\n    dispatchEvent(event, types) {\n        return __awaiter$c(this, void 0, void 0, function* () {\n            const coords = this.calculateCoordinates(event);\n            if (coords == null) {\n                return;\n            }\n            for (const type of types) {\n                const interactionEvent = this.buildEvent(Object.assign(Object.assign({ event }, coords), { type }));\n                this.listeners.cancellableDispatch(type, () => interactionEvent.consumed, interactionEvent);\n            }\n        });\n    }\n    decideInteractionEventTypes(event) {\n        switch (event.type) {\n            case 'click':\n                return ['click'];\n            case 'dblclick':\n                return ['dblclick'];\n            case 'contextmenu':\n                return ['contextmenu'];\n            case 'mousedown':\n                this.mouseDown = true;\n                this.dragStartElement = event.target;\n                return ['drag-start'];\n            case 'touchstart':\n                this.touchDown = true;\n                this.dragStartElement = event.target;\n                return ['drag-start'];\n            case 'touchmove':\n            case 'mousemove':\n                if (!this.mouseDown && !this.touchDown && !this.isEventOverElement(event)) {\n                    // We only care about these events if the target is the canvas, unless\n                    // we're in the middle of a drag/slide.\n                    return [];\n                }\n                return this.mouseDown || this.touchDown ? ['drag'] : ['hover'];\n            case 'mouseup':\n                if (!this.mouseDown && !this.isEventOverElement(event)) {\n                    // We only care about these events if the target is the canvas, unless\n                    // we're in the middle of a drag.\n                    return [];\n                }\n                this.mouseDown = false;\n                this.dragStartElement = undefined;\n                return ['drag-end'];\n            case 'touchend':\n                if (!this.touchDown && !this.isEventOverElement(event)) {\n                    // We only care about these events if the target is the canvas, unless\n                    // we're in the middle of a slide.\n                    return [];\n                }\n                this.touchDown = false;\n                this.dragStartElement = undefined;\n                return ['drag-end'];\n            case 'mouseout':\n            case 'touchcancel':\n                return ['leave'];\n            case 'mouseenter':\n                const mouseButtonDown = event instanceof MouseEvent && (event.buttons & 1) === 1;\n                if (this.mouseDown !== mouseButtonDown) {\n                    this.mouseDown = mouseButtonDown;\n                    return [mouseButtonDown ? 'drag-start' : 'drag-end'];\n                }\n                return [];\n            case 'pagehide':\n                return ['page-left'];\n            case 'wheel':\n                return ['wheel'];\n        }\n        return [];\n    }\n    isEventOverElement(event) {\n        var _a;\n        return event.target === this.element || ((_a = event.target) === null || _a === void 0 ? void 0 : _a.parentElement) === this.element;\n    }\n    calculateCoordinates(event) {\n        var _a;\n        if (event instanceof MouseEvent) {\n            const { clientX, clientY, pageX, pageY, offsetX, offsetY } = event;\n            return this.fixOffsets(event, { clientX, clientY, pageX, pageY, offsetX, offsetY });\n        }\n        else if (typeof TouchEvent !== 'undefined' && event instanceof TouchEvent) {\n            const lastTouch = (_a = event.touches[0]) !== null && _a !== void 0 ? _a : event.changedTouches[0];\n            const { clientX, clientY, pageX, pageY } = lastTouch;\n            return Object.assign(Object.assign({}, InteractionManager.NULL_COORDS), { clientX, clientY, pageX, pageY });\n        }\n        else if (event instanceof PageTransitionEvent) {\n            if (event.persisted) {\n                // Don't fire the page-left event since the page maybe revisited.\n                return;\n            }\n            return InteractionManager.NULL_COORDS;\n        }\n        // Unsupported event - abort.\n    }\n    fixOffsets(event, coords) {\n        const offsets = (el) => {\n            let x = 0;\n            let y = 0;\n            while (el) {\n                x += el.offsetLeft;\n                y += el.offsetTop;\n                el = el.offsetParent;\n            }\n            return { x, y };\n        };\n        if (this.dragStartElement != null && event.target !== this.dragStartElement) {\n            // Offsets need to be relative to the drag-start element to avoid jumps when\n            // the pointer moves between element boundaries.\n            const offsetDragStart = offsets(this.dragStartElement);\n            const offsetEvent = offsets(event.target);\n            coords.offsetX -= offsetDragStart.x - offsetEvent.x;\n            coords.offsetY -= offsetDragStart.y - offsetEvent.y;\n        }\n        return coords;\n    }\n    buildEvent(opts) {\n        const { type, event, clientX, clientY } = opts;\n        let { offsetX, offsetY, pageX, pageY } = opts;\n        if (!isNumber$4(offsetX) || !isNumber$4(offsetY)) {\n            const rect = this.element.getBoundingClientRect();\n            offsetX = clientX - rect.left;\n            offsetY = clientY - rect.top;\n        }\n        if (!isNumber$4(pageX) || !isNumber$4(pageY)) {\n            const pageRect = this.rootElement.getBoundingClientRect();\n            pageX = clientX - pageRect.left;\n            pageY = clientY - pageRect.top;\n        }\n        const builtEvent = {\n            type,\n            offsetX: offsetX,\n            offsetY: offsetY,\n            pageX: pageX,\n            pageY: pageY,\n            sourceEvent: event,\n            consumed: false,\n            consume: () => (builtEvent.consumed = true),\n        };\n        return builtEvent;\n    }\n}\nInteractionManager.interactionDocuments = [];\nInteractionManager.NULL_COORDS = {\n    clientX: -Infinity,\n    clientY: -Infinity,\n    pageX: -Infinity,\n    pageY: -Infinity,\n    offsetX: -Infinity,\n    offsetY: -Infinity,\n};\n\n/**\n * Manages the tooltip HTML an element. Tracks the requested HTML from distinct dependents and\n * handles conflicting tooltip requests.\n */\nclass TooltipManager {\n    constructor(tooltip, interactionManager) {\n        this.states = {};\n        this.exclusiveAreas = {};\n        this.destroyFns = [];\n        this.tooltip = tooltip;\n        const hoverRef = interactionManager.addListener('hover', (e) => this.checkExclusiveRects(e));\n        this.destroyFns.push(() => interactionManager.removeListener(hoverRef));\n    }\n    updateTooltip(callerId, meta, content) {\n        var _a;\n        if (content == null) {\n            content = (_a = this.states[callerId]) === null || _a === void 0 ? void 0 : _a.content;\n        }\n        if (!content) {\n            delete this.states[callerId];\n        }\n        else {\n            this.states[callerId] = { content, meta };\n        }\n        this.applyStates();\n    }\n    updateExclusiveRect(callerId, area) {\n        if (area) {\n            this.exclusiveAreas[callerId] = area;\n        }\n        else {\n            delete this.exclusiveAreas[callerId];\n        }\n    }\n    removeTooltip(callerId) {\n        delete this.states[callerId];\n        this.applyStates();\n    }\n    getTooltipMeta(callerId) {\n        var _a;\n        return (_a = this.states[callerId]) === null || _a === void 0 ? void 0 : _a.meta;\n    }\n    destroy() {\n        for (const destroyFn of this.destroyFns) {\n            destroyFn();\n        }\n    }\n    checkExclusiveRects(e) {\n        let newAppliedExclusiveArea;\n        for (const [entryId, area] of Object.entries(this.exclusiveAreas)) {\n            if (!area.containsPoint(e.offsetX, e.offsetY)) {\n                continue;\n            }\n            newAppliedExclusiveArea = entryId;\n            break;\n        }\n        if (newAppliedExclusiveArea === this.appliedExclusiveArea) {\n            return;\n        }\n        this.appliedExclusiveArea = newAppliedExclusiveArea;\n        this.applyStates();\n    }\n    applyStates() {\n        var _a;\n        const ids = this.appliedExclusiveArea ? [this.appliedExclusiveArea] : Object.keys(this.states);\n        let contentToApply = undefined;\n        let metaToApply = undefined;\n        // Last added entry wins.\n        ids.reverse();\n        ids.slice(0, 1).forEach((id) => {\n            var _a;\n            const { content, meta } = (_a = this.states[id]) !== null && _a !== void 0 ? _a : {};\n            contentToApply = content;\n            metaToApply = meta;\n        });\n        if (metaToApply === undefined || contentToApply === undefined) {\n            this.appliedState = undefined;\n            this.tooltip.toggle(false);\n            return;\n        }\n        if (((_a = this.appliedState) === null || _a === void 0 ? void 0 : _a.content) === contentToApply) {\n            const renderInstantly = this.tooltip.isVisible();\n            this.tooltip.show(metaToApply, undefined, renderInstantly);\n        }\n        else {\n            this.tooltip.show(metaToApply, contentToApply);\n        }\n        this.appliedState = { content: contentToApply, meta: metaToApply };\n    }\n}\n\nfunction isEqual(a, b) {\n    var _a, _b, _c, _d, _e, _f, _g, _h;\n    if (a === b)\n        return true;\n    if (((_a = a === null || a === void 0 ? void 0 : a.x) === null || _a === void 0 ? void 0 : _a.min) !== ((_b = b === null || b === void 0 ? void 0 : b.x) === null || _b === void 0 ? void 0 : _b.min))\n        return false;\n    if (((_c = a === null || a === void 0 ? void 0 : a.x) === null || _c === void 0 ? void 0 : _c.max) !== ((_d = b === null || b === void 0 ? void 0 : b.x) === null || _d === void 0 ? void 0 : _d.max))\n        return false;\n    if (((_e = a === null || a === void 0 ? void 0 : a.y) === null || _e === void 0 ? void 0 : _e.max) !== ((_f = b === null || b === void 0 ? void 0 : b.y) === null || _f === void 0 ? void 0 : _f.max))\n        return false;\n    if (((_g = a === null || a === void 0 ? void 0 : a.y) === null || _g === void 0 ? void 0 : _g.min) !== ((_h = b === null || b === void 0 ? void 0 : b.y) === null || _h === void 0 ? void 0 : _h.min))\n        return false;\n    return true;\n}\n/**\n * Manages the current zoom state for a chart. Tracks the requested zoom from distinct dependents\n * and handles conflicting zoom requests.\n */\nclass ZoomManager extends BaseManager {\n    constructor() {\n        super();\n        this.states = {};\n        this.currentZoom = undefined;\n    }\n    updateZoom(callerId, newZoom) {\n        delete this.states[callerId];\n        if (newZoom != null) {\n            this.states[callerId] = Object.assign({}, newZoom);\n        }\n        this.applyStates();\n    }\n    getZoom() {\n        return this.currentZoom;\n    }\n    applyStates() {\n        const currentZoom = this.currentZoom;\n        const zoomToApply = {};\n        // Last added entry wins.\n        for (const [_, { x, y }] of Object.entries(this.states)) {\n            zoomToApply.x = x !== null && x !== void 0 ? x : zoomToApply.x;\n            zoomToApply.y = y !== null && y !== void 0 ? y : zoomToApply.y;\n        }\n        this.currentZoom = zoomToApply.x != null || zoomToApply.y != null ? zoomToApply : undefined;\n        const changed = !isEqual(currentZoom, this.currentZoom);\n        if (!changed) {\n            return;\n        }\n        const event = Object.assign({ type: 'zoom-change' }, (currentZoom !== null && currentZoom !== void 0 ? currentZoom : {}));\n        this.listeners.dispatch('zoom-change', event);\n    }\n}\n\nfunction isLayoutStage(t) {\n    return t !== 'layout-complete';\n}\nfunction isLayoutComplete(t) {\n    return t === 'layout-complete';\n}\nclass LayoutService {\n    constructor() {\n        this.layoutProcessors = new Listeners();\n        this.listeners = new Listeners();\n    }\n    addListener(type, cb) {\n        if (isLayoutStage(type)) {\n            return this.layoutProcessors.addListener(type, cb);\n        }\n        else if (isLayoutComplete(type)) {\n            return this.listeners.addListener(type, cb);\n        }\n        throw new Error('AG Charts - unsupported listener type: ' + type);\n    }\n    removeListener(listenerSymbol) {\n        this.listeners.removeListener(listenerSymbol);\n        this.layoutProcessors.removeListener(listenerSymbol);\n    }\n    dispatchPerformLayout(stage, ctx) {\n        const result = this.layoutProcessors.reduceDispatch(stage, ({ shrinkRect }, ctx) => [Object.assign(Object.assign({}, ctx), { shrinkRect })], ctx);\n        return result !== null && result !== void 0 ? result : ctx;\n    }\n    dispatchLayoutComplete(event) {\n        this.listeners.dispatch('layout-complete', event);\n    }\n}\n\nclass DataService {\n    constructor(getSeries) {\n        this.getSeries = getSeries;\n    }\n}\n\n/** Types of chart-update, in pipeline execution order. */\nvar ChartUpdateType;\n(function (ChartUpdateType) {\n    ChartUpdateType[ChartUpdateType[\"FULL\"] = 0] = \"FULL\";\n    ChartUpdateType[ChartUpdateType[\"PROCESS_DATA\"] = 1] = \"PROCESS_DATA\";\n    ChartUpdateType[ChartUpdateType[\"PERFORM_LAYOUT\"] = 2] = \"PERFORM_LAYOUT\";\n    ChartUpdateType[ChartUpdateType[\"SERIES_UPDATE\"] = 3] = \"SERIES_UPDATE\";\n    ChartUpdateType[ChartUpdateType[\"TOOLTIP_RECALCULATION\"] = 4] = \"TOOLTIP_RECALCULATION\";\n    ChartUpdateType[ChartUpdateType[\"SCENE_RENDER\"] = 5] = \"SCENE_RENDER\";\n    ChartUpdateType[ChartUpdateType[\"NONE\"] = 6] = \"NONE\";\n})(ChartUpdateType || (ChartUpdateType = {}));\n\nclass UpdateService {\n    constructor(updateCallback) {\n        this.updateCallback = updateCallback;\n    }\n    update(type = ChartUpdateType.FULL, { forceNodeDataRefresh = false } = {}) {\n        this.updateCallback(type, { forceNodeDataRefresh });\n    }\n}\n\nvar __decorate$1D = ( false) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nclass ChartHighlight {\n    constructor() {\n        this.range = 'tooltip';\n    }\n}\n__decorate$1D([\n    Validate(STRING_UNION('tooltip', 'node'))\n], ChartHighlight.prototype, \"range\", void 0);\n\nvar __decorate$1C = ( false) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nclass MarkerLabel extends Group {\n    constructor() {\n        super({ name: 'markerLabelGroup' });\n        this.label = new Text();\n        this._marker = new Square();\n        this._markerSize = 15;\n        this._spacing = 8;\n        const label = this.label;\n        label.textBaseline = 'middle';\n        label.fontSize = 12;\n        label.fontFamily = 'Verdana, sans-serif';\n        label.fill = 'black';\n        // For better looking vertical alignment of labels to markers.\n        label.y = HdpiCanvas.has.textMetrics ? 1 : 0;\n        this.append([this.marker, label]);\n        this.update();\n    }\n    set marker(value) {\n        if (this._marker !== value) {\n            this.removeChild(this._marker);\n            this._marker = value;\n            this.appendChild(value);\n            this.update();\n        }\n    }\n    get marker() {\n        return this._marker;\n    }\n    set markerSize(value) {\n        if (this._markerSize !== value) {\n            this._markerSize = value;\n            this.update();\n        }\n    }\n    get markerSize() {\n        return this._markerSize;\n    }\n    set spacing(value) {\n        if (this._spacing !== value) {\n            this._spacing = value;\n            this.update();\n        }\n    }\n    get spacing() {\n        return this._spacing;\n    }\n    update() {\n        const marker = this.marker;\n        const markerSize = this.markerSize;\n        marker.size = markerSize;\n        this.label.x = markerSize / 2 + this.spacing;\n    }\n    render(renderCtx) {\n        // Cannot override field Group.opacity with get/set pair, so\n        // propagate opacity changes here.\n        this.marker.opacity = this.opacity;\n        this.label.opacity = this.opacity;\n        super.render(renderCtx);\n    }\n}\nMarkerLabel.className = 'MarkerLabel';\n__decorate$1C([\n    ProxyPropertyOnWrite('label')\n], MarkerLabel.prototype, \"text\", void 0);\n__decorate$1C([\n    ProxyPropertyOnWrite('label')\n], MarkerLabel.prototype, \"fontStyle\", void 0);\n__decorate$1C([\n    ProxyPropertyOnWrite('label')\n], MarkerLabel.prototype, \"fontWeight\", void 0);\n__decorate$1C([\n    ProxyPropertyOnWrite('label')\n], MarkerLabel.prototype, \"fontSize\", void 0);\n__decorate$1C([\n    ProxyPropertyOnWrite('label')\n], MarkerLabel.prototype, \"fontFamily\", void 0);\n__decorate$1C([\n    ProxyPropertyOnWrite('label', 'fill')\n], MarkerLabel.prototype, \"color\", void 0);\n__decorate$1C([\n    ProxyPropertyOnWrite('marker', 'fill')\n], MarkerLabel.prototype, \"markerFill\", void 0);\n__decorate$1C([\n    ProxyPropertyOnWrite('marker', 'stroke')\n], MarkerLabel.prototype, \"markerStroke\", void 0);\n__decorate$1C([\n    ProxyPropertyOnWrite('marker', 'strokeWidth')\n], MarkerLabel.prototype, \"markerStrokeWidth\", void 0);\n__decorate$1C([\n    ProxyPropertyOnWrite('marker', 'fillOpacity')\n], MarkerLabel.prototype, \"markerFillOpacity\", void 0);\n__decorate$1C([\n    ProxyPropertyOnWrite('marker', 'strokeOpacity')\n], MarkerLabel.prototype, \"markerStrokeOpacity\", void 0);\n\nfunction gridLayout({ orientation, bboxes, maxHeight, maxWidth, itemPaddingY = 0, itemPaddingX = 0, forceResult = false, }) {\n    const horizontal = orientation === 'horizontal';\n    const primary = {\n        max: horizontal ? maxWidth : maxHeight,\n        fn: horizontal ? (b) => b.width : (b) => b.height,\n        padding: horizontal ? itemPaddingX : itemPaddingY,\n    };\n    const secondary = {\n        max: !horizontal ? maxWidth : maxHeight,\n        fn: !horizontal ? (b) => b.width : (b) => b.height,\n        padding: !horizontal ? itemPaddingX : itemPaddingY,\n    };\n    let processedBBoxCount = 0;\n    const rawPages = [];\n    while (processedBBoxCount < bboxes.length) {\n        const unprocessedBBoxes = bboxes.slice(processedBBoxCount);\n        const result = processBBoxes(unprocessedBBoxes, processedBBoxCount, primary, secondary, forceResult);\n        if (!result) {\n            return;\n        }\n        processedBBoxCount += result.processedBBoxCount;\n        rawPages.push(result.pageIndices);\n    }\n    return buildPages(rawPages, orientation, bboxes, itemPaddingY, itemPaddingX);\n}\nfunction processBBoxes(bboxes, indexOffset, primary, secondary, forceResult) {\n    // If calculatePage() fails on the first guess, we could use the number of items that fit\n    // as a good guess for the next iteration.\n    const minGuess = 1;\n    let startingGuess = estimateStartingGuess(bboxes, primary);\n    if (startingGuess < minGuess) {\n        if (!forceResult) {\n            return undefined;\n        }\n        // Legend constraints too small! Display at least one row/column if forceResult is true\n        startingGuess = minGuess;\n    }\n    for (let guess = startingGuess; guess >= minGuess; guess--) {\n        const pageIndices = calculatePage(bboxes, indexOffset, guess, primary, secondary, forceResult);\n        if (pageIndices == null && guess <= minGuess) {\n            // Can't layout!\n            return undefined;\n        }\n        if (pageIndices == null) {\n            // Guess again!\n            continue;\n        }\n        if (typeof pageIndices === 'number') {\n            // calculatePage() suggested a better guess, use that if it's more than minGuess.\n            if (pageIndices <= minGuess) {\n                // Can't layout!\n                return undefined;\n            }\n            guess = pageIndices < guess && pageIndices > minGuess ? pageIndices : guess;\n            continue;\n        }\n        const processedBBoxCount = pageIndices.length * pageIndices[0].length; // this is an estimate, not all rows/columns will have the same length\n        return { processedBBoxCount, pageIndices };\n    }\n}\nfunction calculatePage(bboxes, indexOffset, primaryCount, primary, secondary, forceResult) {\n    var _a;\n    const result = [];\n    let sumSecondary = 0;\n    let currentMaxSecondary = 0;\n    let currentPrimaryIndices = [];\n    const maxPrimaryValues = [];\n    for (let bboxIndex = 0; bboxIndex < bboxes.length; bboxIndex++) {\n        const primaryValueIdx = (bboxIndex + primaryCount) % primaryCount;\n        if (primaryValueIdx === 0) {\n            sumSecondary += currentMaxSecondary;\n            currentMaxSecondary = 0;\n            if (currentPrimaryIndices.length > 0) {\n                result.push(currentPrimaryIndices);\n            }\n            currentPrimaryIndices = [];\n        }\n        const primaryValue = primary.fn(bboxes[bboxIndex]) + primary.padding;\n        maxPrimaryValues[primaryValueIdx] = Math.max((_a = maxPrimaryValues[primaryValueIdx]) !== null && _a !== void 0 ? _a : 0, primaryValue);\n        currentMaxSecondary = Math.max(currentMaxSecondary, secondary.fn(bboxes[bboxIndex]) + secondary.padding);\n        const currentSecondaryDimension = sumSecondary + currentMaxSecondary;\n        const returnResult = !forceResult || result.length > 0;\n        if (currentSecondaryDimension > secondary.max && returnResult) {\n            // Breached max secondary dimension size, return indices accumlated so far (but not in-progress row/column).\n            currentPrimaryIndices = [];\n            break;\n        }\n        const sumPrimary = maxPrimaryValues.reduce((sum, next) => sum + next, 0);\n        if (sumPrimary > primary.max && !forceResult) {\n            // Breached max main dimension size.\n            if (maxPrimaryValues.length < primaryCount) {\n                // Feedback as guess for next iteration if we're on the first round still.\n                return maxPrimaryValues.length;\n            }\n            return undefined;\n        }\n        currentPrimaryIndices.push(bboxIndex + indexOffset);\n    }\n    if (currentPrimaryIndices.length > 0) {\n        result.push(currentPrimaryIndices);\n    }\n    return result.length > 0 ? result : undefined;\n}\nfunction buildPages(rawPages, orientation, bboxes, itemPaddingY, itemPaddingX) {\n    let maxPageWidth = 0;\n    let maxPageHeight = 0;\n    const pages = rawPages.map((indices) => {\n        if (orientation === 'horizontal') {\n            indices = transpose(indices);\n        }\n        let endIndex = 0;\n        const columns = indices.map((colIndices) => {\n            const colBBoxes = colIndices.map((bboxIndex) => {\n                endIndex = Math.max(bboxIndex, endIndex);\n                return bboxes[bboxIndex];\n            });\n            let columnHeight = 0;\n            let columnWidth = 0;\n            colBBoxes.forEach((bbox) => {\n                columnHeight += bbox.height + itemPaddingY;\n                columnWidth = Math.max(columnWidth, bbox.width + itemPaddingX);\n            });\n            return {\n                indices: colIndices,\n                bboxes: colBBoxes,\n                columnHeight,\n                columnWidth,\n            };\n        });\n        let pageWidth = 0;\n        let pageHeight = 0;\n        columns.forEach((column) => {\n            pageWidth += column.columnWidth;\n            pageHeight = Math.max(pageHeight, column.columnHeight);\n        });\n        maxPageWidth = Math.max(pageWidth, maxPageWidth);\n        maxPageHeight = Math.max(pageHeight, maxPageHeight);\n        return {\n            columns,\n            startIndex: indices[0][0],\n            endIndex,\n            pageWidth,\n            pageHeight,\n        };\n    });\n    return { pages, maxPageWidth, maxPageHeight };\n}\nfunction transpose(data) {\n    const result = [];\n    for (const _ of data[0]) {\n        result.push([]);\n    }\n    data.forEach((innerData, dataIdx) => {\n        innerData.forEach((item, itemIdx) => {\n            result[itemIdx][dataIdx] = item;\n        });\n    });\n    return result;\n}\nfunction estimateStartingGuess(bboxes, primary) {\n    const n = bboxes.length;\n    let primarySum = 0;\n    for (let bboxIndex = 0; bboxIndex < n; bboxIndex++) {\n        primarySum += primary.fn(bboxes[bboxIndex]) + primary.padding;\n        if (primarySum > primary.max) {\n            const ratio = n / bboxIndex;\n            if (ratio < 2) {\n                return Math.ceil(n / 2);\n            }\n            return bboxIndex;\n        }\n    }\n    return n;\n}\n\nvar __decorate$1B = ( false) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nclass PaginationLabel {\n    constructor() {\n        this.color = 'black';\n        this.fontStyle = undefined;\n        this.fontWeight = undefined;\n        this.fontSize = 12;\n        this.fontFamily = 'Verdana, sans-serif';\n    }\n}\n__decorate$1B([\n    Validate(COLOR_STRING)\n], PaginationLabel.prototype, \"color\", void 0);\n__decorate$1B([\n    Validate(OPT_FONT_STYLE)\n], PaginationLabel.prototype, \"fontStyle\", void 0);\n__decorate$1B([\n    Validate(OPT_FONT_WEIGHT)\n], PaginationLabel.prototype, \"fontWeight\", void 0);\n__decorate$1B([\n    Validate(NUMBER(0))\n], PaginationLabel.prototype, \"fontSize\", void 0);\n__decorate$1B([\n    Validate(STRING)\n], PaginationLabel.prototype, \"fontFamily\", void 0);\nclass PaginationMarkerStyle {\n    constructor() {\n        this.size = 15;\n        this.fill = undefined;\n        this.fillOpacity = undefined;\n        this.stroke = undefined;\n        this.strokeWidth = 1;\n        this.strokeOpacity = 1;\n    }\n}\n__decorate$1B([\n    Validate(NUMBER(0))\n], PaginationMarkerStyle.prototype, \"size\", void 0);\n__decorate$1B([\n    Validate(OPT_COLOR_STRING)\n], PaginationMarkerStyle.prototype, \"fill\", void 0);\n__decorate$1B([\n    Validate(OPT_NUMBER(0, 1))\n], PaginationMarkerStyle.prototype, \"fillOpacity\", void 0);\n__decorate$1B([\n    Validate(OPT_COLOR_STRING)\n], PaginationMarkerStyle.prototype, \"stroke\", void 0);\n__decorate$1B([\n    Validate(NUMBER(0))\n], PaginationMarkerStyle.prototype, \"strokeWidth\", void 0);\n__decorate$1B([\n    Validate(NUMBER(0, 1))\n], PaginationMarkerStyle.prototype, \"strokeOpacity\", void 0);\nclass PaginationMarker {\n    constructor() {\n        this.size = 15;\n        this._shape = Triangle;\n        /**\n         * Inner padding between a pagination button and the label.\n         */\n        this.padding = 8;\n    }\n    set shape(value) {\n        var _a;\n        this._shape = value;\n        (_a = this.parent) === null || _a === void 0 ? void 0 : _a.onMarkerShapeChange();\n    }\n    get shape() {\n        return this._shape;\n    }\n}\n__decorate$1B([\n    Validate(NUMBER(0))\n], PaginationMarker.prototype, \"size\", void 0);\n__decorate$1B([\n    Validate(NUMBER(0))\n], PaginationMarker.prototype, \"padding\", void 0);\nclass Pagination {\n    constructor(chartUpdateCallback, pageUpdateCallback, interactionManager, cursorManager) {\n        this.chartUpdateCallback = chartUpdateCallback;\n        this.pageUpdateCallback = pageUpdateCallback;\n        this.interactionManager = interactionManager;\n        this.cursorManager = cursorManager;\n        this.id = createId$1(this);\n        this.group = new Group({ name: 'pagination' });\n        this.labelNode = new Text();\n        this.marker = new PaginationMarker();\n        this.activeStyle = new PaginationMarkerStyle();\n        this.inactiveStyle = new PaginationMarkerStyle();\n        this.highlightStyle = new PaginationMarkerStyle();\n        this.label = new PaginationLabel();\n        this.totalPages = 0;\n        this.currentPage = 0;\n        this.translationX = 0;\n        this.translationY = 0;\n        this.nextButtonDisabled = false;\n        this.previousButtonDisabled = false;\n        this._visible = true;\n        this._enabled = true;\n        this._orientation = 'vertical';\n        this._nextButton = new Triangle();\n        this._previousButton = new Triangle();\n        const { labelNode } = this;\n        labelNode.textBaseline = 'middle';\n        labelNode.fontSize = 12;\n        labelNode.fontFamily = 'Verdana, sans-serif';\n        labelNode.fill = 'black';\n        labelNode.y = HdpiCanvas.has.textMetrics ? 1 : 0;\n        this.group.append([this.nextButton, this.previousButton, labelNode]);\n        this.interactionManager.addListener('click', (event) => this.onPaginationClick(event));\n        this.interactionManager.addListener('hover', (event) => this.onPaginationMouseMove(event));\n        this.marker.parent = this;\n        this.update();\n        this.updateMarkers();\n    }\n    set visible(value) {\n        this._visible = value;\n        this.updateGroupVisibility();\n    }\n    get visible() {\n        return this._visible;\n    }\n    set enabled(value) {\n        this._enabled = value;\n        this.updateGroupVisibility();\n    }\n    get enabled() {\n        return this._enabled;\n    }\n    updateGroupVisibility() {\n        this.group.visible = this.enabled && this.visible;\n    }\n    set orientation(value) {\n        this._orientation = value;\n        switch (value) {\n            case 'horizontal': {\n                this.previousButton.rotation = -Math.PI / 2;\n                this.nextButton.rotation = Math.PI / 2;\n                break;\n            }\n            case 'vertical':\n            default: {\n                this.previousButton.rotation = 0;\n                this.nextButton.rotation = Math.PI;\n            }\n        }\n    }\n    get orientation() {\n        return this._orientation;\n    }\n    set nextButton(value) {\n        if (this._nextButton !== value) {\n            this.group.removeChild(this._nextButton);\n            this._nextButton = value;\n            this.group.appendChild(value);\n        }\n    }\n    get nextButton() {\n        return this._nextButton;\n    }\n    set previousButton(value) {\n        if (this._previousButton !== value) {\n            this.group.removeChild(this._previousButton);\n            this._previousButton = value;\n            this.group.appendChild(value);\n        }\n    }\n    get previousButton() {\n        return this._previousButton;\n    }\n    update() {\n        this.updateLabel();\n        this.updatePositions();\n        this.enableOrDisableButtons();\n    }\n    updatePositions() {\n        this.group.translationX = this.translationX;\n        this.group.translationY = this.translationY;\n        this.updateLabelPosition();\n        this.updateNextButtonPosition();\n    }\n    updateLabelPosition() {\n        const { size: markerSize, padding: markerPadding } = this.marker;\n        this.nextButton.size = markerSize;\n        this.previousButton.size = markerSize;\n        this.labelNode.x = markerSize / 2 + markerPadding;\n    }\n    updateNextButtonPosition() {\n        const labelBBox = this.labelNode.computeBBox();\n        this.nextButton.translationX = labelBBox.x + labelBBox.width + this.marker.size / 2 + this.marker.padding;\n    }\n    updateLabel() {\n        const { currentPage, totalPages: pages, labelNode, label: { color, fontStyle, fontWeight, fontSize, fontFamily }, } = this;\n        labelNode.text = `${currentPage + 1} / ${pages}`;\n        labelNode.fill = color;\n        labelNode.fontStyle = fontStyle;\n        labelNode.fontWeight = fontWeight;\n        labelNode.fontSize = fontSize;\n        labelNode.fontFamily = fontFamily;\n    }\n    updateMarkers() {\n        const { nextButton, previousButton, nextButtonDisabled, previousButtonDisabled, activeStyle, inactiveStyle, highlightStyle, highlightActive, } = this;\n        const buttonStyle = (button, disabled) => {\n            if (disabled) {\n                return inactiveStyle;\n            }\n            else if (button === highlightActive) {\n                return highlightStyle;\n            }\n            return activeStyle;\n        };\n        this.updateMarker(nextButton, buttonStyle('next', nextButtonDisabled));\n        this.updateMarker(previousButton, buttonStyle('previous', previousButtonDisabled));\n    }\n    updateMarker(marker, style) {\n        var _a;\n        const { size } = this.marker;\n        marker.size = size;\n        marker.fill = style.fill;\n        marker.fillOpacity = (_a = style.fillOpacity) !== null && _a !== void 0 ? _a : 1;\n        marker.stroke = style.stroke;\n        marker.strokeWidth = style.strokeWidth;\n        marker.strokeOpacity = style.strokeOpacity;\n    }\n    enableOrDisableButtons() {\n        const { currentPage, totalPages } = this;\n        const zeroPagesToDisplay = totalPages === 0;\n        const onLastPage = currentPage === totalPages - 1;\n        const onFirstPage = currentPage === 0;\n        this.nextButtonDisabled = onLastPage || zeroPagesToDisplay;\n        this.previousButtonDisabled = onFirstPage || zeroPagesToDisplay;\n    }\n    nextButtonContainsPoint(offsetX, offsetY) {\n        return !this.nextButtonDisabled && this.nextButton.containsPoint(offsetX, offsetY);\n    }\n    previousButtonContainsPoint(offsetX, offsetY) {\n        return !this.previousButtonDisabled && this.previousButton.containsPoint(offsetX, offsetY);\n    }\n    onPaginationClick(event) {\n        const { offsetX, offsetY } = event;\n        if (this.nextButtonContainsPoint(offsetX, offsetY)) {\n            this.incrementPage();\n            this.onPaginationChanged();\n            event.consume();\n        }\n        else if (this.previousButtonContainsPoint(offsetX, offsetY)) {\n            this.decrementPage();\n            this.onPaginationChanged();\n            event.consume();\n        }\n    }\n    onPaginationMouseMove(event) {\n        const { offsetX, offsetY } = event;\n        if (this.nextButtonContainsPoint(offsetX, offsetY)) {\n            this.cursorManager.updateCursor(this.id, 'pointer');\n            this.highlightActive = 'next';\n        }\n        else if (this.previousButtonContainsPoint(offsetX, offsetY)) {\n            this.cursorManager.updateCursor(this.id, 'pointer');\n            this.highlightActive = 'previous';\n        }\n        else {\n            this.cursorManager.updateCursor(this.id);\n            this.highlightActive = undefined;\n        }\n        this.updateMarkers();\n        this.chartUpdateCallback(ChartUpdateType.SCENE_RENDER);\n    }\n    onPaginationChanged() {\n        this.pageUpdateCallback(this.currentPage);\n    }\n    incrementPage() {\n        this.currentPage = Math.min(this.currentPage + 1, this.totalPages - 1);\n    }\n    decrementPage() {\n        this.currentPage = Math.max(this.currentPage - 1, 0);\n    }\n    onMarkerShapeChange() {\n        const Marker = getMarker$1(this.marker.shape || Triangle);\n        this.previousButton = new Marker();\n        this.nextButton = new Marker();\n        this.updatePositions();\n        this.updateMarkers();\n        this.chartUpdateCallback(ChartUpdateType.SCENE_RENDER);\n    }\n    attachPagination(node) {\n        node.append(this.group);\n    }\n    computeBBox() {\n        return this.group.computeBBox();\n    }\n}\nPagination.className = 'Pagination';\n\nvar __decorate$1A = ( false) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nconst ORIENTATIONS = ['horizontal', 'vertical'];\nconst OPT_ORIENTATION = predicateWithMessage((v, ctx) => OPTIONAL(v, ctx, (v) => ORIENTATIONS.includes(v)), `expecting an orientation keyword such as 'horizontal' or 'vertical'`);\nclass LegendLabel {\n    constructor() {\n        this.maxLength = undefined;\n        this.color = 'black';\n        this.fontStyle = undefined;\n        this.fontWeight = undefined;\n        this.fontSize = 12;\n        this.fontFamily = 'Verdana, sans-serif';\n        this.formatter = undefined;\n    }\n}\n__decorate$1A([\n    Validate(OPT_NUMBER(0))\n], LegendLabel.prototype, \"maxLength\", void 0);\n__decorate$1A([\n    Validate(COLOR_STRING)\n], LegendLabel.prototype, \"color\", void 0);\n__decorate$1A([\n    Validate(OPT_FONT_STYLE)\n], LegendLabel.prototype, \"fontStyle\", void 0);\n__decorate$1A([\n    Validate(OPT_FONT_WEIGHT)\n], LegendLabel.prototype, \"fontWeight\", void 0);\n__decorate$1A([\n    Validate(NUMBER(0))\n], LegendLabel.prototype, \"fontSize\", void 0);\n__decorate$1A([\n    Validate(STRING)\n], LegendLabel.prototype, \"fontFamily\", void 0);\n__decorate$1A([\n    Validate(OPT_FUNCTION)\n], LegendLabel.prototype, \"formatter\", void 0);\nclass LegendMarker {\n    constructor() {\n        this.size = 15;\n        /**\n         * If the marker type is set, the legend will always use that marker type for all its items,\n         * regardless of the type that comes from the `data`.\n         */\n        this._shape = undefined;\n        /**\n         * Padding between the marker and the label within each legend item.\n         */\n        this.padding = 8;\n        this.strokeWidth = 1;\n    }\n    set shape(value) {\n        var _a;\n        this._shape = value;\n        (_a = this.parent) === null || _a === void 0 ? void 0 : _a.onMarkerShapeChange();\n    }\n    get shape() {\n        return this._shape;\n    }\n}\n__decorate$1A([\n    Validate(NUMBER(0))\n], LegendMarker.prototype, \"size\", void 0);\n__decorate$1A([\n    Validate(NUMBER(0))\n], LegendMarker.prototype, \"padding\", void 0);\n__decorate$1A([\n    Validate(NUMBER(0))\n], LegendMarker.prototype, \"strokeWidth\", void 0);\nclass LegendItem {\n    constructor() {\n        this.marker = new LegendMarker();\n        this.label = new LegendLabel();\n        /** Used to constrain the width of legend items. */\n        this.maxWidth = undefined;\n        /**\n         * The legend uses grid layout for its items, occupying as few columns as possible when positioned to left or right,\n         * and as few rows as possible when positioned to top or bottom. This config specifies the amount of horizontal\n         * padding between legend items.\n         */\n        this.paddingX = 16;\n        /**\n         * The legend uses grid layout for its items, occupying as few columns as possible when positioned to left or right,\n         * and as few rows as possible when positioned to top or bottom. This config specifies the amount of vertical\n         * padding between legend items.\n         */\n        this.paddingY = 8;\n        this.toggleSeriesVisible = true;\n    }\n}\n__decorate$1A([\n    Validate(OPT_NUMBER(0))\n], LegendItem.prototype, \"maxWidth\", void 0);\n__decorate$1A([\n    Validate(NUMBER(0))\n], LegendItem.prototype, \"paddingX\", void 0);\n__decorate$1A([\n    Validate(NUMBER(0))\n], LegendItem.prototype, \"paddingY\", void 0);\n__decorate$1A([\n    Validate(BOOLEAN)\n], LegendItem.prototype, \"toggleSeriesVisible\", void 0);\nclass LegendListeners {\n    constructor() {\n        this.legendItemClick = undefined;\n        this.legendItemDoubleClick = undefined;\n    }\n}\n__decorate$1A([\n    Validate(OPT_FUNCTION)\n], LegendListeners.prototype, \"legendItemClick\", void 0);\nclass Legend {\n    constructor(ctx) {\n        this.ctx = ctx;\n        this.id = createId$1(this);\n        this.group = new Group({ name: 'legend', layer: true, zIndex: Layers.LEGEND_ZINDEX });\n        this.itemSelection = Selection.select(this.group, MarkerLabel);\n        this.oldSize = [0, 0];\n        this.pages = [];\n        this.maxPageSize = [0, 0];\n        /** Item index to track on re-pagination, so current page updates appropriately. */\n        this.paginationTrackingIndex = 0;\n        this.item = new LegendItem();\n        this.listeners = new LegendListeners();\n        this.truncatedItems = new Set();\n        this._data = [];\n        this._enabled = true;\n        this.position = 'bottom';\n        /** Used to constrain the width of the legend. */\n        this.maxWidth = undefined;\n        /** Used to constrain the height of the legend. */\n        this.maxHeight = undefined;\n        /** Reverse the display order of legend items if `true`. */\n        this.reverseOrder = undefined;\n        this.destroyFns = [];\n        /**\n         * Spacing between the legend and the edge of the chart's element.\n         */\n        this.spacing = 20;\n        this.characterWidths = new Map();\n        this.size = [0, 0];\n        this._visible = true;\n        this.item.marker.parent = this;\n        this.pagination = new Pagination((type) => ctx.updateService.update(type), (page) => this.updatePageNumber(page), ctx.interactionManager, ctx.cursorManager);\n        this.pagination.attachPagination(this.group);\n        this.item.marker.parent = this;\n        const interactionListeners = [\n            ctx.interactionManager.addListener('click', (e) => this.checkLegendClick(e)),\n            ctx.interactionManager.addListener('dblclick', (e) => this.checkLegendDoubleClick(e)),\n            ctx.interactionManager.addListener('hover', (e) => this.handleLegendMouseMove(e)),\n        ];\n        const layoutListeners = [\n            ctx.layoutService.addListener('start-layout', (e) => this.positionLegend(e.shrinkRect)),\n        ];\n        this.destroyFns.push(...interactionListeners.map((s) => () => ctx.interactionManager.removeListener(s)), ...layoutListeners.map((s) => () => ctx.layoutService.removeListener(s)), () => this.detachLegend());\n    }\n    set data(value) {\n        this._data = value;\n        this.updateGroupVisibility();\n    }\n    get data() {\n        return this._data;\n    }\n    set enabled(value) {\n        this._enabled = value;\n        this.updateGroupVisibility();\n    }\n    get enabled() {\n        return this._enabled;\n    }\n    getOrientation() {\n        if (this.orientation !== undefined) {\n            return this.orientation;\n        }\n        switch (this.position) {\n            case 'right':\n            case 'left':\n                return 'vertical';\n            case 'bottom':\n            case 'top':\n                return 'horizontal';\n        }\n    }\n    destroy() {\n        this.destroyFns.forEach((f) => f());\n    }\n    onMarkerShapeChange() {\n        this.itemSelection.clear();\n        this.group.markDirty(this.group, RedrawType.MINOR);\n    }\n    getCharacterWidths(font) {\n        const { characterWidths } = this;\n        if (characterWidths.has(font)) {\n            return characterWidths.get(font);\n        }\n        const cw = {\n            '...': HdpiCanvas.getTextSize('...', font).width,\n        };\n        characterWidths.set(font, cw);\n        return cw;\n    }\n    set visible(value) {\n        this._visible = value;\n        this.updateGroupVisibility();\n    }\n    get visible() {\n        return this._visible;\n    }\n    updateGroupVisibility() {\n        this.group.visible = this.enabled && this.visible && this.data.length > 0;\n    }\n    attachLegend(node) {\n        node.append(this.group);\n    }\n    detachLegend() {\n        var _a;\n        (_a = this.group.parent) === null || _a === void 0 ? void 0 : _a.removeChild(this.group);\n    }\n    getItemLabel(datum) {\n        const { ctx: { callbackCache }, } = this;\n        const { formatter } = this.item.label;\n        if (formatter) {\n            return callbackCache.call(formatter, {\n                itemId: datum.itemId,\n                value: datum.label.text,\n                seriesId: datum.seriesId,\n            });\n        }\n        return datum.label.text;\n    }\n    /**\n     * The method is given the desired size of the legend, which only serves as a hint.\n     * The vertically oriented legend will take as much horizontal space as needed, but will\n     * respect the height constraints, and the horizontal legend will take as much vertical\n     * space as needed in an attempt not to exceed the given width.\n     * After the layout is done, the {@link size} will contain the actual size of the legend.\n     * If the actual size is not the same as the previous actual size, the legend will fire\n     * the 'layoutChange' event to communicate that another layout is needed, and the above\n     * process should be repeated.\n     * @param width\n     * @param height\n     */\n    performLayout(width, height) {\n        const { paddingX, paddingY, label, maxWidth, marker: { size: markerSize, padding: markerPadding, shape: markerShape }, label: { maxLength = Infinity, fontStyle, fontWeight, fontSize, fontFamily }, } = this.item;\n        const data = [...this.data];\n        if (this.reverseOrder) {\n            data.reverse();\n        }\n        this.itemSelection.update(data);\n        // Update properties that affect the size of the legend items and measure them.\n        const bboxes = [];\n        const font = getFont(label);\n        const itemMaxWidthPercentage = 0.8;\n        const maxItemWidth = maxWidth !== null && maxWidth !== void 0 ? maxWidth : width * itemMaxWidthPercentage;\n        const paddedMarkerWidth = markerSize + markerPadding + paddingX;\n        this.itemSelection.each((markerLabel, datum) => {\n            var _a;\n            const Marker = getMarker$1(markerShape !== null && markerShape !== void 0 ? markerShape : datum.marker.shape);\n            if (!(markerLabel.marker && markerLabel.marker instanceof Marker)) {\n                markerLabel.marker = new Marker();\n            }\n            markerLabel.markerSize = markerSize;\n            markerLabel.spacing = markerPadding;\n            markerLabel.fontStyle = fontStyle;\n            markerLabel.fontWeight = fontWeight;\n            markerLabel.fontSize = fontSize;\n            markerLabel.fontFamily = fontFamily;\n            const id = (_a = datum.itemId) !== null && _a !== void 0 ? _a : datum.id;\n            const labelText = this.getItemLabel(datum);\n            const text = (labelText !== null && labelText !== void 0 ? labelText : '<unknown>').replace(/\\r?\\n/g, ' ');\n            markerLabel.text = this.truncate(text, maxLength, maxItemWidth, paddedMarkerWidth, font, id);\n            bboxes.push(markerLabel.computeBBox());\n        });\n        width = Math.max(1, width);\n        height = Math.max(1, height);\n        if (!isFinite(width)) {\n            return false;\n        }\n        const size = this.size;\n        const oldSize = this.oldSize;\n        size[0] = width;\n        size[1] = height;\n        if (size[0] !== oldSize[0] || size[1] !== oldSize[1]) {\n            oldSize[0] = size[0];\n            oldSize[1] = size[1];\n        }\n        const { pages, maxPageHeight, maxPageWidth } = this.updatePagination(bboxes, width, height);\n        this.pages = pages;\n        this.maxPageSize = [maxPageWidth - paddingX, maxPageHeight - paddingY];\n        const pageNumber = this.pagination.currentPage;\n        const page = this.pages[pageNumber];\n        if (this.pages.length < 1 || !page) {\n            this.visible = false;\n            return;\n        }\n        this.visible = true;\n        // Position legend items\n        this.updatePositions(pageNumber);\n        // Update legend item properties that don't affect the layout.\n        this.update();\n    }\n    truncate(text, maxCharLength, maxItemWidth, paddedMarkerWidth, font, id) {\n        const ellipsis = `...`;\n        const textChars = text.split('');\n        let addEllipsis = false;\n        if (text.length > maxCharLength) {\n            text = `${text.substring(0, maxCharLength)}`;\n            addEllipsis = true;\n        }\n        const labelWidth = Math.floor(paddedMarkerWidth + HdpiCanvas.getTextSize(text, font).width);\n        if (labelWidth > maxItemWidth) {\n            let truncatedText = '';\n            const characterWidths = this.getCharacterWidths(font);\n            let cumulativeWidth = paddedMarkerWidth + characterWidths[ellipsis];\n            for (const char of textChars) {\n                if (!characterWidths[char]) {\n                    characterWidths[char] = HdpiCanvas.getTextSize(char, font).width;\n                }\n                cumulativeWidth += characterWidths[char];\n                if (cumulativeWidth > maxItemWidth) {\n                    break;\n                }\n                truncatedText += char;\n            }\n            text = truncatedText;\n            addEllipsis = true;\n        }\n        if (addEllipsis) {\n            text += ellipsis;\n            this.truncatedItems.add(id);\n        }\n        else {\n            this.truncatedItems.delete(id);\n        }\n        return text;\n    }\n    updatePagination(bboxes, width, height) {\n        const orientation = this.getOrientation();\n        const trackingIndex = Math.min(this.paginationTrackingIndex, bboxes.length);\n        this.pagination.orientation = orientation;\n        this.pagination.translationX = 0;\n        this.pagination.translationY = 0;\n        const { pages, maxPageHeight, maxPageWidth, paginationBBox, paginationVertical } = this.calculatePagination(bboxes, width, height);\n        const newCurrentPage = pages.findIndex((p) => p.endIndex >= trackingIndex);\n        this.pagination.currentPage = Math.min(Math.max(newCurrentPage, 0), pages.length - 1);\n        const { paddingX: itemPaddingX, paddingY: itemPaddingY } = this.item;\n        const paginationComponentPadding = 8;\n        const legendItemsWidth = maxPageWidth - itemPaddingX;\n        const legendItemsHeight = maxPageHeight - itemPaddingY;\n        let paginationX = 0;\n        let paginationY = -paginationBBox.y - this.item.marker.size / 2;\n        if (paginationVertical) {\n            paginationY += legendItemsHeight + paginationComponentPadding;\n        }\n        else {\n            paginationX += -paginationBBox.x + legendItemsWidth + paginationComponentPadding;\n            paginationY += (legendItemsHeight - paginationBBox.height) / 2;\n        }\n        this.pagination.translationX = paginationX;\n        this.pagination.translationY = paginationY;\n        this.pagination.update();\n        this.pagination.updateMarkers();\n        return {\n            maxPageHeight,\n            maxPageWidth,\n            pages,\n        };\n    }\n    calculatePagination(bboxes, width, height) {\n        var _a, _b, _c;\n        const { paddingX: itemPaddingX, paddingY: itemPaddingY } = this.item;\n        const orientation = this.getOrientation();\n        const paginationVertical = ['left', 'right'].includes(this.position);\n        let paginationBBox = this.pagination.computeBBox();\n        let lastPassPaginationBBox = new BBox(0, 0, 0, 0);\n        let pages = [];\n        let maxPageWidth = 0;\n        let maxPageHeight = 0;\n        let count = 0;\n        const stableOutput = (lastPassPaginationBBox) => {\n            const { width, height } = lastPassPaginationBBox;\n            return width === paginationBBox.width && height === paginationBBox.height;\n        };\n        const forceResult = this.maxWidth !== undefined || this.maxHeight !== undefined;\n        do {\n            if (count++ > 10) {\n                Logger.warn('unable to find stable legend layout.');\n                break;\n            }\n            paginationBBox = lastPassPaginationBBox;\n            const maxWidth = width - (paginationVertical ? 0 : paginationBBox.width);\n            const maxHeight = height - (paginationVertical ? paginationBBox.height : 0);\n            const layout = gridLayout({\n                orientation,\n                bboxes,\n                maxHeight,\n                maxWidth,\n                itemPaddingY,\n                itemPaddingX,\n                forceResult,\n            });\n            pages = (_a = layout === null || layout === void 0 ? void 0 : layout.pages) !== null && _a !== void 0 ? _a : [];\n            maxPageWidth = (_b = layout === null || layout === void 0 ? void 0 : layout.maxPageWidth) !== null && _b !== void 0 ? _b : 0;\n            maxPageHeight = (_c = layout === null || layout === void 0 ? void 0 : layout.maxPageHeight) !== null && _c !== void 0 ? _c : 0;\n            const totalPages = pages.length;\n            this.pagination.visible = totalPages > 1;\n            this.pagination.totalPages = totalPages;\n            this.pagination.update();\n            lastPassPaginationBBox = this.pagination.computeBBox();\n            if (!this.pagination.visible) {\n                break;\n            }\n        } while (!stableOutput(lastPassPaginationBBox));\n        return { maxPageWidth, maxPageHeight, pages, paginationBBox, paginationVertical };\n    }\n    updatePositions(pageNumber = 0) {\n        const { item: { paddingY }, itemSelection, pages, } = this;\n        if (pages.length < 1 || !pages[pageNumber]) {\n            return;\n        }\n        const { columns, startIndex: visibleStart, endIndex: visibleEnd } = pages[pageNumber];\n        // Position legend items using the layout computed above.\n        let x = 0;\n        let y = 0;\n        const columnCount = columns.length;\n        const rowCount = columns[0].indices.length;\n        const horizontal = this.getOrientation() === 'horizontal';\n        const itemHeight = columns[0].bboxes[0].height + paddingY;\n        const rowSumColumnWidths = [];\n        itemSelection.each((markerLabel, _, i) => {\n            var _a, _b;\n            if (i < visibleStart || i > visibleEnd) {\n                markerLabel.visible = false;\n                return;\n            }\n            const pageIndex = i - visibleStart;\n            let columnIndex = 0;\n            let rowIndex = 0;\n            if (horizontal) {\n                columnIndex = pageIndex % columnCount;\n                rowIndex = Math.floor(pageIndex / columnCount);\n            }\n            else {\n                columnIndex = Math.floor(pageIndex / rowCount);\n                rowIndex = pageIndex % rowCount;\n            }\n            markerLabel.visible = true;\n            const column = columns[columnIndex];\n            if (!column) {\n                return;\n            }\n            y = itemHeight * rowIndex;\n            x = (_a = rowSumColumnWidths[rowIndex]) !== null && _a !== void 0 ? _a : 0;\n            rowSumColumnWidths[rowIndex] = ((_b = rowSumColumnWidths[rowIndex]) !== null && _b !== void 0 ? _b : 0) + column.columnWidth;\n            // Round off for pixel grid alignment to work properly.\n            markerLabel.translationX = Math.floor(x);\n            markerLabel.translationY = Math.floor(y);\n        });\n    }\n    updatePageNumber(pageNumber) {\n        const { pages } = this;\n        // Track an item on the page in re-pagination cases (e.g. resize).\n        const { startIndex, endIndex } = pages[pageNumber];\n        if (startIndex === 0) {\n            // Stay on first page on pagination update.\n            this.paginationTrackingIndex = 0;\n        }\n        else if (pageNumber === pages.length - 1) {\n            // Stay on last page on pagination update.\n            this.paginationTrackingIndex = endIndex;\n        }\n        else {\n            // Track the middle item on the page).\n            this.paginationTrackingIndex = Math.floor((startIndex + endIndex) / 2);\n        }\n        this.pagination.update();\n        this.pagination.updateMarkers();\n        this.updatePositions(pageNumber);\n        this.ctx.updateService.update(ChartUpdateType.SCENE_RENDER);\n    }\n    update() {\n        const { marker: { strokeWidth }, label: { color }, } = this.item;\n        this.itemSelection.each((markerLabel, datum) => {\n            const marker = datum.marker;\n            markerLabel.markerFill = marker.fill;\n            markerLabel.markerStroke = marker.stroke;\n            markerLabel.markerStrokeWidth = strokeWidth;\n            markerLabel.markerFillOpacity = marker.fillOpacity;\n            markerLabel.markerStrokeOpacity = marker.strokeOpacity;\n            markerLabel.opacity = datum.enabled ? 1 : 0.5;\n            markerLabel.color = color;\n        });\n    }\n    getDatumForPoint(x, y) {\n        const visibleChildBBoxes = [];\n        const closestLeftTop = { dist: Infinity, datum: undefined };\n        for (const child of this.group.children) {\n            if (!child.visible)\n                continue;\n            if (!(child instanceof MarkerLabel))\n                continue;\n            const childBBox = child.computeBBox();\n            childBBox.grow(this.item.paddingX / 2, 'horizontal');\n            childBBox.grow(this.item.paddingY / 2, 'vertical');\n            if (childBBox.containsPoint(x, y)) {\n                return child.datum;\n            }\n            const distX = x - childBBox.x - this.item.paddingX / 2;\n            const distY = y - childBBox.y - this.item.paddingY / 2;\n            const dist = Math.pow(distX, 2) + Math.pow(distY, 2);\n            const toTheLeftTop = distX >= 0 && distY >= 0;\n            if (toTheLeftTop && dist < closestLeftTop.dist) {\n                closestLeftTop.dist = dist;\n                closestLeftTop.datum = child.datum;\n            }\n            visibleChildBBoxes.push(childBBox);\n        }\n        const pageBBox = BBox.merge(visibleChildBBoxes);\n        if (!pageBBox.containsPoint(x, y)) {\n            // We're not in-between legend items.\n            return undefined;\n        }\n        // Fallback to returning closest match to the left/up.\n        return closestLeftTop.datum;\n    }\n    computeBBox() {\n        return this.group.computeBBox();\n    }\n    computePagedBBox() {\n        const actualBBox = this.group.computeBBox();\n        if (this.pages.length <= 1) {\n            return actualBBox;\n        }\n        const [maxPageWidth, maxPageHeight] = this.maxPageSize;\n        actualBBox.height = Math.max(maxPageHeight, actualBBox.height);\n        actualBBox.width = Math.max(maxPageWidth, actualBBox.width);\n        return actualBBox;\n    }\n    checkLegendClick(event) {\n        const { listeners: { legendItemClick }, ctx: { dataService, highlightManager }, item: { toggleSeriesVisible }, } = this;\n        const { offsetX, offsetY } = event;\n        const legendBBox = this.computeBBox();\n        const pointerInsideLegend = this.group.visible && legendBBox.containsPoint(offsetX, offsetY);\n        const datum = this.getDatumForPoint(offsetX, offsetY);\n        if (!pointerInsideLegend || !datum) {\n            return;\n        }\n        const { id, itemId, enabled } = datum;\n        const chartSeries = dataService.getSeries();\n        const series = chartSeries.find((s) => s.id === id);\n        if (!series) {\n            return;\n        }\n        event.consume();\n        let newEnabled = enabled;\n        if (toggleSeriesVisible) {\n            newEnabled = !enabled;\n            this.ctx.chartEventManager.legendItemClick(series, itemId, newEnabled);\n        }\n        if (!newEnabled) {\n            highlightManager.updateHighlight(this.id);\n        }\n        else {\n            highlightManager.updateHighlight(this.id, {\n                series,\n                itemId,\n                datum: undefined,\n            });\n        }\n        this.ctx.updateService.update(ChartUpdateType.PROCESS_DATA, { forceNodeDataRefresh: true });\n        legendItemClick === null || legendItemClick === void 0 ? void 0 : legendItemClick({ type: 'click', enabled: newEnabled, itemId, seriesId: series.id });\n    }\n    checkLegendDoubleClick(event) {\n        var _a;\n        const { listeners: { legendItemDoubleClick }, ctx: { dataService }, item: { toggleSeriesVisible }, } = this;\n        const { offsetX, offsetY } = event;\n        // Integrated charts do not handle double click behaviour correctly due to multiple instances of the\n        // chart being created. See https://ag-grid.atlassian.net/browse/RTI-1381\n        if (this.ctx.mode === 'integrated') {\n            return;\n        }\n        const legendBBox = this.computeBBox();\n        const pointerInsideLegend = this.group.visible && legendBBox.containsPoint(offsetX, offsetY);\n        const datum = this.getDatumForPoint(offsetX, offsetY);\n        if (!pointerInsideLegend || !datum) {\n            return;\n        }\n        const { id, itemId, seriesId } = datum;\n        const chartSeries = dataService.getSeries();\n        const series = chartSeries.find((s) => s.id === id);\n        if (!series) {\n            return;\n        }\n        event.consume();\n        if (toggleSeriesVisible) {\n            const legendData = chartSeries.reduce((ls, s) => [\n                ...ls,\n                ...s.getLegendData().filter((d) => d.legendType === 'category'),\n            ], []);\n            const numVisibleItems = {};\n            legendData.forEach((d) => {\n                var _a;\n                var _b;\n                (_a = numVisibleItems[_b = d.seriesId]) !== null && _a !== void 0 ? _a : (numVisibleItems[_b] = 0);\n                if (d.enabled)\n                    numVisibleItems[d.seriesId]++;\n            });\n            const clickedItem = legendData.find((d) => d.itemId === itemId && d.seriesId === seriesId);\n            this.ctx.chartEventManager.legendItemDoubleClick(series, itemId, (_a = clickedItem === null || clickedItem === void 0 ? void 0 : clickedItem.enabled) !== null && _a !== void 0 ? _a : false, numVisibleItems);\n        }\n        this.ctx.updateService.update(ChartUpdateType.PROCESS_DATA, { forceNodeDataRefresh: true });\n        legendItemDoubleClick === null || legendItemDoubleClick === void 0 ? void 0 : legendItemDoubleClick({ type: 'dblclick', enabled: true, itemId, seriesId: series.id });\n    }\n    handleLegendMouseMove(event) {\n        var _a;\n        const { enabled, item: { toggleSeriesVisible }, listeners, } = this;\n        if (!enabled) {\n            return;\n        }\n        const legendBBox = this.computeBBox();\n        const { pageX, pageY, offsetX, offsetY } = event;\n        const pointerInsideLegend = this.group.visible && legendBBox.containsPoint(offsetX, offsetY);\n        if (!pointerInsideLegend) {\n            this.ctx.cursorManager.updateCursor(this.id);\n            this.ctx.highlightManager.updateHighlight(this.id);\n            this.ctx.tooltipManager.removeTooltip(this.id);\n            return;\n        }\n        // Prevent other handlers from consuming this event if it's generated inside the legend\n        // boundaries.\n        event.consume();\n        const datum = this.getDatumForPoint(offsetX, offsetY);\n        const pointerOverLegendDatum = pointerInsideLegend && datum !== undefined;\n        if (!pointerOverLegendDatum) {\n            this.ctx.cursorManager.updateCursor(this.id);\n            this.ctx.highlightManager.updateHighlight(this.id);\n            return;\n        }\n        const series = datum ? this.ctx.dataService.getSeries().find((series) => series.id === (datum === null || datum === void 0 ? void 0 : datum.id)) : undefined;\n        if (datum && this.truncatedItems.has((_a = datum.itemId) !== null && _a !== void 0 ? _a : datum.id)) {\n            const labelText = this.getItemLabel(datum);\n            this.ctx.tooltipManager.updateTooltip(this.id, { pageX, pageY, offsetX, offsetY, event, showArrow: false }, toTooltipHtml$1({ content: labelText }));\n        }\n        else {\n            this.ctx.tooltipManager.removeTooltip(this.id);\n        }\n        if (toggleSeriesVisible || listeners.legendItemClick != null || listeners.legendItemDoubleClick != null) {\n            this.ctx.cursorManager.updateCursor(this.id, 'pointer');\n        }\n        if ((datum === null || datum === void 0 ? void 0 : datum.enabled) && series) {\n            this.ctx.highlightManager.updateHighlight(this.id, {\n                series,\n                itemId: datum === null || datum === void 0 ? void 0 : datum.itemId,\n                datum: undefined,\n            });\n        }\n        else {\n            this.ctx.highlightManager.updateHighlight(this.id);\n        }\n    }\n    positionLegend(shrinkRect) {\n        const newShrinkRect = shrinkRect.clone();\n        if (!this.enabled || !this.data.length) {\n            return { shrinkRect: newShrinkRect };\n        }\n        const [legendWidth, legendHeight] = this.calculateLegendDimensions(shrinkRect);\n        this.group.translationX = 0;\n        this.group.translationY = 0;\n        this.performLayout(legendWidth, legendHeight);\n        const legendBBox = this.computePagedBBox();\n        const calculateTranslationPerpendicularDimension = () => {\n            switch (this.position) {\n                case 'top':\n                    return 0;\n                case 'bottom':\n                    return shrinkRect.height - legendBBox.height;\n                case 'left':\n                    return 0;\n                case 'right':\n                default:\n                    return shrinkRect.width - legendBBox.width;\n            }\n        };\n        if (this.visible) {\n            let translationX;\n            let translationY;\n            switch (this.position) {\n                case 'top':\n                case 'bottom':\n                    translationX = (shrinkRect.width - legendBBox.width) / 2;\n                    translationY = calculateTranslationPerpendicularDimension();\n                    newShrinkRect.shrink(legendBBox.height, this.position);\n                    break;\n                case 'left':\n                case 'right':\n                default:\n                    translationX = calculateTranslationPerpendicularDimension();\n                    translationY = (shrinkRect.height - legendBBox.height) / 2;\n                    newShrinkRect.shrink(legendBBox.width, this.position);\n            }\n            // Round off for pixel grid alignment to work properly.\n            this.group.translationX = Math.floor(-legendBBox.x + shrinkRect.x + translationX);\n            this.group.translationY = Math.floor(-legendBBox.y + shrinkRect.y + translationY);\n        }\n        if (this.visible && this.enabled && this.data.length) {\n            const legendPadding = this.spacing;\n            newShrinkRect.shrink(legendPadding, this.position);\n            const legendPositionedBBox = legendBBox.clone();\n            legendPositionedBBox.x += this.group.translationX;\n            legendPositionedBBox.y += this.group.translationY;\n            this.ctx.tooltipManager.updateExclusiveRect(this.id, legendPositionedBBox);\n        }\n        else {\n            this.ctx.tooltipManager.updateExclusiveRect(this.id);\n        }\n        return { shrinkRect: newShrinkRect };\n    }\n    calculateLegendDimensions(shrinkRect) {\n        const { width, height } = shrinkRect;\n        const aspectRatio = width / height;\n        const maxCoefficient = 0.5;\n        const minHeightCoefficient = 0.2;\n        const minWidthCoefficient = 0.25;\n        let legendWidth = 0;\n        let legendHeight = 0;\n        switch (this.position) {\n            case 'top':\n            case 'bottom':\n                // A horizontal legend should take maximum between 20 to 50 percent of the chart height if height is larger than width\n                // and maximum 20 percent of the chart height if height is smaller than width.\n                const heightCoefficient = aspectRatio < 1\n                    ? Math.min(maxCoefficient, minHeightCoefficient * (1 / aspectRatio))\n                    : minHeightCoefficient;\n                legendWidth = this.maxWidth ? Math.min(this.maxWidth, width) : width;\n                legendHeight = this.maxHeight\n                    ? Math.min(this.maxHeight, height)\n                    : Math.round(height * heightCoefficient);\n                break;\n            case 'left':\n            case 'right':\n            default:\n                // A vertical legend should take maximum between 25 to 50 percent of the chart width if width is larger than height\n                // and maximum 25 percent of the chart width if width is smaller than height.\n                const widthCoefficient = aspectRatio > 1 ? Math.min(maxCoefficient, minWidthCoefficient * aspectRatio) : minWidthCoefficient;\n                legendWidth = this.maxWidth ? Math.min(this.maxWidth, width) : Math.round(width * widthCoefficient);\n                legendHeight = this.maxHeight ? Math.min(this.maxHeight, height) : height;\n        }\n        return [legendWidth, legendHeight];\n    }\n}\nLegend.className = 'Legend';\n__decorate$1A([\n    Validate(BOOLEAN)\n], Legend.prototype, \"_enabled\", void 0);\n__decorate$1A([\n    Validate(POSITION)\n], Legend.prototype, \"position\", void 0);\n__decorate$1A([\n    Validate(OPT_NUMBER(0))\n], Legend.prototype, \"maxWidth\", void 0);\n__decorate$1A([\n    Validate(OPT_NUMBER(0))\n], Legend.prototype, \"maxHeight\", void 0);\n__decorate$1A([\n    Validate(OPT_BOOLEAN)\n], Legend.prototype, \"reverseOrder\", void 0);\n__decorate$1A([\n    Validate(OPT_ORIENTATION)\n], Legend.prototype, \"orientation\", void 0);\n__decorate$1A([\n    Validate(NUMBER(0))\n], Legend.prototype, \"spacing\", void 0);\n\nconst LEGEND_FACTORIES = {\n    category: Legend,\n};\nfunction registerLegend(type, ctr) {\n    if (LEGEND_FACTORIES[type]) {\n        throw new Error(`AG Charts - already registered legend type: ${type}`);\n    }\n    LEGEND_FACTORIES[type] = ctr;\n}\nfunction getLegend(type, ctx) {\n    if (LEGEND_FACTORIES[type]) {\n        return new LEGEND_FACTORIES[type](ctx);\n    }\n    throw new Error(`AG Charts - unknown legend type: ${type}`);\n}\n\nclass CallbackCache {\n    constructor() {\n        this.cache = new Map();\n    }\n    call(f, ...params) {\n        let serialisedParams;\n        let paramCache = this.cache.get(f);\n        const invoke = () => {\n            try {\n                const result = f(...params);\n                if (paramCache && serialisedParams != null) {\n                    paramCache.set(serialisedParams, result);\n                }\n                return result;\n            }\n            catch (e) {\n                Logger.warnOnce(`User callback errored, ignoring`, e);\n                return undefined;\n            }\n        };\n        try {\n            serialisedParams = JSON.stringify(params);\n        }\n        catch (e) {\n            // Unable to serialise params!\n            // No caching possible.\n            return invoke();\n        }\n        if (paramCache == null) {\n            paramCache = new Map();\n            this.cache.set(f, paramCache);\n        }\n        if (!paramCache.has(serialisedParams)) {\n            return invoke();\n        }\n        return paramCache.get(serialisedParams);\n    }\n    invalidateCache() {\n        this.cache = new Map();\n    }\n}\n\nvar __decorate$1z = ( false) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nvar __awaiter$b = ( false) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nclass Chart extends Observable {\n    constructor(document = window.document, overrideDevicePixelRatio, resources) {\n        var _a;\n        super();\n        this.id = createId$1(this);\n        this.processedOptions = {};\n        this.userOptions = {};\n        this.queuedUserOptions = [];\n        this.seriesRoot = new Group({ name: `${this.id}-Series-root` });\n        this.extraDebugStats = {};\n        this._container = undefined;\n        this.data = [];\n        this.padding = new Padding$1(20);\n        this.seriesAreaPadding = new Padding$1(0);\n        this.title = undefined;\n        this.subtitle = undefined;\n        this.footnote = undefined;\n        this.mode = 'standalone';\n        this._destroyed = false;\n        this.modules = {};\n        this.legendModules = {};\n        this._pendingFactoryUpdates = [];\n        this._performUpdateNoRenderCount = 0;\n        this._performUpdateType = ChartUpdateType.NONE;\n        this.seriesToUpdate = new Set();\n        this.performUpdateTrigger = debouncedCallback(({ count }) => __awaiter$b(this, void 0, void 0, function* () {\n            if (this._destroyed)\n                return;\n            try {\n                yield this.performUpdate(count);\n            }\n            catch (error) {\n                this._lastPerformUpdateError = error;\n                Logger.error('update error', error);\n            }\n        }));\n        this._axes = [];\n        this._series = [];\n        this.applyLegendOptions = undefined;\n        this.lastInteractionEvent = undefined;\n        this.pointerScheduler = debouncedAnimationFrame(() => {\n            if (this.lastInteractionEvent) {\n                this.handlePointer(this.lastInteractionEvent);\n            }\n            this.lastInteractionEvent = undefined;\n        });\n        this.onSeriesNodeClick = (event) => {\n            const seriesNodeClickEvent = Object.assign(Object.assign({}, event), { type: 'seriesNodeClick' });\n            Object.defineProperty(seriesNodeClickEvent, 'series', {\n                enumerable: false,\n                // Should display the deprecation warning\n                get: () => event.series,\n            });\n            this.fireEvent(seriesNodeClickEvent);\n        };\n        this.onSeriesNodeDoubleClick = (event) => {\n            const seriesNodeDoubleClick = Object.assign(Object.assign({}, event), { type: 'seriesNodeDoubleClick' });\n            this.fireEvent(seriesNodeDoubleClick);\n        };\n        const scene = resources === null || resources === void 0 ? void 0 : resources.scene;\n        const element = (_a = resources === null || resources === void 0 ? void 0 : resources.element) !== null && _a !== void 0 ? _a : document.createElement('div');\n        const container = resources === null || resources === void 0 ? void 0 : resources.container;\n        const root = new Group({ name: 'root' });\n        // Prevent the scene from rendering chart components in an invalid state\n        // (before first layout is performed).\n        root.visible = false;\n        root.append(this.seriesRoot);\n        this.axisGroup = new Group({ name: 'Axes', layer: true, zIndex: Layers.AXIS_ZINDEX });\n        root.appendChild(this.axisGroup);\n        this.element = element;\n        element.classList.add('ag-chart-wrapper');\n        element.style.position = 'relative';\n        this.scene = scene !== null && scene !== void 0 ? scene : new Scene({ document, overrideDevicePixelRatio });\n        this.debug = false;\n        this.scene.debug.consoleLog = false;\n        this.scene.root = root;\n        this.scene.container = element;\n        this.autoSize = true;\n        this.chartEventManager = new ChartEventManager();\n        this.cursorManager = new CursorManager(element);\n        this.highlightManager = new HighlightManager();\n        this.interactionManager = new InteractionManager(element);\n        this.zoomManager = new ZoomManager();\n        this.dataService = new DataService(() => this.series);\n        this.layoutService = new LayoutService();\n        this.updateService = new UpdateService((type = ChartUpdateType.FULL, { forceNodeDataRefresh }) => this.update(type, { forceNodeDataRefresh }));\n        this.callbackCache = new CallbackCache();\n        this.animationManager = new AnimationManager(this.interactionManager);\n        this.animationManager.skipAnimations = true;\n        this.animationManager.play();\n        this.tooltip = new Tooltip(this.scene.canvas.element, document, document.body);\n        this.tooltipManager = new TooltipManager(this.tooltip, this.interactionManager);\n        this.overlays = new ChartOverlays(this.element);\n        this.highlight = new ChartHighlight();\n        this.container = container;\n        SizeMonitor.observe(this.element, (size) => {\n            var _a;\n            const { width, height } = size;\n            if (!this.autoSize) {\n                return;\n            }\n            if (width === 0 && height === 0) {\n                return;\n            }\n            const [autoWidth = 0, authHeight = 0] = (_a = this._lastAutoSize) !== null && _a !== void 0 ? _a : [];\n            if (autoWidth === width && authHeight === height) {\n                return;\n            }\n            this._lastAutoSize = [width, height];\n            this.resize();\n        });\n        this.layoutService.addListener('start-layout', (e) => this.positionPadding(e.shrinkRect));\n        this.layoutService.addListener('start-layout', (e) => this.positionCaptions(e.shrinkRect));\n        // Add interaction listeners last so child components are registered first.\n        this.interactionManager.addListener('click', (event) => this.onClick(event));\n        this.interactionManager.addListener('dblclick', (event) => this.onDoubleClick(event));\n        this.interactionManager.addListener('hover', (event) => this.onMouseMove(event));\n        this.interactionManager.addListener('leave', (event) => this.onLeave(event));\n        this.interactionManager.addListener('page-left', () => this.destroy());\n        this.interactionManager.addListener('wheel', () => this.disablePointer());\n        this.animationManager.addListener('animation-frame', (_) => {\n            this.update(ChartUpdateType.SCENE_RENDER);\n        });\n        this.highlightManager.addListener('highlight-change', (event) => this.changeHighlightDatum(event));\n        this.zoomManager.addListener('zoom-change', (_) => this.update(ChartUpdateType.PROCESS_DATA, { forceNodeDataRefresh: true }));\n        this.attachLegend('category');\n    }\n    getOptions() {\n        var _a;\n        const { queuedUserOptions } = this;\n        const lastUpdateOptions = (_a = queuedUserOptions[queuedUserOptions.length - 1]) !== null && _a !== void 0 ? _a : this.userOptions;\n        return jsonMerge([lastUpdateOptions]);\n    }\n    set container(value) {\n        if (this._container !== value) {\n            const { parentNode } = this.element;\n            if (parentNode != null) {\n                parentNode.removeChild(this.element);\n            }\n            if (value && !this.destroyed) {\n                value.appendChild(this.element);\n            }\n            this._container = value;\n        }\n    }\n    get container() {\n        return this._container;\n    }\n    autoSizeChanged(value) {\n        const { style } = this.element;\n        if (value) {\n            style.display = 'block';\n            style.width = '100%';\n            style.height = '100%';\n            if (!this._lastAutoSize) {\n                return;\n            }\n            this.resize();\n        }\n        else {\n            style.display = 'inline-block';\n            style.width = 'auto';\n            style.height = 'auto';\n        }\n    }\n    download(fileName, fileFormat) {\n        this.scene.download(fileName, fileFormat);\n    }\n    get destroyed() {\n        return this._destroyed;\n    }\n    addModule(module) {\n        if (this.modules[module.optionsKey] != null) {\n            throw new Error('AG Charts - module already initialised: ' + module.optionsKey);\n        }\n        const moduleInstance = new module.instanceConstructor(this.getModuleContext());\n        this.modules[module.optionsKey] = { instance: moduleInstance };\n        this[module.optionsKey] = moduleInstance;\n    }\n    removeModule(module) {\n        var _a, _b;\n        (_b = (_a = this.modules[module.optionsKey]) === null || _a === void 0 ? void 0 : _a.instance) === null || _b === void 0 ? void 0 : _b.destroy();\n        delete this.modules[module.optionsKey];\n        delete this[module.optionsKey];\n    }\n    isModuleEnabled(module) {\n        return this.modules[module.optionsKey] != null;\n    }\n    getModuleContext() {\n        const { scene, animationManager, chartEventManager, cursorManager, highlightManager, interactionManager, tooltipManager, zoomManager, dataService, layoutService, updateService, mode, callbackCache, } = this;\n        return {\n            scene,\n            animationManager,\n            chartEventManager,\n            cursorManager,\n            highlightManager,\n            interactionManager,\n            tooltipManager,\n            zoomManager,\n            dataService,\n            layoutService,\n            updateService,\n            mode,\n            callbackCache,\n        };\n    }\n    destroy(opts) {\n        var _a;\n        if (this._destroyed) {\n            return;\n        }\n        const keepTransferableResources = opts === null || opts === void 0 ? void 0 : opts.keepTransferableResources;\n        let result = undefined;\n        this._performUpdateType = ChartUpdateType.NONE;\n        this._pendingFactoryUpdates.splice(0);\n        this.tooltipManager.destroy();\n        this.tooltip.destroy();\n        (_a = this.legend) === null || _a === void 0 ? void 0 : _a.destroy();\n        this.overlays.noData.hide();\n        SizeMonitor.unobserve(this.element);\n        for (const [key, module] of Object.entries(this.modules)) {\n            module.instance.destroy();\n            delete this.modules[key];\n            delete this[key];\n        }\n        this.interactionManager.destroy();\n        if (keepTransferableResources) {\n            this.scene.strip();\n            result = { container: this.container, scene: this.scene, element: this.element };\n        }\n        else {\n            this.scene.destroy();\n            this.container = undefined;\n        }\n        this.series.forEach((s) => s.destroy());\n        this.series = [];\n        this.axes.forEach((a) => a.destroy());\n        this.axes = [];\n        this.callbackCache.invalidateCache();\n        this._destroyed = true;\n        return result;\n    }\n    log(opts) {\n        if (this.debug) {\n            Logger.debug(opts);\n        }\n    }\n    disablePointer(highlightOnly = false) {\n        if (!highlightOnly) {\n            this.tooltipManager.removeTooltip(this.id);\n        }\n        this.highlightManager.updateHighlight(this.id);\n        if (this.lastInteractionEvent) {\n            this.lastInteractionEvent = undefined;\n        }\n    }\n    requestFactoryUpdate(cb) {\n        const callbacks = this._pendingFactoryUpdates;\n        const count = callbacks.length;\n        if (count === 0) {\n            callbacks.push(cb);\n            this._processCallbacks().catch((e) => Logger.errorOnce(e));\n        }\n        else {\n            // Factory callback process already running, the callback will be invoked asynchronously.\n            // Clear the queue after the first callback to prevent unnecessary re-renderings.\n            callbacks.splice(1, count - 1, cb);\n        }\n    }\n    _processCallbacks() {\n        return __awaiter$b(this, void 0, void 0, function* () {\n            const callbacks = this._pendingFactoryUpdates;\n            while (callbacks.length > 0) {\n                if (this.updatePending) {\n                    yield sleep(1);\n                    continue; // Make sure to check queue has an item before continuing.\n                }\n                try {\n                    yield callbacks[0]();\n                    this.callbackCache.invalidateCache();\n                }\n                catch (e) {\n                    Logger.error('update error', e);\n                }\n                callbacks.shift();\n            }\n        });\n    }\n    get performUpdateType() {\n        return this._performUpdateType;\n    }\n    get updatePending() {\n        return this._performUpdateType !== ChartUpdateType.NONE || this.lastInteractionEvent != null;\n    }\n    get lastPerformUpdateError() {\n        return this._lastPerformUpdateError;\n    }\n    awaitUpdateCompletion() {\n        return __awaiter$b(this, void 0, void 0, function* () {\n            yield this.performUpdateTrigger.await();\n        });\n    }\n    update(type = ChartUpdateType.FULL, opts) {\n        const { forceNodeDataRefresh = false, seriesToUpdate = this.series } = opts !== null && opts !== void 0 ? opts : {};\n        if (forceNodeDataRefresh) {\n            this.series.forEach((series) => series.markNodeDataDirty());\n        }\n        for (const series of seriesToUpdate) {\n            this.seriesToUpdate.add(series);\n        }\n        if (type < this._performUpdateType) {\n            this._performUpdateType = type;\n            this.performUpdateTrigger.schedule();\n        }\n    }\n    performUpdate(count) {\n        var _a;\n        return __awaiter$b(this, void 0, void 0, function* () {\n            const { _performUpdateType: performUpdateType, extraDebugStats } = this;\n            const splits = [performance.now()];\n            switch (performUpdateType) {\n                case ChartUpdateType.FULL:\n                case ChartUpdateType.PROCESS_DATA:\n                    yield this.processData();\n                    this.disablePointer(true);\n                    splits.push(performance.now());\n                // eslint-disable-next-line no-fallthrough\n                case ChartUpdateType.PERFORM_LAYOUT:\n                    if (this.autoSize && !this._lastAutoSize) {\n                        const count = this._performUpdateNoRenderCount++;\n                        if (count < 5) {\n                            // Reschedule if canvas size hasn't been set yet to avoid a race.\n                            this._performUpdateType = ChartUpdateType.PERFORM_LAYOUT;\n                            this.performUpdateTrigger.schedule();\n                            break;\n                        }\n                        // After several failed passes, continue and accept there maybe a redundant\n                        // render. Sometimes this case happens when we already have the correct\n                        // width/height, and we end up never rendering the chart in that scenario.\n                    }\n                    this._performUpdateNoRenderCount = 0;\n                    yield this.performLayout();\n                    this.handleOverlays();\n                    splits.push(performance.now());\n                // eslint-disable-next-line no-fallthrough\n                case ChartUpdateType.SERIES_UPDATE:\n                    const { seriesRect } = this;\n                    const seriesUpdates = [...this.seriesToUpdate].map((series) => series.update({ seriesRect }));\n                    this.seriesToUpdate.clear();\n                    yield Promise.all(seriesUpdates);\n                    splits.push(performance.now());\n                // eslint-disable-next-line no-fallthrough\n                case ChartUpdateType.TOOLTIP_RECALCULATION:\n                    const tooltipMeta = this.tooltipManager.getTooltipMeta(this.id);\n                    if (performUpdateType < ChartUpdateType.SERIES_UPDATE && ((_a = tooltipMeta === null || tooltipMeta === void 0 ? void 0 : tooltipMeta.event) === null || _a === void 0 ? void 0 : _a.type) === 'hover') {\n                        this.handlePointer(tooltipMeta.event);\n                    }\n                // eslint-disable-next-line no-fallthrough\n                case ChartUpdateType.SCENE_RENDER:\n                    yield this.scene.render({ debugSplitTimes: splits, extraDebugStats });\n                    this.extraDebugStats = {};\n                // eslint-disable-next-line no-fallthrough\n                case ChartUpdateType.NONE:\n                    // Do nothing.\n                    this._performUpdateType = ChartUpdateType.NONE;\n            }\n            const end = performance.now();\n            this.log({\n                chart: this,\n                durationMs: Math.round((end - splits[0]) * 100) / 100,\n                count,\n                performUpdateType: ChartUpdateType[performUpdateType],\n            });\n        });\n    }\n    set axes(values) {\n        const removedAxes = new Set();\n        this._axes.forEach((axis) => {\n            axis.detachAxis(this.axisGroup);\n            removedAxes.add(axis);\n        });\n        // make linked axes go after the regular ones (simulates stable sort by `linkedTo` property)\n        this._axes = values.filter((a) => !a.linkedTo).concat(values.filter((a) => a.linkedTo));\n        this._axes.forEach((axis) => {\n            axis.attachAxis(this.axisGroup);\n            removedAxes.delete(axis);\n        });\n        removedAxes.forEach((axis) => axis.destroy());\n    }\n    get axes() {\n        return this._axes;\n    }\n    set series(values) {\n        this.removeAllSeries();\n        values.forEach((series) => this.addSeries(series));\n    }\n    get series() {\n        return this._series;\n    }\n    addSeries(series, before) {\n        const { series: allSeries, seriesRoot } = this;\n        const canAdd = allSeries.indexOf(series) < 0;\n        if (canAdd) {\n            const beforeIndex = before ? allSeries.indexOf(before) : -1;\n            if (beforeIndex >= 0) {\n                allSeries.splice(beforeIndex, 0, series);\n                seriesRoot.insertBefore(series.rootGroup, before.rootGroup);\n            }\n            else {\n                allSeries.push(series);\n                seriesRoot.append(series.rootGroup);\n            }\n            this.initSeries(series);\n            return true;\n        }\n        return false;\n    }\n    initSeries(series) {\n        series.chart = this;\n        series.highlightManager = this.highlightManager;\n        series.animationManager = this.animationManager;\n        if (!series.data) {\n            series.data = this.data;\n        }\n        this.addSeriesListeners(series);\n        series.chartEventManager = this.chartEventManager;\n        series.addChartEventListeners();\n    }\n    freeSeries(series) {\n        series.chart = undefined;\n        series.removeEventListener('nodeClick', this.onSeriesNodeClick);\n        series.removeEventListener('nodeDoubleClick', this.onSeriesNodeDoubleClick);\n    }\n    removeAllSeries() {\n        this.series.forEach((series) => {\n            this.freeSeries(series);\n            this.seriesRoot.removeChild(series.rootGroup);\n        });\n        this._series = []; // using `_series` instead of `series` to prevent infinite recursion\n    }\n    addSeriesListeners(series) {\n        if (this.hasEventListener('seriesNodeClick')) {\n            series.addEventListener('nodeClick', this.onSeriesNodeClick);\n        }\n        if (this.hasEventListener('seriesNodeDoubleClick')) {\n            series.addEventListener('nodeDoubleClick', this.onSeriesNodeDoubleClick);\n        }\n    }\n    updateAllSeriesListeners() {\n        this.series.forEach((series) => {\n            series.removeEventListener('nodeClick', this.onSeriesNodeClick);\n            series.removeEventListener('nodeDoubleClick', this.onSeriesNodeDoubleClick);\n            this.addSeriesListeners(series);\n        });\n    }\n    assignSeriesToAxes() {\n        this.axes.forEach((axis) => {\n            axis.boundSeries = this.series.filter((s) => {\n                const seriesAxis = axis.direction === ChartAxisDirection.X ? s.xAxis : s.yAxis;\n                return seriesAxis === axis;\n            });\n        });\n    }\n    assignAxesToSeries(force = false) {\n        // This method has to run before `assignSeriesToAxes`.\n        const directionToAxesMap = {};\n        this.axes.forEach((axis) => {\n            var _a;\n            const direction = axis.direction;\n            const directionAxes = ((_a = directionToAxesMap[direction]) !== null && _a !== void 0 ? _a : (directionToAxesMap[direction] = []));\n            directionAxes.push(axis);\n        });\n        this.series.forEach((series) => {\n            series.directions.forEach((direction) => {\n                const currentAxis = direction === ChartAxisDirection.X ? series.xAxis : series.yAxis;\n                if (currentAxis && !force) {\n                    return;\n                }\n                const directionAxes = directionToAxesMap[direction];\n                if (!directionAxes) {\n                    Logger.warn(`no available axis for direction [${direction}]; check series and axes configuration.`);\n                    return;\n                }\n                const seriesKeys = series.getKeys(direction);\n                const newAxis = this.findMatchingAxis(directionAxes, series.getKeys(direction));\n                if (!newAxis) {\n                    Logger.warn(`no matching axis for direction [${direction}] and keys [${seriesKeys}]; check series and axes configuration.`);\n                    return;\n                }\n                if (direction === ChartAxisDirection.X) {\n                    series.xAxis = newAxis;\n                }\n                else {\n                    series.yAxis = newAxis;\n                }\n            });\n        });\n    }\n    findMatchingAxis(directionAxes, directionKeys) {\n        for (const axis of directionAxes) {\n            const axisKeys = axis.keys;\n            if (!axisKeys.length) {\n                return axis;\n            }\n            if (!directionKeys) {\n                continue;\n            }\n            for (const directionKey of directionKeys) {\n                if (axisKeys.indexOf(directionKey) >= 0) {\n                    return axis;\n                }\n            }\n        }\n    }\n    resize(width, height) {\n        var _a, _b, _c, _d;\n        width !== null && width !== void 0 ? width : (width = (_a = this.width) !== null && _a !== void 0 ? _a : (this.autoSize ? (_b = this._lastAutoSize) === null || _b === void 0 ? void 0 : _b[0] : this.scene.canvas.width));\n        height !== null && height !== void 0 ? height : (height = (_c = this.height) !== null && _c !== void 0 ? _c : (this.autoSize ? (_d = this._lastAutoSize) === null || _d === void 0 ? void 0 : _d[1] : this.scene.canvas.height));\n        if (!width || !height || !Number.isFinite(width) || !Number.isFinite(height))\n            return;\n        if (this.scene.resize(width, height)) {\n            this.disablePointer();\n            this.update(ChartUpdateType.PERFORM_LAYOUT, { forceNodeDataRefresh: true });\n        }\n    }\n    processData() {\n        return __awaiter$b(this, void 0, void 0, function* () {\n            if (this.axes.length > 0 || this.series.some((s) => s instanceof CartesianSeries)) {\n                this.assignAxesToSeries(true);\n                this.assignSeriesToAxes();\n            }\n            yield Promise.all(this.series.map((s) => s.processData()));\n            yield this.updateLegend();\n        });\n    }\n    placeLabels() {\n        const visibleSeries = [];\n        const data = [];\n        for (const series of this.series) {\n            if (!series.visible) {\n                continue;\n            }\n            const labelData = series.getLabelData();\n            if (!(labelData && isPointLabelDatum(labelData[0]))) {\n                continue;\n            }\n            data.push(labelData);\n            visibleSeries.push(series);\n        }\n        const { seriesRect } = this;\n        const labels = seriesRect && data.length > 0\n            ? placeLabels(data, { x: 0, y: 0, width: seriesRect.width, height: seriesRect.height })\n            : [];\n        return new Map(labels.map((l, i) => [visibleSeries[i], l]));\n    }\n    attachLegend(legendType) {\n        var _a;\n        if (this.legendType === legendType) {\n            return;\n        }\n        (_a = this.legend) === null || _a === void 0 ? void 0 : _a.destroy();\n        this.legend = undefined;\n        const ctx = this.getModuleContext();\n        this.legend = getLegend(legendType, ctx);\n        this.legend.attachLegend(this.scene.root);\n        this.legendType = legendType;\n    }\n    setLegendInit(initLegend) {\n        this.applyLegendOptions = initLegend;\n    }\n    updateLegend() {\n        var _a;\n        return __awaiter$b(this, void 0, void 0, function* () {\n            const legendData = [];\n            this.series\n                .filter((s) => s.showInLegend)\n                .forEach((series) => {\n                const data = series.getLegendData();\n                legendData.push(...data);\n            });\n            const legendType = legendData.length > 0 ? legendData[0].legendType : 'category';\n            this.attachLegend(legendType);\n            (_a = this.applyLegendOptions) === null || _a === void 0 ? void 0 : _a.call(this, this.legend);\n            if (legendType === 'category') {\n                this.validateLegendData(legendData);\n            }\n            this.legend.data = legendData;\n        });\n    }\n    validateLegendData(legendData) {\n        // Validate each series that shares a legend item label uses the same fill colour\n        const labelMarkerFills = {};\n        legendData.forEach((d) => {\n            var _a, _b, _c;\n            var _d, _e;\n            const seriesType = (_a = this.series.find((s) => s.id === d.seriesId)) === null || _a === void 0 ? void 0 : _a.type;\n            if (!seriesType)\n                return;\n            const dc = d;\n            (_b = labelMarkerFills[seriesType]) !== null && _b !== void 0 ? _b : (labelMarkerFills[seriesType] = { [dc.label.text]: new Set() });\n            (_c = (_d = labelMarkerFills[seriesType])[_e = dc.label.text]) !== null && _c !== void 0 ? _c : (_d[_e] = new Set());\n            if (dc.marker.fill != null) {\n                labelMarkerFills[seriesType][dc.label.text].add(dc.marker.fill);\n            }\n        });\n        Object.keys(labelMarkerFills).forEach((seriesType) => {\n            Object.keys(labelMarkerFills[seriesType]).forEach((name) => {\n                const fills = labelMarkerFills[seriesType][name];\n                if (fills.size > 1) {\n                    Logger.warnOnce(`legend item '${name}' has multiple fill colors, this may cause unexpected behaviour.`);\n                }\n            });\n        });\n    }\n    performLayout() {\n        return __awaiter$b(this, void 0, void 0, function* () {\n            this.scene.root.visible = true;\n            const { scene: { width, height }, } = this;\n            let shrinkRect = new BBox(0, 0, width, height);\n            ({ shrinkRect } = this.layoutService.dispatchPerformLayout('start-layout', { shrinkRect }));\n            ({ shrinkRect } = this.layoutService.dispatchPerformLayout('before-series', { shrinkRect }));\n            return shrinkRect;\n        });\n    }\n    positionPadding(shrinkRect) {\n        const { padding } = this;\n        shrinkRect.shrink(padding.left, 'left');\n        shrinkRect.shrink(padding.top, 'top');\n        shrinkRect.shrink(padding.right, 'right');\n        shrinkRect.shrink(padding.bottom, 'bottom');\n        return { shrinkRect };\n    }\n    positionCaptions(shrinkRect) {\n        var _a;\n        const { title, subtitle, footnote } = this;\n        const newShrinkRect = shrinkRect.clone();\n        const updateCaption = (caption) => {\n            var _a;\n            const defaultCaptionHeight = shrinkRect.height / 10;\n            const captionLineHeight = (_a = caption.lineHeight) !== null && _a !== void 0 ? _a : caption.fontSize * Text.defaultLineHeightRatio;\n            const maxWidth = shrinkRect.width;\n            const maxHeight = Math.max(captionLineHeight, defaultCaptionHeight);\n            caption.computeTextWrap(maxWidth, maxHeight);\n        };\n        const positionTopAndShrinkBBox = (caption) => {\n            var _a;\n            const baseY = newShrinkRect.y;\n            caption.node.x = newShrinkRect.x + newShrinkRect.width / 2;\n            caption.node.y = baseY;\n            caption.node.textBaseline = 'top';\n            updateCaption(caption);\n            const bbox = caption.node.computeBBox();\n            // As the bbox (x,y) ends up at a different location than specified above, we need to\n            // take it into consideration when calculating how much space needs to be reserved to\n            // accommodate the caption.\n            const bboxHeight = Math.ceil(bbox.y - baseY + bbox.height + ((_a = caption.spacing) !== null && _a !== void 0 ? _a : 0));\n            newShrinkRect.shrink(bboxHeight, 'top');\n        };\n        const positionBottomAndShrinkBBox = (caption) => {\n            var _a;\n            const baseY = newShrinkRect.y + newShrinkRect.height;\n            caption.node.x = newShrinkRect.x + newShrinkRect.width / 2;\n            caption.node.y = baseY;\n            caption.node.textBaseline = 'bottom';\n            updateCaption(caption);\n            const bbox = caption.node.computeBBox();\n            const bboxHeight = Math.ceil(baseY - bbox.y + ((_a = caption.spacing) !== null && _a !== void 0 ? _a : 0));\n            newShrinkRect.shrink(bboxHeight, 'bottom');\n        };\n        if (title) {\n            title.node.visible = title.enabled;\n            if (title.node.visible) {\n                positionTopAndShrinkBBox(title);\n            }\n        }\n        if (subtitle) {\n            subtitle.node.visible = (_a = ((title === null || title === void 0 ? void 0 : title.enabled) && subtitle.enabled)) !== null && _a !== void 0 ? _a : false;\n            if (subtitle.node.visible) {\n                positionTopAndShrinkBBox(subtitle);\n            }\n        }\n        if (footnote) {\n            footnote.node.visible = footnote.enabled;\n            if (footnote.node.visible) {\n                positionBottomAndShrinkBBox(footnote);\n            }\n        }\n        return { shrinkRect: newShrinkRect };\n    }\n    getSeriesRect() {\n        return this.seriesRect;\n    }\n    // x/y are local canvas coordinates in CSS pixels, not actual pixels\n    pickSeriesNode(point, exactMatchOnly, maxDistance) {\n        var _a, _b;\n        const start = performance.now();\n        // Disable 'nearest match' options if looking for exact matches only\n        const pickModes = exactMatchOnly ? [SeriesNodePickMode.EXACT_SHAPE_MATCH] : undefined;\n        // Iterate through series in reverse, as later declared series appears on top of earlier\n        // declared series.\n        const reverseSeries = [...this.series].reverse();\n        let result = undefined;\n        for (const series of reverseSeries) {\n            if (!series.visible || !series.rootGroup.visible) {\n                continue;\n            }\n            const { match, distance } = (_a = series.pickNode(point, pickModes)) !== null && _a !== void 0 ? _a : {};\n            if (!match || distance == null) {\n                continue;\n            }\n            if ((!result || result.distance > distance) && distance <= (maxDistance !== null && maxDistance !== void 0 ? maxDistance : Infinity)) {\n                result = { series, distance, datum: match };\n            }\n            if (distance === 0) {\n                break;\n            }\n        }\n        this.extraDebugStats['pickSeriesNode'] = Math.round(((_b = this.extraDebugStats['pickSeriesNode']) !== null && _b !== void 0 ? _b : 0) + (performance.now() - start));\n        return result;\n    }\n    onMouseMove(event) {\n        this.lastInteractionEvent = event;\n        this.pointerScheduler.schedule();\n        this.extraDebugStats['mouseX'] = event.offsetX;\n        this.extraDebugStats['mouseY'] = event.offsetY;\n        this.update(ChartUpdateType.SCENE_RENDER);\n    }\n    onLeave(event) {\n        if (this.tooltip.pointerLeftOntoTooltip(event)) {\n            return;\n        }\n        this.disablePointer();\n    }\n    handlePointer(event) {\n        const { lastPick, hoverRect } = this;\n        const { offsetX, offsetY } = event;\n        const disablePointer = (highlightOnly = false) => {\n            if (lastPick) {\n                // Cursor moved from a non-marker node to empty space.\n                this.disablePointer(highlightOnly);\n            }\n        };\n        if (!(hoverRect === null || hoverRect === void 0 ? void 0 : hoverRect.containsPoint(offsetX, offsetY))) {\n            disablePointer();\n            return;\n        }\n        // Handle node highlighting and tooltip toggling when pointer within `tooltip.range`\n        this.handlePointerTooltip(event, disablePointer);\n        // Handle node highlighting and mouse cursor when pointer withing `series[].nodeClickRange`\n        this.handlePointerNode(event);\n    }\n    handlePointerTooltip(event, disablePointer) {\n        var _a, _b;\n        const { lastPick, tooltip } = this;\n        const { range } = tooltip;\n        const { pageX, pageY, offsetX, offsetY } = event;\n        let pixelRange;\n        if (typeof range === 'number' && Number.isFinite(range)) {\n            pixelRange = range;\n        }\n        const pick = this.pickSeriesNode({ x: offsetX, y: offsetY }, range === 'exact', pixelRange);\n        if (!pick) {\n            this.tooltipManager.updateTooltip(this.id);\n            if (this.highlight.range === 'tooltip')\n                disablePointer(true);\n            return;\n        }\n        const isNewDatum = this.highlight.range === 'node' || !lastPick || lastPick.datum !== pick.datum;\n        let html;\n        if (isNewDatum) {\n            html = pick.series.getTooltipHtml(pick.datum);\n            if (this.highlight.range === 'tooltip') {\n                this.highlightManager.updateHighlight(this.id, pick.datum);\n            }\n        }\n        else if (lastPick) {\n            lastPick.event = event.sourceEvent;\n        }\n        const isPixelRange = pixelRange != null;\n        const tooltipEnabled = this.tooltip.enabled && pick.series.tooltip.enabled;\n        const exactlyMatched = range === 'exact' && pick.distance === 0;\n        const rangeMatched = range === 'nearest' || isPixelRange || exactlyMatched;\n        const shouldUpdateTooltip = tooltipEnabled && rangeMatched && (!isNewDatum || html !== undefined);\n        const position = {\n            xOffset: pick.datum.series.tooltip.position.xOffset,\n            yOffset: pick.datum.series.tooltip.position.yOffset,\n        };\n        const meta = this.mergePointerDatum({ pageX, pageY, offsetX, offsetY, event: event, showArrow: pick.series.tooltip.showArrow, position }, pick.datum);\n        meta.enableInteraction = (_b = (_a = pick.series.tooltip.interaction) === null || _a === void 0 ? void 0 : _a.enabled) !== null && _b !== void 0 ? _b : false;\n        if (shouldUpdateTooltip) {\n            this.tooltipManager.updateTooltip(this.id, meta, html);\n        }\n    }\n    handlePointerNode(event) {\n        const found = this.checkSeriesNodeRange(event, (series, datum) => {\n            if (series.hasEventListener('nodeClick') || series.hasEventListener('nodeDoubleClick')) {\n                this.cursorManager.updateCursor('chart', 'pointer');\n            }\n            if (this.highlight.range === 'node') {\n                this.highlightManager.updateHighlight(this.id, datum);\n            }\n        });\n        if (!found) {\n            this.cursorManager.updateCursor('chart');\n            if (this.highlight.range === 'node') {\n                this.highlightManager.updateHighlight(this.id);\n            }\n        }\n    }\n    onClick(event) {\n        if (this.checkSeriesNodeClick(event)) {\n            this.update(ChartUpdateType.SERIES_UPDATE);\n            return;\n        }\n        this.fireEvent({\n            type: 'click',\n            event: event.sourceEvent,\n        });\n    }\n    onDoubleClick(event) {\n        if (this.checkSeriesNodeDoubleClick(event)) {\n            this.update(ChartUpdateType.SERIES_UPDATE);\n            return;\n        }\n        this.fireEvent({\n            type: 'doubleClick',\n            event: event.sourceEvent,\n        });\n    }\n    checkSeriesNodeClick(event) {\n        return this.checkSeriesNodeRange(event, (series, datum) => series.fireNodeClickEvent(event.sourceEvent, datum));\n    }\n    checkSeriesNodeDoubleClick(event) {\n        return this.checkSeriesNodeRange(event, (series, datum) => series.fireNodeDoubleClickEvent(event.sourceEvent, datum));\n    }\n    checkSeriesNodeRange(event, callback) {\n        const nearestNode = this.pickSeriesNode({ x: event.offsetX, y: event.offsetY }, false);\n        const datum = nearestNode === null || nearestNode === void 0 ? void 0 : nearestNode.datum;\n        const nodeClickRange = datum === null || datum === void 0 ? void 0 : datum.series.nodeClickRange;\n        // First check if we should trigger the callback based on nearest node\n        if (datum && nodeClickRange === 'nearest') {\n            callback(datum.series, datum);\n            return true;\n        }\n        // Then check for an exact match or within the given range\n        let pixelRange;\n        if (typeof nodeClickRange === 'number' && Number.isFinite(nodeClickRange)) {\n            pixelRange = nodeClickRange;\n        }\n        const pick = this.pickSeriesNode({ x: event.offsetX, y: event.offsetY }, nodeClickRange === 'exact', pixelRange);\n        if (!pick)\n            return false;\n        // Then if we've picked a node within the pixel range, or exactly, trigger the callback\n        const isPixelRange = pixelRange != null;\n        const exactlyMatched = nodeClickRange === 'exact' && pick.distance === 0;\n        if (isPixelRange || exactlyMatched) {\n            callback(pick.series, pick.datum);\n            return true;\n        }\n        return false;\n    }\n    mergePointerDatum(meta, datum) {\n        const { type } = datum.series.tooltip.position;\n        if (type === 'node' && datum.nodeMidPoint) {\n            const { x, y } = datum.nodeMidPoint;\n            const { canvas } = this.scene;\n            const point = datum.series.rootGroup.inverseTransformPoint(x, y);\n            const canvasRect = canvas.element.getBoundingClientRect();\n            return Object.assign(Object.assign({}, meta), { pageX: Math.round(canvasRect.left + window.scrollX + point.x), pageY: Math.round(canvasRect.top + window.scrollY + point.y), offsetX: Math.round(point.x), offsetY: Math.round(point.y) });\n        }\n        return meta;\n    }\n    changeHighlightDatum(event) {\n        var _a, _b;\n        const seriesToUpdate = new Set();\n        const { series: newSeries = undefined, datum: newDatum } = (_a = event.currentHighlight) !== null && _a !== void 0 ? _a : {};\n        const { series: lastSeries = undefined, datum: lastDatum } = (_b = event.previousHighlight) !== null && _b !== void 0 ? _b : {};\n        if (lastSeries) {\n            seriesToUpdate.add(lastSeries);\n        }\n        if (newSeries) {\n            seriesToUpdate.add(newSeries);\n        }\n        // Adjust cursor if a specific datum is highlighted, rather than just a series.\n        if ((lastSeries === null || lastSeries === void 0 ? void 0 : lastSeries.cursor) && lastDatum) {\n            this.cursorManager.updateCursor(lastSeries.id);\n        }\n        if ((newSeries === null || newSeries === void 0 ? void 0 : newSeries.cursor) && newDatum) {\n            this.cursorManager.updateCursor(newSeries.id, newSeries.cursor);\n        }\n        this.lastPick = event.currentHighlight ? { datum: event.currentHighlight } : undefined;\n        const updateAll = newSeries == null || lastSeries == null;\n        if (updateAll) {\n            this.update(ChartUpdateType.SERIES_UPDATE);\n        }\n        else {\n            this.update(ChartUpdateType.SERIES_UPDATE, { seriesToUpdate });\n        }\n    }\n    waitForUpdate(timeoutMs = 5000) {\n        return __awaiter$b(this, void 0, void 0, function* () {\n            const start = performance.now();\n            while (this._pendingFactoryUpdates.length > 0 || this.updatePending) {\n                if (performance.now() - start > timeoutMs) {\n                    throw new Error('waitForUpdate() timeout reached.');\n                }\n                yield sleep(5);\n            }\n            yield this.awaitUpdateCompletion();\n        });\n    }\n    handleOverlays() {\n        this.handleNoDataOverlay();\n    }\n    handleNoDataOverlay() {\n        const shouldDisplayNoDataOverlay = !this.series.some((s) => s.hasData());\n        const rect = this.getSeriesRect();\n        if (shouldDisplayNoDataOverlay && rect) {\n            this.overlays.noData.show(rect);\n        }\n        else {\n            this.overlays.noData.hide();\n        }\n    }\n}\n__decorate$1z([\n    ActionOnSet({\n        newValue(value) {\n            this.scene.debug.consoleLog = value;\n        },\n    })\n], Chart.prototype, \"debug\", void 0);\n__decorate$1z([\n    ActionOnSet({\n        newValue(value) {\n            var _a;\n            (_a = this.series) === null || _a === void 0 ? void 0 : _a.forEach((series) => (series.data = value));\n        },\n    })\n], Chart.prototype, \"data\", void 0);\n__decorate$1z([\n    ActionOnSet({\n        newValue(value) {\n            this.resize(value);\n        },\n    })\n], Chart.prototype, \"width\", void 0);\n__decorate$1z([\n    ActionOnSet({\n        newValue(value) {\n            this.resize(undefined, value);\n        },\n    })\n], Chart.prototype, \"height\", void 0);\n__decorate$1z([\n    ActionOnSet({\n        changeValue(value) {\n            this.autoSizeChanged(value);\n        },\n    }),\n    Validate(BOOLEAN)\n], Chart.prototype, \"autoSize\", void 0);\n__decorate$1z([\n    ActionOnSet({\n        newValue(value) {\n            var _a;\n            (_a = this.scene.root) === null || _a === void 0 ? void 0 : _a.appendChild(value.node);\n        },\n        oldValue(oldValue) {\n            var _a;\n            (_a = this.scene.root) === null || _a === void 0 ? void 0 : _a.removeChild(oldValue.node);\n        },\n    })\n], Chart.prototype, \"title\", void 0);\n__decorate$1z([\n    ActionOnSet({\n        newValue(value) {\n            var _a;\n            (_a = this.scene.root) === null || _a === void 0 ? void 0 : _a.appendChild(value.node);\n        },\n        oldValue(oldValue) {\n            var _a;\n            (_a = this.scene.root) === null || _a === void 0 ? void 0 : _a.removeChild(oldValue.node);\n        },\n    })\n], Chart.prototype, \"subtitle\", void 0);\n__decorate$1z([\n    ActionOnSet({\n        newValue(value) {\n            var _a;\n            (_a = this.scene.root) === null || _a === void 0 ? void 0 : _a.appendChild(value.node);\n        },\n        oldValue(oldValue) {\n            var _a;\n            (_a = this.scene.root) === null || _a === void 0 ? void 0 : _a.removeChild(oldValue.node);\n        },\n    })\n], Chart.prototype, \"footnote\", void 0);\n__decorate$1z([\n    Validate(STRING_UNION('standalone', 'integrated'))\n], Chart.prototype, \"mode\", void 0);\n\n/**\n * The tree layout is calculated in abstract x/y coordinates, where the root is at (0, 0)\n * and the tree grows downward from the root.\n */\nclass TreeNode {\n    constructor(label = '', parent, number = 0) {\n        this.x = 0;\n        this.y = 0;\n        this.subtreeLeft = NaN;\n        this.subtreeRight = NaN;\n        this.screenX = 0;\n        this.screenY = 0;\n        this.children = [];\n        this.leafCount = 0;\n        this.prelim = 0;\n        this.mod = 0;\n        this.ancestor = this;\n        this.change = 0;\n        this.shift = 0;\n        this.label = label;\n        // screenX and screenY are meant to be recomputed from (layout) x and y\n        // when the tree is resized (without performing another layout)\n        this.parent = parent;\n        this.depth = parent ? parent.depth + 1 : 0;\n        this.number = number;\n    }\n    getLeftSibling() {\n        return this.number > 0 && this.parent ? this.parent.children[this.number - 1] : undefined;\n    }\n    getLeftmostSibling() {\n        return this.number > 0 && this.parent ? this.parent.children[0] : undefined;\n    }\n    // traverse the left contour of a subtree, return the successor of v on this contour\n    nextLeft() {\n        return this.children ? this.children[0] : this.thread;\n    }\n    // traverse the right contour of a subtree, return the successor of v on this contour\n    nextRight() {\n        return this.children ? this.children[this.children.length - 1] : this.thread;\n    }\n    getSiblings() {\n        return this.parent ? this.parent.children.filter((_, i) => i !== this.number) : [];\n    }\n}\n/**\n * Converts an array of ticks, where each tick has an array of labels, to a label tree.\n * If `pad` is `true`, will ensure that every branch matches the depth of the tree by\n * creating empty labels.\n */\nfunction ticksToTree(ticks, pad = true) {\n    const root = new TreeNode();\n    let depth = 0;\n    if (pad) {\n        ticks.forEach((tick) => (depth = Math.max(depth, tick.labels.length)));\n    }\n    ticks.forEach((tick) => {\n        if (pad) {\n            while (tick.labels.length < depth) {\n                tick.labels.unshift('');\n            }\n        }\n        insertTick(root, tick);\n    });\n    return root;\n}\nfunction insertTick(root, tick) {\n    const pathParts = tick.labels.slice().reverse(); // path elements from root to leaf label\n    const lastPartIndex = pathParts.length - 1;\n    pathParts.forEach((pathPart, partIndex) => {\n        const children = root.children;\n        const existingNode = children.find((child) => child.label === pathPart);\n        const isNotLeaf = partIndex !== lastPartIndex;\n        if (existingNode && isNotLeaf) {\n            // the isNotLeaf check is to allow duplicate leafs\n            root = existingNode;\n        }\n        else {\n            const node = new TreeNode(pathPart, root);\n            node.number = children.length;\n            children.push(node);\n            if (isNotLeaf) {\n                root = node;\n            }\n        }\n    });\n}\n// Shift the subtree.\nfunction moveSubtree(wm, wp, shift) {\n    const subtrees = wp.number - wm.number;\n    const ratio = shift / subtrees;\n    wp.change -= ratio;\n    wp.shift += shift;\n    wm.change += ratio;\n    wp.prelim += shift;\n    wp.mod += shift;\n}\nfunction ancestor(vim, v, defaultAncestor) {\n    return v.getSiblings().indexOf(vim.ancestor) >= 0 ? vim.ancestor : defaultAncestor;\n}\n// Spaces out the children.\nfunction executeShifts(v) {\n    const children = v.children;\n    if (children) {\n        let shift = 0;\n        let change = 0;\n        for (let i = children.length - 1; i >= 0; i--) {\n            const w = children[i];\n            w.prelim += shift;\n            w.mod += shift;\n            change += w.change;\n            shift += w.shift + change;\n        }\n    }\n}\n// Moves current subtree with v as the root if some nodes are conflicting in space.\nfunction apportion(v, defaultAncestor, distance) {\n    const w = v.getLeftSibling();\n    if (w) {\n        let vop = v;\n        let vip = v;\n        let vim = w;\n        let vom = vip.getLeftmostSibling();\n        let sip = vip.mod;\n        let sop = vop.mod;\n        let sim = vim.mod;\n        let som = vom.mod;\n        while (vim.nextRight() && vip.nextLeft()) {\n            vim = vim.nextRight();\n            vip = vip.nextLeft();\n            vom = vom.nextLeft();\n            vop = vop.nextRight();\n            vop.ancestor = v;\n            const shift = vim.prelim + sim - (vip.prelim + sip) + distance;\n            if (shift > 0) {\n                moveSubtree(ancestor(vim, v, defaultAncestor), v, shift);\n                sip += shift;\n                sop += shift;\n            }\n            sim += vim.mod;\n            sip += vip.mod;\n            som += vom.mod;\n            sop += vop.mod;\n        }\n        if (vim.nextRight() && !vop.nextRight()) {\n            vop.thread = vim.nextRight();\n            vop.mod += sim - sop;\n        }\n        else {\n            if (vip.nextLeft() && !vom.nextLeft()) {\n                vom.thread = vip.nextLeft();\n                vom.mod += sip - som;\n            }\n            defaultAncestor = v;\n        }\n    }\n    return defaultAncestor;\n}\n// Compute the preliminary x-coordinate of node and its children (recursively).\nfunction firstWalk(node, distance) {\n    const children = node.children;\n    if (children.length) {\n        let defaultAncestor = children[0];\n        children.forEach((child) => {\n            firstWalk(child, distance);\n            defaultAncestor = apportion(child, defaultAncestor, distance);\n        });\n        executeShifts(node);\n        const midpoint = (children[0].prelim + children[children.length - 1].prelim) / 2;\n        const leftSibling = node.getLeftSibling();\n        if (leftSibling) {\n            node.prelim = leftSibling.prelim + distance;\n            node.mod = node.prelim - midpoint;\n        }\n        else {\n            node.prelim = midpoint;\n        }\n    }\n    else {\n        const leftSibling = node.getLeftSibling();\n        node.prelim = leftSibling ? leftSibling.prelim + distance : 0;\n    }\n}\nclass Dimensions {\n    constructor() {\n        this.top = Infinity;\n        this.right = -Infinity;\n        this.bottom = -Infinity;\n        this.left = Infinity;\n    }\n    update(node, xy) {\n        const { x, y } = xy(node);\n        if (x > this.right) {\n            this.right = x;\n        }\n        if (x < this.left) {\n            this.left = x;\n        }\n        if (y > this.bottom) {\n            this.bottom = y;\n        }\n        if (y < this.top) {\n            this.top = y;\n        }\n    }\n}\nfunction secondWalk(v, m, layout) {\n    v.x = v.prelim + m;\n    v.y = v.depth;\n    layout.update(v);\n    v.children.forEach((w) => secondWalk(w, m + v.mod, layout));\n}\n// After the second walk the parent nodes are positioned at the center of their immediate children.\n// If we want the parent nodes to be positioned at the center of the subtree for which they are roots,\n// we need a third walk to adjust the positions.\nfunction thirdWalk(v) {\n    const children = v.children;\n    let leafCount = 0;\n    children.forEach((w) => {\n        thirdWalk(w);\n        if (w.children.length) {\n            leafCount += w.leafCount;\n        }\n        else {\n            leafCount++;\n        }\n    });\n    v.leafCount = leafCount;\n    if (children.length) {\n        v.subtreeLeft = children[0].subtreeLeft;\n        v.subtreeRight = children[v.children.length - 1].subtreeRight;\n        v.x = (v.subtreeLeft + v.subtreeRight) / 2;\n    }\n    else {\n        v.subtreeLeft = v.x;\n        v.subtreeRight = v.x;\n    }\n}\nfunction treeLayout(root) {\n    const layout = new TreeLayout();\n    firstWalk(root, 1);\n    secondWalk(root, -root.prelim, layout);\n    thirdWalk(root);\n    return layout;\n}\nclass TreeLayout {\n    constructor() {\n        this.dimensions = new Dimensions();\n        this.leafCount = 0;\n        this.nodes = [];\n        // One might want to process leaf nodes separately from the rest of the tree.\n        // For example, position labels corresponding to leafs vertically, rather than horizontally.\n        this.leafNodes = [];\n        this.nonLeafNodes = [];\n        this.depth = 0;\n    }\n    update(node) {\n        this.dimensions.update(node, (node) => ({ x: node.x, y: node.y }));\n        if (!node.children.length) {\n            this.leafCount++;\n            this.leafNodes.push(node);\n        }\n        else {\n            this.nonLeafNodes.push(node);\n        }\n        if (node.depth > this.depth) {\n            this.depth = node.depth;\n        }\n        this.nodes.push(node);\n    }\n    resize(width, height, shiftX = 0, shiftY = 0, flipX = false) {\n        const xSteps = this.leafCount - 1;\n        const ySteps = this.depth;\n        const dimensions = this.dimensions;\n        let scalingX = 1;\n        let scalingY = 1;\n        if (width > 0 && xSteps) {\n            const existingSpacingX = (dimensions.right - dimensions.left) / xSteps;\n            const desiredSpacingX = width / xSteps;\n            scalingX = desiredSpacingX / existingSpacingX;\n            if (flipX) {\n                scalingX = -scalingX;\n            }\n        }\n        if (height > 0 && ySteps) {\n            const existingSpacingY = (dimensions.bottom - dimensions.top) / ySteps;\n            const desiredSpacingY = height / ySteps;\n            scalingY = desiredSpacingY / existingSpacingY;\n        }\n        const screenDimensions = new Dimensions();\n        this.nodes.forEach((node) => {\n            node.screenX = node.x * scalingX;\n            node.screenY = node.y * scalingY;\n            screenDimensions.update(node, (node) => ({ x: node.screenX, y: node.screenY }));\n        });\n        // Normalize so that root top and leftmost leaf left start at zero.\n        const offsetX = -screenDimensions.left;\n        const offsetY = -screenDimensions.top;\n        this.nodes.forEach((node) => {\n            node.screenX += offsetX + shiftX;\n            node.screenY += offsetY + shiftY;\n        });\n    }\n}\n\nvar __decorate$1y = ( false) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nclass GroupedCategoryAxisLabel extends AxisLabel {\n    constructor() {\n        super(...arguments);\n        this.grid = false;\n    }\n}\n__decorate$1y([\n    Validate(BOOLEAN)\n], GroupedCategoryAxisLabel.prototype, \"grid\", void 0);\nclass GroupedCategoryAxis extends ChartAxis {\n    constructor(moduleCtx) {\n        super(moduleCtx, new BandScale$5());\n        // Label scale (labels are positioned between ticks, tick count = label count + 1).\n        // We don't call is `labelScale` for consistency with other axes.\n        this.tickScale = new BandScale$5();\n        this.translation = {\n            x: 0,\n            y: 0,\n        };\n        this.line = new AxisLine();\n        this.label = new GroupedCategoryAxisLabel();\n        /**\n         * The color of the labels.\n         * Use `undefined` rather than `rgba(0, 0, 0, 0)` to make labels invisible.\n         */\n        this.labelColor = 'rgba(87, 87, 87, 1)';\n        this.includeInvisibleDomains = true;\n        const { tickLineGroup, tickLabelGroup, gridLineGroup, tickScale, scale } = this;\n        scale.paddingOuter = 0.1;\n        scale.paddingInner = scale.paddingOuter * 2;\n        this.range = scale.range.slice();\n        this.refreshScale();\n        tickScale.paddingInner = 1;\n        tickScale.paddingOuter = 0;\n        this.gridLineSelection = Selection.select(gridLineGroup, Line);\n        this.axisLineSelection = Selection.select(tickLineGroup, Line);\n        this.separatorSelection = Selection.select(tickLineGroup, Line);\n        this.labelSelection = Selection.select(tickLabelGroup, Text);\n    }\n    updateRange() {\n        const { range: rr, visibleRange: vr, scale } = this;\n        const span = (rr[1] - rr[0]) / (vr[1] - vr[0]);\n        const shift = span * vr[0];\n        const start = rr[0] - shift;\n        this.tickScale.range = scale.range = [start, start + span];\n        this.resizeTickTree();\n    }\n    resizeTickTree() {\n        var _a;\n        const s = this.scale;\n        const range = s.domain.length ? [s.convert(s.domain[0]), s.convert(s.domain[s.domain.length - 1])] : s.range;\n        const layout = this.tickTreeLayout;\n        const lineHeight = this.lineHeight;\n        if (layout) {\n            layout.resize(Math.abs(range[1] - range[0]), layout.depth * lineHeight, (Math.min(range[0], range[1]) || 0) + ((_a = s.bandwidth) !== null && _a !== void 0 ? _a : 0) / 2, -layout.depth * lineHeight, range[1] - range[0] < 0);\n        }\n    }\n    get lineHeight() {\n        return this.label.fontSize * 1.5;\n    }\n    /**\n     * The length of the grid. The grid is only visible in case of a non-zero value.\n     */\n    set gridLength(value) {\n        // Was visible and now invisible, or was invisible and now visible.\n        if ((this._gridLength && !value) || (!this._gridLength && value)) {\n            this.gridLineSelection.clear();\n            this.labelSelection.clear();\n        }\n        this._gridLength = value;\n    }\n    get gridLength() {\n        return this._gridLength;\n    }\n    calculateDomain() {\n        var _a;\n        const { direction, boundSeries } = this;\n        const domains = [];\n        let isNumericX = undefined;\n        boundSeries\n            .filter((s) => s.visible)\n            .forEach((series) => {\n            if (direction === ChartAxisDirection.X) {\n                if (isNumericX === undefined) {\n                    // always add first X domain\n                    const domain = series.getDomain(direction);\n                    domains.push(domain);\n                    isNumericX = typeof domain[0] === 'number';\n                }\n                else if (isNumericX) {\n                    // only add further X domains if the axis is numeric\n                    domains.push(series.getDomain(direction));\n                }\n            }\n            else {\n                domains.push(series.getDomain(direction));\n            }\n        });\n        const domain = new Array().concat(...domains);\n        const values = (_a = extent$4(domain)) !== null && _a !== void 0 ? _a : domain;\n        this.dataDomain = this.normaliseDataDomain(values);\n        this.scale.domain = this.dataDomain;\n    }\n    normaliseDataDomain(d) {\n        // Prevent duplicate categories.\n        const values = d.filter((s, i, arr) => arr.indexOf(s) === i);\n        const tickTree = ticksToTree(values);\n        this.tickTreeLayout = treeLayout(tickTree);\n        const tickScaleDomain = values.slice();\n        tickScaleDomain.push('');\n        this.tickScale.domain = tickScaleDomain;\n        this.resizeTickTree();\n        return values;\n    }\n    /**\n     * Creates/removes/updates the scene graph nodes that constitute the axis.\n     * Supposed to be called _manually_ after changing _any_ of the axis properties.\n     * This allows to bulk set axis properties before updating the nodes.\n     * The node changes made by this method are rendered on the next animation frame.\n     * We could schedule this method call automatically on the next animation frame\n     * when any of the axis properties change (the way we do when properties of scene graph's\n     * nodes change), but this will mean that we first wait for the next animation\n     * frame to make changes to the nodes of the axis, then wait for another animation\n     * frame to render those changes. It's nice to have everything update automatically,\n     * but this extra level of async indirection will not just introduce an unwanted delay,\n     * it will also make it harder to reason about the program.\n     */\n    update(primaryTickCount) {\n        this.updateDirection();\n        this.calculateDomain();\n        this.updateRange();\n        const { scale, label, label: { parallel }, moduleCtx: { callbackCache }, tickScale, range: requestedRange, title, title: { formatter = (p) => p.defaultValue } = {}, _titleCaption, } = this;\n        const rangeStart = scale.range[0];\n        const rangeEnd = scale.range[1];\n        const rangeLength = Math.abs(rangeEnd - rangeStart);\n        const bandwidth = rangeLength / scale.domain.length || 0;\n        const rotation = toRadians$1(this.rotation);\n        const isHorizontal = Math.abs(Math.cos(rotation)) < 1e-8;\n        const sideFlag = label.getSideFlag();\n        this.updatePosition({ rotation, sideFlag });\n        // The Text `node` of the Caption is not used to render the title of the grouped category axis.\n        // The phantom root of the tree layout is used instead.\n        _titleCaption.node.visible = false;\n        const lineHeight = this.lineHeight;\n        // Render ticks and labels.\n        const tickTreeLayout = this.tickTreeLayout;\n        const labels = scale.ticks();\n        const treeLabels = tickTreeLayout ? tickTreeLayout.nodes : [];\n        const isLabelTree = tickTreeLayout ? tickTreeLayout.depth > 1 : false;\n        const ticks = tickScale.ticks();\n        // When labels are parallel to the axis line, the `parallelFlipFlag` is used to\n        // flip the labels to avoid upside-down text, when the axis is rotated\n        // such that it is in the right hemisphere, i.e. the angle of rotation\n        // is in the [0, π] interval.\n        // The rotation angle is normalized, so that we have an easier time checking\n        // if it's in the said interval. Since the axis is always rendered vertically\n        // and then rotated, zero rotation means 12 (not 3) o-clock.\n        // -1 = flip\n        //  1 = don't flip (default)\n        const { defaultRotation, configuredRotation, parallelFlipFlag } = calculateLabelRotation({\n            rotation: label.rotation,\n            parallel,\n            regularFlipRotation: normalizeAngle360(rotation - Math.PI / 2),\n            parallelFlipRotation: normalizeAngle360(rotation),\n        });\n        const gridLineSelection = this.gridLineSelection.update(this.gridLength ? ticks : []);\n        const labelSelection = this.labelSelection.update(treeLabels);\n        const labelFormatter = label.formatter;\n        const labelBBoxes = new Map();\n        let maxLeafLabelWidth = 0;\n        labelSelection.each((node, datum, index) => {\n            var _a;\n            node.fontStyle = label.fontStyle;\n            node.fontWeight = label.fontWeight;\n            node.fontSize = label.fontSize;\n            node.fontFamily = label.fontFamily;\n            node.fill = label.color;\n            node.textBaseline = parallelFlipFlag === -1 ? 'bottom' : 'hanging';\n            node.textAlign = 'center';\n            node.translationX = datum.screenY - label.fontSize * 0.25;\n            node.translationY = datum.screenX;\n            if (index === 0) {\n                // use the phantom root as the axis title\n                if ((title === null || title === void 0 ? void 0 : title.enabled) && labels.length > 0) {\n                    node.visible = true;\n                    node.text = callbackCache.call(formatter, this.getTitleFormatterParams());\n                    node.fontSize = title.fontSize;\n                    node.fontStyle = title.fontStyle;\n                    node.fontWeight = title.fontWeight;\n                    node.fontFamily = title.fontFamily;\n                    node.textBaseline = 'hanging';\n                }\n                else {\n                    node.visible = false;\n                }\n            }\n            else if (labelFormatter) {\n                node.text =\n                    (_a = callbackCache.call(labelFormatter, {\n                        value: String(datum.label),\n                        index,\n                    })) !== null && _a !== void 0 ? _a : String(datum.label);\n                node.visible = datum.screenX >= requestedRange[0] && datum.screenX <= requestedRange[1];\n            }\n            else {\n                node.text = String(datum.label);\n                node.visible = datum.screenX >= requestedRange[0] && datum.screenX <= requestedRange[1];\n            }\n            const bbox = node.computeBBox();\n            labelBBoxes.set(node.id, bbox);\n            if (bbox.width > maxLeafLabelWidth) {\n                maxLeafLabelWidth = bbox.width;\n            }\n        });\n        const labelX = sideFlag * label.padding;\n        const labelGrid = this.label.grid;\n        const separatorData = [];\n        labelSelection.each((label, datum, index) => {\n            label.x = labelX;\n            label.rotationCenterX = labelX;\n            if (!datum.children.length) {\n                label.rotation = configuredRotation;\n                label.textAlign = 'end';\n                label.textBaseline = 'middle';\n                const bbox = labelBBoxes.get(label.id);\n                if (bbox && bbox.height > bandwidth) {\n                    label.visible = false;\n                }\n            }\n            else {\n                label.translationX -= maxLeafLabelWidth - lineHeight + this.label.padding;\n                const availableRange = datum.leafCount * bandwidth;\n                const bbox = labelBBoxes.get(label.id);\n                if (bbox && bbox.width > availableRange) {\n                    label.visible = false;\n                }\n                else if (isHorizontal) {\n                    label.rotation = defaultRotation;\n                }\n                else {\n                    label.rotation = -Math.PI / 2;\n                }\n            }\n            // Calculate positions of label separators for all nodes except the root.\n            // Each separator is placed to the top of the current label.\n            if (datum.parent && isLabelTree) {\n                const y = !datum.children.length\n                    ? datum.screenX - bandwidth / 2\n                    : datum.screenX - (datum.leafCount * bandwidth) / 2;\n                if (!datum.children.length) {\n                    if (datum.number !== datum.children.length - 1 || labelGrid) {\n                        separatorData.push({\n                            y,\n                            x1: 0,\n                            x2: -maxLeafLabelWidth - this.label.padding * 2,\n                            toString: () => String(index),\n                        });\n                    }\n                }\n                else {\n                    const x = -maxLeafLabelWidth - this.label.padding * 2 + datum.screenY;\n                    separatorData.push({\n                        y,\n                        x1: x + lineHeight,\n                        x2: x,\n                        toString: () => String(index),\n                    });\n                }\n            }\n        });\n        // Calculate the position of the long separator on the far bottom of the axis.\n        let minX = 0;\n        separatorData.forEach((d) => (minX = Math.min(minX, d.x2)));\n        separatorData.push({\n            y: Math.max(rangeStart, rangeEnd),\n            x1: 0,\n            x2: minX,\n            toString: () => String(separatorData.length),\n        });\n        const separatorSelection = this.separatorSelection.update(separatorData);\n        const epsilon = 0.0000001;\n        separatorSelection.each((line, datum) => {\n            line.x1 = datum.x1;\n            line.x2 = datum.x2;\n            line.y1 = datum.y;\n            line.y2 = datum.y;\n            line.visible = datum.y >= requestedRange[0] - epsilon && datum.y <= requestedRange[1] + epsilon;\n            line.stroke = this.tick.color;\n            line.fill = undefined;\n            line.strokeWidth = 1;\n        });\n        this.gridLineSelection = gridLineSelection;\n        this.labelSelection = labelSelection;\n        // Render axis lines.\n        const lineCount = tickTreeLayout ? tickTreeLayout.depth + 1 : 1;\n        const lines = [];\n        for (let i = 0; i < lineCount; i++) {\n            lines.push(i);\n        }\n        const axisLineSelection = this.axisLineSelection.update(lines);\n        axisLineSelection.each((line, _, index) => {\n            const x = index > 0 ? -maxLeafLabelWidth - this.label.padding * 2 - (index - 1) * lineHeight : 0;\n            line.x1 = x;\n            line.x2 = x;\n            line.y1 = requestedRange[0];\n            line.y2 = requestedRange[1];\n            line.strokeWidth = this.line.width;\n            line.stroke = this.line.color;\n            line.visible = labels.length > 0 && (index === 0 || (labelGrid && isLabelTree));\n        });\n        if (this.gridLength) {\n            const styles = this.gridStyle;\n            const styleCount = styles.length;\n            gridLineSelection.each((line, datum, index) => {\n                const y = Math.round(tickScale.convert(datum));\n                line.x1 = 0;\n                line.x2 = -sideFlag * this.gridLength;\n                line.y1 = y;\n                line.y2 = y;\n                line.visible = y >= requestedRange[0] && y <= requestedRange[1];\n                const style = styles[index % styleCount];\n                line.stroke = style.stroke;\n                line.strokeWidth = this.tick.width;\n                line.lineDash = style.lineDash;\n                line.fill = undefined;\n            });\n        }\n        return primaryTickCount;\n    }\n}\nGroupedCategoryAxis.className = 'GroupedCategoryAxis';\nGroupedCategoryAxis.type = 'groupedCategory';\n__decorate$1y([\n    Validate(OPT_COLOR_STRING)\n], GroupedCategoryAxis.prototype, \"labelColor\", void 0);\n\nvar __awaiter$a = ( false) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nconst directions = ['top', 'right', 'bottom', 'left'];\nclass CartesianChart extends Chart {\n    constructor(document = window.document, overrideDevicePixelRatio, resources) {\n        super(document, overrideDevicePixelRatio, resources);\n        /** Integrated Charts feature state - not used in Standalone Charts. */\n        this.paired = true;\n        this._lastAxisWidths = {\n            top: 0,\n            bottom: 0,\n            left: 0,\n            right: 0,\n        };\n        this._lastVisibility = {\n            crossLines: true,\n            series: true,\n        };\n    }\n    performLayout() {\n        const _super = Object.create(null, {\n            performLayout: { get: () => super.performLayout }\n        });\n        return __awaiter$a(this, void 0, void 0, function* () {\n            const shrinkRect = yield _super.performLayout.call(this);\n            const { seriesRect, visibility, clipSeries } = this.updateAxes(shrinkRect);\n            this.seriesRoot.visible = visibility.series;\n            this.seriesRect = seriesRect;\n            this.series.forEach((series) => {\n                series.rootGroup.translationX = Math.floor(seriesRect.x);\n                series.rootGroup.translationY = Math.floor(seriesRect.y);\n            });\n            const { seriesRoot, seriesAreaPadding } = this;\n            const seriesPaddedRect = seriesRect.clone().grow(seriesAreaPadding);\n            const hoverRectPadding = 20;\n            const hoverRect = seriesPaddedRect.clone().grow(hoverRectPadding);\n            this.hoverRect = hoverRect;\n            this.layoutService.dispatchLayoutComplete({\n                type: 'layout-complete',\n                chart: { width: this.scene.width, height: this.scene.height },\n                series: { rect: seriesRect, paddedRect: seriesPaddedRect, hoverRect, visible: visibility.series },\n                axes: this.axes.map((axis) => (Object.assign({ id: axis.id }, axis.getLayoutState()))),\n            });\n            if (clipSeries) {\n                seriesRoot.setClipRectInGroupCoordinateSpace(seriesPaddedRect);\n            }\n            else {\n                seriesRoot.setClipRectInGroupCoordinateSpace();\n            }\n            return shrinkRect;\n        });\n    }\n    updateAxes(inputShrinkRect) {\n        var _a;\n        // Start with a good approximation from the last update - this should mean that in many resize\n        // cases that only a single pass is needed \\o/.\n        const axisWidths = Object.assign({}, this._lastAxisWidths);\n        const visibility = Object.assign({}, this._lastVisibility);\n        // Clean any positions which aren't valid with the current axis status (otherwise we end up\n        // never being able to find a stable result).\n        const liveAxisWidths = new Set(this._axes.map((a) => a.position));\n        for (const position of Object.keys(axisWidths)) {\n            if (!liveAxisWidths.has(position)) {\n                delete axisWidths[position];\n            }\n        }\n        const stableOutputs = (otherAxisWidths, otherVisibility) => {\n            // Check for new axis positions.\n            if (Object.keys(otherAxisWidths).some((k) => axisWidths[k] == null)) {\n                return false;\n            }\n            return (visibility.crossLines === otherVisibility.crossLines &&\n                visibility.series === otherVisibility.series &&\n                // Check for existing axis positions and equality.\n                Object.entries(axisWidths).every(([p, w]) => {\n                    const otherW = otherAxisWidths[p];\n                    if (w != null || otherW != null) {\n                        return w === otherW;\n                    }\n                    return true;\n                }));\n        };\n        const ceilValues = (records) => {\n            return Object.entries(records).reduce((out, [key, value]) => {\n                if (value && Math.abs(value) === Infinity) {\n                    value = 0;\n                }\n                out[key] = value != null ? Math.ceil(value) : value;\n                return out;\n            }, {});\n        };\n        // Iteratively try to resolve axis widths - since X axis width affects Y axis range,\n        // and vice-versa, we need to iteratively try and find a fit for the axes and their\n        // ticks/labels.\n        let lastPassAxisWidths = {};\n        let lastPassVisibility = {};\n        let clipSeries = false;\n        let seriesRect = (_a = this.seriesRect) === null || _a === void 0 ? void 0 : _a.clone();\n        let count = 0;\n        do {\n            Object.assign(axisWidths, lastPassAxisWidths);\n            Object.assign(visibility, lastPassVisibility);\n            const result = this.updateAxesPass(axisWidths, inputShrinkRect.clone(), seriesRect);\n            lastPassAxisWidths = ceilValues(result.axisWidths);\n            lastPassVisibility = result.visibility;\n            clipSeries = result.clipSeries;\n            seriesRect = result.seriesRect;\n            if (count++ > 10) {\n                Logger.warn('unable to find stable axis layout.');\n                break;\n            }\n        } while (!stableOutputs(lastPassAxisWidths, lastPassVisibility));\n        const clipRectPadding = 5;\n        this.axes.forEach((axis) => {\n            // update visibility of crosslines\n            axis.setCrossLinesVisible(visibility.crossLines);\n            if (!seriesRect) {\n                return;\n            }\n            axis.clipGrid(seriesRect.x, seriesRect.y, seriesRect.width + clipRectPadding, seriesRect.height + clipRectPadding);\n            switch (axis.position) {\n                case 'left':\n                case 'right':\n                    axis.clipTickLines(inputShrinkRect.x, seriesRect.y, inputShrinkRect.width + clipRectPadding, seriesRect.height + clipRectPadding);\n                    break;\n                case 'top':\n                case 'bottom':\n                    axis.clipTickLines(seriesRect.x, inputShrinkRect.y, seriesRect.width + clipRectPadding, inputShrinkRect.height + clipRectPadding);\n                    break;\n            }\n        });\n        this._lastAxisWidths = axisWidths;\n        this._lastVisibility = visibility;\n        return { seriesRect, visibility, clipSeries };\n    }\n    updateAxesPass(axisWidths, bounds, lastPassSeriesRect) {\n        const { axes } = this;\n        const visited = {};\n        const newAxisWidths = {};\n        const visibility = {\n            series: true,\n            crossLines: true,\n        };\n        let clipSeries = false;\n        const primaryTickCounts = {};\n        const paddedBounds = this.applySeriesPadding(bounds);\n        const crossLinePadding = lastPassSeriesRect ? this.buildCrossLinePadding(axisWidths) : {};\n        const axisBound = this.buildAxisBound(paddedBounds, axisWidths, crossLinePadding, visibility);\n        const seriesRect = this.buildSeriesRect(axisBound, axisWidths);\n        // Set the number of ticks for continuous axes based on the available range\n        // before updating the axis domain via `this.updateAxes()` as the tick count has an effect on the calculated `nice` domain extent\n        axes.forEach((axis) => {\n            var _a, _b;\n            const { position } = axis;\n            const { clipSeries: newClipSeries, axisThickness, axisOffset, } = this.calculateAxisDimensions({\n                axis,\n                seriesRect,\n                paddedBounds,\n                axisWidths,\n                newAxisWidths,\n                primaryTickCounts,\n                clipSeries,\n                addInterAxisPadding: ((_a = visited[position]) !== null && _a !== void 0 ? _a : 0) > 0,\n            });\n            visited[position] = ((_b = visited[position]) !== null && _b !== void 0 ? _b : 0) + 1;\n            clipSeries = clipSeries || newClipSeries;\n            this.positionAxis({\n                axis,\n                axisBound,\n                axisOffset,\n                axisThickness,\n                axisWidths,\n                primaryTickCounts,\n                seriesRect,\n            });\n        });\n        return { clipSeries, seriesRect, axisWidths: newAxisWidths, visibility };\n    }\n    buildCrossLinePadding(axisWidths) {\n        var _a;\n        const crossLinePadding = {};\n        this.axes.forEach((axis) => {\n            if (axis.crossLines) {\n                axis.crossLines.forEach((crossLine) => {\n                    crossLine.calculatePadding(crossLinePadding);\n                });\n            }\n        });\n        // Reduce cross-line padding to account for overlap with axes.\n        for (const [side, padding = 0] of Object.entries(crossLinePadding)) {\n            crossLinePadding[side] = Math.max(padding - ((_a = axisWidths[side]) !== null && _a !== void 0 ? _a : 0), 0);\n        }\n        return crossLinePadding;\n    }\n    applySeriesPadding(bounds) {\n        const paddedRect = bounds.clone();\n        const reversedAxes = this.axes.slice().reverse();\n        directions.forEach((dir) => {\n            const padding = this.seriesAreaPadding[dir];\n            const axis = reversedAxes.find((axis) => axis.position === dir);\n            if (axis) {\n                axis.seriesAreaPadding = padding;\n            }\n            else {\n                paddedRect.shrink(padding, dir);\n            }\n        });\n        return paddedRect;\n    }\n    buildAxisBound(bounds, axisWidths, crossLinePadding, visibility) {\n        var _a, _b, _c, _d;\n        const result = bounds.clone();\n        const { top = 0, right = 0, bottom = 0, left = 0 } = crossLinePadding;\n        const horizontalPadding = left + right;\n        const verticalPadding = top + bottom;\n        const totalWidth = ((_a = axisWidths.left) !== null && _a !== void 0 ? _a : 0) + ((_b = axisWidths.right) !== null && _b !== void 0 ? _b : 0) + horizontalPadding;\n        const totalHeight = ((_c = axisWidths.top) !== null && _c !== void 0 ? _c : 0) + ((_d = axisWidths.bottom) !== null && _d !== void 0 ? _d : 0) + verticalPadding;\n        if (result.width <= totalWidth || result.height <= totalHeight) {\n            // Not enough space for crossLines and series\n            visibility.crossLines = false;\n            visibility.series = false;\n            return result;\n        }\n        result.x += left;\n        result.y += top;\n        result.width -= horizontalPadding;\n        result.height -= verticalPadding;\n        return result;\n    }\n    buildSeriesRect(axisBound, axisWidths) {\n        const result = axisBound.clone();\n        const { top, bottom, left, right } = axisWidths;\n        result.x += left !== null && left !== void 0 ? left : 0;\n        result.y += top !== null && top !== void 0 ? top : 0;\n        result.width -= (left !== null && left !== void 0 ? left : 0) + (right !== null && right !== void 0 ? right : 0);\n        result.height -= (top !== null && top !== void 0 ? top : 0) + (bottom !== null && bottom !== void 0 ? bottom : 0);\n        // Width and height should not be negative.\n        result.width = Math.max(0, result.width);\n        result.height = Math.max(0, result.height);\n        return result;\n    }\n    clampToOutsideSeriesRect(seriesRect, value, dimension, direction) {\n        const { x, y, width, height } = seriesRect;\n        const clampBounds = [x, y, x + width, y + height];\n        const fn = direction === 1 ? Math.min : Math.max;\n        const compareTo = clampBounds[(dimension === 'x' ? 0 : 1) + (direction === 1 ? 0 : 2)];\n        return fn(value, compareTo);\n    }\n    calculateAxisDimensions(opts) {\n        var _a, _b, _c, _d, _e, _f;\n        const { axis, seriesRect, paddedBounds, axisWidths, newAxisWidths, primaryTickCounts, addInterAxisPadding } = opts;\n        let { clipSeries } = opts;\n        const { position, direction } = axis;\n        const axisLeftRightRange = (axis) => {\n            if (axis instanceof CategoryAxis || axis instanceof GroupedCategoryAxis) {\n                return [0, seriesRect.height];\n            }\n            return [seriesRect.height, 0];\n        };\n        const axisOffset = (_a = newAxisWidths[position]) !== null && _a !== void 0 ? _a : 0;\n        switch (position) {\n            case 'top':\n            case 'bottom':\n                axis.range = [0, seriesRect.width];\n                axis.gridLength = seriesRect.height;\n                break;\n            case 'right':\n            case 'left':\n                axis.range = axisLeftRightRange(axis);\n                axis.gridLength = seriesRect.width;\n                break;\n        }\n        const zoom = (_b = this.zoomManager.getZoom()) === null || _b === void 0 ? void 0 : _b[axis.direction];\n        const { min = 0, max = 1 } = zoom !== null && zoom !== void 0 ? zoom : {};\n        axis.visibleRange = [min, max];\n        if (!clipSeries && (axis.visibleRange[0] > 0 || axis.visibleRange[1] < 1)) {\n            clipSeries = true;\n        }\n        let primaryTickCount = axis.nice ? primaryTickCounts[direction] : undefined;\n        const paddedBoundsCoefficient = 0.3;\n        if (axis.thickness > 0) {\n            axis.maxThickness = axis.thickness;\n        }\n        else if (direction === ChartAxisDirection.Y) {\n            axis.maxThickness = paddedBounds.width * paddedBoundsCoefficient;\n        }\n        else {\n            axis.maxThickness = paddedBounds.height * paddedBoundsCoefficient;\n        }\n        primaryTickCount = axis.update(primaryTickCount);\n        primaryTickCounts[direction] = (_c = primaryTickCounts[direction]) !== null && _c !== void 0 ? _c : primaryTickCount;\n        let axisThickness = 0;\n        if (axis.thickness) {\n            axisThickness = axis.thickness;\n        }\n        else {\n            const bbox = axis.computeBBox();\n            axisThickness = direction === ChartAxisDirection.X ? bbox.height : bbox.width;\n        }\n        // for multiple axes in the same direction and position, apply padding at the top of each inner axis (i.e. between axes).\n        const axisPadding = 15;\n        if (addInterAxisPadding) {\n            axisThickness += axisPadding;\n        }\n        axisThickness = Math.ceil(axisThickness);\n        newAxisWidths[position] = ((_d = newAxisWidths[position]) !== null && _d !== void 0 ? _d : 0) + axisThickness;\n        axis.gridPadding = ((_e = axisWidths[position]) !== null && _e !== void 0 ? _e : 0) - ((_f = newAxisWidths[position]) !== null && _f !== void 0 ? _f : 0);\n        return { clipSeries, axisThickness, axisOffset };\n    }\n    positionAxis(opts) {\n        var _a, _b, _c, _d;\n        const { axis, axisBound, axisWidths, seriesRect, axisOffset, axisThickness } = opts;\n        const { position } = axis;\n        switch (position) {\n            case 'top':\n                axis.translation.x = axisBound.x + ((_a = axisWidths.left) !== null && _a !== void 0 ? _a : 0);\n                axis.translation.y = this.clampToOutsideSeriesRect(seriesRect, axisBound.y + 1 + axisOffset + axisThickness, 'y', 1);\n                break;\n            case 'bottom':\n                axis.translation.x = axisBound.x + ((_b = axisWidths.left) !== null && _b !== void 0 ? _b : 0);\n                axis.translation.y = this.clampToOutsideSeriesRect(seriesRect, axisBound.y + axisBound.height + 1 - axisThickness - axisOffset, 'y', -1);\n                break;\n            case 'left':\n                axis.translation.y = axisBound.y + ((_c = axisWidths.top) !== null && _c !== void 0 ? _c : 0);\n                axis.translation.x = this.clampToOutsideSeriesRect(seriesRect, axisBound.x + axisOffset + axisThickness, 'x', 1);\n                break;\n            case 'right':\n                axis.translation.y = axisBound.y + ((_d = axisWidths.top) !== null && _d !== void 0 ? _d : 0);\n                axis.translation.x = this.clampToOutsideSeriesRect(seriesRect, axisBound.x + axisBound.width - axisThickness - axisOffset, 'x', -1);\n                break;\n        }\n        axis.updatePosition({ rotation: toRadians$1(axis.rotation), sideFlag: axis.label.getSideFlag() });\n    }\n}\nCartesianChart.className = 'CartesianChart';\nCartesianChart.type = 'cartesian';\n\nclass PolarSeries extends Series {\n    constructor({ moduleCtx, useLabelLayer = false, pickModes = [SeriesNodePickMode.EXACT_SHAPE_MATCH], }) {\n        super({\n            moduleCtx,\n            useLabelLayer,\n            pickModes,\n            directionKeys: {\n                [ChartAxisDirection.X]: ['angleKey'],\n                [ChartAxisDirection.Y]: ['radiusKey'],\n            },\n            directionNames: {\n                [ChartAxisDirection.X]: ['angleName'],\n                [ChartAxisDirection.Y]: ['radiusName'],\n            },\n        });\n        /**\n         * The center of the polar series (for example, the center of a pie).\n         * If the polar chart has multiple series, all of them will have their\n         * center set to the same value as a result of the polar chart layout.\n         * The center coordinates are not supposed to be set by the user.\n         */\n        this.centerX = 0;\n        this.centerY = 0;\n        /**\n         * The maximum radius the series can use.\n         * This value is set automatically as a result of the polar chart layout\n         * and is not supposed to be set by the user.\n         */\n        this.radius = 0;\n    }\n    getLabelData() {\n        return [];\n    }\n    computeLabelsBBox(_options, _seriesRect) {\n        return null;\n    }\n}\n\nfunction isPointInSector(x, y, sector) {\n    const radius = Math.sqrt(Math.pow(x, 2) + Math.pow(y, 2));\n    const { innerRadius, outerRadius } = sector;\n    if (radius < Math.min(innerRadius, outerRadius) || radius > Math.max(innerRadius, outerRadius)) {\n        return false;\n    }\n    // Start and End angles are expected to be [-90, 270]\n    // while Math.atan2 returns [-180, 180]\n    let angle = Math.atan2(y, x);\n    if (angle < -Math.PI / 2) {\n        angle += 2 * Math.PI;\n    }\n    // Start is actually bigger than End clock-wise\n    const { startAngle, endAngle } = sector;\n    if (endAngle === -Math.PI / 2) {\n        return angle < startAngle;\n    }\n    if (startAngle === (3 * Math.PI) / 2) {\n        return angle > endAngle;\n    }\n    return angle <= endAngle && angle >= startAngle;\n}\nfunction lineCollidesSector(line, sector) {\n    const { startAngle, endAngle, innerRadius, outerRadius } = sector;\n    const outerStart = { x: outerRadius * Math.cos(startAngle), y: outerRadius * Math.sin(startAngle) };\n    const outerEnd = { x: outerRadius * Math.cos(endAngle), y: outerRadius * Math.sin(endAngle) };\n    const innerStart = innerRadius === 0\n        ? { x: 0, y: 0 }\n        : { x: innerRadius * Math.cos(startAngle), y: innerRadius * Math.sin(startAngle) };\n    const innerEnd = innerRadius === 0\n        ? { x: 0, y: 0 }\n        : { x: innerRadius * Math.cos(endAngle), y: innerRadius * Math.sin(endAngle) };\n    return (segmentIntersection(line.start.x, line.start.y, line.end.x, line.end.y, outerStart.x, outerStart.y, innerStart.x, innerStart.y) != null ||\n        segmentIntersection(line.start.x, line.start.y, line.end.x, line.end.y, outerEnd.x, outerEnd.y, innerEnd.x, innerEnd.y) != null ||\n        arcIntersections(0, 0, outerRadius, startAngle, endAngle, true, line.start.x, line.start.y, line.end.x, line.end.y).length > 0);\n}\nfunction boxCollidesSector(box, sector) {\n    const topLeft = { x: box.x, y: box.y };\n    const topRight = { x: box.x + box.width, y: box.y };\n    const bottomLeft = { x: box.x, y: box.y + box.height };\n    const bottomRight = { x: box.x + box.width, y: box.y + box.height };\n    return (lineCollidesSector({ start: topLeft, end: topRight }, sector) ||\n        lineCollidesSector({ start: bottomLeft, end: bottomRight }, sector));\n}\n\nvar __decorate$1x = ( false) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nclass Sector extends Path {\n    constructor() {\n        super(...arguments);\n        this.centerX = 0;\n        this.centerY = 0;\n        this.innerRadius = 10;\n        this.outerRadius = 20;\n        this.startAngle = 0;\n        this.endAngle = Math.PI * 2;\n        this.angleOffset = 0;\n    }\n    computeBBox() {\n        const radius = this.outerRadius;\n        return new BBox(this.centerX - radius, this.centerY - radius, radius * 2, radius * 2);\n    }\n    updatePath() {\n        const path = this.path;\n        const angleOffset = this.angleOffset;\n        const startAngle = Math.min(this.startAngle, this.endAngle) + angleOffset;\n        const endAngle = Math.max(this.startAngle, this.endAngle) + angleOffset;\n        const innerRadius = Math.min(this.innerRadius, this.outerRadius);\n        const outerRadius = Math.max(this.innerRadius, this.outerRadius);\n        const fullPie = isEqual$2(normalizeAngle360(this.startAngle), normalizeAngle360(this.endAngle));\n        const centerX = this.centerX;\n        const centerY = this.centerY;\n        path.clear();\n        if (fullPie) {\n            path.arc(centerX, centerY, outerRadius, startAngle, endAngle);\n            if (innerRadius > 0) {\n                path.moveTo(centerX + innerRadius * Math.cos(endAngle), centerY + innerRadius * Math.sin(endAngle));\n                path.arc(centerX, centerY, innerRadius, endAngle, startAngle, true);\n            }\n        }\n        else {\n            path.moveTo(centerX + innerRadius * Math.cos(startAngle), centerY + innerRadius * Math.sin(startAngle));\n            path.arc(centerX, centerY, outerRadius, startAngle, endAngle);\n            if (innerRadius > 0) {\n                path.arc(centerX, centerY, innerRadius, endAngle, startAngle, true);\n            }\n            else {\n                path.lineTo(centerX, centerY);\n            }\n        }\n        path.closePath();\n        this.dirtyPath = false;\n    }\n    isPointInPath(x, y) {\n        const { angleOffset } = this;\n        const startAngle = this.startAngle + angleOffset;\n        const endAngle = this.endAngle + angleOffset;\n        const innerRadius = Math.min(this.innerRadius, this.outerRadius);\n        const outerRadius = Math.max(this.innerRadius, this.outerRadius);\n        const point = this.transformPoint(x, y);\n        return isPointInSector(point.x, point.y, { startAngle, endAngle, innerRadius, outerRadius });\n    }\n}\nSector.className = 'Sector';\n__decorate$1x([\n    ScenePathChangeDetection()\n], Sector.prototype, \"centerX\", void 0);\n__decorate$1x([\n    ScenePathChangeDetection()\n], Sector.prototype, \"centerY\", void 0);\n__decorate$1x([\n    ScenePathChangeDetection()\n], Sector.prototype, \"innerRadius\", void 0);\n__decorate$1x([\n    ScenePathChangeDetection()\n], Sector.prototype, \"outerRadius\", void 0);\n__decorate$1x([\n    ScenePathChangeDetection()\n], Sector.prototype, \"startAngle\", void 0);\n__decorate$1x([\n    ScenePathChangeDetection()\n], Sector.prototype, \"endAngle\", void 0);\n__decorate$1x([\n    ScenePathChangeDetection()\n], Sector.prototype, \"angleOffset\", void 0);\n\nconst SMALLEST_KEY_INTERVAL = {\n    type: 'reducer',\n    property: 'smallestKeyInterval',\n    initialValue: Infinity,\n    reducer: () => {\n        let prevX = NaN;\n        return (smallestSoFar, next) => {\n            const nextX = next.keys[0];\n            const interval = Math.abs(nextX - prevX);\n            prevX = nextX;\n            if (!isNaN(interval) && interval > 0 && interval < smallestSoFar) {\n                return interval;\n            }\n            return smallestSoFar;\n        };\n    },\n};\nconst AGG_VALUES_EXTENT = {\n    type: 'processor',\n    property: 'aggValuesExtent',\n    calculate: (processedData) => {\n        var _a, _b, _c, _d;\n        const result = [...((_b = (_a = processedData.domain.aggValues) === null || _a === void 0 ? void 0 : _a[0]) !== null && _b !== void 0 ? _b : [0, 0])];\n        for (const [min, max] of (_d = (_c = processedData.domain.aggValues) === null || _c === void 0 ? void 0 : _c.slice(1)) !== null && _d !== void 0 ? _d : []) {\n            if (min < result[0]) {\n                result[0] = min;\n            }\n            if (max > result[1]) {\n                result[1] = max;\n            }\n        }\n        return result;\n    },\n};\nconst SORT_DOMAIN_GROUPS = {\n    type: 'processor',\n    property: 'sortedGroupDomain',\n    calculate: ({ domain: { groups } }) => {\n        if (groups == null)\n            return undefined;\n        return [...groups].sort((a, b) => {\n            for (let i = 0; i < a.length; i++) {\n                const result = a[i] - b[i];\n                if (result !== 0) {\n                    return result;\n                }\n            }\n            return 0;\n        });\n    },\n};\nfunction normaliseGroupTo(properties, normaliseTo, mode = 'sum') {\n    const normalise = (val, extent) => {\n        const result = (val * normaliseTo) / extent;\n        if (result >= 0) {\n            return Math.min(normaliseTo, result);\n        }\n        return Math.max(-normaliseTo, result);\n    };\n    return {\n        type: 'group-value-processor',\n        properties,\n        adjust: () => (values, valueIndexes) => {\n            const valuesExtent = [0, 0];\n            for (const valueIdx of valueIndexes) {\n                const value = values[valueIdx];\n                const valIdx = value < 0 ? 0 : 1;\n                if (mode === 'sum') {\n                    valuesExtent[valIdx] += value;\n                }\n                else if (valIdx === 0) {\n                    valuesExtent[valIdx] = Math.min(valuesExtent[valIdx], value);\n                }\n                else {\n                    valuesExtent[valIdx] = Math.max(valuesExtent[valIdx], value);\n                }\n            }\n            const extent = Math.max(Math.abs(valuesExtent[0]), valuesExtent[1]);\n            for (const valueIdx of valueIndexes) {\n                values[valueIdx] = normalise(values[valueIdx], extent);\n            }\n        },\n    };\n}\nfunction normalisePropertyTo(property, normaliseTo, rangeMin, rangeMax) {\n    const normaliseSpan = normaliseTo[1] - normaliseTo[0];\n    const normalise = (val, start, span) => {\n        const result = normaliseTo[0] + ((val - start) / span) * normaliseSpan;\n        if (span === 0)\n            return normaliseTo[1];\n        if (result >= normaliseTo[1])\n            return normaliseTo[1];\n        if (result < normaliseTo[0])\n            return normaliseTo[0];\n        return result;\n    };\n    return {\n        type: 'property-value-processor',\n        property,\n        adjust: () => (pData, pIdx) => {\n            let [start, end] = pData.domain.values[pIdx];\n            if (rangeMin != null)\n                start = rangeMin;\n            if (rangeMax != null)\n                end = rangeMax;\n            const span = end - start;\n            pData.domain.values[pIdx] = [normaliseTo[0], normaliseTo[1]];\n            for (const group of pData.data) {\n                let groupValues = group.values;\n                if (pData.type === 'ungrouped') {\n                    groupValues = [groupValues];\n                }\n                for (const values of groupValues) {\n                    values[pIdx] = normalise(values[pIdx], start, span);\n                }\n            }\n        },\n    };\n}\n\nvar __decorate$1w = ( false) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nvar __awaiter$9 = ( false) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nclass PieSeriesNodeBaseClickEvent extends SeriesNodeBaseClickEvent {\n    constructor(angleKey, calloutLabelKey, sectorLabelKey, radiusKey, nativeEvent, datum, series) {\n        super(nativeEvent, datum, series);\n        this.angleKey = angleKey;\n        this.calloutLabelKey = calloutLabelKey;\n        this.sectorLabelKey = sectorLabelKey;\n        this.radiusKey = radiusKey;\n    }\n}\nclass PieSeriesNodeClickEvent extends PieSeriesNodeBaseClickEvent {\n    constructor() {\n        super(...arguments);\n        this.type = 'nodeClick';\n    }\n}\nclass PieSeriesNodeDoubleClickEvent extends PieSeriesNodeBaseClickEvent {\n    constructor() {\n        super(...arguments);\n        this.type = 'nodeDoubleClick';\n    }\n}\nvar PieNodeTag;\n(function (PieNodeTag) {\n    PieNodeTag[PieNodeTag[\"Sector\"] = 0] = \"Sector\";\n    PieNodeTag[PieNodeTag[\"Callout\"] = 1] = \"Callout\";\n    PieNodeTag[PieNodeTag[\"Label\"] = 2] = \"Label\";\n})(PieNodeTag || (PieNodeTag = {}));\nclass PieSeriesCalloutLabel extends Label$1 {\n    constructor() {\n        super(...arguments);\n        this.offset = 3; // from the callout line\n        this.minAngle = 0; // in degrees\n        this.formatter = undefined;\n        this.minSpacing = 4;\n        this.maxCollisionOffset = 50;\n    }\n}\n__decorate$1w([\n    Validate(NUMBER(0))\n], PieSeriesCalloutLabel.prototype, \"offset\", void 0);\n__decorate$1w([\n    Validate(NUMBER(0))\n], PieSeriesCalloutLabel.prototype, \"minAngle\", void 0);\n__decorate$1w([\n    Validate(OPT_FUNCTION)\n], PieSeriesCalloutLabel.prototype, \"formatter\", void 0);\n__decorate$1w([\n    Validate(NUMBER(0))\n], PieSeriesCalloutLabel.prototype, \"minSpacing\", void 0);\n__decorate$1w([\n    Validate(NUMBER(0))\n], PieSeriesCalloutLabel.prototype, \"maxCollisionOffset\", void 0);\nclass PieSeriesSectorLabel extends Label$1 {\n    constructor() {\n        super(...arguments);\n        this.positionOffset = 0;\n        this.positionRatio = 0.5;\n        this.formatter = undefined;\n    }\n}\n__decorate$1w([\n    Validate(NUMBER())\n], PieSeriesSectorLabel.prototype, \"positionOffset\", void 0);\n__decorate$1w([\n    Validate(NUMBER(0, 1))\n], PieSeriesSectorLabel.prototype, \"positionRatio\", void 0);\n__decorate$1w([\n    Validate(OPT_FUNCTION)\n], PieSeriesSectorLabel.prototype, \"formatter\", void 0);\nclass PieSeriesCalloutLine {\n    constructor() {\n        this.colors = undefined;\n        this.length = 10;\n        this.strokeWidth = 1;\n    }\n}\n__decorate$1w([\n    Validate(OPT_COLOR_STRING_ARRAY)\n], PieSeriesCalloutLine.prototype, \"colors\", void 0);\n__decorate$1w([\n    Validate(NUMBER(0))\n], PieSeriesCalloutLine.prototype, \"length\", void 0);\n__decorate$1w([\n    Validate(NUMBER(0))\n], PieSeriesCalloutLine.prototype, \"strokeWidth\", void 0);\nclass PieSeriesTooltip extends SeriesTooltip {\n    constructor() {\n        super(...arguments);\n        this.renderer = undefined;\n    }\n}\n__decorate$1w([\n    Validate(OPT_FUNCTION)\n], PieSeriesTooltip.prototype, \"renderer\", void 0);\nclass PieTitle extends Caption {\n    constructor() {\n        super(...arguments);\n        this.showInLegend = false;\n    }\n}\n__decorate$1w([\n    Validate(BOOLEAN)\n], PieTitle.prototype, \"showInLegend\", void 0);\nclass DoughnutInnerLabel extends Label$1 {\n    constructor() {\n        super(...arguments);\n        this.text = '';\n        this.margin = 2;\n    }\n}\n__decorate$1w([\n    Validate(STRING)\n], DoughnutInnerLabel.prototype, \"text\", void 0);\n__decorate$1w([\n    Validate(NUMBER())\n], DoughnutInnerLabel.prototype, \"margin\", void 0);\nclass DoughnutInnerCircle {\n    constructor() {\n        this.fill = 'transparent';\n        this.fillOpacity = 1;\n    }\n}\n__decorate$1w([\n    Validate(COLOR_STRING)\n], DoughnutInnerCircle.prototype, \"fill\", void 0);\n__decorate$1w([\n    Validate(OPT_NUMBER(0, 1))\n], DoughnutInnerCircle.prototype, \"fillOpacity\", void 0);\nclass PieStateMachine extends StateMachine {\n}\nclass PieSeries extends PolarSeries {\n    constructor(moduleCtx) {\n        super({ moduleCtx, useLabelLayer: true });\n        this.radiusScale = new LinearScale$1();\n        this.groupSelection = Selection.select(this.contentGroup, Group);\n        this.highlightSelection = Selection.select(this.highlightGroup, Group);\n        this.nodeData = [];\n        // When a user toggles a series item (e.g. from the legend), its boolean state is recorded here.\n        this.seriesItemEnabled = [];\n        this.title = undefined;\n        this.calloutLabel = new PieSeriesCalloutLabel();\n        this.sectorLabel = new PieSeriesSectorLabel();\n        this.calloutLine = new PieSeriesCalloutLine();\n        this.tooltip = new PieSeriesTooltip();\n        /**\n         * The key of the numeric field to use to determine the angle (for example,\n         * a pie sector angle).\n         */\n        this.angleKey = '';\n        this.angleName = '';\n        this.innerLabels = [];\n        this.innerCircle = undefined;\n        /**\n         * The key of the numeric field to use to determine the radii of pie sectors.\n         * The largest value will correspond to the full radius and smaller values to\n         * proportionally smaller radii.\n         */\n        this.radiusKey = undefined;\n        this.radiusName = undefined;\n        this.radiusMin = undefined;\n        this.radiusMax = undefined;\n        this.calloutLabelKey = undefined;\n        this.calloutLabelName = undefined;\n        this.sectorLabelKey = undefined;\n        this.sectorLabelName = undefined;\n        this.legendItemKey = undefined;\n        this.fills = ['#c16068', '#a2bf8a', '#ebcc87', '#80a0c3', '#b58dae', '#85c0d1'];\n        this.strokes = ['#874349', '#718661', '#a48f5f', '#5a7088', '#7f637a', '#5d8692'];\n        this.fillOpacity = 1;\n        this.strokeOpacity = 1;\n        this.lineDash = [0];\n        this.lineDashOffset = 0;\n        this.formatter = undefined;\n        /**\n         * The series rotation in degrees.\n         */\n        this.rotation = 0;\n        this.outerRadiusOffset = 0;\n        this.outerRadiusRatio = 1;\n        this.innerRadiusOffset = 0;\n        this.innerRadiusRatio = 1;\n        this.strokeWidth = 1;\n        this.shadow = undefined;\n        this.highlightStyle = new HighlightStyle();\n        this.surroundingRadius = undefined;\n        this.angleScale = new LinearScale$1();\n        // Each sector is a ratio of the whole, where all ratios add up to 1.\n        this.angleScale.domain = [0, 1];\n        // Add 90 deg to start the first pie at 12 o'clock.\n        this.angleScale.range = [-Math.PI, Math.PI].map((angle) => angle + Math.PI / 2);\n        this.backgroundGroup = this.rootGroup.appendChild(new Group({\n            name: `${this.id}-background`,\n            layer: true,\n            zIndex: Layers.SERIES_BACKGROUND_ZINDEX,\n        }));\n        const pieCalloutLabels = new Group({ name: 'pieCalloutLabels' });\n        const pieSectorLabels = new Group({ name: 'pieSectorLabels' });\n        const innerLabels = new Group({ name: 'innerLabels' });\n        this.labelGroup.append(pieCalloutLabels);\n        this.labelGroup.append(pieSectorLabels);\n        this.labelGroup.append(innerLabels);\n        this.calloutLabelSelection = Selection.select(pieCalloutLabels, Group);\n        this.sectorLabelSelection = Selection.select(pieSectorLabels, Text);\n        this.innerLabelsSelection = Selection.select(innerLabels, Text);\n        this.animationState = new PieStateMachine('empty', {\n            empty: {\n                on: {\n                    update: {\n                        target: 'ready',\n                        action: () => this.animateEmptyUpdateReady(),\n                    },\n                },\n            },\n            ready: {\n                on: {\n                    update: {\n                        target: 'ready',\n                        action: () => this.animateReadyUpdateReady(),\n                    },\n                },\n            },\n        });\n    }\n    set data(input) {\n        this._data = input;\n        this.processSeriesItemEnabled();\n    }\n    get data() {\n        return this._data;\n    }\n    addChartEventListeners() {\n        var _a;\n        (_a = this.chartEventManager) === null || _a === void 0 ? void 0 : _a.addListener('legend-item-click', (event) => this.onLegendItemClick(event));\n    }\n    visibleChanged() {\n        this.processSeriesItemEnabled();\n    }\n    processSeriesItemEnabled() {\n        var _a;\n        const { data, visible } = this;\n        this.seriesItemEnabled = (_a = data === null || data === void 0 ? void 0 : data.map(() => visible)) !== null && _a !== void 0 ? _a : [];\n    }\n    getDomain(direction) {\n        if (direction === ChartAxisDirection.X) {\n            return this.angleScale.domain;\n        }\n        else {\n            return this.radiusScale.domain;\n        }\n    }\n    processData() {\n        var _a, _b;\n        return __awaiter$9(this, void 0, void 0, function* () {\n            let { data = [] } = this;\n            const { angleKey, radiusKey, seriesItemEnabled } = this;\n            if (!angleKey)\n                return;\n            const extraProps = [];\n            if (radiusKey) {\n                extraProps.push(rangedValueProperty(radiusKey, { id: 'radiusValue', min: (_a = this.radiusMin) !== null && _a !== void 0 ? _a : 0, max: this.radiusMax }), valueProperty(radiusKey, true, { id: `radiusRaw` }), // Raw value pass-through.\n                normalisePropertyTo({ id: 'radiusValue' }, [0, 1], (_b = this.radiusMin) !== null && _b !== void 0 ? _b : 0, this.radiusMax));\n                extraProps.push();\n            }\n            data = data.map((d, idx) => (seriesItemEnabled[idx] ? d : Object.assign(Object.assign({}, d), { [angleKey]: 0 })));\n            this.dataModel = new DataModel({\n                props: [\n                    accumulativeValueProperty(angleKey, true, { id: `angleValue` }),\n                    valueProperty(angleKey, true, { id: `angleRaw` }),\n                    normalisePropertyTo({ id: 'angleValue' }, [0, 1], 0),\n                    ...extraProps,\n                ],\n            });\n            this.processedData = this.dataModel.processData(data);\n        });\n    }\n    maybeRefreshNodeData() {\n        if (!this.nodeDataRefresh)\n            return;\n        const [{ nodeData = [] } = {}] = this._createNodeData();\n        this.nodeData = nodeData;\n        this.nodeDataRefresh = false;\n    }\n    createNodeData() {\n        return __awaiter$9(this, void 0, void 0, function* () {\n            return this._createNodeData();\n        });\n    }\n    _createNodeData() {\n        var _a, _b, _c, _d;\n        const { id: seriesId, processedData, dataModel, rotation, angleScale } = this;\n        if (!processedData || !dataModel || processedData.type !== 'ungrouped')\n            return [];\n        const angleIdx = (_b = (_a = dataModel.resolveProcessedDataIndexById(`angleValue`)) === null || _a === void 0 ? void 0 : _a.index) !== null && _b !== void 0 ? _b : -1;\n        const radiusIdx = (_d = (_c = dataModel.resolveProcessedDataIndexById(`radiusValue`)) === null || _c === void 0 ? void 0 : _c.index) !== null && _d !== void 0 ? _d : -1;\n        if (angleIdx < 0)\n            return [];\n        let currentStart = 0;\n        const nodeData = processedData.data.map((group, index) => {\n            var _a;\n            const { datum, values } = group;\n            const currentValue = values[angleIdx];\n            const startAngle = angleScale.convert(currentStart) + toRadians$1(rotation);\n            currentStart = currentValue;\n            const endAngle = angleScale.convert(currentStart) + toRadians$1(rotation);\n            const span = Math.abs(endAngle - startAngle);\n            const midAngle = startAngle + span / 2;\n            const angleValue = values[angleIdx + 1];\n            const radius = radiusIdx >= 0 ? (_a = values[radiusIdx]) !== null && _a !== void 0 ? _a : 1 : 1;\n            const radiusValue = radiusIdx >= 0 ? values[radiusIdx + 1] : undefined;\n            const labels = this.getLabels(datum, midAngle, span, true);\n            const sectorFormat = this.getSectorFormat(datum, index, index, false);\n            return Object.assign({ itemId: index, series: this, datum,\n                index,\n                angleValue,\n                midAngle, midCos: Math.cos(midAngle), midSin: Math.sin(midAngle), startAngle,\n                endAngle,\n                sectorFormat,\n                radius,\n                radiusValue }, labels);\n        });\n        return [\n            {\n                itemId: seriesId,\n                nodeData,\n                labelData: nodeData,\n            },\n        ];\n    }\n    getLabels(datum, midAngle, span, skipDisabled) {\n        const { calloutLabel, sectorLabel, legendItemKey, ctx: { callbackCache }, } = this;\n        const calloutLabelKey = !skipDisabled || calloutLabel.enabled ? this.calloutLabelKey : undefined;\n        const sectorLabelKey = !skipDisabled || sectorLabel.enabled ? this.sectorLabelKey : undefined;\n        if (!calloutLabelKey && !sectorLabelKey && !legendItemKey)\n            return {};\n        const labelFormatterParams = this.getLabelFormatterParams(datum);\n        let calloutLabelText;\n        if (calloutLabelKey) {\n            const calloutLabelMinAngle = toRadians$1(calloutLabel.minAngle);\n            const calloutLabelVisible = span > calloutLabelMinAngle;\n            if (!calloutLabelVisible) {\n                calloutLabelText = undefined;\n            }\n            else if (calloutLabel.formatter) {\n                calloutLabelText = callbackCache.call(calloutLabel.formatter, labelFormatterParams);\n            }\n            else {\n                calloutLabelText = String(datum[calloutLabelKey]);\n            }\n        }\n        let sectorLabelText;\n        if (sectorLabelKey) {\n            if (sectorLabel.formatter) {\n                sectorLabelText = callbackCache.call(sectorLabel.formatter, labelFormatterParams);\n            }\n            else {\n                sectorLabelText = String(datum[sectorLabelKey]);\n            }\n        }\n        let legendItemText;\n        if (legendItemKey) {\n            legendItemText = String(datum[legendItemKey]);\n        }\n        return Object.assign(Object.assign(Object.assign({}, (calloutLabelText != null\n            ? {\n                calloutLabel: Object.assign(Object.assign({}, this.getTextAlignment(midAngle)), { text: calloutLabelText, hidden: false, collisionTextAlign: undefined, collisionOffsetY: 0, box: undefined }),\n            }\n            : {})), (sectorLabelText != null ? { sectorLabel: { text: sectorLabelText } } : {})), (legendItemKey != null && legendItemText != null\n            ? { legendItem: { key: legendItemKey, text: legendItemText } }\n            : {}));\n    }\n    getLabelFormatterParams(datum) {\n        const { id: seriesId, radiusKey, radiusName, angleKey, angleName, calloutLabelKey, calloutLabelName, sectorLabelKey, sectorLabelName, } = this;\n        return {\n            datum,\n            angleKey,\n            angleValue: datum[angleKey],\n            angleName,\n            radiusKey,\n            radiusValue: radiusKey ? datum[radiusKey] : undefined,\n            radiusName,\n            calloutLabelKey,\n            calloutLabelValue: calloutLabelKey ? datum[calloutLabelKey] : undefined,\n            calloutLabelName,\n            sectorLabelKey,\n            sectorLabelValue: sectorLabelKey ? datum[sectorLabelKey] : undefined,\n            sectorLabelName,\n            seriesId,\n        };\n    }\n    getTextAlignment(midAngle) {\n        const quadrantTextOpts = [\n            { textAlign: 'center', textBaseline: 'bottom' },\n            { textAlign: 'left', textBaseline: 'middle' },\n            { textAlign: 'center', textBaseline: 'hanging' },\n            { textAlign: 'right', textBaseline: 'middle' },\n        ];\n        const midAngle180 = normalizeAngle180(midAngle);\n        // Split the circle into quadrants like so: ⊗\n        const quadrantStart = (-3 * Math.PI) / 4; // same as `normalizeAngle180(toRadians(-135))`\n        const quadrantOffset = midAngle180 - quadrantStart;\n        const quadrant = Math.floor(quadrantOffset / (Math.PI / 2));\n        const quadrantIndex = mod(quadrant, quadrantTextOpts.length);\n        return quadrantTextOpts[quadrantIndex];\n    }\n    getSectorFormat(datum, itemId, index, highlight) {\n        var _a, _b, _c, _d, _e, _f, _g, _h, _j;\n        const { angleKey, radiusKey, fills, strokes, fillOpacity: seriesFillOpacity, formatter, id: seriesId, ctx: { callbackCache }, } = this;\n        const highlightedDatum = (_a = this.highlightManager) === null || _a === void 0 ? void 0 : _a.getActiveHighlight();\n        const isDatumHighlighted = highlight && (highlightedDatum === null || highlightedDatum === void 0 ? void 0 : highlightedDatum.series) === this && itemId === highlightedDatum.itemId;\n        const highlightedStyle = isDatumHighlighted ? this.highlightStyle.item : null;\n        const fill = (_b = highlightedStyle === null || highlightedStyle === void 0 ? void 0 : highlightedStyle.fill) !== null && _b !== void 0 ? _b : fills[index % fills.length];\n        const fillOpacity = (_c = highlightedStyle === null || highlightedStyle === void 0 ? void 0 : highlightedStyle.fillOpacity) !== null && _c !== void 0 ? _c : seriesFillOpacity;\n        const stroke = (_d = highlightedStyle === null || highlightedStyle === void 0 ? void 0 : highlightedStyle.stroke) !== null && _d !== void 0 ? _d : strokes[index % strokes.length];\n        const strokeWidth = (_e = highlightedStyle === null || highlightedStyle === void 0 ? void 0 : highlightedStyle.strokeWidth) !== null && _e !== void 0 ? _e : this.getStrokeWidth(this.strokeWidth);\n        let format;\n        if (formatter) {\n            format = callbackCache.call(formatter, {\n                datum,\n                angleKey,\n                radiusKey,\n                fill,\n                stroke,\n                strokeWidth,\n                highlighted: isDatumHighlighted,\n                seriesId,\n            });\n        }\n        return {\n            fill: (_f = format === null || format === void 0 ? void 0 : format.fill) !== null && _f !== void 0 ? _f : fill,\n            fillOpacity: (_g = format === null || format === void 0 ? void 0 : format.fillOpacity) !== null && _g !== void 0 ? _g : fillOpacity,\n            stroke: (_h = format === null || format === void 0 ? void 0 : format.stroke) !== null && _h !== void 0 ? _h : stroke,\n            strokeWidth: (_j = format === null || format === void 0 ? void 0 : format.strokeWidth) !== null && _j !== void 0 ? _j : strokeWidth,\n        };\n    }\n    getInnerRadius() {\n        const { radius, innerRadiusRatio, innerRadiusOffset } = this;\n        const innerRadius = radius * (innerRadiusRatio !== null && innerRadiusRatio !== void 0 ? innerRadiusRatio : 1) + (innerRadiusOffset ? innerRadiusOffset : 0);\n        if (innerRadius === radius || innerRadius < 0) {\n            return 0;\n        }\n        return innerRadius;\n    }\n    getOuterRadius() {\n        const { radius, outerRadiusRatio, outerRadiusOffset } = this;\n        const outerRadius = radius * (outerRadiusRatio !== null && outerRadiusRatio !== void 0 ? outerRadiusRatio : 1) + (outerRadiusOffset ? outerRadiusOffset : 0);\n        if (outerRadius < 0) {\n            return 0;\n        }\n        return outerRadius;\n    }\n    updateRadiusScale() {\n        const innerRadius = this.getInnerRadius();\n        const outerRadius = this.getOuterRadius();\n        this.radiusScale.range = [innerRadius, outerRadius];\n    }\n    getTitleTranslationY() {\n        var _a, _b;\n        const outerRadius = Math.max(0, this.radiusScale.range[1]);\n        if (outerRadius === 0) {\n            return NaN;\n        }\n        const spacing = (_b = (_a = this.title) === null || _a === void 0 ? void 0 : _a.spacing) !== null && _b !== void 0 ? _b : 0;\n        const titleOffset = 2 + spacing;\n        const dy = Math.max(0, -outerRadius);\n        return -outerRadius - titleOffset - dy;\n    }\n    update({ seriesRect }) {\n        return __awaiter$9(this, void 0, void 0, function* () {\n            const { title } = this;\n            this.maybeRefreshNodeData();\n            this.updateTitleNodes();\n            this.updateRadiusScale();\n            this.updateInnerCircleNodes();\n            this.rootGroup.translationX = this.centerX;\n            this.rootGroup.translationY = this.centerY;\n            if (title) {\n                const dy = this.getTitleTranslationY();\n                const titleBox = title.node.computeBBox();\n                title.node.visible =\n                    title.enabled && isFinite(dy) && !this.bboxIntersectsSurroundingSeries(titleBox, 0, dy);\n                title.node.translationY = isFinite(dy) ? dy : 0;\n            }\n            this.updateNodeMidPoint();\n            yield this.updateSelections();\n            yield this.updateNodes(seriesRect);\n        });\n    }\n    updateTitleNodes() {\n        var _a, _b;\n        const { title, oldTitle } = this;\n        if (oldTitle !== title) {\n            if (oldTitle) {\n                (_a = this.labelGroup) === null || _a === void 0 ? void 0 : _a.removeChild(oldTitle.node);\n            }\n            if (title) {\n                title.node.textBaseline = 'bottom';\n                (_b = this.labelGroup) === null || _b === void 0 ? void 0 : _b.appendChild(title.node);\n            }\n            this.oldTitle = title;\n        }\n    }\n    updateInnerCircleNodes() {\n        var _a;\n        const { innerCircle, oldInnerCircle, innerCircleNode: oldNode } = this;\n        if (oldInnerCircle !== innerCircle) {\n            let circle;\n            if (oldNode) {\n                this.backgroundGroup.removeChild(oldNode);\n            }\n            if (innerCircle) {\n                circle = new Circle();\n                circle.fill = innerCircle.fill;\n                circle.fillOpacity = (_a = innerCircle.fillOpacity) !== null && _a !== void 0 ? _a : 1;\n                this.backgroundGroup.appendChild(circle);\n            }\n            this.oldInnerCircle = innerCircle;\n            this.innerCircleNode = circle;\n        }\n    }\n    updateNodeMidPoint() {\n        this.nodeData.forEach((d) => {\n            const radius = this.radiusScale.convert(d.radius);\n            d.nodeMidPoint = {\n                x: d.midCos * Math.max(0, radius / 2),\n                y: d.midSin * Math.max(0, radius / 2),\n            };\n        });\n    }\n    updateSelections() {\n        return __awaiter$9(this, void 0, void 0, function* () {\n            yield this.updateGroupSelection();\n        });\n    }\n    updateGroupSelection() {\n        return __awaiter$9(this, void 0, void 0, function* () {\n            const { groupSelection, highlightSelection, calloutLabelSelection, sectorLabelSelection, innerLabelsSelection, } = this;\n            const update = (selection) => {\n                return selection.update(this.nodeData, (group) => {\n                    const sector = new Sector();\n                    sector.tag = PieNodeTag.Sector;\n                    group.appendChild(sector);\n                });\n            };\n            this.groupSelection = update(groupSelection);\n            this.highlightSelection = update(highlightSelection);\n            calloutLabelSelection.update(this.nodeData, (group) => {\n                const line = new Line();\n                line.tag = PieNodeTag.Callout;\n                line.pointerEvents = PointerEvents.None;\n                group.appendChild(line);\n                const text = new Text();\n                text.tag = PieNodeTag.Label;\n                text.pointerEvents = PointerEvents.None;\n                group.appendChild(text);\n            });\n            sectorLabelSelection.update(this.nodeData, (node) => {\n                node.pointerEvents = PointerEvents.None;\n            });\n            innerLabelsSelection.update(this.innerLabels, (node) => {\n                node.pointerEvents = PointerEvents.None;\n            });\n        });\n    }\n    updateNodes(seriesRect) {\n        var _a;\n        return __awaiter$9(this, void 0, void 0, function* () {\n            const highlightedDatum = (_a = this.highlightManager) === null || _a === void 0 ? void 0 : _a.getActiveHighlight();\n            const isVisible = this.seriesItemEnabled.indexOf(true) >= 0;\n            this.rootGroup.visible = isVisible;\n            this.backgroundGroup.visible = isVisible;\n            this.contentGroup.visible = isVisible;\n            this.highlightGroup.visible = isVisible && (highlightedDatum === null || highlightedDatum === void 0 ? void 0 : highlightedDatum.series) === this;\n            this.labelGroup.visible = isVisible;\n            this.contentGroup.opacity = this.getOpacity();\n            this.updateInnerCircle();\n            const { radiusScale } = this;\n            const innerRadius = radiusScale.convert(0);\n            const updateSectorFn = (sector, datum, index, isDatumHighlighted) => {\n                const radius = radiusScale.convert(datum.radius);\n                // Bring highlighted sector's parent group to front.\n                const sectorParent = sector.parent;\n                const sectorGrandParent = sectorParent === null || sectorParent === void 0 ? void 0 : sectorParent.parent;\n                if (isDatumHighlighted && sectorParent && sectorGrandParent) {\n                    sectorGrandParent.removeChild(sectorParent);\n                    sectorGrandParent.appendChild(sectorParent);\n                }\n                sector.innerRadius = Math.max(0, innerRadius);\n                sector.outerRadius = Math.max(0, radius);\n                if (isDatumHighlighted) {\n                    sector.startAngle = datum.startAngle;\n                    sector.endAngle = datum.endAngle;\n                }\n                const format = this.getSectorFormat(datum.datum, datum.itemId, index, isDatumHighlighted);\n                sector.fill = format.fill;\n                sector.stroke = format.stroke;\n                sector.strokeWidth = format.strokeWidth;\n                sector.fillOpacity = format.fillOpacity;\n                sector.strokeOpacity = this.strokeOpacity;\n                sector.lineDash = this.lineDash;\n                sector.lineDashOffset = this.lineDashOffset;\n                sector.fillShadow = this.shadow;\n                sector.lineJoin = 'round';\n                sector.visible = this.seriesItemEnabled[index];\n            };\n            this.groupSelection\n                .selectByTag(PieNodeTag.Sector)\n                .forEach((node, index) => updateSectorFn(node, node.datum, index, false));\n            this.highlightSelection.selectByTag(PieNodeTag.Sector).forEach((node, index) => {\n                const isDatumHighlighted = (highlightedDatum === null || highlightedDatum === void 0 ? void 0 : highlightedDatum.series) === this && node.datum.itemId === highlightedDatum.itemId;\n                node.visible = isDatumHighlighted;\n                if (node.visible) {\n                    updateSectorFn(node, node.datum, index, isDatumHighlighted);\n                }\n            });\n            this.animationState.transition('update');\n            this.updateCalloutLineNodes();\n            this.updateCalloutLabelNodes(seriesRect);\n            this.updateSectorLabelNodes();\n            this.updateInnerLabelNodes();\n        });\n    }\n    updateCalloutLineNodes() {\n        var _a;\n        const { radiusScale, calloutLine } = this;\n        const calloutLength = calloutLine.length;\n        const calloutStrokeWidth = calloutLine.strokeWidth;\n        const calloutColors = (_a = calloutLine.colors) !== null && _a !== void 0 ? _a : this.strokes;\n        const { offset } = this.calloutLabel;\n        this.calloutLabelSelection.selectByTag(PieNodeTag.Callout).forEach((line, index) => {\n            const datum = line.datum;\n            const radius = radiusScale.convert(datum.radius);\n            const outerRadius = Math.max(0, radius);\n            const label = datum.calloutLabel;\n            if ((label === null || label === void 0 ? void 0 : label.text) && !label.hidden && outerRadius !== 0) {\n                line.visible = true;\n                line.strokeWidth = calloutStrokeWidth;\n                line.stroke = calloutColors[index % calloutColors.length];\n                line.fill = undefined;\n                const x1 = datum.midCos * outerRadius;\n                const y1 = datum.midSin * outerRadius;\n                let x2 = datum.midCos * (outerRadius + calloutLength);\n                let y2 = datum.midSin * (outerRadius + calloutLength);\n                if (label.collisionTextAlign || label.collisionOffsetY !== 0) {\n                    // Get the closest point to the text bounding box\n                    const box = label.box;\n                    let cx = x2;\n                    let cy = y2;\n                    if (x2 < box.x) {\n                        cx = box.x;\n                    }\n                    else if (x2 > box.x + box.width) {\n                        cx = box.x + box.width;\n                    }\n                    if (y2 < box.y) {\n                        cy = box.y;\n                    }\n                    else if (y2 > box.y + box.height) {\n                        cy = box.y + box.height;\n                    }\n                    // Apply label offset\n                    const dx = cx - x2;\n                    const dy = cy - y2;\n                    const length = Math.sqrt(Math.pow(dx, 2) + Math.pow(dy, 2));\n                    const paddedLength = length - offset;\n                    if (paddedLength > 0) {\n                        x2 = x2 + (dx * paddedLength) / length;\n                        y2 = y2 + (dy * paddedLength) / length;\n                    }\n                }\n                line.x1 = x1;\n                line.y1 = y1;\n                line.x2 = x2;\n                line.y2 = y2;\n            }\n            else {\n                line.visible = false;\n            }\n        });\n    }\n    getLabelOverflow(text, box, seriesRect) {\n        const seriesLeft = seriesRect.x - this.centerX;\n        const seriesRight = seriesRect.x + seriesRect.width - this.centerX;\n        const seriesTop = seriesRect.y - this.centerY;\n        const seriesBottom = seriesRect.y + seriesRect.height - this.centerY;\n        const errPx = 1; // Prevents errors related to floating point calculations\n        let visibleTextPart = 1;\n        if (box.x + errPx < seriesLeft) {\n            visibleTextPart = (box.x + box.width - seriesLeft) / box.width;\n        }\n        else if (box.x + box.width - errPx > seriesRight) {\n            visibleTextPart = (seriesRight - box.x) / box.width;\n        }\n        const hasVerticalOverflow = box.y + errPx < seriesTop || box.y + box.height - errPx > seriesBottom;\n        const textLength = Math.floor(text.length * visibleTextPart) - 1;\n        const hasSurroundingSeriesOverflow = this.bboxIntersectsSurroundingSeries(box);\n        return { visibleTextPart, textLength, hasVerticalOverflow, hasSurroundingSeriesOverflow };\n    }\n    bboxIntersectsSurroundingSeries(box, dx = 0, dy = 0) {\n        const { surroundingRadius } = this;\n        if (surroundingRadius == null) {\n            return false;\n        }\n        const corners = [\n            { x: box.x + dx, y: box.y + dy },\n            { x: box.x + box.width + dx, y: box.y + dy },\n            { x: box.x + box.width + dx, y: box.y + box.height + dy },\n            { x: box.x + dx, y: box.y + box.height + dy },\n        ];\n        const sur2 = Math.pow(surroundingRadius, 2);\n        return corners.some((corner) => Math.pow(corner.x, 2) + Math.pow(corner.y, 2) > sur2);\n    }\n    computeCalloutLabelCollisionOffsets() {\n        const { radiusScale, calloutLabel, calloutLine } = this;\n        const { offset, minSpacing } = calloutLabel;\n        const innerRadius = radiusScale.convert(0);\n        const shouldSkip = (datum) => {\n            const label = datum.calloutLabel;\n            const radius = radiusScale.convert(datum.radius);\n            const outerRadius = Math.max(0, radius);\n            return !label || outerRadius === 0;\n        };\n        const fullData = this.nodeData;\n        const data = this.nodeData.filter((text) => !shouldSkip(text));\n        data.forEach((datum) => {\n            const label = datum.calloutLabel;\n            label.hidden = false;\n            label.collisionTextAlign = undefined;\n            label.collisionOffsetY = 0;\n        });\n        if (data.length <= 1) {\n            return;\n        }\n        const leftLabels = data.filter((d) => d.midCos < 0).sort((a, b) => a.midSin - b.midSin);\n        const rightLabels = data.filter((d) => d.midCos >= 0).sort((a, b) => a.midSin - b.midSin);\n        const topLabels = data\n            .filter((d) => d.midSin < 0 && d.calloutLabel.textAlign === 'center')\n            .sort((a, b) => a.midCos - b.midCos);\n        const bottomLabels = data\n            .filter((d) => d.midSin >= 0 && d.calloutLabel.textAlign === 'center')\n            .sort((a, b) => a.midCos - b.midCos);\n        const tempTextNode = new Text();\n        const getTextBBox = (datum) => {\n            const label = datum.calloutLabel;\n            const radius = radiusScale.convert(datum.radius);\n            const outerRadius = Math.max(0, radius);\n            const labelRadius = outerRadius + calloutLine.length + offset;\n            const x = datum.midCos * labelRadius;\n            const y = datum.midSin * labelRadius + label.collisionOffsetY;\n            this.setTextDimensionalProps(tempTextNode, x, y, this.calloutLabel, label);\n            return tempTextNode.computeBBox();\n        };\n        const avoidNeighbourYCollision = (label, next, direction) => {\n            const box = getTextBBox(label).grow(minSpacing / 2);\n            const other = getTextBBox(next).grow(minSpacing / 2);\n            // The full collision is not detected, because sometimes\n            // the next label can appear behind the label with offset\n            const collidesOrBehind = box.x < other.x + other.width &&\n                box.x + box.width > other.x &&\n                (direction === 'to-top' ? box.y < other.y + other.height : box.y + box.height > other.y);\n            if (collidesOrBehind) {\n                const dy = direction === 'to-top' ? box.y - other.y - other.height : box.y + box.height - other.y;\n                next.calloutLabel.collisionOffsetY = dy;\n            }\n        };\n        const avoidYCollisions = (labels) => {\n            const midLabel = labels.slice().sort((a, b) => Math.abs(a.midSin) - Math.abs(b.midSin))[0];\n            const midIndex = labels.indexOf(midLabel);\n            for (let i = midIndex - 1; i >= 0; i--) {\n                const prev = labels[i + 1];\n                const next = labels[i];\n                avoidNeighbourYCollision(prev, next, 'to-top');\n            }\n            for (let i = midIndex + 1; i < labels.length; i++) {\n                const prev = labels[i - 1];\n                const next = labels[i];\n                avoidNeighbourYCollision(prev, next, 'to-bottom');\n            }\n        };\n        const avoidXCollisions = (labels) => {\n            const labelsCollideLabelsByY = data.some((datum) => datum.calloutLabel.collisionOffsetY !== 0);\n            const boxes = labels.map((label) => getTextBBox(label));\n            const paddedBoxes = boxes.map((box) => box.clone().grow(minSpacing / 2));\n            let labelsCollideLabelsByX = false;\n            for (let i = 0; i < paddedBoxes.length && !labelsCollideLabelsByX; i++) {\n                const box = paddedBoxes[i];\n                for (let j = i + 1; j < labels.length; j++) {\n                    const other = paddedBoxes[j];\n                    if (box.collidesBBox(other)) {\n                        labelsCollideLabelsByX = true;\n                        break;\n                    }\n                }\n            }\n            const sectors = fullData.map((datum) => {\n                const { startAngle, endAngle } = datum;\n                const radius = radiusScale.convert(datum.radius);\n                const outerRadius = Math.max(0, radius);\n                return { startAngle, endAngle, innerRadius, outerRadius };\n            });\n            const labelsCollideSectors = boxes.some((box) => {\n                return sectors.some((sector) => boxCollidesSector(box, sector));\n            });\n            if (!labelsCollideLabelsByX && !labelsCollideLabelsByY && !labelsCollideSectors) {\n                return;\n            }\n            labels\n                .filter((datum) => datum.calloutLabel.textAlign === 'center')\n                .forEach((datum) => {\n                const label = datum.calloutLabel;\n                if (datum.midCos < 0) {\n                    label.collisionTextAlign = 'right';\n                }\n                else if (datum.midCos > 0) {\n                    label.collisionTextAlign = 'left';\n                }\n                else {\n                    label.collisionTextAlign = 'center';\n                }\n            });\n        };\n        avoidYCollisions(leftLabels);\n        avoidYCollisions(rightLabels);\n        avoidXCollisions(topLabels);\n        avoidXCollisions(bottomLabels);\n    }\n    updateCalloutLabelNodes(seriesRect) {\n        const { radiusScale, calloutLabel, calloutLine } = this;\n        const calloutLength = calloutLine.length;\n        const { offset, color } = calloutLabel;\n        const tempTextNode = new Text();\n        this.calloutLabelSelection.selectByTag(PieNodeTag.Label).forEach((text) => {\n            const { datum } = text;\n            const label = datum.calloutLabel;\n            const radius = radiusScale.convert(datum.radius);\n            const outerRadius = Math.max(0, radius);\n            if (!(label === null || label === void 0 ? void 0 : label.text) || outerRadius === 0 || label.hidden) {\n                text.visible = false;\n                return;\n            }\n            const labelRadius = outerRadius + calloutLength + offset;\n            const x = datum.midCos * labelRadius;\n            const y = datum.midSin * labelRadius + label.collisionOffsetY;\n            // Detect text overflow\n            this.setTextDimensionalProps(tempTextNode, x, y, this.calloutLabel, label);\n            const box = tempTextNode.computeBBox();\n            const { visibleTextPart, textLength, hasVerticalOverflow } = this.getLabelOverflow(label.text, box, seriesRect);\n            const displayText = visibleTextPart === 1 ? label.text : `${label.text.substring(0, textLength)}…`;\n            this.setTextDimensionalProps(text, x, y, this.calloutLabel, Object.assign(Object.assign({}, label), { text: displayText }));\n            text.fill = color;\n            text.visible = !hasVerticalOverflow;\n        });\n    }\n    computeLabelsBBox(options, seriesRect) {\n        var _a;\n        const { radiusScale, calloutLabel, calloutLine } = this;\n        const calloutLength = calloutLine.length;\n        const { offset, maxCollisionOffset, minSpacing } = calloutLabel;\n        this.maybeRefreshNodeData();\n        this.updateRadiusScale();\n        this.computeCalloutLabelCollisionOffsets();\n        const textBoxes = [];\n        const text = new Text();\n        let titleBox;\n        if (((_a = this.title) === null || _a === void 0 ? void 0 : _a.text) && this.title.enabled) {\n            const dy = this.getTitleTranslationY();\n            if (isFinite(dy)) {\n                this.setTextDimensionalProps(text, 0, dy, this.title, {\n                    text: this.title.text,\n                    textBaseline: 'bottom',\n                    textAlign: 'center',\n                    hidden: false,\n                    collisionTextAlign: undefined,\n                    collisionOffsetY: 0,\n                });\n                titleBox = text.computeBBox();\n                textBoxes.push(titleBox);\n            }\n        }\n        this.nodeData.forEach((datum) => {\n            const label = datum.calloutLabel;\n            const radius = radiusScale.convert(datum.radius);\n            const outerRadius = Math.max(0, radius);\n            if (!label || outerRadius === 0) {\n                return null;\n            }\n            const labelRadius = outerRadius + calloutLength + offset;\n            const x = datum.midCos * labelRadius;\n            const y = datum.midSin * labelRadius + label.collisionOffsetY;\n            this.setTextDimensionalProps(text, x, y, this.calloutLabel, label);\n            const box = text.computeBBox();\n            label.box = box;\n            // Hide labels that where pushed to far by the collision avoidance algorithm\n            if (Math.abs(label.collisionOffsetY) > maxCollisionOffset) {\n                label.hidden = true;\n                return;\n            }\n            // Hide labels intersecting or above the title\n            if (titleBox) {\n                const seriesTop = seriesRect.y - this.centerY;\n                const titleCleanArea = new BBox(titleBox.x - minSpacing, seriesTop, titleBox.width + 2 * minSpacing, titleBox.y + titleBox.height + minSpacing - seriesTop);\n                if (box.collidesBBox(titleCleanArea)) {\n                    label.hidden = true;\n                    return;\n                }\n            }\n            if (options.hideWhenNecessary) {\n                const { textLength, hasVerticalOverflow, hasSurroundingSeriesOverflow } = this.getLabelOverflow(label.text, box, seriesRect);\n                const isTooShort = label.text.length > 2 && textLength < 2;\n                if (hasVerticalOverflow || isTooShort || hasSurroundingSeriesOverflow) {\n                    label.hidden = true;\n                    return;\n                }\n            }\n            label.hidden = false;\n            textBoxes.push(box);\n        });\n        if (textBoxes.length === 0) {\n            return null;\n        }\n        return BBox.merge(textBoxes);\n    }\n    setTextDimensionalProps(textNode, x, y, style, label) {\n        var _a, _b;\n        const { fontStyle, fontWeight, fontSize, fontFamily } = style;\n        textNode.fontStyle = fontStyle;\n        textNode.fontWeight = fontWeight;\n        textNode.fontSize = fontSize;\n        textNode.fontFamily = fontFamily;\n        textNode.text = label.text;\n        textNode.x = x;\n        textNode.y = y;\n        textNode.textAlign = (_b = (_a = label === null || label === void 0 ? void 0 : label.collisionTextAlign) !== null && _a !== void 0 ? _a : label === null || label === void 0 ? void 0 : label.textAlign) !== null && _b !== void 0 ? _b : 'center';\n        textNode.textBaseline = label.textBaseline;\n    }\n    updateSectorLabelNodes() {\n        const { radiusScale } = this;\n        const innerRadius = radiusScale.convert(0);\n        const { fontSize, fontStyle, fontWeight, fontFamily, positionOffset, positionRatio, color } = this.sectorLabel;\n        const isDoughnut = innerRadius > 0;\n        const singleVisibleSector = this.seriesItemEnabled.filter(Boolean).length === 1;\n        this.sectorLabelSelection.each((text, datum) => {\n            const sectorLabel = datum.sectorLabel;\n            const radius = radiusScale.convert(datum.radius);\n            const outerRadius = Math.max(0, radius);\n            let isTextVisible = false;\n            if (sectorLabel && outerRadius !== 0) {\n                const labelRadius = innerRadius * (1 - positionRatio) + radius * positionRatio + positionOffset;\n                text.fill = color;\n                text.fontStyle = fontStyle;\n                text.fontWeight = fontWeight;\n                text.fontSize = fontSize;\n                text.fontFamily = fontFamily;\n                text.text = sectorLabel.text;\n                const shouldPutTextInCenter = !isDoughnut && singleVisibleSector;\n                if (shouldPutTextInCenter) {\n                    text.x = 0;\n                    text.y = 0;\n                }\n                else {\n                    text.x = datum.midCos * labelRadius;\n                    text.y = datum.midSin * labelRadius;\n                }\n                text.textAlign = 'center';\n                text.textBaseline = 'middle';\n                const bbox = text.computeBBox();\n                const corners = [\n                    [bbox.x, bbox.y],\n                    [bbox.x + bbox.width, bbox.y],\n                    [bbox.x + bbox.width, bbox.y + bbox.height],\n                    [bbox.x, bbox.y + bbox.height],\n                ];\n                const { startAngle, endAngle } = datum;\n                const sectorBounds = { startAngle, endAngle, innerRadius, outerRadius };\n                if (corners.every(([x, y]) => isPointInSector(x, y, sectorBounds))) {\n                    isTextVisible = true;\n                }\n            }\n            text.visible = isTextVisible;\n        });\n    }\n    updateInnerCircle() {\n        const circle = this.innerCircleNode;\n        if (!circle) {\n            return;\n        }\n        const innerRadius = this.getInnerRadius();\n        if (innerRadius === 0) {\n            circle.size = 0;\n        }\n        else {\n            const circleRadius = Math.min(innerRadius, this.getOuterRadius());\n            const antiAliasingPadding = 1;\n            circle.size = Math.ceil(circleRadius * 2 + antiAliasingPadding);\n        }\n    }\n    updateInnerLabelNodes() {\n        const textBBoxes = [];\n        const margins = [];\n        this.innerLabelsSelection.each((text, datum) => {\n            const { fontStyle, fontWeight, fontSize, fontFamily, color } = datum;\n            text.fontStyle = fontStyle;\n            text.fontWeight = fontWeight;\n            text.fontSize = fontSize;\n            text.fontFamily = fontFamily;\n            text.text = datum.text;\n            text.x = 0;\n            text.y = 0;\n            text.fill = color;\n            text.textAlign = 'center';\n            text.textBaseline = 'alphabetic';\n            textBBoxes.push(text.computeBBox());\n            margins.push(datum.margin);\n        });\n        const getMarginTop = (index) => (index === 0 ? 0 : margins[index]);\n        const getMarginBottom = (index) => (index === margins.length - 1 ? 0 : margins[index]);\n        const totalHeight = textBBoxes.reduce((sum, bbox, i) => {\n            return sum + bbox.height + getMarginTop(i) + getMarginBottom(i);\n        }, 0);\n        const totalWidth = Math.max(...textBBoxes.map((bbox) => bbox.width));\n        const innerRadius = this.getInnerRadius();\n        const labelRadius = Math.sqrt(Math.pow(totalWidth / 2, 2) + Math.pow(totalHeight / 2, 2));\n        const labelsVisible = labelRadius <= (innerRadius > 0 ? innerRadius : this.getOuterRadius());\n        const textBottoms = [];\n        for (let i = 0, prev = -totalHeight / 2; i < textBBoxes.length; i++) {\n            const bbox = textBBoxes[i];\n            const bottom = bbox.height + prev + getMarginTop(i);\n            textBottoms.push(bottom);\n            prev = bottom + getMarginBottom(i);\n        }\n        this.innerLabelsSelection.each((text, _datum, index) => {\n            text.y = textBottoms[index];\n            text.visible = labelsVisible;\n        });\n    }\n    getNodeClickEvent(event, datum) {\n        return new PieSeriesNodeClickEvent(this.angleKey, this.calloutLabelKey, this.sectorLabelKey, this.radiusKey, event, datum, this);\n    }\n    getNodeDoubleClickEvent(event, datum) {\n        return new PieSeriesNodeDoubleClickEvent(this.angleKey, this.calloutLabelKey, this.sectorLabelKey, this.radiusKey, event, datum, this);\n    }\n    getTooltipHtml(nodeDatum) {\n        var _a;\n        const { angleKey } = this;\n        if (!angleKey) {\n            return '';\n        }\n        const { tooltip, angleName, radiusKey, radiusName, calloutLabelKey, sectorLabelKey, calloutLabelName, sectorLabelName, id: seriesId, } = this;\n        const { renderer: tooltipRenderer } = tooltip;\n        const { datum, angleValue, radiusValue, sectorFormat: { fill: color }, calloutLabel: { text: label = '' } = {}, } = nodeDatum;\n        const formattedAngleValue = typeof angleValue === 'number' ? toFixed(angleValue) : String(angleValue);\n        const title = (_a = this.title) === null || _a === void 0 ? void 0 : _a.text;\n        const content = `${label ? `${label}: ` : ''}${formattedAngleValue}`;\n        const defaults = {\n            title,\n            backgroundColor: color,\n            content,\n        };\n        if (tooltipRenderer) {\n            return toTooltipHtml$1(tooltipRenderer({\n                datum,\n                angleKey,\n                angleValue,\n                angleName,\n                radiusKey,\n                radiusValue,\n                radiusName,\n                calloutLabelKey,\n                calloutLabelName,\n                sectorLabelKey,\n                sectorLabelName,\n                title,\n                color,\n                seriesId,\n            }), defaults);\n        }\n        return toTooltipHtml$1(defaults);\n    }\n    getLegendData() {\n        var _a, _b, _c;\n        const { calloutLabelKey, legendItemKey, id, data } = this;\n        if (!data || data.length === 0)\n            return [];\n        if (!legendItemKey && !calloutLabelKey)\n            return [];\n        const titleText = ((_a = this.title) === null || _a === void 0 ? void 0 : _a.showInLegend) && this.title.text;\n        const legendData = [];\n        for (let index = 0; index < data.length; index++) {\n            const datum = data[index];\n            const labelParts = [];\n            if (titleText) {\n                labelParts.push(titleText);\n            }\n            const labels = this.getLabels(datum, 2 * Math.PI, 2 * Math.PI, false);\n            if (legendItemKey && labels.legendItem !== undefined) {\n                labelParts.push(labels.legendItem.text);\n            }\n            else if (calloutLabelKey && ((_b = labels.calloutLabel) === null || _b === void 0 ? void 0 : _b.text) !== undefined) {\n                labelParts.push((_c = labels.calloutLabel) === null || _c === void 0 ? void 0 : _c.text);\n            }\n            if (labelParts.length === 0)\n                continue;\n            const sectorFormat = this.getSectorFormat(datum, index, index, false);\n            legendData.push({\n                legendType: 'category',\n                id,\n                itemId: index,\n                seriesId: id,\n                enabled: this.seriesItemEnabled[index],\n                label: {\n                    text: labelParts.join(' - '),\n                },\n                marker: {\n                    fill: sectorFormat.fill,\n                    stroke: sectorFormat.stroke,\n                    fillOpacity: this.fillOpacity,\n                    strokeOpacity: this.strokeOpacity,\n                },\n            });\n        }\n        return legendData;\n    }\n    onLegendItemClick(event) {\n        const { enabled, itemId, series } = event;\n        if (series.id === this.id) {\n            this.toggleSeriesItem(itemId, enabled);\n        }\n        else if (series.type === 'pie') {\n            this.toggleOtherSeriesItems(series, itemId, enabled);\n        }\n    }\n    toggleSeriesItem(itemId, enabled) {\n        this.seriesItemEnabled[itemId] = enabled;\n        this.nodeDataRefresh = true;\n    }\n    toggleOtherSeriesItems(series, itemId, enabled) {\n        var _a, _b;\n        const { legendItemKey } = this;\n        if (!legendItemKey)\n            return;\n        const datumToggledLegendItemValue = series.legendItemKey && ((_a = series.data) === null || _a === void 0 ? void 0 : _a.find((_, index) => index === itemId)[series.legendItemKey]);\n        if (!datumToggledLegendItemValue)\n            return;\n        (_b = this.data) === null || _b === void 0 ? void 0 : _b.forEach((datum, datumItemId) => {\n            if (datum[legendItemKey] === datumToggledLegendItemValue) {\n                this.toggleSeriesItem(datumItemId, enabled);\n            }\n        });\n    }\n    animateEmptyUpdateReady() {\n        const duration = 1000;\n        const labelDuration = 200;\n        const rotation = Math.PI / -2 + toRadians$1(this.rotation);\n        this.groupSelection.selectByTag(PieNodeTag.Sector).forEach((node) => {\n            var _a;\n            const datum = node.datum;\n            (_a = this.animationManager) === null || _a === void 0 ? void 0 : _a.animateMany(`${this.id}_empty-update-ready_${node.id}`, [\n                { from: rotation, to: datum.startAngle },\n                { from: rotation, to: datum.endAngle },\n            ], {\n                disableInteractions: true,\n                duration,\n                ease: easeOut,\n                repeat: 0,\n                onUpdate([startAngle, endAngle]) {\n                    node.startAngle = startAngle;\n                    node.endAngle = endAngle;\n                },\n            });\n        });\n        const labelAnimationOptions = {\n            from: 0,\n            to: 1,\n            delay: duration,\n            duration: labelDuration,\n            ease: linear,\n            repeat: 0,\n        };\n        this.calloutLabelSelection.each((label) => {\n            var _a;\n            (_a = this.animationManager) === null || _a === void 0 ? void 0 : _a.animate(`${this.id}_empty-update-ready_${label.id}`, Object.assign(Object.assign({}, labelAnimationOptions), { onUpdate(opacity) {\n                    label.opacity = opacity;\n                } }));\n        });\n        this.sectorLabelSelection.each((label) => {\n            var _a;\n            (_a = this.animationManager) === null || _a === void 0 ? void 0 : _a.animate(`${this.id}_empty-update-ready_${label.id}`, Object.assign(Object.assign({}, labelAnimationOptions), { onUpdate(opacity) {\n                    label.opacity = opacity;\n                } }));\n        });\n        this.innerLabelsSelection.each((label) => {\n            var _a;\n            (_a = this.animationManager) === null || _a === void 0 ? void 0 : _a.animate(`${this.id}_empty-update-ready_${label.id}`, Object.assign(Object.assign({}, labelAnimationOptions), { onUpdate(opacity) {\n                    label.opacity = opacity;\n                } }));\n        });\n    }\n    animateReadyUpdateReady() {\n        this.groupSelection.selectByTag(PieNodeTag.Sector).forEach((node) => {\n            const { datum } = node;\n            node.startAngle = datum.startAngle;\n            node.endAngle = datum.endAngle;\n        });\n    }\n}\nPieSeries.className = 'PieSeries';\nPieSeries.type = 'pie';\n__decorate$1w([\n    Validate(STRING)\n], PieSeries.prototype, \"angleKey\", void 0);\n__decorate$1w([\n    Validate(STRING)\n], PieSeries.prototype, \"angleName\", void 0);\n__decorate$1w([\n    Validate(OPT_STRING)\n], PieSeries.prototype, \"radiusKey\", void 0);\n__decorate$1w([\n    Validate(OPT_STRING)\n], PieSeries.prototype, \"radiusName\", void 0);\n__decorate$1w([\n    Validate(OPT_NUMBER(0))\n], PieSeries.prototype, \"radiusMin\", void 0);\n__decorate$1w([\n    Validate(OPT_NUMBER(0))\n], PieSeries.prototype, \"radiusMax\", void 0);\n__decorate$1w([\n    Validate(OPT_STRING)\n], PieSeries.prototype, \"calloutLabelKey\", void 0);\n__decorate$1w([\n    Validate(OPT_STRING)\n], PieSeries.prototype, \"calloutLabelName\", void 0);\n__decorate$1w([\n    Validate(OPT_STRING)\n], PieSeries.prototype, \"sectorLabelKey\", void 0);\n__decorate$1w([\n    Validate(OPT_STRING)\n], PieSeries.prototype, \"sectorLabelName\", void 0);\n__decorate$1w([\n    Validate(OPT_STRING)\n], PieSeries.prototype, \"legendItemKey\", void 0);\n__decorate$1w([\n    Validate(COLOR_STRING_ARRAY)\n], PieSeries.prototype, \"fills\", void 0);\n__decorate$1w([\n    Validate(COLOR_STRING_ARRAY)\n], PieSeries.prototype, \"strokes\", void 0);\n__decorate$1w([\n    Validate(NUMBER(0, 1))\n], PieSeries.prototype, \"fillOpacity\", void 0);\n__decorate$1w([\n    Validate(NUMBER(0, 1))\n], PieSeries.prototype, \"strokeOpacity\", void 0);\n__decorate$1w([\n    Validate(OPT_LINE_DASH)\n], PieSeries.prototype, \"lineDash\", void 0);\n__decorate$1w([\n    Validate(NUMBER(0))\n], PieSeries.prototype, \"lineDashOffset\", void 0);\n__decorate$1w([\n    Validate(OPT_FUNCTION)\n], PieSeries.prototype, \"formatter\", void 0);\n__decorate$1w([\n    Validate(NUMBER(-360, 360))\n], PieSeries.prototype, \"rotation\", void 0);\n__decorate$1w([\n    Validate(NUMBER())\n], PieSeries.prototype, \"outerRadiusOffset\", void 0);\n__decorate$1w([\n    Validate(NUMBER(0))\n], PieSeries.prototype, \"outerRadiusRatio\", void 0);\n__decorate$1w([\n    Validate(NUMBER())\n], PieSeries.prototype, \"innerRadiusOffset\", void 0);\n__decorate$1w([\n    Validate(NUMBER(0))\n], PieSeries.prototype, \"innerRadiusRatio\", void 0);\n__decorate$1w([\n    Validate(NUMBER(0))\n], PieSeries.prototype, \"strokeWidth\", void 0);\n\nvar __awaiter$8 = ( false) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nclass PolarChart extends Chart {\n    constructor(document = window.document, overrideDevicePixelRatio, resources) {\n        super(document, overrideDevicePixelRatio, resources);\n        this.padding = new Padding$1(40);\n    }\n    performLayout() {\n        const _super = Object.create(null, {\n            performLayout: { get: () => super.performLayout }\n        });\n        return __awaiter$8(this, void 0, void 0, function* () {\n            const shrinkRect = yield _super.performLayout.call(this);\n            const fullSeriesRect = shrinkRect.clone();\n            this.computeSeriesRect(shrinkRect);\n            this.computeCircle();\n            const hoverRectPadding = 20;\n            const hoverRect = shrinkRect.clone().grow(hoverRectPadding);\n            this.hoverRect = hoverRect;\n            this.layoutService.dispatchLayoutComplete({\n                type: 'layout-complete',\n                chart: { width: this.scene.width, height: this.scene.height },\n                series: { rect: fullSeriesRect, paddedRect: shrinkRect, hoverRect, visible: true },\n                axes: [],\n            });\n            return shrinkRect;\n        });\n    }\n    computeSeriesRect(shrinkRect) {\n        const { seriesAreaPadding } = this;\n        shrinkRect.shrink(seriesAreaPadding.left, 'left');\n        shrinkRect.shrink(seriesAreaPadding.top, 'top');\n        shrinkRect.shrink(seriesAreaPadding.right, 'right');\n        shrinkRect.shrink(seriesAreaPadding.bottom, 'bottom');\n        this.seriesRect = shrinkRect;\n    }\n    computeCircle() {\n        const seriesBox = this.seriesRect;\n        const polarSeries = this.series.filter((series) => {\n            return series instanceof PolarSeries;\n        });\n        const setSeriesCircle = (cx, cy, r) => {\n            polarSeries.forEach((series) => {\n                series.centerX = cx;\n                series.centerY = cy;\n                series.radius = r;\n            });\n            const pieSeries = polarSeries.filter((series) => series instanceof PieSeries);\n            if (pieSeries.length > 1) {\n                const innerRadii = pieSeries\n                    .map((series) => {\n                    const innerRadius = series.getInnerRadius();\n                    return { series, innerRadius };\n                })\n                    .sort((a, b) => a.innerRadius - b.innerRadius);\n                innerRadii[innerRadii.length - 1].series.surroundingRadius = undefined;\n                for (let i = 0; i < innerRadii.length - 1; i++) {\n                    innerRadii[i].series.surroundingRadius = innerRadii[i + 1].innerRadius;\n                }\n            }\n        };\n        const centerX = seriesBox.x + seriesBox.width / 2;\n        const centerY = seriesBox.y + seriesBox.height / 2;\n        const initialRadius = Math.max(0, Math.min(seriesBox.width, seriesBox.height) / 2);\n        let radius = initialRadius;\n        setSeriesCircle(centerX, centerY, radius);\n        const shake = ({ hideWhenNecessary = false } = {}) => {\n            const labelBoxes = [];\n            for (const series of polarSeries) {\n                const box = series.computeLabelsBBox({ hideWhenNecessary }, seriesBox);\n                if (box == null)\n                    continue;\n                labelBoxes.push(box);\n            }\n            if (labelBoxes.length === 0) {\n                setSeriesCircle(centerX, centerY, initialRadius);\n                return;\n            }\n            const labelBox = BBox.merge(labelBoxes);\n            const refined = this.refineCircle(labelBox, radius);\n            setSeriesCircle(refined.centerX, refined.centerY, refined.radius);\n            if (refined.radius === radius) {\n                return;\n            }\n            radius = refined.radius;\n        };\n        shake(); // Initial attempt\n        shake(); // Precise attempt\n        shake(); // Just in case\n        shake({ hideWhenNecessary: true }); // Hide unnecessary labels\n        shake({ hideWhenNecessary: true }); // Final result\n    }\n    refineCircle(labelsBox, radius) {\n        const minCircleRatio = 0.5; // Prevents reduced circle to be too small\n        const seriesBox = this.seriesRect;\n        const circleLeft = -radius;\n        const circleTop = -radius;\n        const circleRight = radius;\n        const circleBottom = radius;\n        // Label padding around the circle\n        let padLeft = Math.max(0, circleLeft - labelsBox.x);\n        let padTop = Math.max(0, circleTop - labelsBox.y);\n        let padRight = Math.max(0, labelsBox.x + labelsBox.width - circleRight);\n        let padBottom = Math.max(0, labelsBox.y + labelsBox.height - circleBottom);\n        // Available area for the circle (after the padding will be applied)\n        const availCircleWidth = seriesBox.width - padLeft - padRight;\n        const availCircleHeight = seriesBox.height - padTop - padBottom;\n        let newRadius = Math.min(availCircleWidth, availCircleHeight) / 2;\n        const minHorizontalRadius = (minCircleRatio * seriesBox.width) / 2;\n        const minVerticalRadius = (minCircleRatio * seriesBox.height) / 2;\n        const minRadius = Math.min(minHorizontalRadius, minVerticalRadius);\n        if (newRadius < minRadius) {\n            // If the radius is too small, reduce the label padding\n            newRadius = minRadius;\n            const horizontalPadding = padLeft + padRight;\n            const verticalPadding = padTop + padBottom;\n            if (2 * newRadius + verticalPadding > seriesBox.height) {\n                const padHeight = seriesBox.height - 2 * newRadius;\n                if (Math.min(padTop, padBottom) * 2 > padHeight) {\n                    padTop = padHeight / 2;\n                    padBottom = padHeight / 2;\n                }\n                else if (padTop > padBottom) {\n                    padTop = padHeight - padBottom;\n                }\n                else {\n                    padBottom = padHeight - padTop;\n                }\n            }\n            if (2 * newRadius + horizontalPadding > seriesBox.width) {\n                const padWidth = seriesBox.width - 2 * newRadius;\n                if (Math.min(padLeft, padRight) * 2 > padWidth) {\n                    padLeft = padWidth / 2;\n                    padRight = padWidth / 2;\n                }\n                else if (padLeft > padRight) {\n                    padLeft = padWidth - padRight;\n                }\n                else {\n                    padRight = padWidth - padLeft;\n                }\n            }\n        }\n        const newWidth = padLeft + 2 * newRadius + padRight;\n        const newHeight = padTop + 2 * newRadius + padBottom;\n        return {\n            centerX: seriesBox.x + (seriesBox.width - newWidth) / 2 + padLeft + newRadius,\n            centerY: seriesBox.y + (seriesBox.height - newHeight) / 2 + padTop + newRadius,\n            radius: newRadius,\n        };\n    }\n}\nPolarChart.className = 'PolarChart';\nPolarChart.type = 'polar';\n\nvar __awaiter$7 = ( false) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nclass HierarchyChart extends Chart {\n    constructor(document = window.document, overrideDevicePixelRatio, resources) {\n        super(document, overrideDevicePixelRatio, resources);\n        this._data = {};\n    }\n    performLayout() {\n        const _super = Object.create(null, {\n            performLayout: { get: () => super.performLayout }\n        });\n        return __awaiter$7(this, void 0, void 0, function* () {\n            const shrinkRect = yield _super.performLayout.call(this);\n            const { seriesAreaPadding } = this;\n            const fullSeriesRect = shrinkRect.clone();\n            shrinkRect.shrink(seriesAreaPadding.left, 'left');\n            shrinkRect.shrink(seriesAreaPadding.top, 'top');\n            shrinkRect.shrink(seriesAreaPadding.right, 'right');\n            shrinkRect.shrink(seriesAreaPadding.bottom, 'bottom');\n            this.seriesRect = shrinkRect;\n            const hoverRectPadding = 20;\n            const hoverRect = shrinkRect.clone().grow(hoverRectPadding);\n            this.hoverRect = hoverRect;\n            yield Promise.all(this.series.map((series) => __awaiter$7(this, void 0, void 0, function* () {\n                series.rootGroup.translationX = Math.floor(shrinkRect.x);\n                series.rootGroup.translationY = Math.floor(shrinkRect.y);\n                yield series.update({ seriesRect: shrinkRect }); // this has to happen after the `updateAxes` call\n            })));\n            const { seriesRoot } = this;\n            seriesRoot.setClipRectInGroupCoordinateSpace(new BBox(shrinkRect.x, shrinkRect.y, shrinkRect.width, shrinkRect.height));\n            this.layoutService.dispatchLayoutComplete({\n                type: 'layout-complete',\n                chart: { width: this.scene.width, height: this.scene.height },\n                series: { rect: fullSeriesRect, paddedRect: shrinkRect, hoverRect, visible: true },\n                axes: [],\n            });\n            return shrinkRect;\n        });\n    }\n}\nHierarchyChart.className = 'HierarchyChart';\nHierarchyChart.type = 'hierarchy';\n\nconst interpolatePattern = /(#\\{(.*?)\\})/g;\nfunction interpolate(input, values, formats) {\n    return input.replace(interpolatePattern, function (...args) {\n        const name = args[2];\n        const [valueName, formatName] = name.split(':');\n        const value = values[valueName];\n        if (typeof value === 'number') {\n            const format = formatName && formats && formats[formatName];\n            if (format) {\n                const { locales, options } = format;\n                return value.toLocaleString(locales, options);\n            }\n            return String(value);\n        }\n        if (value instanceof Date) {\n            const format = formatName && formats && formats[formatName];\n            if (typeof format === 'string') {\n                const formatter = buildFormatter(format);\n                return formatter(value);\n            }\n            return value.toDateString();\n        }\n        if (typeof value === 'string' || (value === null || value === void 0 ? void 0 : value.toString)) {\n            return String(value);\n        }\n        return '';\n    });\n}\n\nlet element = null;\nfunction sanitizeHtml(text) {\n    element = element !== null && element !== void 0 ? element : document.createElement('div');\n    if (!text) {\n        return '';\n    }\n    element.textContent = text;\n    return element.innerHTML;\n}\n\nfunction calculateNiceSecondaryAxis(domain, primaryTickCount) {\n    // Make secondary axis domain nice using strict tick count, matching the tick count from the primary axis.\n    // This is to make the secondary axis grid lines/ tick positions align with the ones from the primary axis.\n    let start = Math.floor(domain[0]);\n    let stop = domain[1];\n    start = calculateNiceStart(start, stop, primaryTickCount);\n    const step = getTickStep(start, stop, primaryTickCount);\n    const segments = primaryTickCount - 1;\n    stop = start + segments * step;\n    const d = [start, stop];\n    const ticks = getTicks(start, step, primaryTickCount);\n    return [d, ticks];\n}\nfunction calculateNiceStart(a, b, count) {\n    const rawStep = Math.abs(b - a) / (count - 1);\n    const order = Math.floor(Math.log10(rawStep));\n    const magnitude = Math.pow(10, order);\n    return Math.floor(a / magnitude) * magnitude;\n}\nfunction getTicks(start, step, count) {\n    // power of the step will be negative if the step is a fraction (between 0 and 1)\n    const stepPower = Math.floor(Math.log10(step));\n    const fractionDigits = step > 0 && step < 1 ? Math.abs(stepPower) : 0;\n    const f = Math.pow(10, fractionDigits);\n    const ticks = new NumericTicks(fractionDigits);\n    for (let i = 0; i < count; i++) {\n        const tick = start + step * i;\n        ticks[i] = Math.round(tick * f) / f;\n    }\n    return ticks;\n}\nfunction getTickStep(start, stop, count) {\n    const segments = count - 1;\n    const rawStep = (stop - start) / segments;\n    return calculateNextNiceStep(rawStep);\n}\nfunction calculateNextNiceStep(rawStep) {\n    const order = Math.floor(Math.log10(rawStep));\n    const magnitude = Math.pow(10, order);\n    // Make order 1\n    const step = (rawStep / magnitude) * 10;\n    if (step > 0 && step <= 1) {\n        return magnitude / 10;\n    }\n    if (step > 1 && step <= 2) {\n        return (2 * magnitude) / 10;\n    }\n    if (step > 1 && step <= 5) {\n        return (5 * magnitude) / 10;\n    }\n    if (step > 5 && step <= 10) {\n        return (10 * magnitude) / 10;\n    }\n    if (step > 10 && step <= 20) {\n        return (20 * magnitude) / 10;\n    }\n    if (step > 20 && step <= 40) {\n        return (40 * magnitude) / 10;\n    }\n    if (step > 40 && step <= 50) {\n        return (50 * magnitude) / 10;\n    }\n    if (step > 50 && step <= 100) {\n        return (100 * magnitude) / 10;\n    }\n    return step;\n}\n\nvar __decorate$1v = ( false) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nclass NumberAxisTick extends BaseAxisTick {\n    constructor() {\n        super(...arguments);\n        this.maxSpacing = NaN;\n    }\n}\n__decorate$1v([\n    Validate(AND(NUMBER_OR_NAN(1), GREATER_THAN('minSpacing'))),\n    Default(NaN)\n], NumberAxisTick.prototype, \"maxSpacing\", void 0);\nclass NumberAxis extends ChartAxis {\n    constructor(moduleCtx, scale = new LinearScale$1()) {\n        super(moduleCtx, scale);\n        this.min = NaN;\n        this.max = NaN;\n        scale.strictClampByDefault = true;\n    }\n    normaliseDataDomain(d) {\n        var _a;\n        const { min, max } = this;\n        if (d.length > 2) {\n            d = (_a = extent$4(d)) !== null && _a !== void 0 ? _a : [NaN, NaN];\n        }\n        if (!isNaN(min)) {\n            d = [min, d[1]];\n        }\n        if (!isNaN(max)) {\n            d = [d[0], max];\n        }\n        if (d[0] > d[1]) {\n            d = [];\n        }\n        return d;\n    }\n    formatDatum(datum) {\n        if (typeof datum === 'number') {\n            return datum.toFixed(2);\n        }\n        else {\n            Logger.warnOnce('data contains Date objects which are being plotted against a number axis, please only use a number axis for numbers.');\n            return String(datum);\n        }\n    }\n    createTick() {\n        return new NumberAxisTick();\n    }\n    updateSecondaryAxisTicks(primaryTickCount) {\n        if (this.dataDomain == null) {\n            throw new Error('AG Charts - dataDomain not calculated, cannot perform tick calculation.');\n        }\n        const [d, ticks] = calculateNiceSecondaryAxis(this.dataDomain, primaryTickCount !== null && primaryTickCount !== void 0 ? primaryTickCount : 0);\n        this.scale.nice = false;\n        this.scale.domain = d;\n        this.scale.update();\n        return ticks;\n    }\n}\nNumberAxis.className = 'NumberAxis';\nNumberAxis.type = 'number';\n__decorate$1v([\n    Validate(AND(NUMBER_OR_NAN(), LESS_THAN('max'))),\n    Default(NaN)\n], NumberAxis.prototype, \"min\", void 0);\n__decorate$1v([\n    Validate(AND(NUMBER_OR_NAN(), GREATER_THAN('min'))),\n    Default(NaN)\n], NumberAxis.prototype, \"max\", void 0);\n\nvar __decorate$1u = ( false) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nfunction NON_ZERO_NUMBER() {\n    // Cannot be 0\n    const message = `expecting a non-zero Number`;\n    return predicateWithMessage((v) => typeof v === 'number' && v !== 0, message);\n}\nclass LogAxis extends NumberAxis {\n    constructor(moduleCtx) {\n        super(moduleCtx, new LogScale());\n        this.min = NaN;\n        this.max = NaN;\n        this.scale.strictClampByDefault = true;\n    }\n    normaliseDataDomain(d) {\n        var _a;\n        const { min, max } = this;\n        if (d.length > 2) {\n            d = (_a = extent$4(d)) !== null && _a !== void 0 ? _a : [NaN, NaN];\n        }\n        if (!isNaN(min)) {\n            d = [min, d[1]];\n        }\n        if (!isNaN(max)) {\n            d = [d[0], max];\n        }\n        const isInverted = d[0] > d[1];\n        const crossesZero = d[0] < 0 && d[1] > 0;\n        const hasZeroExtent = d[0] === 0 && d[1] === 0;\n        const invalidDomain = isInverted || crossesZero || hasZeroExtent;\n        if (invalidDomain) {\n            d = [];\n            if (crossesZero) {\n                Logger.warn(`the data domain crosses zero, the chart data cannot be rendered. See log axis documentation for more information.`);\n            }\n            else if (hasZeroExtent) {\n                Logger.warn(`the data domain has 0 extent, no data is rendered.`);\n            }\n        }\n        if (d[0] === 0) {\n            d[0] = 1;\n        }\n        if (d[1] === 0) {\n            d[1] = -1;\n        }\n        return d;\n    }\n    set base(value) {\n        this.scale.base = value;\n    }\n    get base() {\n        return this.scale.base;\n    }\n}\nLogAxis.className = 'LogAxis';\nLogAxis.type = 'log';\n__decorate$1u([\n    Validate(AND(NUMBER_OR_NAN(), LESS_THAN('max'), NON_ZERO_NUMBER())),\n    Default(NaN)\n], LogAxis.prototype, \"min\", void 0);\n__decorate$1u([\n    Validate(AND(NUMBER_OR_NAN(), GREATER_THAN('min'), NON_ZERO_NUMBER())),\n    Default(NaN)\n], LogAxis.prototype, \"max\", void 0);\n\nvar __decorate$1t = ( false) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nclass TimeAxisTick extends BaseAxisTick {\n    constructor() {\n        super(...arguments);\n        this.maxSpacing = NaN;\n    }\n}\n__decorate$1t([\n    Validate(AND(NUMBER_OR_NAN(1), GREATER_THAN('minSpacing'))),\n    Default(NaN)\n], TimeAxisTick.prototype, \"maxSpacing\", void 0);\nclass TimeAxis extends ChartAxis {\n    constructor(moduleCtx) {\n        super(moduleCtx, new TimeScale$1());\n        this.datumFormat = '%m/%d/%y, %H:%M:%S';\n        this.min = undefined;\n        this.max = undefined;\n        const { scale } = this;\n        scale.strictClampByDefault = true;\n        this.refreshScale();\n        this.datumFormatter = scale.tickFormat({\n            specifier: this.datumFormat,\n        });\n    }\n    normaliseDataDomain(d) {\n        var _a;\n        let { min, max } = this;\n        if (typeof min === 'number') {\n            min = new Date(min);\n        }\n        if (typeof max === 'number') {\n            max = new Date(max);\n        }\n        if (d.length > 2) {\n            d = ((_a = extent$4(d)) !== null && _a !== void 0 ? _a : [0, 1000]).map((x) => new Date(x));\n        }\n        if (min instanceof Date) {\n            d = [min, d[1]];\n        }\n        if (max instanceof Date) {\n            d = [d[0], max];\n        }\n        if (d[0] > d[1]) {\n            d = [];\n        }\n        return d;\n    }\n    createTick() {\n        return new TimeAxisTick();\n    }\n    onLabelFormatChange(ticks, format) {\n        if (format) {\n            super.onLabelFormatChange(ticks, format);\n        }\n        else {\n            // For time axis labels to look nice, even if date format wasn't set.\n            this.labelFormatter = this.scale.tickFormat({ ticks });\n        }\n    }\n    formatDatum(datum) {\n        var _a;\n        return (_a = this.moduleCtx.callbackCache.call(this.datumFormatter, datum)) !== null && _a !== void 0 ? _a : String(datum);\n    }\n    calculatePadding(_min, _max) {\n        // numbers in domain correspond to Unix timestamps\n        // automatically expand domain by 1 in each direction\n        return 1;\n    }\n}\nTimeAxis.className = 'TimeAxis';\nTimeAxis.type = 'time';\n__decorate$1t([\n    Validate(AND(OPT_DATE_OR_DATETIME_MS, LESS_THAN('max')))\n], TimeAxis.prototype, \"min\", void 0);\n__decorate$1t([\n    Validate(AND(OPT_DATE_OR_DATETIME_MS, GREATER_THAN('min')))\n], TimeAxis.prototype, \"max\", void 0);\n\nvar __decorate$1s = ( false) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nvar __awaiter$6 = ( false) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nclass AreaSeriesLabel extends Label$1 {\n    constructor() {\n        super(...arguments);\n        this.formatter = undefined;\n    }\n}\n__decorate$1s([\n    Validate(OPT_FUNCTION)\n], AreaSeriesLabel.prototype, \"formatter\", void 0);\nclass AreaSeriesTooltip extends SeriesTooltip {\n    constructor() {\n        super(...arguments);\n        this.renderer = undefined;\n        this.format = undefined;\n    }\n}\n__decorate$1s([\n    Validate(OPT_FUNCTION)\n], AreaSeriesTooltip.prototype, \"renderer\", void 0);\n__decorate$1s([\n    Validate(OPT_STRING)\n], AreaSeriesTooltip.prototype, \"format\", void 0);\nvar AreaSeriesTag;\n(function (AreaSeriesTag) {\n    AreaSeriesTag[AreaSeriesTag[\"Fill\"] = 0] = \"Fill\";\n    AreaSeriesTag[AreaSeriesTag[\"Stroke\"] = 1] = \"Stroke\";\n    AreaSeriesTag[AreaSeriesTag[\"Marker\"] = 2] = \"Marker\";\n    AreaSeriesTag[AreaSeriesTag[\"Label\"] = 3] = \"Label\";\n})(AreaSeriesTag || (AreaSeriesTag = {}));\nclass AreaSeries extends CartesianSeries {\n    constructor(moduleCtx) {\n        super({\n            moduleCtx,\n            pathsPerSeries: 2,\n            pathsZIndexSubOrderOffset: [0, 1000],\n            hasMarkers: true,\n            directionKeys: {\n                [ChartAxisDirection.X]: ['xKey'],\n                [ChartAxisDirection.Y]: ['yKeys'],\n            },\n            directionNames: {\n                [ChartAxisDirection.X]: ['xName'],\n                [ChartAxisDirection.Y]: ['yNames'],\n            },\n        });\n        this.tooltip = new AreaSeriesTooltip();\n        this.marker = new CartesianSeriesMarker();\n        this.label = new AreaSeriesLabel();\n        this.fills = ['#c16068', '#a2bf8a', '#ebcc87', '#80a0c3', '#b58dae', '#85c0d1'];\n        this.strokes = ['#874349', '#718661', '#a48f5f', '#5a7088', '#7f637a', '#5d8692'];\n        this.fillOpacity = 1;\n        this.strokeOpacity = 1;\n        this.lineDash = [0];\n        this.lineDashOffset = 0;\n        this.xKey = undefined;\n        this.xName = undefined;\n        this._yKeys = [];\n        this._visibles = [];\n        this.yNames = [];\n        this.strokeWidth = 2;\n        this.shadow = undefined;\n        const { marker, label } = this;\n        marker.enabled = false;\n        label.enabled = false;\n    }\n    set yKeys(values) {\n        if (!areArrayItemsStrictlyEqual(this._yKeys, values)) {\n            this._yKeys = values;\n            this.processedData = undefined;\n            this.processSeriesItemEnabled();\n        }\n    }\n    get yKeys() {\n        return this._yKeys;\n    }\n    set visibles(visibles) {\n        this._visibles = visibles;\n        this.processSeriesItemEnabled();\n    }\n    get visibles() {\n        return this._visibles;\n    }\n    processSeriesItemEnabled() {\n        const { seriesItemEnabled, _visibles: visibles = [] } = this;\n        seriesItemEnabled.clear();\n        this._yKeys.forEach((key, idx) => { var _a; return seriesItemEnabled.set(key, (_a = visibles[idx]) !== null && _a !== void 0 ? _a : true); });\n    }\n    set normalizedTo(value) {\n        const absValue = value ? Math.abs(value) : undefined;\n        if (this._normalizedTo !== absValue) {\n            this._normalizedTo = absValue;\n        }\n    }\n    get normalizedTo() {\n        return this._normalizedTo;\n    }\n    processData() {\n        return __awaiter$6(this, void 0, void 0, function* () {\n            const { xKey, yKeys, seriesItemEnabled, xAxis, yAxis, normalizedTo } = this;\n            const data = xKey && yKeys.length && this.data ? this.data : [];\n            const isContinuousX = (xAxis === null || xAxis === void 0 ? void 0 : xAxis.scale) instanceof ContinuousScale;\n            const isContinuousY = (yAxis === null || yAxis === void 0 ? void 0 : yAxis.scale) instanceof ContinuousScale;\n            const enabledYKeys = [...seriesItemEnabled.entries()].filter(([, enabled]) => enabled).map(([yKey]) => yKey);\n            const normaliseTo = normalizedTo && isFinite(normalizedTo) ? normalizedTo : undefined;\n            const extraProps = [];\n            if (normaliseTo) {\n                extraProps.push(normaliseGroupTo(enabledYKeys, normaliseTo, 'sum'));\n            }\n            this.dataModel = new DataModel({\n                props: [\n                    keyProperty(xKey, isContinuousX, { id: 'xValue' }),\n                    ...enabledYKeys.map((yKey) => valueProperty(yKey, isContinuousY, {\n                        id: `yValue-${yKey}`,\n                        missingValue: NaN,\n                        invalidValue: undefined,\n                    })),\n                    sum(enabledYKeys),\n                    ...extraProps,\n                ],\n                groupByKeys: true,\n                dataVisible: this.visible && enabledYKeys.length > 0,\n            });\n            this.processedData = this.dataModel.processData(data);\n        });\n    }\n    getDomain(direction) {\n        const { processedData, xAxis, yAxis } = this;\n        if (!processedData)\n            return [];\n        const { defs: { keys: [keyDef], }, domain: { keys: [keys], values: [yExtent], aggValues: [ySumExtent] = [], }, } = processedData;\n        if (direction === ChartAxisDirection.X) {\n            if (keyDef.valueType === 'category') {\n                return keys;\n            }\n            return this.fixNumericExtent(extent$4(keys), xAxis);\n        }\n        else if (yAxis instanceof LogAxis || yAxis instanceof TimeAxis) {\n            return this.fixNumericExtent(yExtent, yAxis);\n        }\n        else {\n            return this.fixNumericExtent(ySumExtent, yAxis);\n        }\n    }\n    createNodeData() {\n        var _a;\n        return __awaiter$6(this, void 0, void 0, function* () {\n            const { xAxis, yAxis, data, processedData: { data: groupedData } = {}, ctx: { callbackCache }, } = this;\n            if (!xAxis || !yAxis || !data) {\n                return [];\n            }\n            const contexts = [];\n            const { yKeys, xKey = '', marker, label, fills, strokes, id: seriesId } = this;\n            const { scale: xScale } = xAxis;\n            const { scale: yScale } = yAxis;\n            const continuousY = yScale instanceof ContinuousScale;\n            const xOffset = ((_a = xScale.bandwidth) !== null && _a !== void 0 ? _a : 0) / 2;\n            const xDataCount = data.length;\n            const cumulativePathValues = new Array(xDataCount)\n                .fill(null)\n                .map(() => ({ left: 0, right: 0 }));\n            const cumulativeMarkerValues = new Array(xDataCount).fill(0);\n            const createPathCoordinates = (xDatum, yDatum, idx, side) => {\n                const x = xScale.convert(xDatum) + xOffset;\n                const prevY = cumulativePathValues[idx][side];\n                const currY = cumulativePathValues[idx][side] + yDatum;\n                const prevYCoordinate = yScale.convert(prevY, { strict: false });\n                const currYCoordinate = yScale.convert(currY, { strict: false });\n                cumulativePathValues[idx][side] = currY;\n                return [\n                    { x, y: currYCoordinate, size: marker.size },\n                    { x, y: prevYCoordinate, size: marker.size },\n                ];\n            };\n            const createMarkerCoordinate = (xDatum, yDatum, idx, rawYDatum) => {\n                let currY;\n                // if not normalized, the invalid data points will be processed as `undefined` in processData()\n                // if normalized, the invalid data points will be processed as 0 rather than `undefined`\n                // check if unprocessed datum is valid as we only want to show markers for valid points\n                const normalized = this.normalizedTo && isFinite(this.normalizedTo);\n                const normalizedAndValid = normalized && continuousY && isContinuous(rawYDatum);\n                const valid = (!normalized && !isNaN(rawYDatum)) || normalizedAndValid;\n                if (valid) {\n                    currY = cumulativeMarkerValues[idx] += yDatum;\n                }\n                const x = xScale.convert(xDatum) + xOffset;\n                const y = yScale.convert(currY, { strict: false });\n                return { x, y, size: marker.size };\n            };\n            yKeys.forEach((yKey, seriesIdx) => {\n                var _a;\n                const yKeyDataIndex = (_a = this.dataModel) === null || _a === void 0 ? void 0 : _a.resolveProcessedDataIndexById(`yValue-${yKey}`);\n                const labelSelectionData = [];\n                const markerSelectionData = [];\n                const strokeSelectionData = { itemId: yKey, points: [], yValues: [] };\n                const fillSelectionData = { itemId: yKey, points: [] };\n                contexts[seriesIdx] = {\n                    itemId: yKey,\n                    fillSelectionData,\n                    labelData: labelSelectionData,\n                    nodeData: markerSelectionData,\n                    strokeSelectionData,\n                };\n                if (!yKeyDataIndex) {\n                    return;\n                }\n                const fillPoints = fillSelectionData.points;\n                const fillPhantomPoints = [];\n                const strokePoints = strokeSelectionData.points;\n                const yValues = strokeSelectionData.yValues;\n                let datumIdx = -1;\n                groupedData === null || groupedData === void 0 ? void 0 : groupedData.forEach((datumGroup, dataIdx) => {\n                    const { keys: [xDatum], datum: datumArray, values: valuesArray, } = datumGroup;\n                    valuesArray.forEach((values, valueIdx) => {\n                        var _a;\n                        datumIdx++;\n                        const seriesDatum = datumArray[valueIdx];\n                        const rawYDatum = values[yKeyDataIndex.index];\n                        const yDatum = isNaN(rawYDatum) ? undefined : rawYDatum;\n                        const nextValuesSameGroup = valueIdx < valuesArray.length - 1;\n                        const nextDatumGroup = nextValuesSameGroup ? datumGroup : groupedData[dataIdx + 1];\n                        const nextXDatum = nextDatumGroup === null || nextDatumGroup === void 0 ? void 0 : nextDatumGroup.keys[0];\n                        const rawNextYIdx = nextValuesSameGroup ? valueIdx + 1 : 0;\n                        const rawNextYDatum = nextDatumGroup === null || nextDatumGroup === void 0 ? void 0 : nextDatumGroup.values[rawNextYIdx][yKeyDataIndex.index];\n                        const nextYDatum = isNaN(rawNextYDatum) ? undefined : rawNextYDatum;\n                        // marker data\n                        const point = createMarkerCoordinate(xDatum, +yDatum, datumIdx, seriesDatum[yKey]);\n                        if (marker) {\n                            markerSelectionData.push({\n                                index: datumIdx,\n                                series: this,\n                                itemId: yKey,\n                                datum: seriesDatum,\n                                nodeMidPoint: { x: point.x, y: point.y },\n                                cumulativeValue: cumulativeMarkerValues[datumIdx],\n                                yValue: yDatum,\n                                yKey,\n                                xKey,\n                                point,\n                                fill: fills[seriesIdx % fills.length],\n                                stroke: strokes[seriesIdx % strokes.length],\n                            });\n                        }\n                        // label data\n                        let labelText;\n                        if (label.formatter) {\n                            labelText = (_a = callbackCache.call(label.formatter, { value: yDatum, seriesId })) !== null && _a !== void 0 ? _a : '';\n                        }\n                        else {\n                            labelText = isNumber$4(yDatum) ? Number(yDatum).toFixed(2) : String(yDatum);\n                        }\n                        if (label) {\n                            labelSelectionData.push({\n                                index: datumIdx,\n                                itemId: yKey,\n                                point,\n                                label: labelText\n                                    ? {\n                                        text: labelText,\n                                        fontStyle: label.fontStyle,\n                                        fontWeight: label.fontWeight,\n                                        fontSize: label.fontSize,\n                                        fontFamily: label.fontFamily,\n                                        textAlign: 'center',\n                                        textBaseline: 'bottom',\n                                        fill: label.color,\n                                    }\n                                    : undefined,\n                            });\n                        }\n                        // fill data\n                        // Handle data in pairs of current and next x and y values\n                        const windowX = [xDatum, nextXDatum];\n                        const windowY = [yDatum, nextYDatum];\n                        if (windowX.some((v) => v == undefined)) {\n                            return;\n                        }\n                        if (windowY.some((v) => v == undefined)) {\n                            windowY[0] = 0;\n                            windowY[1] = 0;\n                        }\n                        const currCoordinates = createPathCoordinates(windowX[0], +windowY[0], datumIdx, 'right');\n                        fillPoints.push(currCoordinates[0]);\n                        fillPhantomPoints.push(currCoordinates[1]);\n                        const nextCoordinates = createPathCoordinates(windowX[1], +windowY[1], datumIdx, 'left');\n                        fillPoints.push(nextCoordinates[0]);\n                        fillPhantomPoints.push(nextCoordinates[1]);\n                        // stroke data\n                        strokePoints.push({ x: NaN, y: NaN }); // moveTo\n                        yValues.push(undefined);\n                        strokePoints.push(currCoordinates[0]);\n                        yValues.push(yDatum);\n                        if (nextYDatum !== undefined) {\n                            strokePoints.push(nextCoordinates[0]);\n                            yValues.push(yDatum);\n                        }\n                    });\n                });\n                for (let i = fillPhantomPoints.length - 1; i >= 0; i--) {\n                    fillPoints.push(fillPhantomPoints[i]);\n                }\n            });\n            return contexts;\n        });\n    }\n    isPathOrSelectionDirty() {\n        return this.marker.isDirty();\n    }\n    markerFactory() {\n        const { shape } = this.marker;\n        const MarkerShape = getMarker$1(shape);\n        return new MarkerShape();\n    }\n    updateMarkerSelection(opts) {\n        return __awaiter$6(this, void 0, void 0, function* () {\n            const { nodeData, markerSelection } = opts;\n            const { marker: { enabled }, } = this;\n            const data = enabled && nodeData ? nodeData : [];\n            if (this.marker.isDirty()) {\n                markerSelection.clear();\n            }\n            return markerSelection.update(data, (marker) => {\n                marker.tag = AreaSeriesTag.Marker;\n            });\n        });\n    }\n    updateMarkerNodes(opts) {\n        var _a;\n        return __awaiter$6(this, void 0, void 0, function* () {\n            const { markerSelection, isHighlight: isDatumHighlighted } = opts;\n            const { id: seriesId, xKey = '', marker, seriesItemEnabled, yKeys, fills, strokes, fillOpacity: seriesFillOpacity, marker: { fillOpacity: markerFillOpacity = seriesFillOpacity }, strokeOpacity, highlightStyle: { item: { fill: highlightedFill, fillOpacity: highlightFillOpacity = markerFillOpacity, stroke: highlightedStroke, strokeWidth: highlightedDatumStrokeWidth, }, }, ctx: { callbackCache }, } = this;\n            const { size, formatter } = marker;\n            const markerStrokeWidth = (_a = marker.strokeWidth) !== null && _a !== void 0 ? _a : this.strokeWidth;\n            const customMarker = typeof marker.shape === 'function';\n            markerSelection.each((node, datum) => {\n                var _a, _b, _c, _d, _e, _f, _g, _h;\n                const yKeyIndex = yKeys.indexOf(datum.yKey);\n                const fill = isDatumHighlighted && highlightedFill !== undefined\n                    ? highlightedFill\n                    : (_a = marker.fill) !== null && _a !== void 0 ? _a : fills[yKeyIndex % fills.length];\n                const fillOpacity = isDatumHighlighted ? highlightFillOpacity : markerFillOpacity;\n                const stroke = isDatumHighlighted && highlightedStroke !== undefined\n                    ? highlightedStroke\n                    : (_b = marker.stroke) !== null && _b !== void 0 ? _b : strokes[yKeyIndex % fills.length];\n                const strokeWidth = isDatumHighlighted && highlightedDatumStrokeWidth !== undefined\n                    ? highlightedDatumStrokeWidth\n                    : markerStrokeWidth;\n                let format = undefined;\n                if (formatter) {\n                    format = callbackCache.call(formatter, {\n                        datum: datum.datum,\n                        xKey,\n                        yKey: datum.yKey,\n                        fill,\n                        stroke,\n                        strokeWidth,\n                        size,\n                        highlighted: isDatumHighlighted,\n                        seriesId,\n                    });\n                }\n                node.fill = (_c = format === null || format === void 0 ? void 0 : format.fill) !== null && _c !== void 0 ? _c : fill;\n                node.stroke = (_d = format === null || format === void 0 ? void 0 : format.stroke) !== null && _d !== void 0 ? _d : stroke;\n                node.strokeWidth = (_e = format === null || format === void 0 ? void 0 : format.strokeWidth) !== null && _e !== void 0 ? _e : strokeWidth;\n                node.fillOpacity = fillOpacity !== null && fillOpacity !== void 0 ? fillOpacity : 1;\n                node.strokeOpacity = (_g = (_f = marker.strokeOpacity) !== null && _f !== void 0 ? _f : strokeOpacity) !== null && _g !== void 0 ? _g : 1;\n                node.size = (_h = format === null || format === void 0 ? void 0 : format.size) !== null && _h !== void 0 ? _h : size;\n                node.translationX = datum.point.x;\n                node.translationY = datum.point.y;\n                node.visible =\n                    node.size > 0 && !!seriesItemEnabled.get(datum.yKey) && !isNaN(datum.point.x) && !isNaN(datum.point.y);\n                if (!customMarker || node.dirtyPath) {\n                    return;\n                }\n                // Only for custom marker shapes\n                node.path.clear({ trackChanges: true });\n                node.updatePath();\n                node.checkPathDirty();\n            });\n            if (!isDatumHighlighted) {\n                this.marker.markClean();\n            }\n        });\n    }\n    updateLabelSelection(opts) {\n        return __awaiter$6(this, void 0, void 0, function* () {\n            const { labelData, labelSelection } = opts;\n            return labelSelection.update(labelData, (text) => {\n                text.tag = AreaSeriesTag.Label;\n            });\n        });\n    }\n    updateLabelNodes(opts) {\n        return __awaiter$6(this, void 0, void 0, function* () {\n            const { labelSelection } = opts;\n            const { enabled: labelEnabled, fontStyle, fontWeight, fontSize, fontFamily, color } = this.label;\n            labelSelection.each((text, datum) => {\n                const { point, label } = datum;\n                if (label && labelEnabled) {\n                    text.fontStyle = fontStyle;\n                    text.fontWeight = fontWeight;\n                    text.fontSize = fontSize;\n                    text.fontFamily = fontFamily;\n                    text.textAlign = label.textAlign;\n                    text.textBaseline = label.textBaseline;\n                    text.text = label.text;\n                    text.x = point.x;\n                    text.y = point.y - 10;\n                    text.fill = color;\n                    text.visible = true;\n                }\n                else {\n                    text.visible = false;\n                }\n            });\n        });\n    }\n    getNodeClickEvent(event, datum) {\n        var _a;\n        return new CartesianSeriesNodeClickEvent((_a = this.xKey) !== null && _a !== void 0 ? _a : '', datum.yKey, event, datum, this);\n    }\n    getNodeDoubleClickEvent(event, datum) {\n        var _a;\n        return new CartesianSeriesNodeDoubleClickEvent((_a = this.xKey) !== null && _a !== void 0 ? _a : '', datum.yKey, event, datum, this);\n    }\n    getTooltipHtml(nodeDatum) {\n        var _a, _b, _c, _d;\n        const { xKey, id: seriesId } = this;\n        const { yKey } = nodeDatum;\n        const yKeyDataIndex = (_a = this.dataModel) === null || _a === void 0 ? void 0 : _a.resolveProcessedDataIndexById(`yValue-${yKey}`);\n        if (!(xKey && yKey) || !yKeyDataIndex) {\n            return '';\n        }\n        const datum = nodeDatum.datum;\n        const xValue = datum[xKey];\n        const yValue = datum[yKey];\n        const { xAxis, yAxis, yKeys } = this;\n        if (!(xAxis && yAxis && isNumber$4(yValue)) || !yKeyDataIndex) {\n            return '';\n        }\n        const { xName, yNames, fills, strokes, tooltip, marker } = this;\n        const { size, formatter: markerFormatter, strokeWidth: markerStrokeWidth, fill: markerFill, stroke: markerStroke, } = marker;\n        const xString = xAxis.formatDatum(xValue);\n        const yString = yAxis.formatDatum(yValue);\n        const yKeyIndex = yKeys.indexOf(yKey);\n        const processedYValue = (_c = (_b = this.processedData) === null || _b === void 0 ? void 0 : _b.data[nodeDatum.index]) === null || _c === void 0 ? void 0 : _c.values[0][yKeyDataIndex === null || yKeyDataIndex === void 0 ? void 0 : yKeyDataIndex.index];\n        const yName = yNames[yKeyIndex];\n        const title = sanitizeHtml(yName);\n        const content = sanitizeHtml(xString + ': ' + yString);\n        const strokeWidth = markerStrokeWidth !== null && markerStrokeWidth !== void 0 ? markerStrokeWidth : this.strokeWidth;\n        const fill = markerFill !== null && markerFill !== void 0 ? markerFill : fills[yKeyIndex % fills.length];\n        const stroke = markerStroke !== null && markerStroke !== void 0 ? markerStroke : strokes[yKeyIndex % fills.length];\n        let format = undefined;\n        if (markerFormatter) {\n            format = markerFormatter({\n                datum,\n                xKey,\n                yKey,\n                fill,\n                stroke,\n                strokeWidth,\n                size,\n                highlighted: false,\n                seriesId,\n            });\n        }\n        const color = (_d = format === null || format === void 0 ? void 0 : format.fill) !== null && _d !== void 0 ? _d : fill;\n        const defaults = {\n            title,\n            backgroundColor: color,\n            content,\n        };\n        const { renderer: tooltipRenderer, format: tooltipFormat } = tooltip;\n        if (tooltipFormat || tooltipRenderer) {\n            const params = {\n                datum,\n                xKey,\n                xName,\n                xValue,\n                yKey,\n                yValue,\n                processedYValue,\n                yName,\n                color,\n                title,\n                seriesId,\n            };\n            if (tooltipFormat) {\n                return toTooltipHtml$1({\n                    content: interpolate(tooltipFormat, params),\n                }, defaults);\n            }\n            if (tooltipRenderer) {\n                return toTooltipHtml$1(tooltipRenderer(params), defaults);\n            }\n        }\n        return toTooltipHtml$1(defaults);\n    }\n    getLegendData() {\n        var _a, _b, _c, _d, _e;\n        const { data, id, xKey, yKeys, yNames, seriesItemEnabled, marker, fills, strokes, fillOpacity, strokeOpacity } = this;\n        if (!(data === null || data === void 0 ? void 0 : data.length) || !xKey || !yKeys.length) {\n            return [];\n        }\n        const legendData = [];\n        // Area stacks should be listed in the legend in reverse order, for symmetry with the\n        // vertical stack display order.\n        for (let index = yKeys.length - 1; index >= 0; index--) {\n            const yKey = yKeys[index];\n            legendData.push({\n                legendType: 'category',\n                id,\n                itemId: yKey,\n                seriesId: id,\n                enabled: (_a = seriesItemEnabled.get(yKey)) !== null && _a !== void 0 ? _a : false,\n                label: {\n                    text: yNames[index] || yKeys[index],\n                },\n                marker: {\n                    shape: marker.shape,\n                    fill: (_b = marker.fill) !== null && _b !== void 0 ? _b : fills[index % fills.length],\n                    stroke: (_c = marker.stroke) !== null && _c !== void 0 ? _c : strokes[index % strokes.length],\n                    fillOpacity: (_d = marker.fillOpacity) !== null && _d !== void 0 ? _d : fillOpacity,\n                    strokeOpacity: (_e = marker.strokeOpacity) !== null && _e !== void 0 ? _e : strokeOpacity,\n                },\n            });\n        }\n        return legendData;\n    }\n    onLegendItemDoubleClick(event) {\n        const { enabled, itemId, series, numVisibleItems } = event;\n        const newEnableds = {};\n        const totalVisibleItems = Object.values(numVisibleItems).reduce((p, v) => p + v, 0);\n        const singleEnabledWasClicked = totalVisibleItems === 1 && enabled;\n        if (series.id === this.id) {\n            const singleEnabledInEachSeries = Object.values(numVisibleItems).filter((v) => v === 1).length === Object.keys(numVisibleItems).length;\n            this.yKeys.forEach((yKey) => {\n                var _a;\n                const matches = yKey === itemId;\n                const newEnabled = matches || singleEnabledWasClicked || (singleEnabledInEachSeries && enabled);\n                newEnableds[yKey] = (_a = newEnableds[yKey]) !== null && _a !== void 0 ? _a : newEnabled;\n            });\n        }\n        else {\n            this.yKeys.forEach((yKey) => {\n                newEnableds[yKey] = singleEnabledWasClicked;\n            });\n        }\n        Object.keys(newEnableds).forEach((yKey) => {\n            super.toggleSeriesItem(yKey, newEnableds[yKey]);\n        });\n    }\n    animateEmptyUpdateReady({ markerSelections, labelSelections, contextData, paths, seriesRect, }) {\n        const { strokes, fills, fillOpacity, lineDash, lineDashOffset, strokeOpacity, strokeWidth, shadow } = this;\n        contextData.forEach(({ fillSelectionData, strokeSelectionData, itemId }, seriesIdx) => {\n            var _a, _b, _c;\n            const [fill, stroke] = paths[seriesIdx];\n            const duration = 1000;\n            const markerDuration = 200;\n            const animationOptions = {\n                from: 0,\n                to: (_a = seriesRect === null || seriesRect === void 0 ? void 0 : seriesRect.width) !== null && _a !== void 0 ? _a : 0,\n                disableInteractions: true,\n                duration,\n                ease: linear,\n                repeat: 0,\n            };\n            // Stroke\n            {\n                const { points, yValues } = strokeSelectionData;\n                stroke.tag = AreaSeriesTag.Stroke;\n                stroke.fill = undefined;\n                stroke.lineJoin = stroke.lineCap = 'round';\n                stroke.pointerEvents = PointerEvents.None;\n                stroke.stroke = strokes[seriesIdx % strokes.length];\n                stroke.strokeWidth = this.getStrokeWidth(this.strokeWidth, { itemId });\n                stroke.strokeOpacity = strokeOpacity;\n                stroke.lineDash = lineDash;\n                stroke.lineDashOffset = lineDashOffset;\n                (_b = this.animationManager) === null || _b === void 0 ? void 0 : _b.animate(`${this.id}_empty-update-ready_stroke_${seriesIdx}`, Object.assign(Object.assign({}, animationOptions), { onUpdate(xValue) {\n                        stroke.path.clear({ trackChanges: true });\n                        let moveTo = true;\n                        points.forEach((point, index) => {\n                            // Draw/move the full segment if past the end of this segment\n                            if (yValues[index] === undefined || isNaN(point.x) || isNaN(point.y)) {\n                                moveTo = true;\n                            }\n                            else if (point.x <= xValue) {\n                                if (moveTo) {\n                                    stroke.path.moveTo(point.x, point.y);\n                                    moveTo = false;\n                                }\n                                else {\n                                    stroke.path.lineTo(point.x, point.y);\n                                }\n                            }\n                            else if (index > 0 &&\n                                yValues[index] !== undefined &&\n                                yValues[index - 1] !== undefined &&\n                                points[index - 1].x <= xValue) {\n                                // Draw/move partial line if in between the start and end of this segment\n                                const start = points[index - 1];\n                                const end = point;\n                                const x = xValue;\n                                const y = start.y + ((x - start.x) * (end.y - start.y)) / (end.x - start.x);\n                                stroke.path.lineTo(x, y);\n                            }\n                        });\n                        stroke.checkPathDirty();\n                    } }));\n            }\n            // Fill\n            {\n                const { points: allPoints } = fillSelectionData;\n                const points = allPoints.slice(0, allPoints.length / 2);\n                const bottomPoints = allPoints.slice(allPoints.length / 2);\n                fill.tag = AreaSeriesTag.Fill;\n                fill.stroke = undefined;\n                fill.lineJoin = 'round';\n                fill.pointerEvents = PointerEvents.None;\n                fill.fill = fills[seriesIdx % fills.length];\n                fill.fillOpacity = fillOpacity;\n                fill.strokeOpacity = strokeOpacity;\n                fill.strokeWidth = strokeWidth;\n                fill.lineDash = lineDash;\n                fill.lineDashOffset = lineDashOffset;\n                fill.fillShadow = shadow;\n                (_c = this.animationManager) === null || _c === void 0 ? void 0 : _c.animate(`${this.id}_empty-update-ready_fill_${seriesIdx}`, Object.assign(Object.assign({}, animationOptions), { onUpdate(xValue) {\n                        fill.path.clear({ trackChanges: true });\n                        let x = 0;\n                        let y = 0;\n                        points.forEach((point, index) => {\n                            if (point.x <= xValue) {\n                                // Draw/move the full segment if past the end of this segment\n                                x = point.x;\n                                y = point.y;\n                                fill.path.lineTo(point.x, point.y);\n                            }\n                            else if (index > 0 && points[index - 1].x < xValue) {\n                                // Draw/move partial line if in between the start and end of this segment\n                                const start = points[index - 1];\n                                const end = point;\n                                x = xValue;\n                                y = start.y + ((x - start.x) * (end.y - start.y)) / (end.x - start.x);\n                                fill.path.lineTo(x, y);\n                            }\n                        });\n                        bottomPoints.forEach((point, index) => {\n                            const reverseIndex = bottomPoints.length - index - 1;\n                            if (point.x <= xValue) {\n                                fill.path.lineTo(point.x, point.y);\n                            }\n                            else if (reverseIndex > 0 && points[reverseIndex - 1].x < xValue) {\n                                const start = point;\n                                const end = bottomPoints[index + 1];\n                                const bottomY = start.y + ((x - start.x) * (end.y - start.y)) / (end.x - start.x);\n                                fill.path.lineTo(x, bottomY);\n                            }\n                        });\n                        if (bottomPoints.length > 0) {\n                            fill.path.lineTo(bottomPoints[bottomPoints.length - 1].x, bottomPoints[bottomPoints.length - 1].y);\n                        }\n                        fill.path.closePath();\n                        fill.checkPathDirty();\n                    } }));\n            }\n            markerSelections[seriesIdx].each((marker, datum) => {\n                var _a, _b, _c, _d;\n                const delay = (seriesRect === null || seriesRect === void 0 ? void 0 : seriesRect.width) ? (datum.point.x / seriesRect.width) * duration : 0;\n                const format = this.animateFormatter(datum);\n                const size = (_b = (_a = datum.point) === null || _a === void 0 ? void 0 : _a.size) !== null && _b !== void 0 ? _b : 0;\n                (_c = this.animationManager) === null || _c === void 0 ? void 0 : _c.animate(`${this.id}_empty-update-ready_${marker.id}`, Object.assign(Object.assign({}, animationOptions), { to: (_d = format === null || format === void 0 ? void 0 : format.size) !== null && _d !== void 0 ? _d : size, delay, duration: markerDuration, onUpdate(size) {\n                        marker.size = size;\n                    } }));\n            });\n            labelSelections[seriesIdx].each((label, datum) => {\n                var _a;\n                const delay = (seriesRect === null || seriesRect === void 0 ? void 0 : seriesRect.width) ? (datum.point.x / seriesRect.width) * duration : 0;\n                (_a = this.animationManager) === null || _a === void 0 ? void 0 : _a.animate(`${this.id}_empty-update-ready_${label.id}`, {\n                    from: 0,\n                    to: 1,\n                    delay,\n                    duration: markerDuration,\n                    ease: linear,\n                    repeat: 0,\n                    onUpdate: (opacity) => {\n                        label.opacity = opacity;\n                    },\n                });\n            });\n        });\n    }\n    animateReadyUpdate({ contextData, paths, }) {\n        const { strokes, fills, fillOpacity, lineDash, lineDashOffset, strokeOpacity, strokeWidth, shadow } = this;\n        contextData.forEach(({ strokeSelectionData, fillSelectionData, itemId }, seriesIdx) => {\n            const [fill, stroke] = paths[seriesIdx];\n            // Stroke\n            stroke.stroke = strokes[seriesIdx % strokes.length];\n            stroke.strokeWidth = this.getStrokeWidth(this.strokeWidth, { itemId });\n            stroke.strokeOpacity = strokeOpacity;\n            stroke.lineDash = lineDash;\n            stroke.lineDashOffset = lineDashOffset;\n            stroke.path.clear({ trackChanges: true });\n            let moveTo = true;\n            strokeSelectionData.points.forEach((point, index) => {\n                if (strokeSelectionData.yValues[index] === undefined || isNaN(point.x) || isNaN(point.y)) {\n                    moveTo = true;\n                }\n                else if (moveTo) {\n                    stroke.path.moveTo(point.x, point.y);\n                    moveTo = false;\n                }\n                else {\n                    stroke.path.lineTo(point.x, point.y);\n                }\n            });\n            stroke.checkPathDirty();\n            // Fill\n            fill.fill = fills[seriesIdx % fills.length];\n            fill.fillOpacity = fillOpacity;\n            fill.strokeOpacity = strokeOpacity;\n            fill.strokeWidth = strokeWidth;\n            fill.lineDash = lineDash;\n            fill.lineDashOffset = lineDashOffset;\n            fill.fillShadow = shadow;\n            fill.path.clear({ trackChanges: true });\n            fillSelectionData.points.forEach((point) => {\n                fill.path.lineTo(point.x, point.y);\n            });\n            fill.path.closePath();\n            fill.checkPathDirty();\n        });\n    }\n    animateFormatter(datum) {\n        var _a, _b, _c;\n        const { marker, fills, strokes, xKey = '', yKeys, id: seriesId, ctx: { callbackCache }, } = this;\n        const { size, formatter } = marker;\n        const yKeyIndex = yKeys.indexOf(datum.yKey);\n        const fill = (_a = marker.fill) !== null && _a !== void 0 ? _a : fills[yKeyIndex % fills.length];\n        const stroke = (_b = marker.stroke) !== null && _b !== void 0 ? _b : strokes[yKeyIndex % fills.length];\n        const strokeWidth = (_c = marker.strokeWidth) !== null && _c !== void 0 ? _c : this.strokeWidth;\n        let format = undefined;\n        if (formatter) {\n            format = callbackCache.call(formatter, {\n                datum: datum.datum,\n                xKey,\n                yKey: datum.yKey,\n                fill,\n                stroke,\n                strokeWidth,\n                size,\n                highlighted: false,\n                seriesId,\n            });\n        }\n        return format;\n    }\n    isLabelEnabled() {\n        return this.label.enabled;\n    }\n}\nAreaSeries.className = 'AreaSeries';\nAreaSeries.type = 'area';\n__decorate$1s([\n    Validate(COLOR_STRING_ARRAY)\n], AreaSeries.prototype, \"fills\", void 0);\n__decorate$1s([\n    Validate(COLOR_STRING_ARRAY)\n], AreaSeries.prototype, \"strokes\", void 0);\n__decorate$1s([\n    Validate(NUMBER(0, 1))\n], AreaSeries.prototype, \"fillOpacity\", void 0);\n__decorate$1s([\n    Validate(NUMBER(0, 1))\n], AreaSeries.prototype, \"strokeOpacity\", void 0);\n__decorate$1s([\n    Validate(OPT_LINE_DASH)\n], AreaSeries.prototype, \"lineDash\", void 0);\n__decorate$1s([\n    Validate(NUMBER(0))\n], AreaSeries.prototype, \"lineDashOffset\", void 0);\n__decorate$1s([\n    Validate(OPT_STRING)\n], AreaSeries.prototype, \"xKey\", void 0);\n__decorate$1s([\n    Validate(OPT_STRING)\n], AreaSeries.prototype, \"xName\", void 0);\n__decorate$1s([\n    Validate(STRING_ARRAY)\n], AreaSeries.prototype, \"_yKeys\", void 0);\n__decorate$1s([\n    Validate(BOOLEAN_ARRAY)\n], AreaSeries.prototype, \"_visibles\", void 0);\n__decorate$1s([\n    Validate(STRING_ARRAY)\n], AreaSeries.prototype, \"yNames\", void 0);\n__decorate$1s([\n    Validate(OPT_NUMBER())\n], AreaSeries.prototype, \"_normalizedTo\", void 0);\n__decorate$1s([\n    Validate(NUMBER(0))\n], AreaSeries.prototype, \"strokeWidth\", void 0);\n\nvar __decorate$1r = ( false) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nclass Rect extends Path {\n    constructor() {\n        super(...arguments);\n        this.borderPath = new Path2D();\n        this.x = 0;\n        this.y = 0;\n        this.width = 10;\n        this.height = 10;\n        this.radius = 0;\n        /**\n         * If `true`, the rect is aligned to the pixel grid for crisp looking lines.\n         * Animated rects may not look nice with this option enabled, for example\n         * when a rect is translated by a sub-pixel value on each frame.\n         */\n        this.crisp = false;\n        this.lastUpdatePathStrokeWidth = Shape.defaultStyles.strokeWidth;\n        this.effectiveStrokeWidth = Shape.defaultStyles.strokeWidth;\n        /**\n         * When the rectangle's width or height is less than a pixel\n         * and crisp mode is on, the rectangle will still fit into the pixel,\n         * but will be less opaque to make an effect of holding less space.\n         */\n        this.microPixelEffectOpacity = 1;\n    }\n    isDirtyPath() {\n        var _a;\n        if (this.lastUpdatePathStrokeWidth !== this.strokeWidth) {\n            return true;\n        }\n        if (this.path.isDirty() || this.borderPath.isDirty() || ((_a = this.clipPath) === null || _a === void 0 ? void 0 : _a.isDirty())) {\n            return true;\n        }\n        return false;\n    }\n    updatePath() {\n        var _a, _b, _c;\n        const { path, borderPath, crisp } = this;\n        let { x, y, width: w, height: h, strokeWidth } = this;\n        const pixelRatio = (_b = (_a = this.layerManager) === null || _a === void 0 ? void 0 : _a.canvas.pixelRatio) !== null && _b !== void 0 ? _b : 1;\n        const pixelSize = 1 / pixelRatio;\n        let microPixelEffectOpacity = 1;\n        path.clear({ trackChanges: true });\n        borderPath.clear({ trackChanges: true });\n        if (crisp) {\n            if (w <= pixelSize) {\n                microPixelEffectOpacity *= w / pixelSize;\n            }\n            if (h <= pixelSize) {\n                microPixelEffectOpacity *= h / pixelSize;\n            }\n            w = this.align(x, w);\n            h = this.align(y, h);\n            x = this.align(x);\n            y = this.align(y);\n        }\n        if (strokeWidth) {\n            if (w < pixelSize) {\n                // Too narrow, draw a vertical stroke\n                const lx = x + pixelSize / 2;\n                borderPath.moveTo(lx, y);\n                borderPath.lineTo(lx, y + h);\n                strokeWidth = pixelSize;\n                this.borderClipPath = undefined;\n            }\n            else if (h < pixelSize) {\n                // Too narrow, draw a horizontal stroke\n                const ly = y + pixelSize / 2;\n                borderPath.moveTo(x, ly);\n                borderPath.lineTo(x + w, ly);\n                strokeWidth = pixelSize;\n                this.borderClipPath = undefined;\n            }\n            else if (strokeWidth < w && strokeWidth < h) {\n                const halfStrokeWidth = strokeWidth / 2;\n                x += halfStrokeWidth;\n                y += halfStrokeWidth;\n                w -= strokeWidth;\n                h -= strokeWidth;\n                // Clipping not needed in this case; fill to center of stroke.\n                this.borderClipPath = undefined;\n                path.rect(x, y, w, h);\n                borderPath.rect(x, y, w, h);\n            }\n            else {\n                // Skip the fill and just render the stroke.\n                this.borderClipPath = (_c = this.borderClipPath) !== null && _c !== void 0 ? _c : new Path2D();\n                this.borderClipPath.clear({ trackChanges: true });\n                this.borderClipPath.rect(x, y, w, h);\n                borderPath.rect(x, y, w, h);\n            }\n        }\n        else {\n            // No borderPath needed, and thus no clipPath needed either. Fill to full extent of\n            // Rect.\n            this.borderClipPath = undefined;\n            path.rect(x, y, w, h);\n        }\n        this.effectiveStrokeWidth = strokeWidth;\n        this.lastUpdatePathStrokeWidth = strokeWidth;\n        this.microPixelEffectOpacity = microPixelEffectOpacity;\n    }\n    computeBBox() {\n        const { x, y, width, height } = this;\n        return new BBox(x, y, width, height);\n    }\n    isPointInPath(x, y) {\n        const point = this.transformPoint(x, y);\n        const bbox = this.computeBBox();\n        return bbox.containsPoint(point.x, point.y);\n    }\n    applyFillAlpha(ctx) {\n        const { fillOpacity, microPixelEffectOpacity, opacity } = this;\n        const { globalAlpha } = ctx;\n        ctx.globalAlpha = globalAlpha * opacity * fillOpacity * microPixelEffectOpacity;\n    }\n    renderStroke(ctx) {\n        const { stroke, effectiveStrokeWidth, borderPath, borderClipPath, opacity, microPixelEffectOpacity } = this;\n        const borderActive = !!stroke && !!effectiveStrokeWidth;\n        if (borderActive) {\n            const { strokeOpacity, lineDash, lineDashOffset, lineCap, lineJoin } = this;\n            if (borderClipPath) {\n                // strokeWidth is larger than width or height, so use clipping to render correctly.\n                // This is the simplest way to achieve the correct rendering due to nuances with ~0\n                // width/height lines in Canvas operations.\n                borderClipPath.draw(ctx);\n                ctx.clip();\n            }\n            borderPath.draw(ctx);\n            const { globalAlpha } = ctx;\n            ctx.strokeStyle = stroke;\n            ctx.globalAlpha = globalAlpha * opacity * strokeOpacity * microPixelEffectOpacity;\n            ctx.lineWidth = effectiveStrokeWidth;\n            if (lineDash) {\n                ctx.setLineDash(lineDash);\n            }\n            if (lineDashOffset) {\n                ctx.lineDashOffset = lineDashOffset;\n            }\n            if (lineCap) {\n                ctx.lineCap = lineCap;\n            }\n            if (lineJoin) {\n                ctx.lineJoin = lineJoin;\n            }\n            ctx.stroke();\n            ctx.globalAlpha = globalAlpha;\n        }\n    }\n}\nRect.className = 'Rect';\n__decorate$1r([\n    ScenePathChangeDetection()\n], Rect.prototype, \"x\", void 0);\n__decorate$1r([\n    ScenePathChangeDetection()\n], Rect.prototype, \"y\", void 0);\n__decorate$1r([\n    ScenePathChangeDetection()\n], Rect.prototype, \"width\", void 0);\n__decorate$1r([\n    ScenePathChangeDetection()\n], Rect.prototype, \"height\", void 0);\n__decorate$1r([\n    ScenePathChangeDetection()\n], Rect.prototype, \"radius\", void 0);\n__decorate$1r([\n    ScenePathChangeDetection()\n], Rect.prototype, \"crisp\", void 0);\n\nvar __rest$2 = ( false) || function (s, e) {\n    var t = {};\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\n        t[p] = s[p];\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\n                t[p[i]] = s[p[i]];\n        }\n    return t;\n};\nfunction createLabelData({ value, rect, placement, seriesId, padding = 0, formatter, barAlongX, ctx: { callbackCache }, }) {\n    let labelText;\n    if (formatter) {\n        labelText = callbackCache.call(formatter, {\n            value: isNumber$4(value) ? value : undefined,\n            seriesId,\n        });\n    }\n    if (labelText === undefined) {\n        labelText = isNumber$4(value) ? value.toFixed(2) : '';\n    }\n    let labelX = rect.x + rect.width / 2;\n    let labelY = rect.y + rect.height / 2;\n    let labelTextAlign = 'center';\n    let labelTextBaseline = 'middle';\n    const isPositive = value >= 0;\n    switch (placement) {\n        case 'start': {\n            if (barAlongX) {\n                labelX = isPositive ? rect.x - padding : rect.x + rect.width + padding;\n                labelTextAlign = isPositive ? 'start' : 'end';\n            }\n            else {\n                labelY = isPositive ? rect.y + rect.height + padding : rect.y - padding;\n                labelTextBaseline = isPositive ? 'top' : 'bottom';\n            }\n            break;\n        }\n        case 'outside':\n        case 'end': {\n            if (barAlongX) {\n                labelX = isPositive ? rect.x + rect.width + padding : rect.x - padding;\n                labelTextAlign = isPositive ? 'start' : 'end';\n            }\n            else {\n                labelY = isPositive ? rect.y - padding : rect.y + rect.height + padding;\n                labelTextBaseline = isPositive ? 'bottom' : 'top';\n            }\n            break;\n        }\n        case 'inside':\n        default: {\n            labelTextBaseline = 'middle';\n            break;\n        }\n    }\n    return {\n        text: labelText,\n        textAlign: labelTextAlign,\n        textBaseline: labelTextBaseline,\n        x: labelX,\n        y: labelY,\n    };\n}\nfunction updateRect({ rect, config }) {\n    const { crisp = true, fill, stroke, strokeWidth, fillOpacity, strokeOpacity, lineDash, lineDashOffset, fillShadow, visible = true, } = config;\n    rect.crisp = crisp;\n    rect.fill = fill;\n    rect.stroke = stroke;\n    rect.strokeWidth = strokeWidth;\n    rect.fillOpacity = fillOpacity;\n    rect.strokeOpacity = strokeOpacity;\n    rect.lineDash = lineDash;\n    rect.lineDashOffset = lineDashOffset;\n    rect.fillShadow = fillShadow;\n    rect.visible = visible;\n}\nfunction getRectConfig(_a) {\n    var _b, _c, _d, _e, _f, _g, _h;\n    var { datum, isHighlighted, style, highlightStyle, formatter, seriesId, stackGroup, ctx: { callbackCache } } = _a, opts = __rest$2(_a, [\"datum\", \"isHighlighted\", \"style\", \"highlightStyle\", \"formatter\", \"seriesId\", \"stackGroup\", \"ctx\"]);\n    const itemFill = isHighlighted ? (_b = highlightStyle.fill) !== null && _b !== void 0 ? _b : style.fill : style.fill;\n    const itemStroke = isHighlighted ? (_c = highlightStyle.stroke) !== null && _c !== void 0 ? _c : style.stroke : style.stroke;\n    const itemStrokeWidth = isHighlighted ? (_d = highlightStyle.strokeWidth) !== null && _d !== void 0 ? _d : style.strokeWidth : style.strokeWidth;\n    const fillOpacity = isHighlighted ? (_e = highlightStyle.fillOpacity) !== null && _e !== void 0 ? _e : style.fillOpacity : style.fillOpacity;\n    const { strokeOpacity, fillShadow, lineDash, lineDashOffset } = style;\n    let format = undefined;\n    if (formatter) {\n        format = callbackCache.call(formatter, Object.assign({ datum: datum.datum, xKey: datum.xKey, yKey: datum.yKey, fill: itemFill, stroke: itemStroke, strokeWidth: itemStrokeWidth, highlighted: isHighlighted, seriesId,\n            stackGroup }, opts));\n    }\n    return {\n        fill: (_f = format === null || format === void 0 ? void 0 : format.fill) !== null && _f !== void 0 ? _f : itemFill,\n        stroke: (_g = format === null || format === void 0 ? void 0 : format.stroke) !== null && _g !== void 0 ? _g : itemStroke,\n        strokeWidth: (_h = format === null || format === void 0 ? void 0 : format.strokeWidth) !== null && _h !== void 0 ? _h : itemStrokeWidth,\n        fillOpacity,\n        strokeOpacity,\n        lineDash,\n        lineDashOffset,\n        fillShadow,\n    };\n}\nfunction checkCrisp(visibleRange = []) {\n    const [visibleMin, visibleMax] = visibleRange;\n    const isZoomed = visibleMin !== 0 || visibleMax !== 1;\n    const crisp = !isZoomed;\n    return crisp;\n}\nfunction updateLabel({ labelNode, labelDatum, config, visible, }) {\n    if (labelDatum && config && config.enabled) {\n        const { x, y, text, textAlign, textBaseline } = labelDatum;\n        const { fontStyle, fontWeight, fontSize, fontFamily, color } = config;\n        labelNode.fontStyle = fontStyle;\n        labelNode.fontWeight = fontWeight;\n        labelNode.fontSize = fontSize;\n        labelNode.fontFamily = fontFamily;\n        labelNode.textAlign = textAlign;\n        labelNode.textBaseline = textBaseline;\n        labelNode.text = text;\n        labelNode.x = x;\n        labelNode.y = y;\n        labelNode.fill = color;\n        labelNode.visible = visible;\n    }\n    else {\n        labelNode.visible = false;\n    }\n}\n\nvar __decorate$1q = ( false) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nvar __awaiter$5 = ( false) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nconst BAR_LABEL_PLACEMENTS = ['inside', 'outside'];\nconst OPT_BAR_LABEL_PLACEMENT = (v, ctx) => OPTIONAL(v, ctx, (v) => BAR_LABEL_PLACEMENTS.includes(v));\nvar BarSeriesNodeTag;\n(function (BarSeriesNodeTag) {\n    BarSeriesNodeTag[BarSeriesNodeTag[\"Bar\"] = 0] = \"Bar\";\n    BarSeriesNodeTag[BarSeriesNodeTag[\"Label\"] = 1] = \"Label\";\n})(BarSeriesNodeTag || (BarSeriesNodeTag = {}));\nclass BarSeriesLabel extends Label$1 {\n    constructor() {\n        super(...arguments);\n        this.formatter = undefined;\n        this.placement = 'inside';\n    }\n}\n__decorate$1q([\n    Validate(OPT_FUNCTION)\n], BarSeriesLabel.prototype, \"formatter\", void 0);\n__decorate$1q([\n    Validate(OPT_BAR_LABEL_PLACEMENT)\n], BarSeriesLabel.prototype, \"placement\", void 0);\nclass BarSeriesTooltip extends SeriesTooltip {\n    constructor() {\n        super(...arguments);\n        this.renderer = undefined;\n    }\n}\n__decorate$1q([\n    Validate(OPT_FUNCTION)\n], BarSeriesTooltip.prototype, \"renderer\", void 0);\nfunction is2dArray$1(array) {\n    return array.length > 0 && Array.isArray(array[0]);\n}\nclass BarSeries extends CartesianSeries {\n    constructor(moduleCtx) {\n        super({\n            moduleCtx,\n            pickModes: [SeriesNodePickMode.EXACT_SHAPE_MATCH],\n            pathsPerSeries: 0,\n            directionKeys: {\n                [ChartAxisDirection.X]: ['xKey'],\n                [ChartAxisDirection.Y]: ['yKeys'],\n            },\n            directionNames: {\n                [ChartAxisDirection.X]: ['xName'],\n                [ChartAxisDirection.Y]: ['yNames'],\n            },\n        });\n        this.label = new BarSeriesLabel();\n        this.tooltip = new BarSeriesTooltip();\n        this.fills = ['#c16068', '#a2bf8a', '#ebcc87', '#80a0c3', '#b58dae', '#85c0d1'];\n        this.strokes = ['#874349', '#718661', '#a48f5f', '#5a7088', '#7f637a', '#5d8692'];\n        this.fillOpacity = 1;\n        this.strokeOpacity = 1;\n        this.lineDash = [0];\n        this.lineDashOffset = 0;\n        this.formatter = undefined;\n        /**\n         * Used to get the position of bars within each group.\n         */\n        this.groupScale = new BandScale$5();\n        this.xKey = undefined;\n        this.xName = undefined;\n        this.cumYKeyCount = [];\n        this.flatYKeys = undefined; // only set when a user used a flat array for yKeys\n        this.hideInLegend = [];\n        this.yKeys = [];\n        this.yKeysCache = [];\n        this.visibles = [];\n        this.grouped = false;\n        this.stackGroups = {};\n        /**\n         * A map of `yKeys` to their names (used in legends and tooltips).\n         * For example, if a key is `product_name` it's name can be a more presentable `Product Name`.\n         */\n        this.yNames = {};\n        this.legendItemNames = {};\n        this.strokeWidth = 1;\n        this.shadow = undefined;\n        this.smallestDataInterval = undefined;\n        this.label.enabled = false;\n    }\n    resolveKeyDirection(direction) {\n        if (this.getBarDirection() === ChartAxisDirection.X) {\n            if (direction === ChartAxisDirection.X) {\n                return ChartAxisDirection.Y;\n            }\n            return ChartAxisDirection.X;\n        }\n        return direction;\n    }\n    processYKeys() {\n        let { yKeys } = this;\n        let flatYKeys = undefined;\n        // Convert from flat y-keys to grouped y-keys.\n        if (!is2dArray$1(yKeys)) {\n            flatYKeys = yKeys;\n            yKeys = this.grouped ? flatYKeys.map((k) => [k]) : [flatYKeys];\n        }\n        const stackGroups = Object.values(this.stackGroups);\n        if (stackGroups.length > 0) {\n            const flattenKeys = (keys) => keys.reduce((res, k) => res.concat(k), []);\n            // Create a stack for items without a group\n            const flatKeys = flattenKeys(yKeys);\n            const keysInStacks = new Set(flattenKeys(stackGroups));\n            const ungroupedKeys = flatKeys.filter((k) => !keysInStacks.has(k));\n            yKeys = stackGroups.map((keys) => keys);\n            if (ungroupedKeys.length > 0) {\n                yKeys.push(ungroupedKeys);\n            }\n            // Preserve the order of colours and other properties\n            const indexMap = (items) => items.reduce((map, key, index) => map.set(key, index), new Map());\n            const newKeys = flattenKeys(yKeys);\n            const newKeysIndices = indexMap(newKeys);\n            const sort = (items) => {\n                const result = Array.from({ length: items.length });\n                items.forEach((item, index) => {\n                    const key = flatKeys[index];\n                    const newIndex = newKeysIndices.get(key);\n                    result[newIndex] = item;\n                });\n                return result;\n            };\n            this.fills = sort(this.fills);\n            this.strokes = sort(this.strokes);\n            this.visibles = sort(this.visibles);\n        }\n        if (!areArrayItemsStrictlyEqual(this.yKeysCache, yKeys)) {\n            this.flatYKeys = flatYKeys ? flatYKeys : undefined;\n            this.yKeys = yKeys;\n            let prevYKeyCount = 0;\n            this.cumYKeyCount = [];\n            const visibleStacks = [];\n            yKeys.forEach((stack, index) => {\n                if (stack.length > 0) {\n                    visibleStacks.push(String(index));\n                }\n                this.cumYKeyCount.push(prevYKeyCount);\n                prevYKeyCount += stack.length;\n            });\n            this.processSeriesItemEnabled();\n            const { groupScale } = this;\n            groupScale.domain = visibleStacks;\n        }\n        this.yKeysCache = yKeys;\n    }\n    processSeriesItemEnabled() {\n        const { seriesItemEnabled } = this;\n        const flattenFn = (r, n) => r.concat(...(Array.isArray(n) ? n : [n]));\n        const visibles = this.visibles.reduce(flattenFn, []);\n        seriesItemEnabled.clear();\n        let visiblesIdx = 0;\n        this.yKeys.forEach((stack) => {\n            stack.forEach((yKey) => { var _a; return seriesItemEnabled.set(yKey, (_a = visibles[visiblesIdx++]) !== null && _a !== void 0 ? _a : true); });\n        });\n    }\n    getStackGroup(yKey) {\n        var _a;\n        const { stackGroups } = this;\n        return (_a = Object.entries(stackGroups).find(([_, keys]) => keys.includes(yKey))) === null || _a === void 0 ? void 0 : _a[0];\n    }\n    processYNames() {\n        const values = this.yNames;\n        if (Array.isArray(values) && this.flatYKeys) {\n            const map = {};\n            this.flatYKeys.forEach((k, i) => {\n                map[k] = values[i];\n            });\n            this.yNames = map;\n        }\n    }\n    processData() {\n        var _a, _b, _c, _d, _e;\n        return __awaiter$5(this, void 0, void 0, function* () {\n            this.processYKeys();\n            this.processYNames();\n            const { xKey, seriesItemEnabled, normalizedTo, data = [] } = this;\n            const normalizedToAbs = Math.abs(normalizedTo !== null && normalizedTo !== void 0 ? normalizedTo : NaN);\n            const isContinuousX = ((_a = this.getCategoryAxis()) === null || _a === void 0 ? void 0 : _a.scale) instanceof ContinuousScale;\n            const isContinuousY = ((_b = this.getValueAxis()) === null || _b === void 0 ? void 0 : _b.scale) instanceof ContinuousScale;\n            const activeSeriesItems = [...seriesItemEnabled.entries()]\n                .filter(([, enabled]) => enabled)\n                .map(([yKey]) => yKey);\n            const activeStacks = this.yKeys\n                .map((stack) => stack.filter((key) => seriesItemEnabled.get(key)))\n                .filter((stack) => stack.length > 0);\n            const normaliseTo = normalizedToAbs && isFinite(normalizedToAbs) ? normalizedToAbs : undefined;\n            const extraProps = [];\n            if (normaliseTo) {\n                extraProps.push(normaliseGroupTo(activeSeriesItems, normaliseTo, 'sum'));\n            }\n            this.dataModel = new DataModel({\n                props: [\n                    keyProperty(xKey, isContinuousX),\n                    ...activeSeriesItems.map((yKey) => valueProperty(yKey, isContinuousY, { invalidValue: null })),\n                    ...activeStacks.map((stack) => sum(stack)),\n                    ...(isContinuousX ? [SMALLEST_KEY_INTERVAL] : []),\n                    AGG_VALUES_EXTENT,\n                    ...extraProps,\n                ],\n                groupByKeys: true,\n                dataVisible: this.visible && activeSeriesItems.length > 0,\n            });\n            this.processedData = this.dataModel.processData(data);\n            this.smallestDataInterval = {\n                x: (_e = (_d = (_c = this.processedData) === null || _c === void 0 ? void 0 : _c.reduced) === null || _d === void 0 ? void 0 : _d[SMALLEST_KEY_INTERVAL.property]) !== null && _e !== void 0 ? _e : Infinity,\n                y: Infinity,\n            };\n        });\n    }\n    getDomain(direction) {\n        var _a;\n        const { processedData } = this;\n        if (!processedData)\n            return [];\n        const { defs: { keys: [keyDef], }, domain: { keys: [keys], values: [yExtent], }, reduced: { [SMALLEST_KEY_INTERVAL.property]: smallestX, [AGG_VALUES_EXTENT.property]: ySumExtent } = {}, } = processedData;\n        if (direction === this.getCategoryDirection()) {\n            if (keyDef.valueType === 'category') {\n                return keys;\n            }\n            const keysExtent = (_a = extent$4(keys)) !== null && _a !== void 0 ? _a : [NaN, NaN];\n            if (direction === ChartAxisDirection.Y) {\n                return [keysExtent[0] + -smallestX, keysExtent[1]];\n            }\n            return [keysExtent[0], keysExtent[1] + smallestX];\n        }\n        else if (this.getValueAxis() instanceof LogAxis) {\n            return this.fixNumericExtent(yExtent);\n        }\n        else {\n            return this.fixNumericExtent(ySumExtent);\n        }\n    }\n    getNodeClickEvent(event, datum) {\n        var _a;\n        return new CartesianSeriesNodeClickEvent((_a = this.xKey) !== null && _a !== void 0 ? _a : '', datum.yKey, event, datum, this);\n    }\n    getNodeDoubleClickEvent(event, datum) {\n        var _a;\n        return new CartesianSeriesNodeDoubleClickEvent((_a = this.xKey) !== null && _a !== void 0 ? _a : '', datum.yKey, event, datum, this);\n    }\n    getCategoryAxis() {\n        return this.getCategoryDirection() === ChartAxisDirection.Y ? this.yAxis : this.xAxis;\n    }\n    getValueAxis() {\n        return this.getBarDirection() === ChartAxisDirection.Y ? this.yAxis : this.xAxis;\n    }\n    calculateStep(range) {\n        var _a;\n        const { smallestDataInterval: smallestInterval } = this;\n        const xAxis = this.getCategoryAxis();\n        if (!xAxis) {\n            return;\n        }\n        // calculate step\n        const domainLength = xAxis.dataDomain[1] - xAxis.dataDomain[0];\n        const intervals = domainLength / ((_a = smallestInterval === null || smallestInterval === void 0 ? void 0 : smallestInterval.x) !== null && _a !== void 0 ? _a : 1) + 1;\n        // The number of intervals/bands is used to determine the width of individual bands by dividing the available range.\n        // Allow a maximum number of bands to ensure the step does not fall below 1 pixel.\n        // This means there could be some overlap of the bands in the chart.\n        const maxBands = Math.floor(range); // A minimum of 1px per bar/column means the maximum number of bands will equal the available range\n        const bands = Math.min(intervals, maxBands);\n        const step = range / Math.max(1, bands);\n        return step;\n    }\n    createNodeData() {\n        return __awaiter$5(this, void 0, void 0, function* () {\n            const { data, visible } = this;\n            const xAxis = this.getCategoryAxis();\n            const yAxis = this.getValueAxis();\n            if (!(data && visible && xAxis && yAxis)) {\n                return [];\n            }\n            const xScale = xAxis.scale;\n            const yScale = yAxis.scale;\n            const { groupScale, yKeys, xKey = '', cumYKeyCount, fills, strokes, strokeWidth, seriesItemEnabled, label, id: seriesId, processedData, ctx, } = this;\n            let xBandWidth = xScale.bandwidth;\n            if (xScale instanceof ContinuousScale) {\n                const availableRange = Math.max(xAxis.range[0], xAxis.range[1]);\n                const step = this.calculateStep(availableRange);\n                xBandWidth = step;\n            }\n            groupScale.range = [0, xBandWidth];\n            if (xAxis instanceof CategoryAxis) {\n                groupScale.padding = xAxis.groupPaddingInner;\n            }\n            else if (xAxis instanceof GroupedCategoryAxis) {\n                groupScale.padding = 0.1;\n            }\n            else {\n                // Number or Time axis\n                groupScale.padding = 0;\n            }\n            // To get exactly `0` padding we need to turn off rounding\n            if (groupScale.padding === 0) {\n                groupScale.round = false;\n            }\n            else {\n                groupScale.round = true;\n            }\n            const barWidth = groupScale.bandwidth >= 1\n                ? // Pixel-rounded value for low-volume bar charts.\n                    groupScale.bandwidth\n                : // Handle high-volume bar charts gracefully.\n                    groupScale.rawBandwidth;\n            const contexts = [];\n            processedData === null || processedData === void 0 ? void 0 : processedData.data.forEach(({ keys, datum: seriesDatum, values }, dataIndex) => {\n                var _a, _b, _c, _d, _e;\n                var _f;\n                const x = xScale.convert(keys[0]);\n                for (let stackIndex = 0; stackIndex < ((_a = yKeys === null || yKeys === void 0 ? void 0 : yKeys.length) !== null && _a !== void 0 ? _a : 0); stackIndex++) {\n                    const stackYKeys = (_b = yKeys === null || yKeys === void 0 ? void 0 : yKeys[stackIndex]) !== null && _b !== void 0 ? _b : []; // y-data for a stack within a group\n                    (_c = contexts[stackIndex]) !== null && _c !== void 0 ? _c : (contexts[stackIndex] = []);\n                    let prevMinY = 0;\n                    let prevMaxY = 0;\n                    for (let levelIndex = 0; levelIndex < stackYKeys.length; levelIndex++) {\n                        const yKey = stackYKeys[levelIndex];\n                        const yIndex = (_d = processedData === null || processedData === void 0 ? void 0 : processedData.indices.values[yKey]) !== null && _d !== void 0 ? _d : -1;\n                        (_e = (_f = contexts[stackIndex])[levelIndex]) !== null && _e !== void 0 ? _e : (_f[levelIndex] = {\n                            itemId: yKey,\n                            nodeData: [],\n                            labelData: [],\n                        });\n                        if (yIndex === undefined)\n                            continue;\n                        const yValue = values[0][yIndex];\n                        const currY = +yValue;\n                        const barX = x + groupScale.convert(String(stackIndex));\n                        // Bars outside of visible range are not rendered, so we create node data\n                        // only for the visible subset of user data.\n                        if (!xAxis.inRange(barX, barWidth)) {\n                            continue;\n                        }\n                        if (isNaN(currY)) {\n                            continue;\n                        }\n                        const prevY = currY < 0 ? prevMinY : prevMaxY;\n                        const y = yScale.convert(prevY + currY, { strict: false });\n                        const bottomY = yScale.convert(prevY, { strict: false });\n                        const barAlongX = this.getBarDirection() === ChartAxisDirection.X;\n                        const rect = {\n                            x: barAlongX ? Math.min(y, bottomY) : barX,\n                            y: barAlongX ? barX : Math.min(y, bottomY),\n                            width: barAlongX ? Math.abs(bottomY - y) : barWidth,\n                            height: barAlongX ? barWidth : Math.abs(bottomY - y),\n                        };\n                        const nodeMidPoint = {\n                            x: rect.x + rect.width / 2,\n                            y: rect.y + rect.height / 2,\n                        };\n                        const { fontStyle: labelFontStyle, fontWeight: labelFontWeight, fontSize: labelFontSize, fontFamily: labelFontFamily, color: labelColor, formatter, placement, } = label;\n                        const { text: labelText, textAlign: labelTextAlign, textBaseline: labelTextBaseline, x: labelX, y: labelY, } = createLabelData({ value: yValue, rect, formatter, placement, seriesId, barAlongX, ctx });\n                        const colorIndex = cumYKeyCount[stackIndex] + levelIndex;\n                        const nodeData = {\n                            index: dataIndex,\n                            series: this,\n                            itemId: yKey,\n                            datum: seriesDatum[0],\n                            cumulativeValue: prevY + currY,\n                            yValue,\n                            yKey,\n                            xKey,\n                            x: rect.x,\n                            y: rect.y,\n                            width: rect.width,\n                            height: rect.height,\n                            nodeMidPoint,\n                            colorIndex,\n                            fill: fills[colorIndex % fills.length],\n                            stroke: strokes[colorIndex % strokes.length],\n                            strokeWidth,\n                            label: seriesItemEnabled.get(yKey) && labelText\n                                ? {\n                                    text: labelText,\n                                    fontStyle: labelFontStyle,\n                                    fontWeight: labelFontWeight,\n                                    fontSize: labelFontSize,\n                                    fontFamily: labelFontFamily,\n                                    textAlign: labelTextAlign,\n                                    textBaseline: labelTextBaseline,\n                                    fill: labelColor,\n                                    x: labelX,\n                                    y: labelY,\n                                }\n                                : undefined,\n                        };\n                        contexts[stackIndex][levelIndex].nodeData.push(nodeData);\n                        contexts[stackIndex][levelIndex].labelData.push(nodeData);\n                        if (currY < 0) {\n                            prevMinY += currY;\n                        }\n                        else {\n                            prevMaxY += currY;\n                        }\n                    }\n                }\n            });\n            return contexts.reduce((r, n) => r.concat(...n), []);\n        });\n    }\n    nodeFactory() {\n        return new Rect();\n    }\n    updateDatumSelection(opts) {\n        return __awaiter$5(this, void 0, void 0, function* () {\n            const { nodeData, datumSelection } = opts;\n            return datumSelection.update(nodeData, (rect) => (rect.tag = BarSeriesNodeTag.Bar));\n        });\n    }\n    updateDatumNodes(opts) {\n        var _a;\n        return __awaiter$5(this, void 0, void 0, function* () {\n            const { datumSelection, isHighlight } = opts;\n            const { fills, strokes, fillOpacity, strokeOpacity, lineDash, lineDashOffset, shadow, formatter, id: seriesId, highlightStyle: { item: itemHighlightStyle }, ctx, } = this;\n            const crisp = checkCrisp((_a = this.xAxis) === null || _a === void 0 ? void 0 : _a.visibleRange);\n            const categoryAlongX = this.getCategoryDirection() === ChartAxisDirection.X;\n            datumSelection.each((rect, datum) => {\n                const { colorIndex } = datum;\n                const style = {\n                    fill: fills[colorIndex % fills.length],\n                    stroke: strokes[colorIndex % fills.length],\n                    fillOpacity,\n                    strokeOpacity,\n                    lineDash,\n                    lineDashOffset,\n                    fillShadow: shadow,\n                    strokeWidth: this.getStrokeWidth(this.strokeWidth, datum),\n                };\n                const visible = categoryAlongX ? datum.width > 0 : datum.height > 0;\n                const config = getRectConfig({\n                    datum,\n                    isHighlighted: isHighlight,\n                    style,\n                    highlightStyle: itemHighlightStyle,\n                    formatter,\n                    seriesId,\n                    stackGroup: this.getStackGroup(datum.yKey),\n                    ctx,\n                });\n                config.crisp = crisp;\n                config.visible = visible;\n                updateRect({ rect, config });\n            });\n        });\n    }\n    updateLabelSelection(opts) {\n        return __awaiter$5(this, void 0, void 0, function* () {\n            const { labelData, labelSelection } = opts;\n            const { enabled } = this.label;\n            const data = enabled ? labelData : [];\n            return labelSelection.update(data, (text) => {\n                text.tag = BarSeriesNodeTag.Label;\n                text.pointerEvents = PointerEvents.None;\n            });\n        });\n    }\n    updateLabelNodes(opts) {\n        return __awaiter$5(this, void 0, void 0, function* () {\n            const { labelSelection } = opts;\n            labelSelection.each((text, datum) => {\n                const labelDatum = datum.label;\n                updateLabel({ labelNode: text, labelDatum, config: this.label, visible: true });\n            });\n        });\n    }\n    getTooltipHtml(nodeDatum) {\n        var _a;\n        const { xKey, yKeys, processedData, ctx: { callbackCache }, } = this;\n        const xAxis = this.getCategoryAxis();\n        const yAxis = this.getValueAxis();\n        const { yKey } = nodeDatum;\n        if (!processedData || !xKey || !yKey || !xAxis || !yAxis) {\n            return '';\n        }\n        let fillIndex = 0;\n        let i = 0;\n        let j = 0;\n        for (; j < yKeys.length; j++) {\n            const stack = yKeys[j];\n            i = stack.indexOf(yKey);\n            if (i >= 0) {\n                fillIndex += i;\n                break;\n            }\n            fillIndex += stack.length;\n        }\n        const { xName, yNames, fills, strokes, tooltip, formatter, id: seriesId } = this;\n        const { renderer: tooltipRenderer } = tooltip;\n        const datum = nodeDatum.datum;\n        const yName = yNames[yKey];\n        const stackGroup = this.getStackGroup(yKey);\n        const fill = fills[fillIndex % fills.length];\n        const stroke = strokes[fillIndex % fills.length];\n        const strokeWidth = this.getStrokeWidth(this.strokeWidth);\n        const xValue = datum[xKey];\n        const yValue = datum[yKey];\n        const xString = sanitizeHtml(xAxis.formatDatum(xValue));\n        const yString = sanitizeHtml(yAxis.formatDatum(yValue));\n        const title = sanitizeHtml(yName);\n        const content = xString + ': ' + yString;\n        let format = undefined;\n        if (formatter) {\n            format = callbackCache.call(formatter, {\n                datum,\n                fill,\n                stroke,\n                strokeWidth,\n                highlighted: false,\n                xKey,\n                yKey,\n                seriesId,\n                stackGroup,\n            });\n        }\n        const color = (_a = format === null || format === void 0 ? void 0 : format.fill) !== null && _a !== void 0 ? _a : fill;\n        const defaults = {\n            title,\n            backgroundColor: color,\n            content,\n        };\n        if (tooltipRenderer) {\n            return toTooltipHtml$1(tooltipRenderer({\n                datum,\n                xKey,\n                xValue,\n                xName,\n                yKey,\n                yValue,\n                yName,\n                color,\n                title,\n                seriesId,\n                stackGroup,\n            }), defaults);\n        }\n        return toTooltipHtml$1(defaults);\n    }\n    getLegendData() {\n        const { id, data, xKey, yKeys, yNames, legendItemNames, cumYKeyCount, seriesItemEnabled, hideInLegend, fills, strokes, fillOpacity, strokeOpacity, } = this;\n        if (!(data === null || data === void 0 ? void 0 : data.length) || !xKey || !yKeys.length) {\n            return [];\n        }\n        const legendData = [];\n        this.validateLegendData();\n        this.yKeys.forEach((stack, stackIndex) => {\n            var _a, _b, _c;\n            for (let levelIndex = 0; levelIndex < stack.length; levelIndex++) {\n                const yKey = stack[levelIndex];\n                if (hideInLegend.indexOf(yKey) >= 0) {\n                    return;\n                }\n                const colorIndex = cumYKeyCount[stackIndex] + levelIndex;\n                legendData.push({\n                    legendType: 'category',\n                    id,\n                    itemId: yKey,\n                    seriesId: id,\n                    enabled: (_a = seriesItemEnabled.get(yKey)) !== null && _a !== void 0 ? _a : false,\n                    label: {\n                        text: (_c = (_b = legendItemNames[yKey]) !== null && _b !== void 0 ? _b : yNames[yKey]) !== null && _c !== void 0 ? _c : yKey,\n                    },\n                    marker: {\n                        fill: fills[colorIndex % fills.length],\n                        stroke: strokes[colorIndex % strokes.length],\n                        fillOpacity: fillOpacity,\n                        strokeOpacity: strokeOpacity,\n                    },\n                });\n            }\n        });\n        return legendData;\n    }\n    validateLegendData() {\n        const { hideInLegend, legendItemNames } = this;\n        let hasAnyLegendItemName = false;\n        this.yKeys.forEach((stack) => {\n            stack.forEach((yKey) => {\n                if (hideInLegend.indexOf(yKey) >= 0) {\n                    return;\n                }\n                const hasLegendItemName = legendItemNames[yKey] !== undefined;\n                if (hasAnyLegendItemName && !hasLegendItemName) {\n                    Logger.warnOnce(`a series is missing the legendItemName property, unexpected behaviour may occur.`);\n                }\n                hasAnyLegendItemName = hasLegendItemName;\n            });\n        });\n    }\n    onLegendItemClick(event) {\n        const { itemId, enabled, series } = event;\n        if (series.id !== this.id)\n            return;\n        super.toggleSeriesItem(itemId, enabled);\n        // Toggle items where the legendItemName matches the legendItemName of the clicked item\n        Object.keys(this.legendItemNames)\n            .filter((id) => this.legendItemNames[id] !== undefined && this.legendItemNames[id] === this.legendItemNames[itemId])\n            .forEach((yKey) => {\n            if (yKey !== itemId) {\n                super.toggleSeriesItem(yKey, enabled);\n            }\n        });\n        this.calculateVisibleDomain();\n    }\n    onLegendItemDoubleClick(event) {\n        const { enabled, itemId, numVisibleItems } = event;\n        const totalVisibleItems = Object.values(numVisibleItems).reduce((p, v) => p + v, 0);\n        const singleEnabledInEachSeries = Object.values(numVisibleItems).filter((v) => v === 1).length === Object.keys(numVisibleItems).length;\n        const newEnableds = {};\n        this.yKeys.forEach((stack) => {\n            stack.forEach((yKey) => {\n                var _a;\n                const matches = yKey === itemId;\n                const singleEnabledWasClicked = totalVisibleItems === 1 && enabled;\n                const newEnabled = matches || singleEnabledWasClicked || (singleEnabledInEachSeries && enabled);\n                newEnableds[yKey] = (_a = newEnableds[yKey]) !== null && _a !== void 0 ? _a : newEnabled;\n                // Toggle other items that have matching legendItemNames which have not already been processed.\n                Object.keys(this.legendItemNames)\n                    .filter((id) => this.legendItemNames[id] !== undefined &&\n                    this.legendItemNames[id] === this.legendItemNames[yKey])\n                    .forEach((nameYKey) => {\n                    var _a;\n                    newEnableds[nameYKey] = (_a = newEnableds[nameYKey]) !== null && _a !== void 0 ? _a : newEnabled;\n                });\n            });\n        });\n        Object.keys(newEnableds).forEach((yKey) => {\n            super.toggleSeriesItem(yKey, newEnableds[yKey]);\n        });\n        this.calculateVisibleDomain();\n    }\n    calculateVisibleDomain() {\n        const yKeys = this.yKeys.map((stack) => stack.slice()); // deep clone\n        this.seriesItemEnabled.forEach((enabled, yKey) => {\n            if (!enabled) {\n                yKeys.forEach((stack) => {\n                    const index = stack.indexOf(yKey);\n                    if (index >= 0) {\n                        stack.splice(index, 1);\n                    }\n                });\n            }\n        });\n        const visibleStacks = [];\n        yKeys.forEach((stack, index) => {\n            if (stack.length > 0) {\n                visibleStacks.push(String(index));\n            }\n        });\n        this.groupScale.domain = visibleStacks;\n        this.nodeDataRefresh = true;\n    }\n    animateEmptyUpdateReady({ datumSelections, labelSelections, }) {\n        const duration = 1000;\n        const labelDuration = 200;\n        let startingX = Infinity;\n        datumSelections.forEach((datumSelection) => datumSelection.each((_, datum) => {\n            if (datum.yValue >= 0) {\n                startingX = Math.min(startingX, datum.x);\n            }\n        }));\n        datumSelections.forEach((datumSelection) => {\n            datumSelection.each((rect, datum) => {\n                var _a;\n                (_a = this.animationManager) === null || _a === void 0 ? void 0 : _a.animateMany(`${this.id}_empty-update-ready_${rect.id}`, [\n                    { from: startingX, to: datum.x },\n                    { from: 0, to: datum.width },\n                ], {\n                    disableInteractions: true,\n                    duration,\n                    ease: easeOut,\n                    repeat: 0,\n                    onUpdate([x, width]) {\n                        rect.x = x;\n                        rect.width = width;\n                        rect.y = datum.y;\n                        rect.height = datum.height;\n                    },\n                });\n            });\n        });\n        labelSelections.forEach((labelSelection) => {\n            labelSelection.each((label) => {\n                var _a;\n                (_a = this.animationManager) === null || _a === void 0 ? void 0 : _a.animate(`${this.id}_empty-update-ready_${label.id}`, {\n                    from: 0,\n                    to: 1,\n                    delay: duration,\n                    duration: labelDuration,\n                    ease: linear,\n                    repeat: 0,\n                    onUpdate: (opacity) => {\n                        label.opacity = opacity;\n                    },\n                });\n            });\n        });\n    }\n    animateReadyUpdate({ datumSelections }) {\n        datumSelections.forEach((datumSelection) => {\n            this.resetSelectionRects(datumSelection);\n        });\n    }\n    animateReadyHighlight(highlightSelection) {\n        this.resetSelectionRects(highlightSelection);\n    }\n    animateReadyResize({ datumSelections }) {\n        var _a;\n        (_a = this.animationManager) === null || _a === void 0 ? void 0 : _a.stop();\n        datumSelections.forEach((datumSelection) => {\n            this.resetSelectionRects(datumSelection);\n        });\n    }\n    resetSelectionRects(selection) {\n        selection.each((rect, datum) => {\n            rect.x = datum.x;\n            rect.y = datum.y;\n            rect.width = datum.width;\n            rect.height = datum.height;\n        });\n    }\n    isLabelEnabled() {\n        return this.label.enabled;\n    }\n    getBandScalePadding() {\n        return { inner: 0.2, outer: 0.3 };\n    }\n    getBarDirection() {\n        return ChartAxisDirection.X;\n    }\n    getCategoryDirection() {\n        return ChartAxisDirection.Y;\n    }\n}\nBarSeries.className = 'BarSeries';\nBarSeries.type = 'bar';\n__decorate$1q([\n    Validate(COLOR_STRING_ARRAY)\n], BarSeries.prototype, \"fills\", void 0);\n__decorate$1q([\n    Validate(COLOR_STRING_ARRAY)\n], BarSeries.prototype, \"strokes\", void 0);\n__decorate$1q([\n    Validate(NUMBER(0, 1))\n], BarSeries.prototype, \"fillOpacity\", void 0);\n__decorate$1q([\n    Validate(NUMBER(0, 1))\n], BarSeries.prototype, \"strokeOpacity\", void 0);\n__decorate$1q([\n    Validate(OPT_LINE_DASH)\n], BarSeries.prototype, \"lineDash\", void 0);\n__decorate$1q([\n    Validate(NUMBER(0))\n], BarSeries.prototype, \"lineDashOffset\", void 0);\n__decorate$1q([\n    Validate(OPT_FUNCTION)\n], BarSeries.prototype, \"formatter\", void 0);\n__decorate$1q([\n    Validate(OPT_STRING)\n], BarSeries.prototype, \"xKey\", void 0);\n__decorate$1q([\n    Validate(OPT_STRING)\n], BarSeries.prototype, \"xName\", void 0);\n__decorate$1q([\n    Validate(STRING_ARRAY)\n], BarSeries.prototype, \"hideInLegend\", void 0);\n__decorate$1q([\n    Validate(BOOLEAN_ARRAY)\n], BarSeries.prototype, \"visibles\", void 0);\n__decorate$1q([\n    Validate(BOOLEAN)\n], BarSeries.prototype, \"grouped\", void 0);\n__decorate$1q([\n    Validate(OPT_NUMBER())\n], BarSeries.prototype, \"normalizedTo\", void 0);\n__decorate$1q([\n    Validate(NUMBER(0))\n], BarSeries.prototype, \"strokeWidth\", void 0);\nclass ColumnSeries extends BarSeries {\n    getBarDirection() {\n        return ChartAxisDirection.Y;\n    }\n    getCategoryDirection() {\n        return ChartAxisDirection.X;\n    }\n    animateEmptyUpdateReady({ datumSelections, labelSelections, }) {\n        const duration = 1000;\n        const labelDuration = 200;\n        let startingY = 0;\n        datumSelections.forEach((datumSelection) => datumSelection.each((_, datum) => {\n            if (datum.yValue >= 0) {\n                startingY = Math.max(startingY, datum.height + datum.y);\n            }\n        }));\n        datumSelections.forEach((datumSelection) => {\n            datumSelection.each((rect, datum) => {\n                var _a;\n                (_a = this.animationManager) === null || _a === void 0 ? void 0 : _a.animateMany(`${this.id}_empty-update-ready_${rect.id}`, [\n                    { from: startingY, to: datum.y },\n                    { from: 0, to: datum.height },\n                ], {\n                    disableInteractions: true,\n                    duration,\n                    ease: easeOut,\n                    repeat: 0,\n                    onUpdate([y, height]) {\n                        rect.y = y;\n                        rect.height = height;\n                        rect.x = datum.x;\n                        rect.width = datum.width;\n                    },\n                });\n            });\n        });\n        labelSelections.forEach((labelSelection) => {\n            labelSelection.each((label) => {\n                var _a;\n                (_a = this.animationManager) === null || _a === void 0 ? void 0 : _a.animate(`${this.id}_empty-update-ready_${label.id}`, {\n                    from: 0,\n                    to: 1,\n                    delay: duration,\n                    duration: labelDuration,\n                    ease: linear,\n                    repeat: 0,\n                    onUpdate: (opacity) => {\n                        label.opacity = opacity;\n                    },\n                });\n            });\n        });\n    }\n}\nColumnSeries.type = 'column';\nColumnSeries.className = 'ColumnSeries';\n\nvar __decorate$1p = ( false) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nvar __awaiter$4 = ( false) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nconst HISTOGRAM_AGGREGATIONS = ['count', 'sum', 'mean'];\nconst HISTOGRAM_AGGREGATION = predicateWithMessage((v) => HISTOGRAM_AGGREGATIONS.includes(v), `expecting a histogram aggregation keyword such as 'count', 'sum' or 'mean`);\nvar HistogramSeriesNodeTag;\n(function (HistogramSeriesNodeTag) {\n    HistogramSeriesNodeTag[HistogramSeriesNodeTag[\"Bin\"] = 0] = \"Bin\";\n    HistogramSeriesNodeTag[HistogramSeriesNodeTag[\"Label\"] = 1] = \"Label\";\n})(HistogramSeriesNodeTag || (HistogramSeriesNodeTag = {}));\nclass HistogramSeriesLabel extends Label$1 {\n    constructor() {\n        super(...arguments);\n        this.formatter = undefined;\n    }\n}\n__decorate$1p([\n    Validate(OPT_FUNCTION)\n], HistogramSeriesLabel.prototype, \"formatter\", void 0);\nconst defaultBinCount = 10;\nclass HistogramSeriesTooltip extends SeriesTooltip {\n    constructor() {\n        super(...arguments);\n        this.renderer = undefined;\n    }\n}\n__decorate$1p([\n    Validate(OPT_FUNCTION)\n], HistogramSeriesTooltip.prototype, \"renderer\", void 0);\nclass HistogramSeries extends CartesianSeries {\n    constructor(moduleCtx) {\n        super({ moduleCtx, pickModes: [SeriesNodePickMode.EXACT_SHAPE_MATCH] });\n        this.label = new HistogramSeriesLabel();\n        this.tooltip = new HistogramSeriesTooltip();\n        this.fill = undefined;\n        this.stroke = undefined;\n        this.fillOpacity = 1;\n        this.strokeOpacity = 1;\n        this.lineDash = [0];\n        this.lineDashOffset = 0;\n        this.xKey = undefined;\n        this.areaPlot = false;\n        this.bins = undefined;\n        this.aggregation = 'count';\n        this.binCount = undefined;\n        this.xName = undefined;\n        this.yKey = undefined;\n        this.yName = undefined;\n        this.strokeWidth = 1;\n        this.shadow = undefined;\n        this.calculatedBins = [];\n        this.label.enabled = false;\n    }\n    // During processData phase, used to unify different ways of the user specifying\n    // the bins. Returns bins in format[[min1, max1], [min2, max2], ... ].\n    deriveBins(xDomain) {\n        if (this.binCount === undefined) {\n            const binStarts = ticks(xDomain[0], xDomain[1], defaultBinCount);\n            const binSize = tickStep(xDomain[0], xDomain[1], defaultBinCount);\n            const firstBinEnd = binStarts[0];\n            const expandStartToBin = (n) => [n, n + binSize];\n            return [[firstBinEnd - binSize, firstBinEnd], ...binStarts.map(expandStartToBin)];\n        }\n        else {\n            return this.calculateNiceBins(xDomain, this.binCount);\n        }\n    }\n    calculateNiceBins(domain, binCount) {\n        const startGuess = Math.floor(domain[0]);\n        const stop = domain[1];\n        const segments = binCount || 1;\n        const { start, binSize } = this.calculateNiceStart(startGuess, stop, segments);\n        return this.getBins(start, stop, binSize, segments);\n    }\n    getBins(start, stop, step, count) {\n        const bins = [];\n        for (let i = 0; i < count; i++) {\n            const a = Math.round((start + i * step) * 10) / 10;\n            let b = Math.round((start + (i + 1) * step) * 10) / 10;\n            if (i === count - 1) {\n                b = Math.max(b, stop);\n            }\n            bins[i] = [a, b];\n        }\n        return bins;\n    }\n    calculateNiceStart(a, b, segments) {\n        const binSize = Math.abs(b - a) / segments;\n        const order = Math.floor(Math.log10(binSize));\n        const magnitude = Math.pow(10, order);\n        const start = Math.floor(a / magnitude) * magnitude;\n        return {\n            start,\n            binSize,\n        };\n    }\n    processData() {\n        return __awaiter$4(this, void 0, void 0, function* () {\n            const { xKey, yKey, data, areaPlot, aggregation } = this;\n            const props = [keyProperty(xKey, true), SORT_DOMAIN_GROUPS];\n            if (yKey) {\n                let aggProp = groupCount();\n                if (aggregation === 'count') ;\n                else if (aggregation === 'sum') {\n                    aggProp = groupSum([yKey]);\n                }\n                else if (aggregation === 'mean') {\n                    aggProp = groupAverage([yKey]);\n                }\n                if (areaPlot) {\n                    aggProp = area([yKey], aggProp);\n                }\n                props.push(valueProperty(yKey, true, { invalidValue: undefined }), aggProp);\n            }\n            else {\n                let aggProp = groupCount();\n                if (areaPlot) {\n                    aggProp = area([], aggProp);\n                }\n                props.push(aggProp);\n            }\n            const groupByFn = (dataSet) => {\n                var _a;\n                const xExtent = fixNumericExtent(dataSet.domain.keys[0]);\n                if (xExtent.length === 0) {\n                    // No buckets can be calculated.\n                    dataSet.domain.groups = [];\n                    return () => [];\n                }\n                const bins = (_a = this.bins) !== null && _a !== void 0 ? _a : this.deriveBins(xExtent);\n                const binCount = bins.length;\n                this.calculatedBins = [...bins];\n                return (item) => {\n                    const xValue = item.keys[0];\n                    for (let i = 0; i < binCount; i++) {\n                        const nextBin = bins[i];\n                        if (xValue >= nextBin[0] && xValue < nextBin[1]) {\n                            return nextBin;\n                        }\n                        if (i === binCount - 1 && xValue <= nextBin[1]) {\n                            // Handle edge case of a value being at the maximum extent, and the\n                            // final bin aligning with it.\n                            return nextBin;\n                        }\n                    }\n                    return [];\n                };\n            };\n            this.dataModel = new DataModel({\n                props,\n                dataVisible: this.visible,\n                groupByFn,\n            });\n            this.processedData = this.dataModel.processData(data !== null && data !== void 0 ? data : []);\n        });\n    }\n    getDomain(direction) {\n        var _a, _b, _c, _d;\n        const { processedData } = this;\n        if (!processedData)\n            return [];\n        const { domain: { aggValues: [yDomain] = [] }, } = processedData;\n        const xDomainMin = (_a = this.calculatedBins) === null || _a === void 0 ? void 0 : _a[0][0];\n        const xDomainMax = (_b = this.calculatedBins) === null || _b === void 0 ? void 0 : _b[((_d = (_c = this.calculatedBins) === null || _c === void 0 ? void 0 : _c.length) !== null && _d !== void 0 ? _d : 0) - 1][1];\n        if (direction === ChartAxisDirection.X) {\n            return fixNumericExtent([xDomainMin, xDomainMax]);\n        }\n        return fixNumericExtent(yDomain);\n    }\n    getNodeClickEvent(event, datum) {\n        var _a, _b;\n        return new CartesianSeriesNodeClickEvent((_a = this.xKey) !== null && _a !== void 0 ? _a : '', (_b = this.yKey) !== null && _b !== void 0 ? _b : '', event, datum, this);\n    }\n    getNodeDoubleClickEvent(event, datum) {\n        var _a, _b;\n        return new CartesianSeriesNodeDoubleClickEvent((_a = this.xKey) !== null && _a !== void 0 ? _a : '', (_b = this.yKey) !== null && _b !== void 0 ? _b : '', event, datum, this);\n    }\n    createNodeData() {\n        var _a;\n        return __awaiter$4(this, void 0, void 0, function* () {\n            const { xAxis, yAxis, processedData, ctx: { callbackCache }, } = this;\n            if (!this.seriesItemEnabled || !xAxis || !yAxis || !processedData || processedData.type !== 'grouped') {\n                return [];\n            }\n            const { scale: xScale } = xAxis;\n            const { scale: yScale } = yAxis;\n            const { fill, stroke, strokeWidth, id: seriesId, yKey = '', xKey = '' } = this;\n            const nodeData = [];\n            const defaultLabelFormatter = (params) => String(params.value);\n            const { label: { formatter: labelFormatter = defaultLabelFormatter, fontStyle: labelFontStyle, fontWeight: labelFontWeight, fontSize: labelFontSize, fontFamily: labelFontFamily, color: labelColor, }, } = this;\n            processedData.data.forEach((group) => {\n                var _a;\n                const { aggValues: [[negativeAgg, positiveAgg]] = [[0, 0]], datum, datum: { length: frequency }, keys: domain, keys: [xDomainMin, xDomainMax], } = group;\n                const xMinPx = xScale.convert(xDomainMin);\n                const xMaxPx = xScale.convert(xDomainMax);\n                const total = negativeAgg + positiveAgg;\n                const yZeroPx = yScale.convert(0);\n                const yMaxPx = yScale.convert(total);\n                const w = xMaxPx - xMinPx;\n                const h = Math.abs(yMaxPx - yZeroPx);\n                const selectionDatumLabel = total !== 0\n                    ? {\n                        text: (_a = callbackCache.call(labelFormatter, { value: total, seriesId })) !== null && _a !== void 0 ? _a : String(total),\n                        fontStyle: labelFontStyle,\n                        fontWeight: labelFontWeight,\n                        fontSize: labelFontSize,\n                        fontFamily: labelFontFamily,\n                        fill: labelColor,\n                        x: xMinPx + w / 2,\n                        y: yMaxPx + h / 2,\n                    }\n                    : undefined;\n                const nodeMidPoint = {\n                    x: xMinPx + w / 2,\n                    y: yMaxPx + h / 2,\n                };\n                nodeData.push({\n                    series: this,\n                    datum,\n                    // since each selection is an aggregation of multiple data.\n                    aggregatedValue: total,\n                    frequency,\n                    domain: domain,\n                    yKey,\n                    xKey,\n                    x: xMinPx,\n                    y: yMaxPx,\n                    width: w,\n                    height: h,\n                    nodeMidPoint,\n                    fill: fill,\n                    stroke: stroke,\n                    strokeWidth: strokeWidth,\n                    label: selectionDatumLabel,\n                });\n            });\n            return [{ itemId: (_a = this.yKey) !== null && _a !== void 0 ? _a : this.id, nodeData, labelData: nodeData }];\n        });\n    }\n    nodeFactory() {\n        return new Rect();\n    }\n    updateDatumSelection(opts) {\n        return __awaiter$4(this, void 0, void 0, function* () {\n            const { nodeData, datumSelection } = opts;\n            return datumSelection.update(nodeData, (rect) => {\n                rect.tag = HistogramSeriesNodeTag.Bin;\n                rect.crisp = true;\n            });\n        });\n    }\n    updateDatumNodes(opts) {\n        return __awaiter$4(this, void 0, void 0, function* () {\n            const { datumSelection, isHighlight: isDatumHighlighted } = opts;\n            const { fillOpacity: seriesFillOpacity, strokeOpacity, shadow, highlightStyle: { item: { fill: highlightedFill, fillOpacity: highlightFillOpacity = seriesFillOpacity, stroke: highlightedStroke, strokeWidth: highlightedDatumStrokeWidth, }, }, } = this;\n            datumSelection.each((rect, datum, index) => {\n                var _a, _b;\n                const strokeWidth = isDatumHighlighted && highlightedDatumStrokeWidth !== undefined\n                    ? highlightedDatumStrokeWidth\n                    : datum.strokeWidth;\n                const fillOpacity = isDatumHighlighted ? highlightFillOpacity : seriesFillOpacity;\n                rect.x = datum.x;\n                rect.width = datum.width;\n                rect.fill = (_a = (isDatumHighlighted ? highlightedFill : undefined)) !== null && _a !== void 0 ? _a : datum.fill;\n                rect.stroke = (_b = (isDatumHighlighted ? highlightedStroke : undefined)) !== null && _b !== void 0 ? _b : datum.stroke;\n                rect.fillOpacity = fillOpacity;\n                rect.strokeOpacity = strokeOpacity;\n                rect.strokeWidth = strokeWidth;\n                rect.lineDash = this.lineDash;\n                rect.lineDashOffset = this.lineDashOffset;\n                rect.fillShadow = shadow;\n                rect.zIndex = isDatumHighlighted ? Series.highlightedZIndex : index;\n                rect.visible = datum.height > 0; // prevent stroke from rendering for zero height columns\n            });\n        });\n    }\n    updateLabelSelection(opts) {\n        return __awaiter$4(this, void 0, void 0, function* () {\n            const { labelData, labelSelection } = opts;\n            return labelSelection.update(labelData, (text) => {\n                text.tag = HistogramSeriesNodeTag.Label;\n                text.pointerEvents = PointerEvents.None;\n                text.textAlign = 'center';\n                text.textBaseline = 'middle';\n            });\n        });\n    }\n    updateLabelNodes(opts) {\n        return __awaiter$4(this, void 0, void 0, function* () {\n            const { labelSelection } = opts;\n            const labelEnabled = this.label.enabled;\n            labelSelection.each((text, datum) => {\n                const label = datum.label;\n                if (label && labelEnabled) {\n                    text.text = label.text;\n                    text.x = label.x;\n                    text.y = label.y;\n                    text.fontStyle = label.fontStyle;\n                    text.fontWeight = label.fontWeight;\n                    text.fontSize = label.fontSize;\n                    text.fontFamily = label.fontFamily;\n                    text.fill = label.fill;\n                    text.visible = true;\n                }\n                else {\n                    text.visible = false;\n                }\n            });\n        });\n    }\n    getTooltipHtml(nodeDatum) {\n        const { xKey, yKey = '', xAxis, yAxis } = this;\n        if (!xKey || !xAxis || !yAxis) {\n            return '';\n        }\n        const { xName, yName, fill: color, tooltip, aggregation, id: seriesId } = this;\n        const { renderer: tooltipRenderer } = tooltip;\n        const { aggregatedValue, frequency, domain, domain: [rangeMin, rangeMax], } = nodeDatum;\n        const title = `${sanitizeHtml(xName !== null && xName !== void 0 ? xName : xKey)}: ${xAxis.formatDatum(rangeMin)} - ${xAxis.formatDatum(rangeMax)}`;\n        let content = yKey\n            ? `<b>${sanitizeHtml(yName !== null && yName !== void 0 ? yName : yKey)} (${aggregation})</b>: ${yAxis.formatDatum(aggregatedValue)}<br>`\n            : '';\n        content += `<b>Frequency</b>: ${frequency}`;\n        const defaults = {\n            title,\n            backgroundColor: color,\n            content,\n        };\n        if (tooltipRenderer) {\n            return toTooltipHtml$1(tooltipRenderer({\n                datum: {\n                    data: nodeDatum.datum,\n                    aggregatedValue: nodeDatum.aggregatedValue,\n                    domain: nodeDatum.domain,\n                    frequency: nodeDatum.frequency,\n                },\n                xKey,\n                xValue: domain,\n                xName,\n                yKey,\n                yValue: aggregatedValue,\n                yName,\n                color,\n                title,\n                seriesId,\n            }), defaults);\n        }\n        return toTooltipHtml$1(defaults);\n    }\n    getLegendData() {\n        var _a;\n        const { id, data, xKey, yName, visible, fill, stroke, fillOpacity, strokeOpacity } = this;\n        if (!data || data.length === 0) {\n            return [];\n        }\n        const legendData = [\n            {\n                legendType: 'category',\n                id,\n                itemId: xKey,\n                seriesId: id,\n                enabled: visible,\n                label: {\n                    text: (_a = yName !== null && yName !== void 0 ? yName : xKey) !== null && _a !== void 0 ? _a : 'Frequency',\n                },\n                marker: {\n                    fill: fill !== null && fill !== void 0 ? fill : 'rgba(0, 0, 0, 0)',\n                    stroke: stroke !== null && stroke !== void 0 ? stroke : 'rgba(0, 0, 0, 0)',\n                    fillOpacity: fillOpacity,\n                    strokeOpacity: strokeOpacity,\n                },\n            },\n        ];\n        return legendData;\n    }\n    animateEmptyUpdateReady({ datumSelections, labelSelections, }) {\n        const duration = 1000;\n        const labelDuration = 200;\n        let startingY = 0;\n        datumSelections.forEach((datumSelection) => datumSelection.each((_, datum) => {\n            startingY = Math.max(startingY, datum.height + datum.y);\n        }));\n        datumSelections.forEach((datumSelection) => {\n            datumSelection.each((rect, datum) => {\n                var _a;\n                (_a = this.animationManager) === null || _a === void 0 ? void 0 : _a.animateMany(`${this.id}_empty-update-ready_${rect.id}`, [\n                    { from: startingY, to: datum.y },\n                    { from: 0, to: datum.height },\n                ], {\n                    disableInteractions: true,\n                    duration,\n                    ease: easeOut,\n                    repeat: 0,\n                    onUpdate([y, height]) {\n                        rect.y = y;\n                        rect.height = height;\n                        rect.x = datum.x;\n                        rect.width = datum.width;\n                    },\n                });\n            });\n        });\n        labelSelections.forEach((labelSelection) => {\n            labelSelection.each((label) => {\n                var _a;\n                (_a = this.animationManager) === null || _a === void 0 ? void 0 : _a.animate(`${this.id}_empty-update-ready_${label.id}`, {\n                    from: 0,\n                    to: 1,\n                    delay: duration,\n                    duration: labelDuration,\n                    ease: linear,\n                    repeat: 0,\n                    onUpdate: (opacity) => {\n                        label.opacity = opacity;\n                    },\n                });\n            });\n        });\n    }\n    animateReadyUpdate({ datumSelections }) {\n        datumSelections.forEach((datumSelection) => {\n            this.resetSelectionRects(datumSelection);\n        });\n    }\n    animateReadyHighlight(highlightSelection) {\n        this.resetSelectionRects(highlightSelection);\n    }\n    animateReadyResize({ datumSelections }) {\n        var _a;\n        (_a = this.animationManager) === null || _a === void 0 ? void 0 : _a.stop();\n        datumSelections.forEach((datumSelection) => {\n            this.resetSelectionRects(datumSelection);\n        });\n    }\n    resetSelectionRects(selection) {\n        selection.each((rect, datum) => {\n            rect.x = datum.x;\n            rect.y = datum.y;\n            rect.width = datum.width;\n            rect.height = datum.height;\n        });\n    }\n    isLabelEnabled() {\n        return this.label.enabled;\n    }\n}\nHistogramSeries.className = 'HistogramSeries';\nHistogramSeries.type = 'histogram';\n__decorate$1p([\n    Validate(OPT_COLOR_STRING)\n], HistogramSeries.prototype, \"fill\", void 0);\n__decorate$1p([\n    Validate(OPT_COLOR_STRING)\n], HistogramSeries.prototype, \"stroke\", void 0);\n__decorate$1p([\n    Validate(NUMBER(0, 1))\n], HistogramSeries.prototype, \"fillOpacity\", void 0);\n__decorate$1p([\n    Validate(NUMBER(0, 1))\n], HistogramSeries.prototype, \"strokeOpacity\", void 0);\n__decorate$1p([\n    Validate(OPT_LINE_DASH)\n], HistogramSeries.prototype, \"lineDash\", void 0);\n__decorate$1p([\n    Validate(NUMBER(0))\n], HistogramSeries.prototype, \"lineDashOffset\", void 0);\n__decorate$1p([\n    Validate(OPT_STRING)\n], HistogramSeries.prototype, \"xKey\", void 0);\n__decorate$1p([\n    Validate(BOOLEAN)\n], HistogramSeries.prototype, \"areaPlot\", void 0);\n__decorate$1p([\n    Validate(OPT_ARRAY())\n], HistogramSeries.prototype, \"bins\", void 0);\n__decorate$1p([\n    Validate(HISTOGRAM_AGGREGATION)\n], HistogramSeries.prototype, \"aggregation\", void 0);\n__decorate$1p([\n    Validate(OPT_NUMBER(0))\n], HistogramSeries.prototype, \"binCount\", void 0);\n__decorate$1p([\n    Validate(OPT_STRING)\n], HistogramSeries.prototype, \"xName\", void 0);\n__decorate$1p([\n    Validate(OPT_STRING)\n], HistogramSeries.prototype, \"yKey\", void 0);\n__decorate$1p([\n    Validate(OPT_STRING)\n], HistogramSeries.prototype, \"yName\", void 0);\n__decorate$1p([\n    Validate(NUMBER(0))\n], HistogramSeries.prototype, \"strokeWidth\", void 0);\n\nvar __decorate$1o = ( false) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nvar __awaiter$3 = ( false) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nclass LineSeriesLabel extends Label$1 {\n    constructor() {\n        super(...arguments);\n        this.formatter = undefined;\n    }\n}\n__decorate$1o([\n    Validate(OPT_FUNCTION)\n], LineSeriesLabel.prototype, \"formatter\", void 0);\nclass LineSeriesTooltip extends SeriesTooltip {\n    constructor() {\n        super(...arguments);\n        this.renderer = undefined;\n        this.format = undefined;\n    }\n}\n__decorate$1o([\n    Validate(OPT_FUNCTION)\n], LineSeriesTooltip.prototype, \"renderer\", void 0);\n__decorate$1o([\n    Validate(OPT_STRING)\n], LineSeriesTooltip.prototype, \"format\", void 0);\nclass LineSeries extends CartesianSeries {\n    constructor(moduleCtx) {\n        super({\n            moduleCtx,\n            hasMarkers: true,\n            pickModes: [\n                SeriesNodePickMode.NEAREST_BY_MAIN_CATEGORY_AXIS_FIRST,\n                SeriesNodePickMode.NEAREST_NODE,\n                SeriesNodePickMode.EXACT_SHAPE_MATCH,\n            ],\n        });\n        this.marker = new CartesianSeriesMarker();\n        this.label = new LineSeriesLabel();\n        this.title = undefined;\n        this.stroke = '#874349';\n        this.lineDash = [0];\n        this.lineDashOffset = 0;\n        this.strokeWidth = 2;\n        this.strokeOpacity = 1;\n        this.tooltip = new LineSeriesTooltip();\n        this.xKey = undefined;\n        this.xName = undefined;\n        this.yKey = undefined;\n        this.yName = undefined;\n        const { marker, label } = this;\n        marker.fill = '#c16068';\n        marker.stroke = '#874349';\n        label.enabled = false;\n    }\n    processData() {\n        return __awaiter$3(this, void 0, void 0, function* () {\n            const { xAxis, yAxis, xKey = '', yKey = '' } = this;\n            const data = xKey && yKey && this.data ? this.data : [];\n            const isContinuousX = (xAxis === null || xAxis === void 0 ? void 0 : xAxis.scale) instanceof ContinuousScale;\n            const isContinuousY = (yAxis === null || yAxis === void 0 ? void 0 : yAxis.scale) instanceof ContinuousScale;\n            this.dataModel = new DataModel({\n                props: [\n                    valueProperty(xKey, isContinuousX, { id: 'xValue' }),\n                    valueProperty(yKey, isContinuousY, { id: 'yValue', invalidValue: undefined }),\n                ],\n                dataVisible: this.visible,\n            });\n            this.processedData = this.dataModel.processData(data !== null && data !== void 0 ? data : []);\n        });\n    }\n    getDomain(direction) {\n        const { xAxis, yAxis, dataModel, processedData } = this;\n        if (!processedData || !dataModel)\n            return [];\n        const xDef = dataModel.resolveProcessedDataDefById(`xValue`);\n        if (direction === ChartAxisDirection.X) {\n            const domain = dataModel.getDomain(`xValue`, processedData);\n            if ((xDef === null || xDef === void 0 ? void 0 : xDef.valueType) === 'category') {\n                return domain;\n            }\n            return this.fixNumericExtent(extent$4(domain), xAxis);\n        }\n        else {\n            const domain = dataModel.getDomain(`yValue`, processedData);\n            return this.fixNumericExtent(domain, yAxis);\n        }\n    }\n    createNodeData() {\n        var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l;\n        return __awaiter$3(this, void 0, void 0, function* () {\n            const { processedData, dataModel, xAxis, yAxis, marker: { enabled: markerEnabled, size: markerSize, strokeWidth }, ctx: { callbackCache }, } = this;\n            if (!processedData || !dataModel || !xAxis || !yAxis) {\n                return [];\n            }\n            const { label, yKey = '', xKey = '', id: seriesId } = this;\n            const xScale = xAxis.scale;\n            const yScale = yAxis.scale;\n            const xOffset = ((_a = xScale.bandwidth) !== null && _a !== void 0 ? _a : 0) / 2;\n            const yOffset = ((_b = yScale.bandwidth) !== null && _b !== void 0 ? _b : 0) / 2;\n            const nodeData = new Array(processedData.data.length);\n            const size = markerEnabled ? markerSize : 0;\n            const xIdx = (_e = (_d = (_c = this.dataModel) === null || _c === void 0 ? void 0 : _c.resolveProcessedDataIndexById(`xValue`)) === null || _d === void 0 ? void 0 : _d.index) !== null && _e !== void 0 ? _e : -1;\n            const yIdx = (_h = (_g = (_f = this.dataModel) === null || _f === void 0 ? void 0 : _f.resolveProcessedDataIndexById(`yValue`)) === null || _g === void 0 ? void 0 : _g.index) !== null && _h !== void 0 ? _h : -1;\n            let moveTo = true;\n            let prevXInRange = undefined;\n            let nextPoint = undefined;\n            let actualLength = 0;\n            for (let i = 0; i < processedData.data.length; i++) {\n                const { datum, values } = nextPoint !== null && nextPoint !== void 0 ? nextPoint : processedData.data[i];\n                const xDatum = values[xIdx];\n                const yDatum = values[yIdx];\n                if (yDatum === undefined) {\n                    prevXInRange = undefined;\n                    moveTo = true;\n                }\n                else {\n                    const x = xScale.convert(xDatum) + xOffset;\n                    if (isNaN(x)) {\n                        prevXInRange = undefined;\n                        moveTo = true;\n                        continue;\n                    }\n                    const tolerance = ((_j = xScale.bandwidth) !== null && _j !== void 0 ? _j : markerSize * 0.5 + (strokeWidth !== null && strokeWidth !== void 0 ? strokeWidth : 0)) + 1;\n                    nextPoint =\n                        ((_k = processedData.data[i + 1]) === null || _k === void 0 ? void 0 : _k.values[yIdx]) === undefined ? undefined : processedData.data[i + 1];\n                    const nextXDatum = (_l = processedData.data[i + 1]) === null || _l === void 0 ? void 0 : _l.values[xIdx];\n                    const xInRange = xAxis.inRangeEx(x, 0, tolerance);\n                    const nextXInRange = nextPoint && xAxis.inRangeEx(xScale.convert(nextXDatum) + xOffset, 0, tolerance);\n                    if (xInRange === -1 && nextXInRange === -1) {\n                        moveTo = true;\n                        continue;\n                    }\n                    if (xInRange === 1 && prevXInRange === 1) {\n                        moveTo = true;\n                        continue;\n                    }\n                    prevXInRange = xInRange;\n                    const y = yScale.convert(yDatum) + yOffset;\n                    let labelText;\n                    if (label.formatter) {\n                        labelText = callbackCache.call(label.formatter, { value: yDatum, seriesId });\n                    }\n                    if (labelText !== undefined) ;\n                    else if (typeof yDatum === 'number' && isFinite(yDatum)) {\n                        labelText = yDatum.toFixed(2);\n                    }\n                    else if (yDatum) {\n                        labelText = String(yDatum);\n                    }\n                    nodeData[actualLength++] = {\n                        series: this,\n                        datum,\n                        yKey,\n                        xKey,\n                        point: { x, y, moveTo, size },\n                        nodeMidPoint: { x, y },\n                        label: labelText\n                            ? {\n                                text: labelText,\n                                fontStyle: label.fontStyle,\n                                fontWeight: label.fontWeight,\n                                fontSize: label.fontSize,\n                                fontFamily: label.fontFamily,\n                                textAlign: 'center',\n                                textBaseline: 'bottom',\n                                fill: label.color,\n                            }\n                            : undefined,\n                    };\n                    moveTo = false;\n                }\n            }\n            nodeData.length = actualLength;\n            return [{ itemId: yKey, nodeData, labelData: nodeData }];\n        });\n    }\n    isPathOrSelectionDirty() {\n        return this.marker.isDirty();\n    }\n    markerFactory() {\n        const { shape } = this.marker;\n        const MarkerShape = getMarker$1(shape);\n        return new MarkerShape();\n    }\n    updateMarkerSelection(opts) {\n        return __awaiter$3(this, void 0, void 0, function* () {\n            let { nodeData } = opts;\n            const { markerSelection } = opts;\n            const { shape, enabled } = this.marker;\n            nodeData = shape && enabled ? nodeData : [];\n            if (this.marker.isDirty()) {\n                markerSelection.clear();\n            }\n            return markerSelection.update(nodeData);\n        });\n    }\n    updateMarkerNodes(opts) {\n        var _a;\n        return __awaiter$3(this, void 0, void 0, function* () {\n            const { markerSelection, isHighlight: isDatumHighlighted } = opts;\n            const { marker, marker: { fillOpacity: markerFillOpacity }, xKey = '', yKey = '', stroke: lineStroke, strokeOpacity, highlightStyle: { item: { fill: highlightedFill, fillOpacity: highlightFillOpacity = markerFillOpacity, stroke: highlightedStroke, strokeWidth: highlightedDatumStrokeWidth, }, }, id: seriesId, ctx: { callbackCache }, } = this;\n            const { size, formatter } = marker;\n            const markerStrokeWidth = (_a = marker.strokeWidth) !== null && _a !== void 0 ? _a : this.strokeWidth;\n            const customMarker = typeof marker.shape === 'function';\n            markerSelection.each((node, datum) => {\n                var _a, _b, _c, _d, _e, _f, _g;\n                const fill = isDatumHighlighted && highlightedFill !== undefined ? highlightedFill : marker.fill;\n                const fillOpacity = isDatumHighlighted ? highlightFillOpacity : markerFillOpacity;\n                const stroke = isDatumHighlighted && highlightedStroke !== undefined ? highlightedStroke : (_a = marker.stroke) !== null && _a !== void 0 ? _a : lineStroke;\n                const strokeWidth = isDatumHighlighted && highlightedDatumStrokeWidth !== undefined\n                    ? highlightedDatumStrokeWidth\n                    : markerStrokeWidth;\n                let format = undefined;\n                if (formatter) {\n                    format = callbackCache.call(formatter, {\n                        datum: datum.datum,\n                        xKey,\n                        yKey,\n                        fill,\n                        stroke,\n                        strokeWidth,\n                        size,\n                        highlighted: isDatumHighlighted,\n                        seriesId,\n                    });\n                }\n                node.fill = (_b = format === null || format === void 0 ? void 0 : format.fill) !== null && _b !== void 0 ? _b : fill;\n                node.stroke = (_c = format === null || format === void 0 ? void 0 : format.stroke) !== null && _c !== void 0 ? _c : stroke;\n                node.strokeWidth = (_d = format === null || format === void 0 ? void 0 : format.strokeWidth) !== null && _d !== void 0 ? _d : strokeWidth;\n                node.fillOpacity = fillOpacity !== null && fillOpacity !== void 0 ? fillOpacity : 1;\n                node.strokeOpacity = (_f = (_e = marker.strokeOpacity) !== null && _e !== void 0 ? _e : strokeOpacity) !== null && _f !== void 0 ? _f : 1;\n                node.size = (_g = format === null || format === void 0 ? void 0 : format.size) !== null && _g !== void 0 ? _g : size;\n                node.translationX = datum.point.x;\n                node.translationY = datum.point.y;\n                node.visible = node.size > 0 && !isNaN(datum.point.x) && !isNaN(datum.point.y);\n                if (!customMarker || node.dirtyPath) {\n                    return;\n                }\n                // Only for cutom marker shapes\n                node.path.clear({ trackChanges: true });\n                node.updatePath();\n                node.checkPathDirty();\n            });\n            if (!isDatumHighlighted) {\n                this.marker.markClean();\n            }\n        });\n    }\n    updateLabelSelection(opts) {\n        return __awaiter$3(this, void 0, void 0, function* () {\n            let { labelData } = opts;\n            const { labelSelection } = opts;\n            const { shape, enabled } = this.marker;\n            labelData = shape && enabled ? labelData : [];\n            return labelSelection.update(labelData);\n        });\n    }\n    updateLabelNodes(opts) {\n        return __awaiter$3(this, void 0, void 0, function* () {\n            const { labelSelection } = opts;\n            const { enabled: labelEnabled, fontStyle, fontWeight, fontSize, fontFamily, color } = this.label;\n            labelSelection.each((text, datum) => {\n                const { point, label } = datum;\n                if (datum && label && labelEnabled) {\n                    text.fontStyle = fontStyle;\n                    text.fontWeight = fontWeight;\n                    text.fontSize = fontSize;\n                    text.fontFamily = fontFamily;\n                    text.textAlign = label.textAlign;\n                    text.textBaseline = label.textBaseline;\n                    text.text = label.text;\n                    text.x = point.x;\n                    text.y = point.y - 10;\n                    text.fill = color;\n                    text.visible = true;\n                }\n                else {\n                    text.visible = false;\n                }\n            });\n        });\n    }\n    getNodeClickEvent(event, datum) {\n        var _a, _b;\n        return new CartesianSeriesNodeClickEvent((_a = this.xKey) !== null && _a !== void 0 ? _a : '', (_b = this.yKey) !== null && _b !== void 0 ? _b : '', event, datum, this);\n    }\n    getNodeDoubleClickEvent(event, datum) {\n        var _a, _b;\n        return new CartesianSeriesNodeDoubleClickEvent((_a = this.xKey) !== null && _a !== void 0 ? _a : '', (_b = this.yKey) !== null && _b !== void 0 ? _b : '', event, datum, this);\n    }\n    getTooltipHtml(nodeDatum) {\n        var _a, _b;\n        const { xKey, yKey, xAxis, yAxis } = this;\n        if (!xKey || !yKey || !xAxis || !yAxis) {\n            return '';\n        }\n        const { xName, yName, tooltip, marker, id: seriesId } = this;\n        const { renderer: tooltipRenderer, format: tooltipFormat } = tooltip;\n        const datum = nodeDatum.datum;\n        const xValue = datum[xKey];\n        const yValue = datum[yKey];\n        const xString = xAxis.formatDatum(xValue);\n        const yString = yAxis.formatDatum(yValue);\n        const title = sanitizeHtml((_a = this.title) !== null && _a !== void 0 ? _a : yName);\n        const content = sanitizeHtml(xString + ': ' + yString);\n        const { formatter: markerFormatter, fill, stroke, strokeWidth: markerStrokeWidth, size } = marker;\n        const strokeWidth = markerStrokeWidth !== null && markerStrokeWidth !== void 0 ? markerStrokeWidth : this.strokeWidth;\n        let format = undefined;\n        if (markerFormatter) {\n            format = markerFormatter({\n                datum,\n                xKey,\n                yKey,\n                fill,\n                stroke,\n                strokeWidth,\n                size,\n                highlighted: false,\n                seriesId,\n            });\n        }\n        const color = (_b = format === null || format === void 0 ? void 0 : format.fill) !== null && _b !== void 0 ? _b : fill;\n        const defaults = {\n            title,\n            backgroundColor: color,\n            content,\n        };\n        if (tooltipFormat || tooltipRenderer) {\n            const params = {\n                datum,\n                xKey,\n                xValue,\n                xName,\n                yKey,\n                yValue,\n                yName,\n                title,\n                color,\n                seriesId,\n            };\n            if (tooltipFormat) {\n                return toTooltipHtml$1({\n                    content: interpolate(tooltipFormat, params),\n                }, defaults);\n            }\n            if (tooltipRenderer) {\n                return toTooltipHtml$1(tooltipRenderer(params), defaults);\n            }\n        }\n        return toTooltipHtml$1(defaults);\n    }\n    getLegendData() {\n        var _a, _b, _c, _d, _e, _f, _g;\n        const { id, data, xKey, yKey, yName, visible, title, marker, stroke, strokeOpacity } = this;\n        if (!((data === null || data === void 0 ? void 0 : data.length) && xKey && yKey)) {\n            return [];\n        }\n        const legendData = [\n            {\n                legendType: 'category',\n                id: id,\n                itemId: yKey,\n                seriesId: id,\n                enabled: visible,\n                label: {\n                    text: (_a = title !== null && title !== void 0 ? title : yName) !== null && _a !== void 0 ? _a : yKey,\n                },\n                marker: {\n                    shape: marker.shape,\n                    fill: (_b = marker.fill) !== null && _b !== void 0 ? _b : 'rgba(0, 0, 0, 0)',\n                    stroke: (_d = (_c = marker.stroke) !== null && _c !== void 0 ? _c : stroke) !== null && _d !== void 0 ? _d : 'rgba(0, 0, 0, 0)',\n                    fillOpacity: (_e = marker.fillOpacity) !== null && _e !== void 0 ? _e : 1,\n                    strokeOpacity: (_g = (_f = marker.strokeOpacity) !== null && _f !== void 0 ? _f : strokeOpacity) !== null && _g !== void 0 ? _g : 1,\n                },\n            },\n        ];\n        return legendData;\n    }\n    animateEmptyUpdateReady({ markerSelections, labelSelections, contextData, paths, seriesRect, }) {\n        contextData.forEach(({ nodeData }, contextDataIndex) => {\n            var _a, _b;\n            const [lineNode] = paths[contextDataIndex];\n            const { path: linePath } = lineNode;\n            lineNode.fill = undefined;\n            lineNode.lineJoin = 'round';\n            lineNode.pointerEvents = PointerEvents.None;\n            lineNode.stroke = this.stroke;\n            lineNode.strokeWidth = this.getStrokeWidth(this.strokeWidth);\n            lineNode.strokeOpacity = this.strokeOpacity;\n            lineNode.lineDash = this.lineDash;\n            lineNode.lineDashOffset = this.lineDashOffset;\n            const duration = 1000;\n            const markerDuration = 200;\n            const animationOptions = {\n                from: 0,\n                to: (_a = seriesRect === null || seriesRect === void 0 ? void 0 : seriesRect.width) !== null && _a !== void 0 ? _a : 0,\n                disableInteractions: true,\n                ease: linear,\n                repeat: 0,\n            };\n            (_b = this.animationManager) === null || _b === void 0 ? void 0 : _b.animate(`${this.id}_empty-update-ready`, Object.assign(Object.assign({}, animationOptions), { duration,\n                onUpdate(xValue) {\n                    linePath.clear({ trackChanges: true });\n                    nodeData.forEach((datum, index) => {\n                        if (datum.point.x <= xValue) {\n                            // Draw/move the full segment if past the end of this segment\n                            if (datum.point.moveTo) {\n                                linePath.moveTo(datum.point.x, datum.point.y);\n                            }\n                            else {\n                                linePath.lineTo(datum.point.x, datum.point.y);\n                            }\n                        }\n                        else if (index > 0 && nodeData[index - 1].point.x < xValue) {\n                            // Draw/move partial line if in between the start and end of this segment\n                            const start = nodeData[index - 1].point;\n                            const end = datum.point;\n                            const x = xValue;\n                            const y = start.y + ((x - start.x) * (end.y - start.y)) / (end.x - start.x);\n                            if (datum.point.moveTo) {\n                                linePath.moveTo(x, y);\n                            }\n                            else {\n                                linePath.lineTo(x, y);\n                            }\n                        }\n                    });\n                    lineNode.checkPathDirty();\n                } }));\n            markerSelections[contextDataIndex].each((marker, datum) => {\n                var _a, _b, _c, _d;\n                const delay = (seriesRect === null || seriesRect === void 0 ? void 0 : seriesRect.width) ? (datum.point.x / seriesRect.width) * duration : 0;\n                const format = this.animateFormatter(datum);\n                const size = (_b = (_a = datum.point) === null || _a === void 0 ? void 0 : _a.size) !== null && _b !== void 0 ? _b : 0;\n                (_c = this.animationManager) === null || _c === void 0 ? void 0 : _c.animate(`${this.id}_empty-update-ready_${marker.id}`, Object.assign(Object.assign({}, animationOptions), { to: (_d = format === null || format === void 0 ? void 0 : format.size) !== null && _d !== void 0 ? _d : size, delay, duration: markerDuration, onUpdate(size) {\n                        marker.size = size;\n                    } }));\n            });\n            labelSelections[contextDataIndex].each((label, datum) => {\n                var _a;\n                const delay = (seriesRect === null || seriesRect === void 0 ? void 0 : seriesRect.width) ? (datum.point.x / seriesRect.width) * duration : 0;\n                (_a = this.animationManager) === null || _a === void 0 ? void 0 : _a.animate(`${this.id}_empty-update-ready_${label.id}`, {\n                    from: 0,\n                    to: 1,\n                    delay,\n                    duration: markerDuration,\n                    ease: linear,\n                    repeat: 0,\n                    onUpdate: (opacity) => {\n                        label.opacity = opacity;\n                    },\n                });\n            });\n        });\n    }\n    animateReadyUpdate(data) {\n        this.resetMarkersAndPaths(data);\n    }\n    animateReadyResize(data) {\n        var _a;\n        (_a = this.animationManager) === null || _a === void 0 ? void 0 : _a.stop();\n        this.resetMarkersAndPaths(data);\n    }\n    resetMarkersAndPaths({ markerSelections, contextData, paths, }) {\n        contextData.forEach(({ nodeData }, contextDataIndex) => {\n            const [lineNode] = paths[contextDataIndex];\n            const { path: linePath } = lineNode;\n            lineNode.stroke = this.stroke;\n            lineNode.strokeWidth = this.getStrokeWidth(this.strokeWidth);\n            lineNode.strokeOpacity = this.strokeOpacity;\n            lineNode.lineDash = this.lineDash;\n            lineNode.lineDashOffset = this.lineDashOffset;\n            linePath.clear({ trackChanges: true });\n            nodeData.forEach((datum) => {\n                if (datum.point.moveTo) {\n                    linePath.moveTo(datum.point.x, datum.point.y);\n                }\n                else {\n                    linePath.lineTo(datum.point.x, datum.point.y);\n                }\n            });\n            lineNode.checkPathDirty();\n            markerSelections[contextDataIndex].each((marker, datum) => {\n                var _a, _b, _c;\n                const format = this.animateFormatter(datum);\n                const size = (_b = (_a = datum.point) === null || _a === void 0 ? void 0 : _a.size) !== null && _b !== void 0 ? _b : 0;\n                marker.size = (_c = format === null || format === void 0 ? void 0 : format.size) !== null && _c !== void 0 ? _c : size;\n            });\n        });\n    }\n    animateFormatter(datum) {\n        var _a, _b;\n        const { marker, xKey = '', yKey = '', stroke: lineStroke, id: seriesId, ctx: { callbackCache }, } = this;\n        const { size, formatter } = marker;\n        const fill = marker.fill;\n        const stroke = (_a = marker.stroke) !== null && _a !== void 0 ? _a : lineStroke;\n        const strokeWidth = (_b = marker.strokeWidth) !== null && _b !== void 0 ? _b : this.strokeWidth;\n        let format = undefined;\n        if (formatter) {\n            format = callbackCache.call(formatter, {\n                datum: datum.datum,\n                xKey,\n                yKey,\n                fill,\n                stroke,\n                strokeWidth,\n                size,\n                highlighted: false,\n                seriesId,\n            });\n        }\n        return format;\n    }\n    isLabelEnabled() {\n        return this.label.enabled;\n    }\n}\nLineSeries.className = 'LineSeries';\nLineSeries.type = 'line';\n__decorate$1o([\n    Validate(OPT_STRING)\n], LineSeries.prototype, \"title\", void 0);\n__decorate$1o([\n    Validate(OPT_COLOR_STRING)\n], LineSeries.prototype, \"stroke\", void 0);\n__decorate$1o([\n    Validate(OPT_LINE_DASH)\n], LineSeries.prototype, \"lineDash\", void 0);\n__decorate$1o([\n    Validate(NUMBER(0))\n], LineSeries.prototype, \"lineDashOffset\", void 0);\n__decorate$1o([\n    Validate(NUMBER(0))\n], LineSeries.prototype, \"strokeWidth\", void 0);\n__decorate$1o([\n    Validate(NUMBER(0, 1))\n], LineSeries.prototype, \"strokeOpacity\", void 0);\n__decorate$1o([\n    Validate(OPT_STRING)\n], LineSeries.prototype, \"xKey\", void 0);\n__decorate$1o([\n    Validate(OPT_STRING)\n], LineSeries.prototype, \"xName\", void 0);\n__decorate$1o([\n    Validate(OPT_STRING)\n], LineSeries.prototype, \"yKey\", void 0);\n__decorate$1o([\n    Validate(OPT_STRING)\n], LineSeries.prototype, \"yName\", void 0);\n\nclass ColorScale {\n    constructor() {\n        this.domain = [0, 1];\n        this.range = ['red', 'blue'];\n        this.parsedRange = this.range.map((v) => Color.fromString(v));\n    }\n    update() {\n        const { domain, range } = this;\n        if (domain.length < 2) {\n            Logger.warnOnce('`colorDomain` should have at least 2 values.');\n            if (domain.length === 0) {\n                domain.push(0, 1);\n            }\n            else if (domain.length === 1) {\n                domain.push(domain[0] + 1);\n            }\n        }\n        for (let i = 1; i < domain.length; i++) {\n            const a = domain[i - 1];\n            const b = domain[i];\n            if (a >= b) {\n                Logger.warnOnce('`colorDomain` values should be supplied in ascending order.');\n                domain.sort((a, b) => a - b);\n                break;\n            }\n        }\n        const isSmallRange = range.length < domain.length;\n        if (isSmallRange || (domain.length > 2 && range.length > domain.length)) {\n            Logger.warnOnce('Number of elements in `colorRange` needs to match the number of elements in `colorDomain`.');\n            if (isSmallRange) {\n                for (let i = range.length; i < domain.length; i++) {\n                    range.push('black');\n                }\n            }\n            else {\n                range.splice(domain.length);\n            }\n        }\n        this.parsedRange = this.range.map((v) => Color.fromString(v));\n    }\n    convert(x) {\n        const { domain, range, parsedRange } = this;\n        const d0 = domain[0];\n        const d1 = domain[domain.length - 1];\n        const r0 = range[0];\n        const r1 = range[range.length - 1];\n        if (x <= d0) {\n            return r0;\n        }\n        if (x >= d1) {\n            return r1;\n        }\n        let index;\n        let q;\n        if (domain.length === 2) {\n            const t = (x - d0) / (d1 - d0);\n            const step = 1 / (range.length - 1);\n            index = range.length <= 2 ? 0 : Math.min(Math.floor(t * (range.length - 1)), range.length - 2);\n            q = (t - index * step) / step;\n        }\n        else {\n            for (index = 0; index < domain.length - 2; index++) {\n                if (x < domain[index + 1]) {\n                    break;\n                }\n            }\n            const a = domain[index];\n            const b = domain[index + 1];\n            q = (x - a) / (b - a);\n        }\n        const c0 = parsedRange[index];\n        const c1 = parsedRange[index + 1];\n        return interpolateColor(c0, c1)(q);\n    }\n}\n\nvar __decorate$1n = ( false) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nvar __awaiter$2 = ( false) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nclass ScatterSeriesLabel extends Label$1 {\n    constructor() {\n        super(...arguments);\n        this.formatter = undefined;\n    }\n}\n__decorate$1n([\n    Validate(OPT_FUNCTION)\n], ScatterSeriesLabel.prototype, \"formatter\", void 0);\nclass ScatterSeriesNodeBaseClickEvent extends CartesianSeriesNodeBaseClickEvent {\n    constructor(sizeKey, xKey, yKey, nativeEvent, datum, series) {\n        super(xKey, yKey, nativeEvent, datum, series);\n        this.sizeKey = sizeKey;\n    }\n}\nclass ScatterSeriesNodeClickEvent extends ScatterSeriesNodeBaseClickEvent {\n    constructor() {\n        super(...arguments);\n        this.type = 'nodeClick';\n    }\n}\nclass ScatterSeriesNodeDoubleClickEvent extends ScatterSeriesNodeBaseClickEvent {\n    constructor() {\n        super(...arguments);\n        this.type = 'nodeDoubleClick';\n    }\n}\nclass ScatterSeriesTooltip extends SeriesTooltip {\n    constructor() {\n        super(...arguments);\n        this.renderer = undefined;\n    }\n}\n__decorate$1n([\n    Validate(OPT_FUNCTION)\n], ScatterSeriesTooltip.prototype, \"renderer\", void 0);\nclass ScatterSeries extends CartesianSeries {\n    constructor(moduleCtx) {\n        super({\n            moduleCtx,\n            pickModes: [\n                SeriesNodePickMode.NEAREST_BY_MAIN_CATEGORY_AXIS_FIRST,\n                SeriesNodePickMode.NEAREST_NODE,\n                SeriesNodePickMode.EXACT_SHAPE_MATCH,\n            ],\n            pathsPerSeries: 0,\n            hasMarkers: true,\n        });\n        this.sizeScale = new LinearScale$1();\n        this.marker = new CartesianSeriesMarker();\n        this.label = new ScatterSeriesLabel();\n        this.title = undefined;\n        this.labelKey = undefined;\n        this.xName = undefined;\n        this.yName = undefined;\n        this.sizeName = 'Size';\n        this.labelName = 'Label';\n        this.xKey = undefined;\n        this.yKey = undefined;\n        this.sizeKey = undefined;\n        this.colorKey = undefined;\n        this.colorName = 'Color';\n        this.colorDomain = undefined;\n        this.colorRange = ['#ffff00', '#00ff00', '#0000ff'];\n        this.colorScale = new ColorScale();\n        this.tooltip = new ScatterSeriesTooltip();\n        const { label } = this;\n        label.enabled = false;\n    }\n    processData() {\n        var _a, _b, _c, _d, _e, _f;\n        return __awaiter$2(this, void 0, void 0, function* () {\n            const { xKey = '', yKey = '', sizeKey, xAxis, yAxis, marker, data } = this;\n            const isContinuousX = (xAxis === null || xAxis === void 0 ? void 0 : xAxis.scale) instanceof ContinuousScale;\n            const isContinuousY = (yAxis === null || yAxis === void 0 ? void 0 : yAxis.scale) instanceof ContinuousScale;\n            const { colorScale, colorDomain, colorRange, colorKey } = this;\n            this.dataModel = new DataModel({\n                props: [\n                    valueProperty(xKey, isContinuousX, { id: `xValue` }),\n                    valueProperty(yKey, isContinuousY, { id: `yValue` }),\n                    ...(sizeKey ? [valueProperty(sizeKey, true, { id: `sizeValue` })] : []),\n                    ...(colorKey ? [valueProperty(colorKey, true, { id: `colorValue` })] : []),\n                ],\n                dataVisible: this.visible,\n            });\n            this.processedData = this.dataModel.processData(data !== null && data !== void 0 ? data : []);\n            if (sizeKey) {\n                const sizeKeyIdx = (_b = (_a = this.dataModel.resolveProcessedDataIndexById(`sizeValue`)) === null || _a === void 0 ? void 0 : _a.index) !== null && _b !== void 0 ? _b : -1;\n                const processedSize = (_d = (_c = this.processedData) === null || _c === void 0 ? void 0 : _c.domain.values[sizeKeyIdx]) !== null && _d !== void 0 ? _d : [];\n                this.sizeScale.domain = marker.domain ? marker.domain : processedSize;\n            }\n            if (colorKey) {\n                const colorKeyIdx = (_f = (_e = this.dataModel.resolveProcessedDataIndexById(`colorValue`)) === null || _e === void 0 ? void 0 : _e.index) !== null && _f !== void 0 ? _f : -1;\n                colorScale.domain = colorDomain !== null && colorDomain !== void 0 ? colorDomain : this.processedData.domain.values[colorKeyIdx];\n                colorScale.range = colorRange;\n                colorScale.update();\n            }\n        });\n    }\n    getDomain(direction) {\n        const { dataModel, processedData } = this;\n        if (!processedData || !dataModel)\n            return [];\n        const id = direction === ChartAxisDirection.X ? `xValue` : `yValue`;\n        const dataDef = dataModel.resolveProcessedDataDefById(id);\n        const domain = dataModel.getDomain(id, processedData);\n        if ((dataDef === null || dataDef === void 0 ? void 0 : dataDef.valueType) === 'category') {\n            return domain;\n        }\n        const axis = direction === ChartAxisDirection.X ? this.xAxis : this.yAxis;\n        return this.fixNumericExtent(extent$4(domain), axis);\n    }\n    getNodeClickEvent(event, datum) {\n        var _a, _b;\n        return new ScatterSeriesNodeClickEvent(this.sizeKey, (_a = this.xKey) !== null && _a !== void 0 ? _a : '', (_b = this.yKey) !== null && _b !== void 0 ? _b : '', event, datum, this);\n    }\n    getNodeDoubleClickEvent(event, datum) {\n        var _a, _b;\n        return new ScatterSeriesNodeDoubleClickEvent(this.sizeKey, (_a = this.xKey) !== null && _a !== void 0 ? _a : '', (_b = this.yKey) !== null && _b !== void 0 ? _b : '', event, datum, this);\n    }\n    createNodeData() {\n        var _a, _b, _c, _d, _e, _f, _g, _h, _j;\n        return __awaiter$2(this, void 0, void 0, function* () {\n            const { visible, xAxis, yAxis, yKey = '', xKey = '', label, labelKey, ctx: { callbackCache }, } = this;\n            const xDataIdx = (_a = this.dataModel) === null || _a === void 0 ? void 0 : _a.resolveProcessedDataIndexById(`xValue`);\n            const yDataIdx = (_b = this.dataModel) === null || _b === void 0 ? void 0 : _b.resolveProcessedDataIndexById(`yValue`);\n            if (!(xDataIdx && yDataIdx && visible && xAxis && yAxis)) {\n                return [];\n            }\n            const { colorScale, sizeKey, colorKey, id: seriesId } = this;\n            const xScale = xAxis.scale;\n            const yScale = yAxis.scale;\n            const xOffset = ((_c = xScale.bandwidth) !== null && _c !== void 0 ? _c : 0) / 2;\n            const yOffset = ((_d = yScale.bandwidth) !== null && _d !== void 0 ? _d : 0) / 2;\n            const { sizeScale, marker } = this;\n            const nodeData = new Array((_f = (_e = this.processedData) === null || _e === void 0 ? void 0 : _e.data.length) !== null && _f !== void 0 ? _f : 0);\n            sizeScale.range = [marker.size, marker.maxSize];\n            const font = label.getFont();\n            let actualLength = 0;\n            for (const { values, datum } of (_h = (_g = this.processedData) === null || _g === void 0 ? void 0 : _g.data) !== null && _h !== void 0 ? _h : []) {\n                const xDatum = values[xDataIdx.index];\n                const yDatum = values[yDataIdx.index];\n                const x = xScale.convert(xDatum) + xOffset;\n                const y = yScale.convert(yDatum) + yOffset;\n                if (!this.checkRangeXY(x, y, xAxis, yAxis)) {\n                    continue;\n                }\n                let text;\n                if (label.formatter) {\n                    text = callbackCache.call(label.formatter, { value: yDatum, seriesId, datum });\n                }\n                if (text === undefined) {\n                    text = labelKey ? String(datum[labelKey]) : '';\n                }\n                const size = HdpiCanvas.getTextSize(text, font);\n                const markerSize = sizeKey ? sizeScale.convert(values[2]) : marker.size;\n                const colorIdx = sizeKey ? 3 : 2;\n                const fill = colorKey ? colorScale.convert(values[colorIdx]) : undefined;\n                nodeData[actualLength++] = {\n                    series: this,\n                    itemId: yKey,\n                    yKey,\n                    xKey,\n                    datum,\n                    point: { x, y, size: markerSize },\n                    nodeMidPoint: { x, y },\n                    fill,\n                    label: Object.assign({ text }, size),\n                };\n            }\n            nodeData.length = actualLength;\n            return [{ itemId: (_j = this.yKey) !== null && _j !== void 0 ? _j : this.id, nodeData, labelData: nodeData }];\n        });\n    }\n    isPathOrSelectionDirty() {\n        return this.marker.isDirty();\n    }\n    getLabelData() {\n        var _a;\n        return (_a = this.contextNodeData) === null || _a === void 0 ? void 0 : _a.reduce((r, n) => r.concat(n.labelData), []);\n    }\n    markerFactory() {\n        const { shape } = this.marker;\n        const MarkerShape = getMarker$1(shape);\n        return new MarkerShape();\n    }\n    updateMarkerSelection(opts) {\n        return __awaiter$2(this, void 0, void 0, function* () {\n            const { nodeData, markerSelection } = opts;\n            const { marker: { enabled }, } = this;\n            if (this.marker.isDirty()) {\n                markerSelection.clear();\n            }\n            const data = enabled ? nodeData : [];\n            return markerSelection.update(data);\n        });\n    }\n    updateMarkerNodes(opts) {\n        return __awaiter$2(this, void 0, void 0, function* () {\n            const { markerSelection, isHighlight: isDatumHighlighted } = opts;\n            const { marker, xKey = '', yKey = '', sizeScale, marker: { fillOpacity: markerFillOpacity, strokeOpacity: markerStrokeOpacity, strokeWidth: markerStrokeWidth, }, highlightStyle: { item: { fill: highlightedFill, fillOpacity: highlightFillOpacity = markerFillOpacity, stroke: highlightedStroke, strokeWidth: highlightedDatumStrokeWidth, }, }, id: seriesId, ctx: { callbackCache }, } = this;\n            const { formatter } = marker;\n            sizeScale.range = [marker.size, marker.maxSize];\n            const customMarker = typeof marker.shape === 'function';\n            markerSelection.each((node, datum) => {\n                var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k;\n                const fill = isDatumHighlighted && highlightedFill !== undefined ? highlightedFill : (_a = datum.fill) !== null && _a !== void 0 ? _a : marker.fill;\n                const fillOpacity = isDatumHighlighted ? highlightFillOpacity : markerFillOpacity;\n                const stroke = isDatumHighlighted && highlightedStroke !== undefined ? highlightedStroke : marker.stroke;\n                const strokeOpacity = markerStrokeOpacity;\n                const strokeWidth = isDatumHighlighted && highlightedDatumStrokeWidth !== undefined\n                    ? highlightedDatumStrokeWidth\n                    : markerStrokeWidth !== null && markerStrokeWidth !== void 0 ? markerStrokeWidth : 1;\n                const size = (_c = (_b = datum.point) === null || _b === void 0 ? void 0 : _b.size) !== null && _c !== void 0 ? _c : 0;\n                let format = undefined;\n                if (formatter) {\n                    format = callbackCache.call(formatter, {\n                        datum: datum.datum,\n                        xKey,\n                        yKey,\n                        fill,\n                        stroke,\n                        strokeWidth,\n                        size,\n                        highlighted: isDatumHighlighted,\n                        seriesId,\n                    });\n                }\n                node.fill = (_d = format === null || format === void 0 ? void 0 : format.fill) !== null && _d !== void 0 ? _d : fill;\n                node.stroke = (_e = format === null || format === void 0 ? void 0 : format.stroke) !== null && _e !== void 0 ? _e : stroke;\n                node.strokeWidth = (_f = format === null || format === void 0 ? void 0 : format.strokeWidth) !== null && _f !== void 0 ? _f : strokeWidth;\n                node.fillOpacity = fillOpacity !== null && fillOpacity !== void 0 ? fillOpacity : 1;\n                node.strokeOpacity = strokeOpacity !== null && strokeOpacity !== void 0 ? strokeOpacity : 1;\n                node.translationX = (_h = (_g = datum.point) === null || _g === void 0 ? void 0 : _g.x) !== null && _h !== void 0 ? _h : 0;\n                node.translationY = (_k = (_j = datum.point) === null || _j === void 0 ? void 0 : _j.y) !== null && _k !== void 0 ? _k : 0;\n                node.visible = node.size > 0;\n                if (!customMarker || node.dirtyPath) {\n                    return;\n                }\n                // Only for custom marker shapes.\n                node.path.clear({ trackChanges: true });\n                node.updatePath();\n                node.checkPathDirty();\n            });\n            if (!isDatumHighlighted) {\n                this.marker.markClean();\n            }\n        });\n    }\n    updateLabelSelection(opts) {\n        var _a, _b;\n        return __awaiter$2(this, void 0, void 0, function* () {\n            const { labelSelection } = opts;\n            const { label: { enabled }, } = this;\n            const placedLabels = enabled ? (_b = (_a = this.chart) === null || _a === void 0 ? void 0 : _a.placeLabels().get(this)) !== null && _b !== void 0 ? _b : [] : [];\n            const placedNodeDatum = placedLabels.map((v) => (Object.assign(Object.assign({}, v.datum), { point: {\n                    x: v.x,\n                    y: v.y,\n                    size: v.datum.point.size,\n                } })));\n            return labelSelection.update(placedNodeDatum);\n        });\n    }\n    updateLabelNodes(opts) {\n        return __awaiter$2(this, void 0, void 0, function* () {\n            const { labelSelection } = opts;\n            const { label } = this;\n            labelSelection.each((text, datum) => {\n                var _a, _b, _c, _d;\n                text.text = datum.label.text;\n                text.fill = label.color;\n                text.x = (_b = (_a = datum.point) === null || _a === void 0 ? void 0 : _a.x) !== null && _b !== void 0 ? _b : 0;\n                text.y = (_d = (_c = datum.point) === null || _c === void 0 ? void 0 : _c.y) !== null && _d !== void 0 ? _d : 0;\n                text.fontStyle = label.fontStyle;\n                text.fontWeight = label.fontWeight;\n                text.fontSize = label.fontSize;\n                text.fontFamily = label.fontFamily;\n                text.textAlign = 'left';\n                text.textBaseline = 'top';\n            });\n        });\n    }\n    getTooltipHtml(nodeDatum) {\n        var _a, _b, _c, _d, _e, _f, _g;\n        const { xKey, yKey, xAxis, yAxis } = this;\n        if (!xKey || !yKey || !xAxis || !yAxis) {\n            return '';\n        }\n        const { marker, tooltip, xName, yName, sizeKey, sizeName, labelKey, labelName, id: seriesId, ctx: { callbackCache }, } = this;\n        const { stroke } = marker;\n        const fill = (_a = nodeDatum.fill) !== null && _a !== void 0 ? _a : marker.fill;\n        const strokeWidth = this.getStrokeWidth((_b = marker.strokeWidth) !== null && _b !== void 0 ? _b : 1);\n        const { formatter } = this.marker;\n        let format = undefined;\n        if (formatter) {\n            format = callbackCache.call(formatter, {\n                datum: nodeDatum,\n                xKey,\n                yKey,\n                fill,\n                stroke,\n                strokeWidth,\n                size: (_d = (_c = nodeDatum.point) === null || _c === void 0 ? void 0 : _c.size) !== null && _d !== void 0 ? _d : 0,\n                highlighted: false,\n                seriesId,\n            });\n        }\n        const color = (_f = (_e = format === null || format === void 0 ? void 0 : format.fill) !== null && _e !== void 0 ? _e : fill) !== null && _f !== void 0 ? _f : 'gray';\n        const title = (_g = this.title) !== null && _g !== void 0 ? _g : yName;\n        const datum = nodeDatum.datum;\n        const xValue = datum[xKey];\n        const yValue = datum[yKey];\n        const xString = sanitizeHtml(xAxis.formatDatum(xValue));\n        const yString = sanitizeHtml(yAxis.formatDatum(yValue));\n        let content = `<b>${sanitizeHtml(xName !== null && xName !== void 0 ? xName : xKey)}</b>: ${xString}<br>` +\n            `<b>${sanitizeHtml(yName !== null && yName !== void 0 ? yName : yKey)}</b>: ${yString}`;\n        if (sizeKey) {\n            content += `<br><b>${sanitizeHtml(sizeName !== null && sizeName !== void 0 ? sizeName : sizeKey)}</b>: ${sanitizeHtml(datum[sizeKey])}`;\n        }\n        if (labelKey) {\n            content = `<b>${sanitizeHtml(labelName !== null && labelName !== void 0 ? labelName : labelKey)}</b>: ${sanitizeHtml(datum[labelKey])}<br>` + content;\n        }\n        const defaults = {\n            title,\n            backgroundColor: color,\n            content,\n        };\n        const { renderer: tooltipRenderer } = tooltip;\n        if (tooltipRenderer) {\n            return toTooltipHtml$1(tooltipRenderer({\n                datum,\n                xKey,\n                xValue,\n                xName,\n                yKey,\n                yValue,\n                yName,\n                sizeKey,\n                sizeName,\n                labelKey,\n                labelName,\n                title,\n                color,\n                seriesId,\n            }), defaults);\n        }\n        return toTooltipHtml$1(defaults);\n    }\n    getLegendData() {\n        var _a, _b, _c, _d, _e;\n        const { id, data, xKey, yKey, yName, title, visible, marker } = this;\n        const { fill, stroke, fillOpacity, strokeOpacity } = marker;\n        if (!((data === null || data === void 0 ? void 0 : data.length) && xKey && yKey)) {\n            return [];\n        }\n        const legendData = [\n            {\n                legendType: 'category',\n                id,\n                itemId: yKey,\n                seriesId: id,\n                enabled: visible,\n                label: {\n                    text: (_a = title !== null && title !== void 0 ? title : yName) !== null && _a !== void 0 ? _a : yKey,\n                },\n                marker: {\n                    shape: marker.shape,\n                    fill: (_c = (_b = marker.fill) !== null && _b !== void 0 ? _b : fill) !== null && _c !== void 0 ? _c : 'rgba(0, 0, 0, 0)',\n                    stroke: (_e = (_d = marker.stroke) !== null && _d !== void 0 ? _d : stroke) !== null && _e !== void 0 ? _e : 'rgba(0, 0, 0, 0)',\n                    fillOpacity: fillOpacity !== null && fillOpacity !== void 0 ? fillOpacity : 1,\n                    strokeOpacity: strokeOpacity !== null && strokeOpacity !== void 0 ? strokeOpacity : 1,\n                },\n            },\n        ];\n        return legendData;\n    }\n    animateEmptyUpdateReady({ markerSelections, labelSelections, }) {\n        const duration = 1000;\n        const labelDuration = 200;\n        markerSelections.forEach((markerSelection) => {\n            markerSelection.each((marker, datum) => {\n                var _a, _b, _c, _d;\n                const format = this.animateFormatter(marker, datum);\n                const size = (_b = (_a = datum.point) === null || _a === void 0 ? void 0 : _a.size) !== null && _b !== void 0 ? _b : 0;\n                const to = (_c = format === null || format === void 0 ? void 0 : format.size) !== null && _c !== void 0 ? _c : size;\n                (_d = this.animationManager) === null || _d === void 0 ? void 0 : _d.animate(`${this.id}_empty-update-ready_${marker.id}`, {\n                    from: 0,\n                    to: to,\n                    disableInteractions: true,\n                    duration,\n                    ease: linear,\n                    repeat: 0,\n                    onUpdate(size) {\n                        marker.size = size;\n                    },\n                });\n            });\n        });\n        labelSelections.forEach((labelSelection) => {\n            labelSelection.each((label) => {\n                var _a;\n                (_a = this.animationManager) === null || _a === void 0 ? void 0 : _a.animate(`${this.id}_empty-update-ready_${label.id}`, {\n                    from: 0,\n                    to: 1,\n                    delay: duration,\n                    duration: labelDuration,\n                    ease: linear,\n                    repeat: 0,\n                    onUpdate: (opacity) => {\n                        label.opacity = opacity;\n                    },\n                });\n            });\n        });\n    }\n    animateReadyUpdate({ markerSelections }) {\n        markerSelections.forEach((markerSelection) => {\n            this.resetMarkers(markerSelection);\n        });\n    }\n    animateReadyHighlightMarkers(markerSelection) {\n        this.resetMarkers(markerSelection);\n    }\n    resetMarkers(markerSelection) {\n        markerSelection.each((marker, datum) => {\n            var _a, _b, _c;\n            const format = this.animateFormatter(marker, datum);\n            const size = (_b = (_a = datum.point) === null || _a === void 0 ? void 0 : _a.size) !== null && _b !== void 0 ? _b : 0;\n            marker.size = (_c = format === null || format === void 0 ? void 0 : format.size) !== null && _c !== void 0 ? _c : size;\n        });\n    }\n    animateFormatter(marker, datum) {\n        var _a, _b, _c;\n        const { xKey = '', yKey = '', marker: { strokeWidth: markerStrokeWidth }, id: seriesId, ctx: { callbackCache }, } = this;\n        const { formatter } = this.marker;\n        const fill = (_a = datum.fill) !== null && _a !== void 0 ? _a : marker.fill;\n        const stroke = marker.stroke;\n        const strokeWidth = markerStrokeWidth !== null && markerStrokeWidth !== void 0 ? markerStrokeWidth : 1;\n        const size = (_c = (_b = datum.point) === null || _b === void 0 ? void 0 : _b.size) !== null && _c !== void 0 ? _c : 0;\n        let format = undefined;\n        if (formatter) {\n            format = callbackCache.call(formatter, {\n                datum: datum.datum,\n                xKey,\n                yKey,\n                fill,\n                stroke,\n                strokeWidth,\n                size,\n                highlighted: false,\n                seriesId,\n            });\n        }\n        return format;\n    }\n    isLabelEnabled() {\n        return this.label.enabled;\n    }\n}\nScatterSeries.className = 'ScatterSeries';\nScatterSeries.type = 'scatter';\n__decorate$1n([\n    Validate(OPT_STRING)\n], ScatterSeries.prototype, \"title\", void 0);\n__decorate$1n([\n    Validate(OPT_STRING)\n], ScatterSeries.prototype, \"labelKey\", void 0);\n__decorate$1n([\n    Validate(OPT_STRING)\n], ScatterSeries.prototype, \"xName\", void 0);\n__decorate$1n([\n    Validate(OPT_STRING)\n], ScatterSeries.prototype, \"yName\", void 0);\n__decorate$1n([\n    Validate(OPT_STRING)\n], ScatterSeries.prototype, \"sizeName\", void 0);\n__decorate$1n([\n    Validate(OPT_STRING)\n], ScatterSeries.prototype, \"labelName\", void 0);\n__decorate$1n([\n    Validate(OPT_STRING)\n], ScatterSeries.prototype, \"xKey\", void 0);\n__decorate$1n([\n    Validate(OPT_STRING)\n], ScatterSeries.prototype, \"yKey\", void 0);\n__decorate$1n([\n    Validate(OPT_STRING)\n], ScatterSeries.prototype, \"sizeKey\", void 0);\n__decorate$1n([\n    Validate(OPT_STRING)\n], ScatterSeries.prototype, \"colorKey\", void 0);\n__decorate$1n([\n    Validate(OPT_STRING)\n], ScatterSeries.prototype, \"colorName\", void 0);\n__decorate$1n([\n    Validate(OPT_NUMBER_ARRAY)\n], ScatterSeries.prototype, \"colorDomain\", void 0);\n__decorate$1n([\n    Validate(COLOR_STRING_ARRAY)\n], ScatterSeries.prototype, \"colorRange\", void 0);\n\nclass HierarchySeries extends Series {\n    constructor(moduleCtx) {\n        super({ moduleCtx, pickModes: [SeriesNodePickMode.EXACT_SHAPE_MATCH] });\n    }\n    getLabelData() {\n        return [];\n    }\n}\n\nvar __decorate$1m = ( false) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nclass DropShadow extends ChangeDetectable {\n    constructor() {\n        super(...arguments);\n        this.enabled = true;\n        this.color = 'rgba(0, 0, 0, 0.5)';\n        this.xOffset = 0;\n        this.yOffset = 0;\n        this.blur = 5;\n    }\n}\n__decorate$1m([\n    Validate(BOOLEAN),\n    SceneChangeDetection({ redraw: RedrawType.MAJOR })\n], DropShadow.prototype, \"enabled\", void 0);\n__decorate$1m([\n    Validate(COLOR_STRING),\n    SceneChangeDetection({ redraw: RedrawType.MAJOR })\n], DropShadow.prototype, \"color\", void 0);\n__decorate$1m([\n    Validate(NUMBER()),\n    SceneChangeDetection({ redraw: RedrawType.MAJOR })\n], DropShadow.prototype, \"xOffset\", void 0);\n__decorate$1m([\n    Validate(NUMBER()),\n    SceneChangeDetection({ redraw: RedrawType.MAJOR })\n], DropShadow.prototype, \"yOffset\", void 0);\n__decorate$1m([\n    Validate(NUMBER(0)),\n    SceneChangeDetection({ redraw: RedrawType.MAJOR })\n], DropShadow.prototype, \"blur\", void 0);\n\nvar __decorate$1l = ( false) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nvar __awaiter$1 = ( false) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nclass TreemapSeriesTooltip extends SeriesTooltip {\n    constructor() {\n        super(...arguments);\n        this.renderer = undefined;\n    }\n}\n__decorate$1l([\n    Validate(OPT_FUNCTION)\n], TreemapSeriesTooltip.prototype, \"renderer\", void 0);\nclass TreemapSeriesNodeBaseClickEvent extends SeriesNodeBaseClickEvent {\n    constructor(labelKey, sizeKey, colorKey, nativeEvent, datum, series) {\n        super(nativeEvent, datum, series);\n        this.labelKey = labelKey;\n        this.sizeKey = sizeKey;\n        this.colorKey = colorKey;\n    }\n}\nclass TreemapSeriesNodeClickEvent extends TreemapSeriesNodeBaseClickEvent {\n    constructor() {\n        super(...arguments);\n        this.type = 'nodeClick';\n    }\n}\nclass TreemapSeriesNodeDoubleClickEvent extends TreemapSeriesNodeBaseClickEvent {\n    constructor() {\n        super(...arguments);\n        this.type = 'nodeDoubleClick';\n    }\n}\nclass TreemapSeriesLabel extends Label$1 {\n    constructor() {\n        super(...arguments);\n        this.padding = 10;\n    }\n}\n__decorate$1l([\n    Validate(NUMBER(0))\n], TreemapSeriesLabel.prototype, \"padding\", void 0);\nclass TreemapSeriesTileLabel extends Label$1 {\n    constructor() {\n        super(...arguments);\n        this.wrapping = 'on-space';\n    }\n}\n__decorate$1l([\n    Validate(TEXT_WRAP)\n], TreemapSeriesTileLabel.prototype, \"wrapping\", void 0);\nclass TreemapValueLabel {\n    constructor() {\n        this.style = (() => {\n            const label = new Label$1();\n            label.color = 'white';\n            return label;\n        })();\n    }\n}\n__decorate$1l([\n    Validate(OPT_STRING)\n], TreemapValueLabel.prototype, \"key\", void 0);\n__decorate$1l([\n    Validate(OPT_STRING)\n], TreemapValueLabel.prototype, \"name\", void 0);\n__decorate$1l([\n    Validate(OPT_FUNCTION)\n], TreemapValueLabel.prototype, \"formatter\", void 0);\nvar TextNodeTag;\n(function (TextNodeTag) {\n    TextNodeTag[TextNodeTag[\"Name\"] = 0] = \"Name\";\n    TextNodeTag[TextNodeTag[\"Value\"] = 1] = \"Value\";\n})(TextNodeTag || (TextNodeTag = {}));\nconst tempText = new Text();\nfunction getTextSize(text, style) {\n    const { fontStyle, fontWeight, fontSize, fontFamily } = style;\n    tempText.fontStyle = fontStyle;\n    tempText.fontWeight = fontWeight;\n    tempText.fontSize = fontSize;\n    tempText.fontFamily = fontFamily;\n    tempText.text = text;\n    tempText.x = 0;\n    tempText.y = 0;\n    tempText.textAlign = 'left';\n    tempText.textBaseline = 'top';\n    const { width, height } = tempText.computeBBox();\n    return { width, height };\n}\nfunction validateColor(color) {\n    if (typeof color === 'string' && !Color.validColorString(color)) {\n        const fallbackColor = 'black';\n        Logger.warnOnce(`invalid Treemap tile colour string \"${color}\". Affected treemap tiles will be coloured ${fallbackColor}.`);\n        return 'black';\n    }\n    return color;\n}\nclass TreemapTextHighlightStyle {\n    constructor() {\n        this.color = 'black';\n    }\n}\n__decorate$1l([\n    Validate(OPT_COLOR_STRING)\n], TreemapTextHighlightStyle.prototype, \"color\", void 0);\nclass TreemapHighlightStyle extends HighlightStyle {\n    constructor() {\n        super(...arguments);\n        this.text = new TreemapTextHighlightStyle();\n    }\n}\nclass TreemapSeries extends HierarchySeries {\n    constructor() {\n        super(...arguments);\n        this.groupSelection = Selection.select(this.contentGroup, Group);\n        this.highlightSelection = Selection.select(this.highlightGroup, Group);\n        this.title = (() => {\n            const label = new TreemapSeriesLabel();\n            label.color = 'white';\n            label.fontWeight = 'bold';\n            label.fontSize = 12;\n            label.fontFamily = 'Verdana, sans-serif';\n            label.padding = 15;\n            return label;\n        })();\n        this.subtitle = (() => {\n            const label = new TreemapSeriesLabel();\n            label.color = 'white';\n            label.fontSize = 9;\n            label.fontFamily = 'Verdana, sans-serif';\n            label.padding = 13;\n            return label;\n        })();\n        this.labels = {\n            large: (() => {\n                const label = new TreemapSeriesTileLabel();\n                label.color = 'white';\n                label.fontWeight = 'bold';\n                label.fontSize = 18;\n                return label;\n            })(),\n            medium: (() => {\n                const label = new TreemapSeriesTileLabel();\n                label.color = 'white';\n                label.fontWeight = 'bold';\n                label.fontSize = 14;\n                return label;\n            })(),\n            small: (() => {\n                const label = new TreemapSeriesTileLabel();\n                label.color = 'white';\n                label.fontWeight = 'bold';\n                label.fontSize = 10;\n                return label;\n            })(),\n            formatter: undefined,\n            value: new TreemapValueLabel(),\n        };\n        this.nodePadding = 2;\n        this.nodeGap = 0;\n        this.labelKey = 'label';\n        this.sizeKey = 'size';\n        this.colorKey = 'color';\n        this.colorDomain = [-5, 5];\n        this.colorRange = ['#cb4b3f', '#6acb64'];\n        this.groupFill = '#272931';\n        this.groupStroke = 'black';\n        this.groupStrokeWidth = 1;\n        this.tileStroke = 'black';\n        this.tileStrokeWidth = 1;\n        this.gradient = true;\n        this.formatter = undefined;\n        this.colorName = 'Change';\n        this.rootName = 'Root';\n        this.highlightGroups = true;\n        this.tileShadow = new DropShadow();\n        this.labelShadow = new DropShadow();\n        this.tooltip = new TreemapSeriesTooltip();\n        this.highlightStyle = new TreemapHighlightStyle();\n    }\n    getNodePaddingTop(nodeDatum, bbox) {\n        var _a;\n        const { title, subtitle, nodePadding } = this;\n        const label = nodeDatum.label;\n        if (nodeDatum.isLeaf || !label || nodeDatum.depth === 0) {\n            return nodePadding;\n        }\n        const font = nodeDatum.depth > 1 ? subtitle : title;\n        const textSize = getTextSize(label, font);\n        const heightRatioThreshold = 3;\n        if (font.fontSize > bbox.width / heightRatioThreshold || font.fontSize > bbox.height / heightRatioThreshold) {\n            return nodePadding;\n        }\n        if (textSize.height >= bbox.height) {\n            return nodePadding;\n        }\n        return textSize.height + nodePadding + ((_a = font.padding) !== null && _a !== void 0 ? _a : 0);\n    }\n    getNodePadding(nodeDatum, bbox) {\n        const { nodePadding } = this;\n        const top = this.getNodePaddingTop(nodeDatum, bbox);\n        return {\n            top,\n            right: nodePadding,\n            bottom: nodePadding,\n            left: nodePadding,\n        };\n    }\n    /**\n     * Squarified Treemap algorithm\n     * https://www.win.tue.nl/~vanwijk/stm.pdf\n     */\n    squarify(nodeDatum, bbox, outputNodesBoxes = new Map()) {\n        if (bbox.width <= 0 || bbox.height <= 0) {\n            return outputNodesBoxes;\n        }\n        outputNodesBoxes.set(nodeDatum, bbox);\n        const targetTileAspectRatio = 1; // The width and height will tend to this ratio\n        const padding = this.getNodePadding(nodeDatum, bbox);\n        const width = bbox.width - padding.left - padding.right;\n        const height = bbox.height - padding.top - padding.bottom;\n        if (width <= 0 || height <= 0 || nodeDatum.value <= 0) {\n            return outputNodesBoxes;\n        }\n        let stackSum = 0;\n        let startIndex = 0;\n        let minRatioDiff = Infinity;\n        let partitionSum = nodeDatum.value;\n        const children = nodeDatum.children;\n        const innerBox = new BBox(bbox.x + padding.left, bbox.y + padding.top, width, height);\n        const partition = innerBox.clone();\n        for (let i = 0; i < children.length; i++) {\n            const value = children[i].value;\n            const firstValue = children[startIndex].value;\n            const isVertical = partition.width < partition.height;\n            stackSum += value;\n            const partThickness = isVertical ? partition.height : partition.width;\n            const partLength = isVertical ? partition.width : partition.height;\n            const firstTileLength = (partLength * firstValue) / stackSum;\n            let stackThickness = (partThickness * stackSum) / partitionSum;\n            const ratio = Math.max(firstTileLength, stackThickness) / Math.min(firstTileLength, stackThickness);\n            const diff = Math.abs(targetTileAspectRatio - ratio);\n            if (diff < minRatioDiff) {\n                minRatioDiff = diff;\n                continue;\n            }\n            // Go one step back and process the best match\n            stackSum -= value;\n            stackThickness = (partThickness * stackSum) / partitionSum;\n            let start = isVertical ? partition.x : partition.y;\n            for (let j = startIndex; j < i; j++) {\n                const child = children[j];\n                const x = isVertical ? start : partition.x;\n                const y = isVertical ? partition.y : start;\n                const length = (partLength * child.value) / stackSum;\n                const width = isVertical ? length : stackThickness;\n                const height = isVertical ? stackThickness : length;\n                const childBox = new BBox(x, y, width, height);\n                this.applyGap(innerBox, childBox);\n                this.squarify(child, childBox, outputNodesBoxes);\n                partitionSum -= child.value;\n                start += length;\n            }\n            if (isVertical) {\n                partition.y += stackThickness;\n                partition.height -= stackThickness;\n            }\n            else {\n                partition.x += stackThickness;\n                partition.width -= stackThickness;\n            }\n            startIndex = i;\n            stackSum = 0;\n            minRatioDiff = Infinity;\n            i--;\n        }\n        // Process remaining space\n        const isVertical = partition.width < partition.height;\n        let start = isVertical ? partition.x : partition.y;\n        for (let i = startIndex; i < children.length; i++) {\n            const x = isVertical ? start : partition.x;\n            const y = isVertical ? partition.y : start;\n            const part = children[i].value / partitionSum;\n            const width = partition.width * (isVertical ? part : 1);\n            const height = partition.height * (isVertical ? 1 : part);\n            const childBox = new BBox(x, y, width, height);\n            this.applyGap(innerBox, childBox);\n            this.squarify(children[i], childBox, outputNodesBoxes);\n            start += isVertical ? width : height;\n        }\n        return outputNodesBoxes;\n    }\n    applyGap(innerBox, childBox) {\n        const gap = this.nodeGap / 2;\n        const getBounds = (box) => {\n            return {\n                left: box.x,\n                top: box.y,\n                right: box.x + box.width,\n                bottom: box.y + box.height,\n            };\n        };\n        const innerBounds = getBounds(innerBox);\n        const childBounds = getBounds(childBox);\n        const sides = Object.keys(innerBounds);\n        sides.forEach((side) => {\n            if (!isEqual$2(innerBounds[side], childBounds[side])) {\n                childBox.shrink(gap, side);\n            }\n        });\n    }\n    processData() {\n        return __awaiter$1(this, void 0, void 0, function* () {\n            if (!this.data) {\n                return;\n            }\n            const { data, sizeKey, labelKey, colorKey, colorDomain, colorRange, groupFill } = this;\n            const labelFormatter = this.labels.formatter;\n            const colorScale = new ColorScale();\n            colorScale.domain = colorDomain;\n            colorScale.range = colorRange;\n            colorScale.update();\n            const createTreeNodeDatum = (datum, depth = 0, parent) => {\n                var _a, _b, _c;\n                let label;\n                if (labelFormatter) {\n                    label = this.ctx.callbackCache.call(labelFormatter, { datum });\n                }\n                if (label !== undefined) ;\n                else if (labelKey) {\n                    label = (_a = datum[labelKey]) !== null && _a !== void 0 ? _a : '';\n                }\n                else {\n                    label = '';\n                }\n                let colorScaleValue = colorKey ? (_b = datum[colorKey]) !== null && _b !== void 0 ? _b : depth : depth;\n                colorScaleValue = validateColor(colorScaleValue);\n                const isLeaf = !datum.children;\n                let fill = groupFill;\n                if (typeof colorScaleValue === 'string') {\n                    fill = colorScaleValue;\n                }\n                else if (isLeaf || !groupFill) {\n                    fill = colorScale.convert(colorScaleValue);\n                }\n                const nodeDatum = {\n                    datum,\n                    depth,\n                    parent,\n                    value: 0,\n                    label,\n                    fill,\n                    series: this,\n                    isLeaf,\n                    children: [],\n                };\n                if (isLeaf) {\n                    nodeDatum.value = sizeKey ? (_c = datum[sizeKey]) !== null && _c !== void 0 ? _c : 1 : 1;\n                }\n                else {\n                    datum.children.forEach((child) => {\n                        const childNodeDatum = createTreeNodeDatum(child, depth + 1, nodeDatum);\n                        const value = childNodeDatum.value;\n                        if (isNaN(value) || !isFinite(value) || value === 0) {\n                            return;\n                        }\n                        nodeDatum.value += value;\n                        nodeDatum.children.push(childNodeDatum);\n                    });\n                    nodeDatum.children.sort((a, b) => {\n                        return b.value - a.value;\n                    });\n                }\n                return nodeDatum;\n            };\n            this.dataRoot = createTreeNodeDatum(data);\n        });\n    }\n    createNodeData() {\n        return __awaiter$1(this, void 0, void 0, function* () {\n            return [];\n        });\n    }\n    update() {\n        return __awaiter$1(this, void 0, void 0, function* () {\n            yield this.updateSelections();\n            yield this.updateNodes();\n        });\n    }\n    updateSelections() {\n        return __awaiter$1(this, void 0, void 0, function* () {\n            if (!this.nodeDataRefresh) {\n                return;\n            }\n            this.nodeDataRefresh = false;\n            const { chart, dataRoot } = this;\n            if (!chart || !dataRoot) {\n                return;\n            }\n            const seriesRect = chart.getSeriesRect();\n            if (!seriesRect) {\n                return;\n            }\n            const descendants = [];\n            const traverse = (datum) => {\n                var _a;\n                descendants.push(datum);\n                (_a = datum.children) === null || _a === void 0 ? void 0 : _a.forEach(traverse);\n            };\n            traverse(this.dataRoot);\n            const { groupSelection, highlightSelection } = this;\n            const update = (selection) => {\n                return selection.update(descendants, (group) => {\n                    const rect = new Rect();\n                    const nameLabel = new Text();\n                    nameLabel.tag = TextNodeTag.Name;\n                    const valueLabel = new Text();\n                    valueLabel.tag = TextNodeTag.Value;\n                    group.append([rect, nameLabel, valueLabel]);\n                });\n            };\n            this.groupSelection = update(groupSelection);\n            this.highlightSelection = update(highlightSelection);\n        });\n    }\n    isDatumHighlighted(datum) {\n        var _a;\n        const highlightedDatum = (_a = this.highlightManager) === null || _a === void 0 ? void 0 : _a.getActiveHighlight();\n        return datum === highlightedDatum && (datum.isLeaf || this.highlightGroups);\n    }\n    getTileFormat(datum, isHighlighted) {\n        var _a;\n        const { formatter, ctx: { callbackCache }, } = this;\n        if (!formatter) {\n            return {};\n        }\n        const { gradient, colorKey, labelKey, sizeKey, tileStroke, tileStrokeWidth, groupStroke, groupStrokeWidth } = this;\n        const stroke = datum.isLeaf ? tileStroke : groupStroke;\n        const strokeWidth = datum.isLeaf ? tileStrokeWidth : groupStrokeWidth;\n        const result = callbackCache.call(formatter, {\n            seriesId: this.id,\n            datum: datum.datum,\n            depth: datum.depth,\n            parent: (_a = datum.parent) === null || _a === void 0 ? void 0 : _a.datum,\n            colorKey,\n            sizeKey,\n            labelKey,\n            fill: datum.fill,\n            stroke,\n            strokeWidth,\n            gradient,\n            highlighted: isHighlighted,\n        });\n        return result !== null && result !== void 0 ? result : {};\n    }\n    updateNodes() {\n        return __awaiter$1(this, void 0, void 0, function* () {\n            if (!this.chart) {\n                return;\n            }\n            const { gradient, highlightStyle: { item: { fill: highlightedFill, fillOpacity: highlightedFillOpacity, stroke: highlightedStroke, strokeWidth: highlightedDatumStrokeWidth, }, text: { color: highlightedTextColor }, }, tileStroke, tileStrokeWidth, groupStroke, groupStrokeWidth, tileShadow, labelShadow, } = this;\n            const seriesRect = this.chart.getSeriesRect();\n            const boxes = this.squarify(this.dataRoot, new BBox(0, 0, seriesRect.width, seriesRect.height));\n            const labelMeta = this.buildLabelMeta(boxes);\n            const highlightedSubtree = this.getHighlightedSubtree();\n            this.updateNodeMidPoint(boxes);\n            const updateRectFn = (rect, datum, isDatumHighlighted) => {\n                var _a, _b, _c, _d, _e, _f;\n                const box = boxes.get(datum);\n                if (!box) {\n                    rect.visible = false;\n                    return;\n                }\n                const fill = isDatumHighlighted && highlightedFill !== undefined ? highlightedFill : datum.fill;\n                const fillOpacity = (_a = (isDatumHighlighted ? highlightedFillOpacity : 1)) !== null && _a !== void 0 ? _a : 1;\n                let stroke = groupStroke;\n                if (isDatumHighlighted && highlightedStroke !== undefined) {\n                    stroke = highlightedStroke;\n                }\n                else if (datum.isLeaf) {\n                    stroke = tileStroke;\n                }\n                let strokeWidth = groupStrokeWidth;\n                if (isDatumHighlighted && highlightedDatumStrokeWidth !== undefined) {\n                    strokeWidth = highlightedDatumStrokeWidth;\n                }\n                else if (datum.isLeaf) {\n                    strokeWidth = tileStrokeWidth;\n                }\n                const format = this.getTileFormat(datum, isDatumHighlighted);\n                const fillColor = validateColor((_b = format === null || format === void 0 ? void 0 : format.fill) !== null && _b !== void 0 ? _b : fill);\n                if ((_c = format === null || format === void 0 ? void 0 : format.gradient) !== null && _c !== void 0 ? _c : gradient) {\n                    const start = Color.tryParseFromString(fill).brighter().toString();\n                    const end = Color.tryParseFromString(fill).darker().toString();\n                    rect.fill = `linear-gradient(180deg, ${start}, ${end})`;\n                }\n                else {\n                    rect.fill = fillColor;\n                }\n                rect.fillOpacity = (_d = format === null || format === void 0 ? void 0 : format.fillOpacity) !== null && _d !== void 0 ? _d : fillOpacity;\n                rect.stroke = validateColor((_e = format === null || format === void 0 ? void 0 : format.stroke) !== null && _e !== void 0 ? _e : stroke);\n                rect.strokeWidth = (_f = format === null || format === void 0 ? void 0 : format.strokeWidth) !== null && _f !== void 0 ? _f : strokeWidth;\n                rect.fillShadow = tileShadow;\n                rect.crisp = true;\n                rect.x = box.x;\n                rect.y = box.y;\n                rect.width = box.width;\n                rect.height = box.height;\n                rect.visible = true;\n            };\n            this.groupSelection.selectByClass(Rect).forEach((rect) => updateRectFn(rect, rect.datum, false));\n            this.highlightSelection.selectByClass(Rect).forEach((rect) => {\n                const isDatumHighlighted = this.isDatumHighlighted(rect.datum);\n                rect.visible = isDatumHighlighted || highlightedSubtree.has(rect.datum);\n                if (rect.visible) {\n                    updateRectFn(rect, rect.datum, isDatumHighlighted);\n                }\n            });\n            const updateLabelFn = (text, datum, highlighted, key) => {\n                const meta = labelMeta.get(datum);\n                const label = meta === null || meta === void 0 ? void 0 : meta[key];\n                if (!label) {\n                    text.visible = false;\n                    return;\n                }\n                text.text = label.text;\n                text.fontFamily = label.style.fontFamily;\n                text.fontSize = label.style.fontSize;\n                text.fontWeight = label.style.fontWeight;\n                text.fill = highlighted ? highlightedTextColor !== null && highlightedTextColor !== void 0 ? highlightedTextColor : label.style.color : label.style.color;\n                text.fillShadow = highlighted ? undefined : labelShadow;\n                text.textAlign = label.hAlign;\n                text.textBaseline = label.vAlign;\n                text.x = label.x;\n                text.y = label.y;\n                text.visible = true;\n            };\n            this.groupSelection\n                .selectByTag(TextNodeTag.Name)\n                .forEach((text) => updateLabelFn(text, text.datum, false, 'label'));\n            this.highlightSelection.selectByTag(TextNodeTag.Name).forEach((text) => {\n                const isDatumHighlighted = this.isDatumHighlighted(text.datum);\n                text.visible = isDatumHighlighted || highlightedSubtree.has(text.datum);\n                if (text.visible) {\n                    updateLabelFn(text, text.datum, isDatumHighlighted, 'label');\n                }\n            });\n            this.groupSelection\n                .selectByTag(TextNodeTag.Value)\n                .forEach((text) => updateLabelFn(text, text.datum, false, 'value'));\n            this.highlightSelection.selectByTag(TextNodeTag.Value).forEach((text) => {\n                const isDatumHighlighted = this.isDatumHighlighted(text.datum);\n                text.visible = isDatumHighlighted || highlightedSubtree.has(text.datum);\n                if (text.visible) {\n                    updateLabelFn(text, text.datum, isDatumHighlighted, 'value');\n                }\n            });\n        });\n    }\n    updateNodeMidPoint(boxes) {\n        boxes.forEach((box, treeNodeDatum) => {\n            treeNodeDatum.nodeMidPoint = {\n                x: box.x + box.width / 2,\n                y: box.y,\n            };\n        });\n    }\n    getHighlightedSubtree() {\n        const items = new Set();\n        const traverse = (datum) => {\n            var _a;\n            if (this.isDatumHighlighted(datum) || (datum.parent && items.has(datum.parent))) {\n                items.add(datum);\n            }\n            (_a = datum.children) === null || _a === void 0 ? void 0 : _a.forEach(traverse);\n        };\n        traverse(this.dataRoot);\n        return items;\n    }\n    buildLabelMeta(boxes) {\n        const { labels, title, subtitle, nodePadding, labelKey, ctx: { callbackCache }, } = this;\n        const wrappedRegExp = /-$/m;\n        const labelMeta = new Map();\n        boxes.forEach((box, datum) => {\n            var _a, _b, _c;\n            if (!labelKey || datum.depth === 0) {\n                return;\n            }\n            const availTextWidth = box.width - 2 * nodePadding;\n            const availTextHeight = box.height - 2 * nodePadding;\n            const isBoxTooSmall = (labelStyle) => {\n                const minSizeRatio = 3;\n                return (labelStyle.fontSize > box.width / minSizeRatio || labelStyle.fontSize > box.height / minSizeRatio);\n            };\n            let labelText = datum.isLeaf ? datum.label : datum.label.toUpperCase();\n            let valueText = '';\n            const valueConfig = labels.value;\n            const valueStyle = valueConfig.style;\n            const valueMargin = Math.ceil(valueStyle.fontSize * 2 * (Text.defaultLineHeightRatio - 1));\n            if (datum.isLeaf) {\n                if (valueConfig.formatter) {\n                    valueText = (_a = callbackCache.call(valueConfig.formatter, { datum: datum.datum })) !== null && _a !== void 0 ? _a : '';\n                }\n                else if (valueConfig.key) {\n                    valueText = datum.datum[valueConfig.key];\n                }\n            }\n            let valueSize = getTextSize(valueText, valueStyle);\n            if (valueText && valueSize.width > availTextWidth) {\n                valueText = '';\n            }\n            let labelStyle;\n            let wrappedText = '';\n            if (datum.isLeaf) {\n                labelStyle = labels.small;\n                const pickStyle = () => {\n                    const availHeight = availTextHeight - (valueText ? valueStyle.fontSize + valueMargin : 0);\n                    const labelStyles = [labels.large, labels.medium, labels.small];\n                    for (const style of labelStyles) {\n                        const { width, height } = getTextSize(labelText, style);\n                        if (height > availHeight || isBoxTooSmall(style)) {\n                            continue;\n                        }\n                        if (width <= availTextWidth) {\n                            return { style, wrappedText: undefined };\n                        }\n                        // Avoid hyphens and ellipsis for large and medium label styles\n                        const wrapped = Text.wrap(labelText, availTextWidth, availHeight, style, style.wrapping);\n                        if (wrapped &&\n                            wrapped !== '\\u2026' &&\n                            (style === labels.small || !(wrappedRegExp.exec(wrapped) || wrapped.endsWith('\\u2026')))) {\n                            return { style, wrappedText: wrapped };\n                        }\n                    }\n                    // Check if small font fits by height\n                    const smallSize = getTextSize(labelText, labels.small);\n                    if (smallSize.height <= availHeight && !isBoxTooSmall(labels.small)) {\n                        return { style: labels.small, wrappedText: undefined };\n                    }\n                    return { style: undefined, wrappedText: undefined };\n                };\n                let result = pickStyle();\n                if (!result.style && valueText) {\n                    valueText = '';\n                    result = pickStyle();\n                }\n                labelStyle = (_b = result.style) !== null && _b !== void 0 ? _b : labels.small;\n                wrappedText = (_c = result.wrappedText) !== null && _c !== void 0 ? _c : '';\n            }\n            else if (datum.depth === 1) {\n                labelStyle = title;\n            }\n            else {\n                labelStyle = subtitle;\n            }\n            const labelSize = getTextSize(wrappedText || labelText, labelStyle);\n            if (isBoxTooSmall(labelStyle)) {\n                // Avoid labels on too small tiles\n                return;\n            }\n            // Crop text if not enough space\n            if (labelSize.width > availTextWidth) {\n                const textLength = Math.floor((labelText.length * availTextWidth) / labelSize.width) - 1;\n                labelText = `${labelText.substring(0, textLength).trim()}…`;\n            }\n            valueSize = getTextSize(valueText, valueStyle);\n            const hasValueText = valueText &&\n                valueSize.width < availTextWidth &&\n                valueSize.height + labelSize.height + valueMargin < availTextHeight;\n            labelMeta.set(datum, {\n                label: Object.assign({ text: wrappedText || labelText, style: labelStyle }, (datum.isLeaf\n                    ? {\n                        hAlign: 'center',\n                        vAlign: 'middle',\n                        x: box.x + box.width / 2,\n                        y: box.y + box.height / 2 - (hasValueText ? valueSize.height / 2 + valueMargin / 2 : 0),\n                    }\n                    : {\n                        hAlign: 'left',\n                        vAlign: 'top',\n                        x: box.x + nodePadding,\n                        y: box.y + nodePadding,\n                    })),\n                value: hasValueText\n                    ? {\n                        text: valueText,\n                        style: valueStyle,\n                        hAlign: 'center',\n                        vAlign: 'middle',\n                        x: box.x + box.width / 2,\n                        y: box.y + box.height / 2 + labelSize.height / 2 + valueMargin / 2,\n                    }\n                    : undefined,\n            });\n        });\n        return labelMeta;\n    }\n    getDomain(_direction) {\n        return [0, 1];\n    }\n    getNodeClickEvent(event, datum) {\n        return new TreemapSeriesNodeClickEvent(this.labelKey, this.sizeKey, this.colorKey, event, datum, this);\n    }\n    getNodeDoubleClickEvent(event, datum) {\n        return new TreemapSeriesNodeDoubleClickEvent(this.labelKey, this.sizeKey, this.colorKey, event, datum, this);\n    }\n    getTooltipHtml(nodeDatum) {\n        var _a, _b, _c, _d;\n        if (!this.highlightGroups && !nodeDatum.isLeaf) {\n            return '';\n        }\n        const { tooltip, sizeKey, labelKey, colorKey, rootName, id: seriesId, labels, ctx: { callbackCache }, } = this;\n        const { datum } = nodeDatum;\n        const { renderer: tooltipRenderer } = tooltip;\n        const title = nodeDatum.depth ? datum[labelKey] : (_a = datum[labelKey]) !== null && _a !== void 0 ? _a : rootName;\n        let content = '';\n        const format = this.getTileFormat(nodeDatum, false);\n        const color = (_c = (_b = format === null || format === void 0 ? void 0 : format.fill) !== null && _b !== void 0 ? _b : nodeDatum.fill) !== null && _c !== void 0 ? _c : 'gray';\n        const valueKey = labels.value.key;\n        const valueFormatter = labels.value.formatter;\n        if (valueKey || valueFormatter) {\n            let valueText = '';\n            if (valueFormatter) {\n                valueText = callbackCache.call(valueFormatter, { datum });\n            }\n            else {\n                const value = datum[valueKey];\n                if (typeof value === 'number' && isFinite(value)) {\n                    valueText = toFixed(value);\n                }\n            }\n            if (valueText) {\n                if (labels.value.name) {\n                    content += `<b>${labels.value.name}:</b> `;\n                }\n                content += valueText;\n            }\n        }\n        const defaults = {\n            title,\n            backgroundColor: color,\n            content,\n        };\n        if (tooltipRenderer) {\n            return toTooltipHtml$1(tooltipRenderer({\n                datum: nodeDatum.datum,\n                parent: (_d = nodeDatum.parent) === null || _d === void 0 ? void 0 : _d.datum,\n                depth: nodeDatum.depth,\n                sizeKey,\n                labelKey,\n                colorKey,\n                title,\n                color,\n                seriesId,\n            }), defaults);\n        }\n        if (!title && !content) {\n            return '';\n        }\n        return toTooltipHtml$1(defaults);\n    }\n    getLegendData() {\n        // Override point for subclasses.\n        return [];\n    }\n}\nTreemapSeries.className = 'TreemapSeries';\nTreemapSeries.type = 'treemap';\n__decorate$1l([\n    Validate(NUMBER(0))\n], TreemapSeries.prototype, \"nodePadding\", void 0);\n__decorate$1l([\n    Validate(NUMBER(0))\n], TreemapSeries.prototype, \"nodeGap\", void 0);\n__decorate$1l([\n    Validate(STRING)\n], TreemapSeries.prototype, \"labelKey\", void 0);\n__decorate$1l([\n    Validate(OPT_STRING)\n], TreemapSeries.prototype, \"sizeKey\", void 0);\n__decorate$1l([\n    Validate(OPT_STRING)\n], TreemapSeries.prototype, \"colorKey\", void 0);\n__decorate$1l([\n    Validate(NUMBER_ARRAY)\n], TreemapSeries.prototype, \"colorDomain\", void 0);\n__decorate$1l([\n    Validate(COLOR_STRING_ARRAY)\n], TreemapSeries.prototype, \"colorRange\", void 0);\n__decorate$1l([\n    Validate(OPT_STRING)\n], TreemapSeries.prototype, \"groupFill\", void 0);\n__decorate$1l([\n    Validate(OPT_COLOR_STRING)\n], TreemapSeries.prototype, \"groupStroke\", void 0);\n__decorate$1l([\n    Validate(OPT_NUMBER(0))\n], TreemapSeries.prototype, \"groupStrokeWidth\", void 0);\n__decorate$1l([\n    Validate(OPT_COLOR_STRING)\n], TreemapSeries.prototype, \"tileStroke\", void 0);\n__decorate$1l([\n    Validate(OPT_NUMBER(0))\n], TreemapSeries.prototype, \"tileStrokeWidth\", void 0);\n__decorate$1l([\n    Validate(BOOLEAN)\n], TreemapSeries.prototype, \"gradient\", void 0);\n__decorate$1l([\n    Validate(OPT_FUNCTION)\n], TreemapSeries.prototype, \"formatter\", void 0);\n__decorate$1l([\n    Validate(STRING)\n], TreemapSeries.prototype, \"colorName\", void 0);\n__decorate$1l([\n    Validate(STRING)\n], TreemapSeries.prototype, \"rootName\", void 0);\n__decorate$1l([\n    Validate(OPT_BOOLEAN)\n], TreemapSeries.prototype, \"highlightGroups\", void 0);\n\nconst TYPES$1 = {\n    area: 'cartesian',\n    bar: 'cartesian',\n    column: 'cartesian',\n    histogram: 'cartesian',\n    line: 'cartesian',\n    scatter: 'cartesian',\n    treemap: 'hierarchy',\n    pie: 'polar',\n};\nconst DEFAULTS = {};\nconst CHART_TYPES = {\n    has(seriesType) {\n        return Object.prototype.hasOwnProperty.call(TYPES$1, seriesType);\n    },\n    isCartesian(seriesType) {\n        return TYPES$1[seriesType] === 'cartesian';\n    },\n    isPolar(seriesType) {\n        return TYPES$1[seriesType] === 'polar';\n    },\n    isHierarchy(seriesType) {\n        return TYPES$1[seriesType] === 'hierarchy';\n    },\n    get seriesTypes() {\n        return Object.keys(TYPES$1);\n    },\n    get cartesianTypes() {\n        return this.seriesTypes.filter((t) => this.isCartesian(t));\n    },\n    get polarTypes() {\n        return this.seriesTypes.filter((t) => this.isPolar(t));\n    },\n    get hierarchyTypes() {\n        return this.seriesTypes.filter((t) => this.isHierarchy(t));\n    },\n};\nfunction registerChartSeriesType(seriesType, chartType) {\n    TYPES$1[seriesType] = chartType;\n}\nfunction registerChartDefaults(chartType, defaults) {\n    var _a;\n    DEFAULTS[chartType] = jsonMerge([(_a = DEFAULTS[chartType]) !== null && _a !== void 0 ? _a : {}, defaults]);\n}\nfunction getChartDefaults(chartType) {\n    var _a;\n    return (_a = DEFAULTS[chartType]) !== null && _a !== void 0 ? _a : {};\n}\n\nconst BUILT_IN_SERIES_FACTORIES = {\n    area: AreaSeries,\n    bar: BarSeries,\n    column: ColumnSeries,\n    histogram: HistogramSeries,\n    line: LineSeries,\n    pie: PieSeries,\n    scatter: ScatterSeries,\n    treemap: TreemapSeries,\n};\nconst SERIES_FACTORIES = {};\nconst SERIES_DEFAULTS = {};\nconst SERIES_THEME_TEMPLATES = {};\nfunction registerSeries(seriesType, chartType, cstr, defaults, theme) {\n    SERIES_FACTORIES[seriesType] = cstr;\n    SERIES_DEFAULTS[seriesType] = defaults;\n    SERIES_THEME_TEMPLATES[seriesType] = theme;\n    registerChartSeriesType(seriesType, chartType);\n}\nfunction getSeries(chartType, moduleCtx) {\n    var _a;\n    const seriesConstructor = (_a = SERIES_FACTORIES[chartType]) !== null && _a !== void 0 ? _a : BUILT_IN_SERIES_FACTORIES[chartType];\n    if (seriesConstructor) {\n        return new seriesConstructor(moduleCtx);\n    }\n    throw new Error(`AG Charts - unknown series type: ${chartType}`);\n}\nfunction getSeriesDefaults(chartType) {\n    return SERIES_DEFAULTS[chartType];\n}\nfunction getSeriesThemeTemplate(chartType) {\n    return SERIES_THEME_TEMPLATES[chartType];\n}\n\nconst DEFAULT_CARTESIAN_CHART_OVERRIDES = {\n    axes: [\n        {\n            type: NumberAxis.type,\n            position: 'left',\n        },\n        {\n            type: CategoryAxis.type,\n            position: 'bottom',\n        },\n    ],\n};\nconst DEFAULT_BAR_CHART_OVERRIDES = {\n    axes: [\n        {\n            type: 'number',\n            position: 'bottom',\n        },\n        {\n            type: 'category',\n            position: 'left',\n        },\n    ],\n};\nconst DEFAULT_SCATTER_HISTOGRAM_CHART_OVERRIDES = {\n    axes: [\n        {\n            type: 'number',\n            position: 'bottom',\n        },\n        {\n            type: 'number',\n            position: 'left',\n        },\n    ],\n};\n\nfunction transform(input, transforms) {\n    const result = {};\n    for (const p in input) {\n        const t = transforms[p] || ((x) => x);\n        result[p] = t(input[p], input);\n    }\n    return result;\n}\nfunction is2dArray(input) {\n    return input != null && input instanceof Array && input[0] instanceof Array;\n}\nfunction yNamesMapping(p, src) {\n    if (p == null) {\n        return {};\n    }\n    if (!(p instanceof Array)) {\n        return p;\n    }\n    const yKeys = src.yKeys;\n    if (yKeys == null || is2dArray(yKeys)) {\n        throw new Error('AG Charts - yNames and yKeys mismatching configuration.');\n    }\n    const result = {};\n    yKeys.forEach((k, i) => {\n        result[k] = p[i];\n    });\n    return result;\n}\nfunction yKeysMapping(p, src) {\n    if (p == null) {\n        return [[]];\n    }\n    if (is2dArray(p)) {\n        return p;\n    }\n    return src.grouped ? p.map((v) => [v]) : [p];\n}\nfunction legendItemNamesMapping(p, src) {\n    if (p == null) {\n        return {};\n    }\n    if (!(p instanceof Array)) {\n        return p;\n    }\n    const yKeys = src.yKeys;\n    if (yKeys == null || is2dArray(yKeys)) {\n        throw new Error('AG Charts - legendItemNames and yKeys mismatching configuration.');\n    }\n    const result = {};\n    yKeys.forEach((k, i) => {\n        result[k] = p[i];\n    });\n    return result;\n}\nfunction barSeriesTransform(options) {\n    const result = Object.assign({}, options);\n    delete result['yKey'];\n    delete result['yName'];\n    return transform(result, {\n        yNames: yNamesMapping,\n        yKeys: yKeysMapping,\n        legendItemNames: legendItemNamesMapping,\n    });\n}\nfunction columnSeriesTransform(options) {\n    const result = Object.assign({}, options);\n    delete result['yKey'];\n    delete result['yName'];\n    return transform(result, {\n        yNames: yNamesMapping,\n        yKeys: yKeysMapping,\n        legendItemNames: legendItemNamesMapping,\n    });\n}\nfunction identityTransform(input) {\n    return input;\n}\nconst SERIES_TRANSFORMS = {\n    area: identityTransform,\n    bar: barSeriesTransform,\n    column: columnSeriesTransform,\n    histogram: identityTransform,\n    line: identityTransform,\n    pie: identityTransform,\n    scatter: identityTransform,\n    treemap: identityTransform,\n};\nfunction applySeriesTransform(options) {\n    var _a;\n    const type = (_a = options.type) !== null && _a !== void 0 ? _a : 'line';\n    const transform = SERIES_TRANSFORMS[type];\n    return (transform !== null && transform !== void 0 ? transform : identityTransform)(options);\n}\n\nfunction deepMerge$1(target, source) {\n    if (isPlainObject(target) && isPlainObject(source)) {\n        const result = {};\n        Object.keys(target).forEach((key) => {\n            if (key in source) {\n                result[key] = deepMerge$1(target[key], source[key]);\n            }\n            else {\n                result[key] = target[key];\n            }\n        });\n        Object.keys(source).forEach((key) => {\n            if (!(key in target)) {\n                result[key] = source[key];\n            }\n        });\n        return result;\n    }\n    if ((Array.isArray(target) && !Array.isArray(source)) || (isObject(target) && !isObject(source))) {\n        return target;\n    }\n    return source;\n}\nfunction isObject(value) {\n    return value && typeof value === 'object';\n}\nfunction isPlainObject(x) {\n    return isObject(x) && x.constructor === Object;\n}\n\nconst TYPES = {\n    number: 'number',\n    time: 'time',\n    log: 'log',\n    category: 'category',\n    groupedCategory: 'groupedCategory',\n};\nconst AXES_THEME_TEMPLATES = {};\nconst CHART_AXES_TYPES = {\n    has(axisType) {\n        return Object.prototype.hasOwnProperty.call(TYPES, axisType);\n    },\n    get axesTypes() {\n        return Object.keys(TYPES);\n    },\n};\nfunction registerAxisThemeTemplate(axisType, theme) {\n    AXES_THEME_TEMPLATES[axisType] = theme;\n}\nfunction getAxisThemeTemplate(axisType) {\n    var _a;\n    return (_a = AXES_THEME_TEMPLATES[axisType]) !== null && _a !== void 0 ? _a : {};\n}\n\nconst palette$8 = {\n    fills: ['#f3622d', '#fba71b', '#57b757', '#41a9c9', '#4258c9', '#9a42c8', '#c84164', '#888888'],\n    strokes: ['#aa4520', '#b07513', '#3d803d', '#2d768d', '#2e3e8d', '#6c2e8c', '#8c2d46', '#5f5f5f'],\n};\nconst EXTENDS_SERIES_DEFAULTS = Symbol('extends-series-defaults');\nconst OVERRIDE_SERIES_LABEL_DEFAULTS = Symbol('override-series-label-defaults');\nconst DEFAULT_FONT_FAMILY = Symbol('default-font');\nconst BOLD = 'bold';\nconst INSIDE = 'inside';\nconst BOTTOM = 'bottom';\nclass ChartTheme {\n    constructor(options) {\n        options = deepMerge$1({}, options !== null && options !== void 0 ? options : {});\n        const { overrides = null, palette = null } = options;\n        const defaults = this.createChartConfigPerChartType(this.getDefaults());\n        if (overrides) {\n            const { common, cartesian, polar, hierarchy } = overrides;\n            const applyOverrides = (type, seriesTypes, overrideOpts) => {\n                if (overrideOpts) {\n                    defaults[type] = deepMerge$1(defaults[type], overrideOpts);\n                    seriesTypes.forEach((s) => {\n                        const seriesType = s;\n                        defaults[seriesType] = deepMerge$1(defaults[seriesType], overrideOpts);\n                    });\n                }\n            };\n            applyOverrides('common', Object.keys(defaults), common);\n            applyOverrides('cartesian', CHART_TYPES.cartesianTypes, cartesian);\n            applyOverrides('polar', CHART_TYPES.polarTypes, polar);\n            applyOverrides('hierarchy', CHART_TYPES.hierarchyTypes, hierarchy);\n            CHART_TYPES.seriesTypes.forEach((s) => {\n                const seriesType = s;\n                const chartConfig = overrides[seriesType];\n                if (chartConfig) {\n                    if (chartConfig.series) {\n                        chartConfig.series = { [seriesType]: chartConfig.series };\n                    }\n                    defaults[seriesType] = deepMerge$1(defaults[seriesType], chartConfig);\n                }\n            });\n        }\n        this.palette = palette !== null && palette !== void 0 ? palette : this.getPalette();\n        this.config = Object.freeze(defaults);\n    }\n    getPalette() {\n        return palette$8;\n    }\n    static getAxisDefaults() {\n        return {\n            top: {},\n            right: {},\n            bottom: {},\n            left: {},\n            thickness: 0,\n            title: {\n                enabled: false,\n                text: 'Axis Title',\n                fontStyle: undefined,\n                fontWeight: BOLD,\n                fontSize: 12,\n                fontFamily: this.fontFamily,\n                color: 'rgb(70, 70, 70)',\n            },\n            label: {\n                fontStyle: undefined,\n                fontWeight: undefined,\n                fontSize: 12,\n                fontFamily: this.fontFamily,\n                padding: 5,\n                rotation: undefined,\n                color: 'rgb(87, 87, 87)',\n                formatter: undefined,\n                autoRotate: false,\n                avoidCollisions: true,\n            },\n            line: {\n                width: 1,\n                color: 'rgb(195, 195, 195)',\n            },\n            tick: {\n                width: 1,\n                size: 6,\n                color: 'rgb(195, 195, 195)',\n            },\n            gridStyle: [\n                {\n                    stroke: 'rgb(219, 219, 219)',\n                    lineDash: [4, 2],\n                },\n            ],\n            crossLines: {\n                enabled: false,\n                fill: 'rgb(187,221,232)',\n                stroke: 'rgb(70,162,192)',\n                strokeWidth: 1,\n                label: {\n                    enabled: false,\n                    fontStyle: undefined,\n                    fontWeight: undefined,\n                    fontSize: 12,\n                    fontFamily: this.fontFamily,\n                    padding: 5,\n                    color: 'rgb(87, 87, 87)',\n                    rotation: undefined,\n                },\n            },\n        };\n    }\n    static getSeriesDefaults() {\n        return {\n            tooltip: {\n                enabled: true,\n                renderer: undefined,\n            },\n            visible: true,\n            showInLegend: true,\n            highlightStyle: {\n                item: {\n                    fill: 'yellow',\n                    fillOpacity: 1,\n                },\n                series: {\n                    dimOpacity: 1,\n                },\n                text: {\n                    color: 'black',\n                },\n            },\n            nodeClickRange: 'exact',\n        };\n    }\n    static getBarSeriesDefaults() {\n        return Object.assign(Object.assign({}, this.getSeriesDefaults()), { fillOpacity: 1, strokeOpacity: 1, normalizedTo: undefined, strokeWidth: 1, lineDash: [0], lineDashOffset: 0, label: {\n                enabled: false,\n                fontStyle: undefined,\n                fontWeight: undefined,\n                fontSize: 12,\n                fontFamily: this.fontFamily,\n                color: 'rgb(70, 70, 70)',\n                formatter: undefined,\n                placement: INSIDE,\n            }, shadow: {\n                enabled: false,\n                color: 'rgba(0, 0, 0, 0.5)',\n                xOffset: 3,\n                yOffset: 3,\n                blur: 5,\n            } });\n    }\n    static getLineSeriesDefaults() {\n        const seriesDefaults = this.getSeriesDefaults();\n        return Object.assign(Object.assign({}, seriesDefaults), { tooltip: Object.assign(Object.assign({}, seriesDefaults.tooltip), { format: undefined, position: {\n                    type: 'node',\n                } }) });\n    }\n    static getAreaSeriesDefaults() {\n        const seriesDefaults = this.getSeriesDefaults();\n        return Object.assign(Object.assign({}, seriesDefaults), { nodeClickRange: 'nearest', tooltip: Object.assign(Object.assign({}, seriesDefaults.tooltip), { position: {\n                    type: 'node',\n                } }) });\n    }\n    static getScatterSeriesDefaults() {\n        const seriesDefaults = this.getSeriesDefaults();\n        return Object.assign(Object.assign({}, seriesDefaults), { tooltip: Object.assign(Object.assign({}, seriesDefaults.tooltip), { position: {\n                    type: 'node',\n                } }) });\n    }\n    static getCartesianSeriesMarkerDefaults() {\n        return {\n            enabled: true,\n            shape: 'circle',\n            size: 6,\n            maxSize: 30,\n            strokeWidth: 1,\n            formatter: undefined,\n        };\n    }\n    static getCaptionWrappingDefaults() {\n        return 'hyphenate';\n    }\n    static getChartDefaults() {\n        return {\n            background: {\n                visible: true,\n                fill: 'white',\n            },\n            padding: {\n                top: 20,\n                right: 20,\n                bottom: 20,\n                left: 20,\n            },\n            title: {\n                enabled: false,\n                text: 'Title',\n                fontStyle: undefined,\n                fontWeight: BOLD,\n                fontSize: 16,\n                fontFamily: this.fontFamily,\n                color: 'rgb(70, 70, 70)',\n                wrapping: ChartTheme.getCaptionWrappingDefaults(),\n            },\n            subtitle: {\n                enabled: false,\n                text: 'Subtitle',\n                fontStyle: undefined,\n                fontWeight: undefined,\n                fontSize: 12,\n                fontFamily: this.fontFamily,\n                color: 'rgb(140, 140, 140)',\n                wrapping: ChartTheme.getCaptionWrappingDefaults(),\n            },\n            footnote: {\n                enabled: false,\n                text: 'Footnote',\n                fontStyle: undefined,\n                fontWeight: undefined,\n                fontSize: 12,\n                fontFamily: this.fontFamily,\n                color: 'rgb(140, 140, 140)',\n                spacing: 30,\n                wrapping: ChartTheme.getCaptionWrappingDefaults(),\n            },\n            legend: {\n                position: BOTTOM,\n                spacing: 20,\n                listeners: {},\n                item: {\n                    paddingX: 16,\n                    paddingY: 8,\n                    marker: {\n                        shape: undefined,\n                        size: 15,\n                        strokeWidth: 1,\n                        padding: 8,\n                    },\n                    label: {\n                        color: 'black',\n                        fontStyle: undefined,\n                        fontWeight: undefined,\n                        fontSize: 12,\n                        fontFamily: this.fontFamily,\n                        formatter: undefined,\n                    },\n                },\n                reverseOrder: false,\n                pagination: {\n                    marker: {\n                        size: 12,\n                    },\n                    activeStyle: {\n                        fill: 'rgb(70, 70, 70)',\n                    },\n                    inactiveStyle: {\n                        fill: 'rgb(219, 219, 219)',\n                    },\n                    highlightStyle: {\n                        fill: 'rgb(70, 70, 70)',\n                    },\n                    label: {\n                        color: 'rgb(70, 70, 70)',\n                    },\n                },\n            },\n            tooltip: {\n                enabled: true,\n                range: 'nearest',\n                delay: 0,\n            },\n            listeners: {},\n        };\n    }\n    createChartConfigPerChartType(config) {\n        const typeToAliases = {\n            cartesian: CHART_TYPES.cartesianTypes,\n            polar: CHART_TYPES.polarTypes,\n            hierarchy: CHART_TYPES.hierarchyTypes,\n            groupedCategory: [],\n        };\n        Object.entries(typeToAliases).forEach(([nextType, aliases]) => {\n            const type = nextType;\n            const typeDefaults = this.templateTheme(getChartDefaults(type));\n            aliases.forEach((next) => {\n                const alias = next;\n                if (!config[alias]) {\n                    config[alias] = deepMerge$1({}, config[type]);\n                    deepMerge$1(config[alias], typeDefaults);\n                }\n            });\n        });\n        return config;\n    }\n    getDefaults() {\n        const defaults = deepMerge$1({}, ChartTheme.defaults);\n        const getOverridesByType = (chartType, seriesTypes) => {\n            const result = this.templateTheme(getChartDefaults(chartType));\n            result.series = seriesTypes.reduce((obj, seriesType) => {\n                const template = getSeriesThemeTemplate(seriesType);\n                if (template) {\n                    obj[seriesType] = this.templateTheme(template);\n                }\n                return obj;\n            }, {});\n            if (chartType === 'cartesian') {\n                result.axes = CHART_AXES_TYPES.axesTypes.reduce((obj, axisType) => {\n                    const template = getAxisThemeTemplate(axisType);\n                    if (template) {\n                        obj[axisType] = this.templateTheme(template);\n                    }\n                    return obj;\n                }, {});\n            }\n            return result;\n        };\n        const extension = {\n            cartesian: getOverridesByType('cartesian', CHART_TYPES.cartesianTypes),\n            groupedCategory: getOverridesByType('cartesian', CHART_TYPES.cartesianTypes),\n            polar: getOverridesByType('polar', CHART_TYPES.polarTypes),\n            hierarchy: getOverridesByType('hierarchy', CHART_TYPES.hierarchyTypes),\n        };\n        return deepMerge$1(defaults, extension);\n    }\n    templateTheme(themeTemplate) {\n        const themeInstance = jsonMerge([themeTemplate]);\n        const { extensions, properties } = this.getTemplateParameters();\n        jsonWalk(themeInstance, (_, node) => {\n            if (node['__extends__']) {\n                const key = node['__extends__'];\n                const source = extensions.get(key);\n                if (source == null) {\n                    throw new Error('AG Charts - no template variable provided for: ' + key);\n                }\n                Object.assign(node, source, node);\n                delete node['__extends__'];\n            }\n            if (node['__overrides__']) {\n                const key = node['__overrides__'];\n                const source = extensions.get(key);\n                if (source == null) {\n                    throw new Error('AG Charts - no template variable provided for: ' + key);\n                }\n                Object.assign(node, source);\n                delete node['__overrides__'];\n            }\n            for (const [name, value] of Object.entries(node)) {\n                if (properties.has(value)) {\n                    node[name] = properties.get(value);\n                }\n            }\n        }, {});\n        return themeInstance;\n    }\n    getTemplateParameters() {\n        const extensions = new Map();\n        extensions.set(EXTENDS_SERIES_DEFAULTS, ChartTheme.getSeriesDefaults());\n        extensions.set(OVERRIDE_SERIES_LABEL_DEFAULTS, {});\n        const properties = new Map();\n        properties.set(DEFAULT_FONT_FAMILY, ChartTheme.fontFamily);\n        return {\n            extensions,\n            properties,\n        };\n    }\n    mergeWithParentDefaults(parentDefaults, defaults) {\n        return deepMerge$1(parentDefaults, defaults);\n    }\n}\nChartTheme.fontFamily = 'Verdana, sans-serif';\nChartTheme.cartesianDefaults = Object.assign(Object.assign({}, ChartTheme.getChartDefaults()), { axes: {\n        number: Object.assign({}, ChartTheme.getAxisDefaults()),\n        log: Object.assign(Object.assign({}, ChartTheme.getAxisDefaults()), { base: 10 }),\n        category: Object.assign(Object.assign({}, ChartTheme.getAxisDefaults()), { groupPaddingInner: 0.1, label: Object.assign(Object.assign({}, ChartTheme.getAxisDefaults().label), { autoRotate: true }) }),\n        groupedCategory: Object.assign({}, ChartTheme.getAxisDefaults()),\n        time: Object.assign({}, ChartTheme.getAxisDefaults()),\n    }, series: {\n        column: Object.assign({}, ChartTheme.getBarSeriesDefaults()),\n        bar: Object.assign({}, ChartTheme.getBarSeriesDefaults()),\n        line: Object.assign(Object.assign({}, ChartTheme.getLineSeriesDefaults()), { title: undefined, strokeWidth: 2, strokeOpacity: 1, lineDash: [0], lineDashOffset: 0, marker: Object.assign(Object.assign({}, ChartTheme.getCartesianSeriesMarkerDefaults()), { fillOpacity: 1, strokeOpacity: 1 }), label: {\n                enabled: false,\n                fontStyle: undefined,\n                fontWeight: undefined,\n                fontSize: 12,\n                fontFamily: ChartTheme.fontFamily,\n                color: 'rgb(70, 70, 70)',\n                formatter: undefined,\n            } }),\n        scatter: Object.assign(Object.assign({}, ChartTheme.getScatterSeriesDefaults()), { sizeName: 'Size', labelName: 'Label', marker: Object.assign({}, ChartTheme.getCartesianSeriesMarkerDefaults()), label: {\n                enabled: false,\n                fontStyle: undefined,\n                fontWeight: undefined,\n                fontSize: 12,\n                fontFamily: ChartTheme.fontFamily,\n                color: 'rgb(70, 70, 70)',\n            } }),\n        area: Object.assign(Object.assign({}, ChartTheme.getAreaSeriesDefaults()), { normalizedTo: undefined, fillOpacity: 0.8, strokeOpacity: 1, strokeWidth: 2, lineDash: [0], lineDashOffset: 0, shadow: {\n                enabled: false,\n                color: 'rgba(0, 0, 0, 0.5)',\n                xOffset: 3,\n                yOffset: 3,\n                blur: 5,\n            }, marker: Object.assign(Object.assign({}, ChartTheme.getCartesianSeriesMarkerDefaults()), { fillOpacity: 1, strokeOpacity: 1, enabled: false }), label: {\n                enabled: false,\n                fontStyle: undefined,\n                fontWeight: undefined,\n                fontSize: 12,\n                fontFamily: ChartTheme.fontFamily,\n                color: 'rgb(70, 70, 70)',\n                formatter: undefined,\n            } }),\n        histogram: Object.assign(Object.assign({}, ChartTheme.getSeriesDefaults()), { strokeWidth: 1, fillOpacity: 1, strokeOpacity: 1, lineDash: [0], lineDashOffset: 0, areaPlot: false, bins: undefined, aggregation: 'sum', label: {\n                enabled: false,\n                fontStyle: undefined,\n                fontWeight: undefined,\n                fontSize: 12,\n                fontFamily: ChartTheme.fontFamily,\n                color: 'rgb(70, 70, 70)',\n                formatter: undefined,\n            }, shadow: {\n                enabled: true,\n                color: 'rgba(0, 0, 0, 0.5)',\n                xOffset: 0,\n                yOffset: 0,\n                blur: 5,\n            } }),\n    } });\nChartTheme.polarDefaults = Object.assign(Object.assign({}, ChartTheme.getChartDefaults()), { series: {\n        pie: Object.assign(Object.assign({}, ChartTheme.getSeriesDefaults()), { title: {\n                enabled: true,\n                fontStyle: undefined,\n                fontWeight: 'bold',\n                fontSize: 14,\n                fontFamily: ChartTheme.fontFamily,\n                color: 'rgb(70, 70, 70)',\n                spacing: 0,\n            }, radiusKey: undefined, radiusName: undefined, calloutLabelKey: undefined, calloutLabelName: undefined, sectorLabelKey: undefined, sectorLabelName: undefined, calloutLabel: {\n                enabled: true,\n                fontStyle: undefined,\n                fontWeight: undefined,\n                fontSize: 12,\n                fontFamily: ChartTheme.fontFamily,\n                color: 'rgb(70, 70, 70)',\n                offset: 3,\n                minAngle: 0,\n            }, sectorLabel: {\n                enabled: true,\n                fontStyle: undefined,\n                fontWeight: undefined,\n                fontSize: 12,\n                fontFamily: ChartTheme.fontFamily,\n                color: 'rgb(70, 70, 70)',\n                positionOffset: 0,\n                positionRatio: 0.5,\n            }, calloutLine: {\n                length: 10,\n                strokeWidth: 2,\n            }, fillOpacity: 1, strokeOpacity: 1, strokeWidth: 1, lineDash: [0], lineDashOffset: 0, rotation: 0, outerRadiusOffset: 0, innerRadiusOffset: 0, shadow: {\n                enabled: false,\n                color: 'rgba(0, 0, 0, 0.5)',\n                xOffset: 3,\n                yOffset: 3,\n                blur: 5,\n            }, innerLabels: {\n                fontStyle: undefined,\n                fontWeight: undefined,\n                fontSize: 12,\n                fontFamily: ChartTheme.fontFamily,\n                color: 'rgb(70, 70, 70)',\n                margin: 2,\n            } }),\n    } });\nChartTheme.hierarchyDefaults = Object.assign(Object.assign({}, ChartTheme.getChartDefaults()), { series: {\n        treemap: Object.assign(Object.assign({}, ChartTheme.getSeriesDefaults()), { showInLegend: false, labelKey: 'label', sizeKey: 'size', colorKey: 'color', colorDomain: [-5, 5], colorRange: ['#cb4b3f', '#6acb64'], groupFill: '#272931', groupStroke: 'black', groupStrokeWidth: 1, tileStroke: 'black', tileStrokeWidth: 1, gradient: true, tileShadow: {\n                enabled: false,\n                color: 'rgba(0, 0, 0, 0.5)',\n                xOffset: 3,\n                yOffset: 3,\n                blur: 5,\n            }, labelShadow: {\n                enabled: true,\n                color: 'rgba(0, 0, 0, 0.4)',\n                xOffset: 1.5,\n                yOffset: 1.5,\n                blur: 5,\n            }, highlightGroups: true, nodePadding: 2, nodeGap: 0, title: {\n                enabled: true,\n                color: 'white',\n                fontStyle: undefined,\n                fontWeight: 'bold',\n                fontSize: 12,\n                fontFamily: 'Verdana, sans-serif',\n                padding: 2,\n            }, subtitle: {\n                enabled: true,\n                color: 'white',\n                fontStyle: undefined,\n                fontWeight: undefined,\n                fontSize: 9,\n                fontFamily: 'Verdana, sans-serif',\n                padding: 2,\n            }, labels: {\n                large: {\n                    enabled: true,\n                    fontStyle: undefined,\n                    fontWeight: 'bold',\n                    fontSize: 18,\n                    fontFamily: 'Verdana, sans-serif',\n                    color: 'white',\n                    wrapping: 'on-space',\n                },\n                medium: {\n                    enabled: true,\n                    fontStyle: undefined,\n                    fontWeight: 'bold',\n                    fontSize: 14,\n                    fontFamily: 'Verdana, sans-serif',\n                    color: 'white',\n                    wrapping: 'on-space',\n                },\n                small: {\n                    enabled: true,\n                    fontStyle: undefined,\n                    fontWeight: 'bold',\n                    fontSize: 10,\n                    fontFamily: 'Verdana, sans-serif',\n                    color: 'white',\n                    wrapping: 'on-space',\n                },\n                value: {\n                    style: {\n                        enabled: true,\n                        fontStyle: undefined,\n                        fontWeight: undefined,\n                        fontSize: 12,\n                        fontFamily: 'Verdana, sans-serif',\n                        color: 'white',\n                    },\n                },\n            } }),\n    } });\nChartTheme.defaults = {\n    cartesian: ChartTheme.cartesianDefaults,\n    groupedCategory: ChartTheme.cartesianDefaults,\n    polar: ChartTheme.polarDefaults,\n    hierarchy: ChartTheme.hierarchyDefaults,\n};\n\nclass DarkTheme extends ChartTheme {\n    constructor(options) {\n        super(options);\n    }\n    getDefaults() {\n        const fontColor = DarkTheme.fontColor;\n        const mutedFontColor = DarkTheme.mutedFontColor;\n        const axisDefaults = {\n            title: {\n                color: fontColor,\n            },\n            label: {\n                color: fontColor,\n            },\n            gridStyle: [\n                {\n                    stroke: 'rgb(88, 88, 88)',\n                    lineDash: [4, 2],\n                },\n            ],\n        };\n        const seriesLabelDefaults = {\n            label: {\n                color: fontColor,\n            },\n        };\n        const chartAxesDefaults = {\n            axes: {\n                number: Object.assign({}, axisDefaults),\n                category: Object.assign({}, axisDefaults),\n                time: Object.assign({}, axisDefaults),\n            },\n        };\n        const chartDefaults = {\n            background: {\n                fill: 'rgb(34, 38, 41)',\n            },\n            title: {\n                color: fontColor,\n            },\n            subtitle: {\n                color: mutedFontColor,\n            },\n            legend: {\n                item: {\n                    label: {\n                        color: fontColor,\n                    },\n                },\n                pagination: {\n                    activeStyle: {\n                        fill: fontColor,\n                    },\n                    inactiveStyle: {\n                        fill: mutedFontColor,\n                    },\n                    highlightStyle: {\n                        fill: fontColor,\n                    },\n                    label: {\n                        color: fontColor,\n                    },\n                },\n            },\n        };\n        const getOverridesByType = (seriesTypes) => {\n            return seriesTypes.reduce((obj, seriesType) => {\n                const template = getSeriesThemeTemplate(seriesType);\n                if (template) {\n                    obj[seriesType] = this.templateTheme(template);\n                }\n                return obj;\n            }, {});\n        };\n        return this.mergeWithParentDefaults(super.getDefaults(), {\n            cartesian: Object.assign(Object.assign(Object.assign({}, chartDefaults), chartAxesDefaults), { series: Object.assign({ line: Object.assign({}, seriesLabelDefaults), bar: Object.assign({}, seriesLabelDefaults), column: Object.assign({}, seriesLabelDefaults), histogram: Object.assign({}, seriesLabelDefaults) }, getOverridesByType(CHART_TYPES.cartesianTypes)) }),\n            groupedCategory: Object.assign(Object.assign(Object.assign({}, chartDefaults), chartAxesDefaults), { series: Object.assign({ bar: Object.assign({}, seriesLabelDefaults), column: Object.assign({}, seriesLabelDefaults), histogram: Object.assign({}, seriesLabelDefaults) }, getOverridesByType(CHART_TYPES.cartesianTypes)) }),\n            polar: Object.assign(Object.assign({}, chartDefaults), { series: Object.assign({ pie: {\n                        calloutLabel: {\n                            color: fontColor,\n                        },\n                        sectorLabel: {\n                            color: fontColor,\n                        },\n                        title: {\n                            color: fontColor,\n                        },\n                        innerLabels: {\n                            color: fontColor,\n                        },\n                    } }, getOverridesByType(CHART_TYPES.polarTypes)) }),\n            hierarchy: Object.assign(Object.assign({}, chartDefaults), { series: Object.assign({ treemap: {\n                        tileStroke: 'white',\n                        groupStroke: 'white',\n                        title: {\n                            color: fontColor,\n                        },\n                        subtitle: {\n                            color: mutedFontColor,\n                        },\n                        labels: {\n                            large: {\n                                color: fontColor,\n                            },\n                            medium: {\n                                color: fontColor,\n                            },\n                            small: {\n                                color: fontColor,\n                            },\n                            value: {\n                                style: {\n                                    color: fontColor,\n                                },\n                            },\n                        },\n                    } }, getOverridesByType(CHART_TYPES.hierarchyTypes)) }),\n        });\n    }\n    getTemplateParameters() {\n        const result = super.getTemplateParameters();\n        result.extensions.set(OVERRIDE_SERIES_LABEL_DEFAULTS, DarkTheme.seriesLabelDefaults.label);\n        return result;\n    }\n}\nDarkTheme.fontColor = 'rgb(200, 200, 200)';\nDarkTheme.mutedFontColor = 'rgb(150, 150, 150)';\nDarkTheme.seriesLabelDefaults = {\n    label: {\n        color: DarkTheme.fontColor,\n    },\n};\n\nconst palette$7 = {\n    fills: [\n        '#f44336',\n        '#e91e63',\n        '#9c27b0',\n        '#673ab7',\n        '#3f51b5',\n        '#2196f3',\n        '#03a9f4',\n        '#00bcd4',\n        '#009688',\n        '#4caf50',\n        '#8bc34a',\n        '#cddc39',\n        '#ffeb3b',\n        '#ffc107',\n        '#ff9800',\n        '#ff5722',\n    ],\n    strokes: [\n        '#ab2f26',\n        '#a31545',\n        '#6d1b7b',\n        '#482980',\n        '#2c397f',\n        '#1769aa',\n        '#0276ab',\n        '#008494',\n        '#00695f',\n        '#357a38',\n        '#618834',\n        '#909a28',\n        '#b3a429',\n        '#b38705',\n        '#b36a00',\n        '#b33d18',\n    ],\n};\nclass MaterialLight extends ChartTheme {\n    getPalette() {\n        return palette$7;\n    }\n}\n\nconst palette$6 = {\n    fills: [\n        '#f44336',\n        '#e91e63',\n        '#9c27b0',\n        '#673ab7',\n        '#3f51b5',\n        '#2196f3',\n        '#03a9f4',\n        '#00bcd4',\n        '#009688',\n        '#4caf50',\n        '#8bc34a',\n        '#cddc39',\n        '#ffeb3b',\n        '#ffc107',\n        '#ff9800',\n        '#ff5722',\n    ],\n    strokes: [\n        '#ab2f26',\n        '#a31545',\n        '#6d1b7b',\n        '#482980',\n        '#2c397f',\n        '#1769aa',\n        '#0276ab',\n        '#008494',\n        '#00695f',\n        '#357a38',\n        '#618834',\n        '#909a28',\n        '#b3a429',\n        '#b38705',\n        '#b36a00',\n        '#b33d18',\n    ],\n};\nclass MaterialDark extends DarkTheme {\n    getPalette() {\n        return palette$6;\n    }\n}\n\nconst palette$5 = {\n    fills: ['#c16068', '#a2bf8a', '#ebcc87', '#80a0c3', '#b58dae', '#85c0d1'],\n    strokes: ['#874349', '#718661', '#a48f5f', '#5a7088', '#7f637a', '#5d8692'],\n};\nclass PastelLight extends ChartTheme {\n    getPalette() {\n        return palette$5;\n    }\n}\n\nconst palette$4 = {\n    fills: ['#c16068', '#a2bf8a', '#ebcc87', '#80a0c3', '#b58dae', '#85c0d1'],\n    strokes: ['#874349', '#718661', '#a48f5f', '#5a7088', '#7f637a', '#5d8692'],\n};\nclass PastelDark extends DarkTheme {\n    getPalette() {\n        return palette$4;\n    }\n}\n\nconst palette$3 = {\n    fills: [\n        '#febe76',\n        '#ff7979',\n        '#badc58',\n        '#f9ca23',\n        '#f0932b',\n        '#eb4c4b',\n        '#6ab04c',\n        '#7ed6df',\n        '#e056fd',\n        '#686de0',\n    ],\n    strokes: [\n        '#b28553',\n        '#b35555',\n        '#829a3e',\n        '#ae8d19',\n        '#a8671e',\n        '#a43535',\n        '#4a7b35',\n        '#58969c',\n        '#9d3cb1',\n        '#494c9d',\n    ],\n};\nclass SolarLight extends ChartTheme {\n    getPalette() {\n        return palette$3;\n    }\n}\n\nconst palette$2 = {\n    fills: [\n        '#febe76',\n        '#ff7979',\n        '#badc58',\n        '#f9ca23',\n        '#f0932b',\n        '#eb4c4b',\n        '#6ab04c',\n        '#7ed6df',\n        '#e056fd',\n        '#686de0',\n    ],\n    strokes: [\n        '#b28553',\n        '#b35555',\n        '#829a3e',\n        '#ae8d19',\n        '#a8671e',\n        '#a43535',\n        '#4a7b35',\n        '#58969c',\n        '#9d3cb1',\n        '#494c9d',\n    ],\n};\nclass SolarDark extends DarkTheme {\n    getPalette() {\n        return palette$2;\n    }\n}\n\nconst palette$1 = {\n    fills: ['#5BC0EB', '#FDE74C', '#9BC53D', '#E55934', '#FA7921', '#fa3081'],\n    strokes: ['#4086a4', '#b1a235', '#6c8a2b', '#a03e24', '#af5517', '#af225a'],\n};\nclass VividLight extends ChartTheme {\n    getPalette() {\n        return palette$1;\n    }\n}\n\nconst palette = {\n    fills: ['#5BC0EB', '#FDE74C', '#9BC53D', '#E55934', '#FA7921', '#fa3081'],\n    strokes: ['#4086a4', '#b1a235', '#6c8a2b', '#a03e24', '#af5517', '#af225a'],\n};\nclass VividDark extends DarkTheme {\n    getPalette() {\n        return palette;\n    }\n}\n\nconst lightTheme = () => new ChartTheme();\nconst darkTheme = () => new DarkTheme();\nconst lightThemes = {\n    undefined: lightTheme,\n    null: lightTheme,\n    'ag-default': lightTheme,\n    'ag-material': () => new MaterialLight(),\n    'ag-pastel': () => new PastelLight(),\n    'ag-solar': () => new SolarLight(),\n    'ag-vivid': () => new VividLight(),\n};\nconst darkThemes = {\n    undefined: darkTheme,\n    null: darkTheme,\n    'ag-default-dark': darkTheme,\n    'ag-material-dark': () => new MaterialDark(),\n    'ag-pastel-dark': () => new PastelDark(),\n    'ag-solar-dark': () => new SolarDark(),\n    'ag-vivid-dark': () => new VividDark(),\n};\nconst themes$1 = Object.assign(Object.assign({}, darkThemes), lightThemes);\nfunction getChartTheme(value) {\n    var _a;\n    if (value instanceof ChartTheme) {\n        return value;\n    }\n    const stockTheme = themes$1[value];\n    if (stockTheme) {\n        return stockTheme();\n    }\n    value = value;\n    // Flatten recursive themes.\n    const overrides = [];\n    let palette;\n    while (typeof value === 'object') {\n        overrides.push((_a = value.overrides) !== null && _a !== void 0 ? _a : {});\n        // Use first palette found, they can't be merged.\n        if (value.palette && palette == null) {\n            palette = value.palette;\n        }\n        value = value.baseTheme;\n    }\n    overrides.reverse();\n    const flattenedTheme = Object.assign({ baseTheme: value, overrides: jsonMerge(overrides) }, (palette ? { palette } : {}));\n    if (flattenedTheme.baseTheme || flattenedTheme.overrides) {\n        const baseTheme = getChartTheme(flattenedTheme.baseTheme);\n        return new baseTheme.constructor(flattenedTheme);\n    }\n    return lightTheme();\n}\n\n/**\n * Groups the series options objects if they are of type `column` or `bar` and places them in an array at the index where the first instance of this series type was found.\n * Returns an array of arrays containing the ordered and grouped series options objects.\n */\nfunction groupSeriesByType(seriesOptions) {\n    var _a;\n    const indexMap = {};\n    const result = [];\n    for (const s of seriesOptions) {\n        if (s.type !== 'column' && s.type !== 'bar' && (s.type !== 'area' || s.stacked !== true)) {\n            // No need to use index for these cases.\n            result.push([s]);\n            continue;\n        }\n        const seriesType = (_a = s.type) !== null && _a !== void 0 ? _a : 'line';\n        const groupingKey = s.stacked ? 'stacked' : 'grouped';\n        const indexKey = `${seriesType}-${s.xKey}-${groupingKey}`;\n        if (indexMap[indexKey] == null) {\n            // Add indexed array to result on first addition.\n            indexMap[indexKey] = [];\n            result.push(indexMap[indexKey]);\n        }\n        indexMap[indexKey].push(s);\n    }\n    return result;\n}\nconst FAIL = Symbol();\nconst SKIP = Symbol();\nconst ARRAY_REDUCER = (prop) => (result, next) => {\n    var _a;\n    return result.concat(...((_a = next[prop]) !== null && _a !== void 0 ? _a : []));\n};\nconst BOOLEAN_OR_REDUCER = (prop, defaultValue) => (result, next) => {\n    if (typeof next[prop] === 'boolean') {\n        return (result !== null && result !== void 0 ? result : false) || next[prop];\n    }\n    return result !== null && result !== void 0 ? result : defaultValue;\n};\nconst DEFAULTING_ARRAY_REDUCER = (prop, defaultValue) => (result, next, idx, length) => {\n    var _a;\n    const sparse = defaultValue === SKIP || defaultValue === FAIL;\n    const nextValue = (_a = next[prop]) !== null && _a !== void 0 ? _a : defaultValue;\n    if (nextValue === FAIL) {\n        throw new Error(`AG Charts - missing value for property [${prop}] on series config.`);\n    }\n    else if (nextValue === SKIP) {\n        return result;\n    }\n    if (result.length === 0 && !sparse) {\n        // Pre-populate values on first invocation as we will only be invoked for series with a\n        // value specified.\n        while (result.length < length) {\n            result = result.concat(defaultValue);\n        }\n    }\n    if (!sparse) {\n        result[idx] = nextValue;\n        return result;\n    }\n    return result.concat(nextValue);\n};\nconst YKEYS_REDUCER = (prop, activationValue) => (result, next) => {\n    if (next[prop] === activationValue) {\n        return result.concat(...(next.yKey ? [next.yKey] : next.yKeys));\n    }\n    return result;\n};\nconst STACK_GROUPS_REDUCER = () => (result, next) => {\n    return Object.assign(Object.assign({}, result), { [next.stackGroup]: [...(result[next.stackGroup] || []), next.yKey] });\n};\nconst REDUCE_CONFIG = {\n    hideInChart: { outputProp: 'hideInChart', reducer: ARRAY_REDUCER('hideInChart'), start: [] },\n    hideInLegend: { outputProp: 'hideInLegend', reducer: ARRAY_REDUCER('hideInLegend'), start: [] },\n    yKey: { outputProp: 'yKeys', reducer: DEFAULTING_ARRAY_REDUCER('yKey', SKIP), start: [] },\n    fill: { outputProp: 'fills', reducer: DEFAULTING_ARRAY_REDUCER('fill', SKIP), start: [] },\n    stroke: { outputProp: 'strokes', reducer: DEFAULTING_ARRAY_REDUCER('stroke', SKIP), start: [] },\n    yName: { outputProp: 'yNames', reducer: DEFAULTING_ARRAY_REDUCER('yName', SKIP), start: [] },\n    visible: { outputProp: 'visibles', reducer: DEFAULTING_ARRAY_REDUCER('visible', true), start: [] },\n    legendItemName: {\n        outputProp: 'legendItemNames',\n        reducer: DEFAULTING_ARRAY_REDUCER('legendItemName', SKIP),\n        start: [],\n    },\n    grouped: {\n        outputProp: 'grouped',\n        reducer: BOOLEAN_OR_REDUCER('grouped'),\n        seriesType: ['bar', 'column'],\n        start: undefined,\n    },\n    showInLegend: {\n        outputProp: 'hideInLegend',\n        reducer: YKEYS_REDUCER('showInLegend', false),\n        seriesType: ['bar', 'column'],\n        start: [],\n    },\n    stackGroup: {\n        outputProp: 'stackGroups',\n        reducer: STACK_GROUPS_REDUCER(),\n        seriesType: ['bar', 'column'],\n        start: {},\n    },\n};\n/**\n * Takes an array of bar or area series options objects and returns a single object with the combined area series options.\n */\nfunction reduceSeries(series) {\n    const options = {};\n    series.forEach((s, idx) => {\n        Object.keys(s).forEach((prop) => {\n            var _a;\n            const reducerConfig = REDUCE_CONFIG[prop];\n            const defaultReduce = () => {\n                var _a, _b;\n                options[prop] = (_b = (_a = s[prop]) !== null && _a !== void 0 ? _a : options[prop]) !== null && _b !== void 0 ? _b : undefined;\n            };\n            if (!reducerConfig) {\n                defaultReduce();\n                return;\n            }\n            const { outputProp, reducer, start = undefined, seriesType = [s.type] } = reducerConfig;\n            if (!seriesType.includes(s.type)) {\n                defaultReduce();\n                return;\n            }\n            const result = reducer((_a = options[outputProp]) !== null && _a !== void 0 ? _a : start, s, idx, series.length);\n            if (result !== undefined) {\n                options[outputProp] = result;\n            }\n        });\n    });\n    return options;\n}\n/**\n * Transforms provided series options array into an array containing series options which are compatible with standalone charts series options.\n */\nfunction processSeriesOptions(seriesOptions) {\n    const result = [];\n    const preprocessed = seriesOptions.map((series) => {\n        var _a;\n        // Change the default for bar/columns when yKey is used to be grouped rather than stacked.\n        if ((series.type === 'bar' || series.type === 'column') && series.yKey != null && !series.stacked) {\n            return Object.assign(Object.assign({}, series), { grouped: (_a = series.grouped) !== null && _a !== void 0 ? _a : true });\n        }\n        return series;\n    });\n    for (const series of groupSeriesByType(preprocessed)) {\n        switch (series[0].type) {\n            case 'column':\n            case 'bar':\n            case 'area':\n                result.push(reduceSeries(series));\n                break;\n            case 'line':\n            default:\n                if (series.length > 1) {\n                    Logger.warn('unexpected grouping of series type: ' + series[0].type);\n                }\n                result.push(series[0]);\n                break;\n        }\n    }\n    return result;\n}\n\nfunction optionsType(input) {\n    var _a, _b, _c, _d;\n    return (_d = (_a = input.type) !== null && _a !== void 0 ? _a : (_c = (_b = input.series) === null || _b === void 0 ? void 0 : _b[0]) === null || _c === void 0 ? void 0 : _c.type) !== null && _d !== void 0 ? _d : 'line';\n}\nfunction isAgCartesianChartOptions(input) {\n    const specifiedType = optionsType(input);\n    if (specifiedType == null) {\n        return true;\n    }\n    if (specifiedType === 'cartesian') {\n        Logger.warnOnce(`type '${specifiedType}' is deprecated, use a series type instead`);\n        return true;\n    }\n    return CHART_TYPES.isCartesian(specifiedType);\n}\nfunction isAgHierarchyChartOptions(input) {\n    const specifiedType = optionsType(input);\n    if (specifiedType == null) {\n        return false;\n    }\n    if (specifiedType === 'hierarchy') {\n        Logger.warnOnce(`type '${specifiedType}' is deprecated, use a series type instead`);\n        return true;\n    }\n    return CHART_TYPES.isHierarchy(specifiedType);\n}\nfunction isAgPolarChartOptions(input) {\n    const specifiedType = optionsType(input);\n    if (specifiedType == null) {\n        return false;\n    }\n    if (specifiedType === 'polar') {\n        Logger.warnOnce(`type '${specifiedType}' is deprecated, use a series type instead`);\n        return true;\n    }\n    return CHART_TYPES.isPolar(specifiedType);\n}\nfunction isSeriesOptionType(input) {\n    if (input == null) {\n        return false;\n    }\n    return CHART_TYPES.has(input);\n}\nfunction isAxisOptionType(input) {\n    if (input == null) {\n        return false;\n    }\n    return CHART_AXES_TYPES.has(input);\n}\nfunction countArrayElements(input) {\n    let count = 0;\n    for (const next of input) {\n        if (next instanceof Array) {\n            count += countArrayElements(next);\n        }\n        if (next != null) {\n            count++;\n        }\n    }\n    return count;\n}\nfunction takeColours(context, colours, maxCount) {\n    const result = [];\n    for (let count = 0; count < maxCount; count++) {\n        result.push(colours[(count + context.colourIndex) % colours.length]);\n    }\n    return result;\n}\nconst noDataCloneMergeOptions = {\n    avoidDeepClone: ['data'],\n};\nfunction prepareOptions(newOptions, fallbackOptions) {\n    var _a, _b, _c, _d, _e, _f;\n    let options = jsonMerge([fallbackOptions, newOptions], noDataCloneMergeOptions);\n    sanityCheckOptions(options);\n    // Determine type and ensure it's explicit in the options config.\n    const userSuppliedOptionsType = options.type;\n    const type = optionsType(options);\n    const globalTooltipPositionOptions = (_b = (_a = options.tooltip) === null || _a === void 0 ? void 0 : _a.position) !== null && _b !== void 0 ? _b : {};\n    const checkSeriesType = (type) => {\n        if (type != null && !(isSeriesOptionType(type) || getSeriesDefaults(type))) {\n            throw new Error(`AG Charts - unknown series type: ${type}; expected one of: ${CHART_TYPES.seriesTypes}`);\n        }\n    };\n    checkSeriesType(type);\n    for (const { type: seriesType } of (_c = options.series) !== null && _c !== void 0 ? _c : []) {\n        if (seriesType == null)\n            continue;\n        checkSeriesType(seriesType);\n    }\n    options = Object.assign(Object.assign({}, options), { type });\n    let defaultSeriesType = 'line';\n    if (isAgCartesianChartOptions(options)) {\n        defaultSeriesType = 'line';\n    }\n    else if (isAgHierarchyChartOptions(options)) {\n        defaultSeriesType = 'treemap';\n    }\n    else if (isAgPolarChartOptions(options)) {\n        defaultSeriesType = 'pie';\n    }\n    let defaultOverrides = {};\n    const seriesDefaults = getSeriesDefaults(type);\n    if (seriesDefaults) {\n        defaultOverrides = seriesDefaults;\n    }\n    else if (type === 'bar') {\n        defaultOverrides = DEFAULT_BAR_CHART_OVERRIDES;\n    }\n    else if (type === 'scatter' || type === 'histogram') {\n        defaultOverrides = DEFAULT_SCATTER_HISTOGRAM_CHART_OVERRIDES;\n    }\n    else if (isAgCartesianChartOptions(options)) {\n        defaultOverrides = DEFAULT_CARTESIAN_CHART_OVERRIDES;\n    }\n    removeDisabledOptions(options);\n    const { context, mergedOptions, axesThemes, seriesThemes } = prepareMainOptions(defaultOverrides, options);\n    // Special cases where we have arrays of elements which need their own defaults.\n    // Apply series themes before calling processSeriesOptions() as it reduces and renames some\n    // properties, and in that case then cannot correctly have themes applied.\n    mergedOptions.series = processSeriesOptions(((_d = mergedOptions.series) !== null && _d !== void 0 ? _d : []).map((s) => {\n        let type = defaultSeriesType;\n        if (s.type) {\n            type = s.type;\n        }\n        else if (isSeriesOptionType(userSuppliedOptionsType)) {\n            type = userSuppliedOptionsType;\n        }\n        const mergedSeries = mergeSeriesOptions(s, type, seriesThemes, globalTooltipPositionOptions);\n        if (type === 'pie') {\n            preparePieOptions(seriesThemes.pie, s, mergedSeries);\n        }\n        return mergedSeries;\n    })).map((s) => prepareSeries(context, s));\n    const checkAxisType = (type) => {\n        const isAxisType = isAxisOptionType(type);\n        if (!isAxisType) {\n            Logger.warnOnce(`AG Charts - unknown axis type: ${type}; expected one of: ${CHART_AXES_TYPES.axesTypes}, ignoring.`);\n        }\n        return isAxisType;\n    };\n    if (isAgCartesianChartOptions(mergedOptions)) {\n        let validAxesTypes = true;\n        for (const { type: axisType } of (_e = mergedOptions.axes) !== null && _e !== void 0 ? _e : []) {\n            if (!checkAxisType(axisType)) {\n                validAxesTypes = false;\n            }\n        }\n        if (!validAxesTypes) {\n            mergedOptions.axes = defaultOverrides.axes;\n        }\n        else {\n            mergedOptions.axes = (_f = mergedOptions.axes) === null || _f === void 0 ? void 0 : _f.map((axis) => {\n                var _a, _b;\n                const axisType = axis.type;\n                const axesTheme = jsonMerge([\n                    axesThemes[axisType],\n                    (_b = axesThemes[axisType][(_a = axis.position) !== null && _a !== void 0 ? _a : 'unknown']) !== null && _b !== void 0 ? _b : {},\n                ]);\n                return prepareAxis(axis, axesTheme);\n            });\n        }\n        prepareLegendEnabledOption(options, mergedOptions);\n    }\n    prepareEnabledOptions(options, mergedOptions);\n    return mergedOptions;\n}\nfunction sanityCheckOptions(options) {\n    const deprecatedArrayProps = {\n        yKeys: 'yKey',\n        yNames: 'yName',\n    };\n    Object.entries(deprecatedArrayProps).forEach(([oldProp, newProp]) => {\n        var _a;\n        if ((_a = options.series) === null || _a === void 0 ? void 0 : _a.some((s) => s[oldProp] != null)) {\n            Logger.warnOnce(`property [series.${oldProp}] is deprecated, please use [series.${newProp}] and multiple series instead.`);\n        }\n    });\n}\nfunction mergeSeriesOptions(series, type, seriesThemes, globalTooltipPositionOptions) {\n    var _a, _b;\n    const mergedTooltipPosition = jsonMerge([Object.assign({}, globalTooltipPositionOptions), (_a = series.tooltip) === null || _a === void 0 ? void 0 : _a.position], noDataCloneMergeOptions);\n    const mergedSeries = jsonMerge([\n        (_b = seriesThemes[type]) !== null && _b !== void 0 ? _b : {},\n        Object.assign(Object.assign({}, series), { type, tooltip: Object.assign(Object.assign({}, series.tooltip), { position: mergedTooltipPosition }) }),\n    ], noDataCloneMergeOptions);\n    return mergedSeries;\n}\nfunction prepareMainOptions(defaultOverrides, options) {\n    const { theme, cleanedTheme, axesThemes, seriesThemes } = prepareTheme(options);\n    const context = { colourIndex: 0, palette: theme.palette };\n    const mergedOptions = jsonMerge([defaultOverrides, cleanedTheme, options], noDataCloneMergeOptions);\n    return { context, mergedOptions, axesThemes, seriesThemes };\n}\nfunction prepareTheme(options) {\n    var _a, _b;\n    const theme = getChartTheme(options.theme);\n    const themeConfig = theme.config[(_a = optionsType(options)) !== null && _a !== void 0 ? _a : 'cartesian'];\n    const seriesThemes = Object.entries(theme.config).reduce((result, [seriesType, { series }]) => {\n        result[seriesType] = series === null || series === void 0 ? void 0 : series[seriesType];\n        return result;\n    }, {});\n    return {\n        theme,\n        axesThemes: (_b = themeConfig['axes']) !== null && _b !== void 0 ? _b : {},\n        seriesThemes: seriesThemes,\n        cleanedTheme: jsonMerge([themeConfig, { axes: DELETE, series: DELETE }]),\n    };\n}\nfunction prepareSeries(context, input, ...defaults) {\n    const paletteOptions = calculateSeriesPalette(context, input);\n    // Part of the options interface, but not directly consumed by the series implementations.\n    const removeOptions = { stacked: DELETE };\n    const mergedResult = jsonMerge([...defaults, paletteOptions, input, removeOptions], noDataCloneMergeOptions);\n    return applySeriesTransform(mergedResult);\n}\nfunction calculateSeriesPalette(context, input) {\n    var _a;\n    const paletteOptions = {};\n    const { palette: { fills, strokes }, } = context;\n    const inputAny = input;\n    let colourCount = countArrayElements((_a = inputAny['yKeys']) !== null && _a !== void 0 ? _a : []) || 1; // Defaults to 1 if no yKeys.\n    switch (input.type) {\n        case 'pie':\n            colourCount = Math.max(fills.length, strokes.length);\n        // eslint-disable-next-line no-fallthrough\n        case 'area':\n        case 'bar':\n        case 'column':\n            paletteOptions.fills = takeColours(context, fills, colourCount);\n            paletteOptions.strokes = takeColours(context, strokes, colourCount);\n            break;\n        case 'histogram':\n            paletteOptions.fill = takeColours(context, fills, 1)[0];\n            paletteOptions.stroke = takeColours(context, strokes, 1)[0];\n            break;\n        case 'scatter':\n            paletteOptions.marker = {\n                stroke: takeColours(context, strokes, 1)[0],\n                fill: takeColours(context, fills, 1)[0],\n            };\n            break;\n        case 'line':\n            paletteOptions.stroke = takeColours(context, fills, 1)[0];\n            paletteOptions.marker = {\n                stroke: takeColours(context, strokes, 1)[0],\n                fill: takeColours(context, fills, 1)[0],\n            };\n            break;\n    }\n    context.colourIndex += colourCount;\n    return paletteOptions;\n}\nfunction prepareAxis(axis, axisTheme) {\n    // Remove redundant theme overload keys.\n    const removeOptions = { top: DELETE, bottom: DELETE, left: DELETE, right: DELETE };\n    // Special cross lines case where we have an array of cross line elements which need their own defaults.\n    if (axis.crossLines) {\n        if (!Array.isArray(axis.crossLines)) {\n            Logger.warn('axis[].crossLines should be an array.');\n            axis.crossLines = [];\n        }\n        const { crossLines: crossLinesTheme } = axisTheme;\n        axis.crossLines = axis.crossLines.map((crossLine) => jsonMerge([crossLinesTheme, crossLine]));\n    }\n    const cleanTheme = { crossLines: DELETE };\n    return jsonMerge([axisTheme, cleanTheme, axis, removeOptions], noDataCloneMergeOptions);\n}\nfunction removeDisabledOptions(options) {\n    // Remove configurations from all option objects with a `false` value for the `enabled` property.\n    jsonWalk(options, (_, visitingUserOpts) => {\n        if (!('enabled' in visitingUserOpts))\n            return;\n        if (visitingUserOpts.enabled === false) {\n            Object.entries(visitingUserOpts).forEach(([key]) => {\n                if (key === 'enabled')\n                    return;\n                delete visitingUserOpts[key];\n            });\n        }\n    }, { skip: ['data', 'theme'] });\n}\nfunction prepareLegendEnabledOption(options, mergedOptions) {\n    var _a, _b, _c, _d;\n    // Disable legend by default for single series cartesian charts\n    if (((_a = options.legend) === null || _a === void 0 ? void 0 : _a.enabled) !== undefined || ((_b = mergedOptions.legend) === null || _b === void 0 ? void 0 : _b.enabled) !== undefined) {\n        return;\n    }\n    (_c = mergedOptions.legend) !== null && _c !== void 0 ? _c : (mergedOptions.legend = {});\n    if (((_d = options.series) !== null && _d !== void 0 ? _d : []).length > 1) {\n        mergedOptions.legend.enabled = true;\n        return;\n    }\n    mergedOptions.legend.enabled = false;\n}\nfunction prepareEnabledOptions(options, mergedOptions) {\n    // Set `enabled: true` for all option objects where the user has provided values.\n    jsonWalk(options, (_, visitingUserOpts, visitingMergedOpts) => {\n        if (!visitingMergedOpts)\n            return;\n        const { _enabledFromTheme } = visitingMergedOpts;\n        if (_enabledFromTheme != null) {\n            // Do not apply special handling, base enablement on theme.\n            delete visitingMergedOpts._enabledFromTheme;\n        }\n        if (!('enabled' in visitingMergedOpts))\n            return;\n        if (_enabledFromTheme)\n            return;\n        if (visitingUserOpts.enabled == null) {\n            visitingMergedOpts.enabled = true;\n        }\n    }, { skip: ['data', 'theme'] }, mergedOptions);\n    // Cleanup any special properties.\n    jsonWalk(mergedOptions, (_, visitingMergedOpts) => {\n        if (visitingMergedOpts._enabledFromTheme != null) {\n            // Do not apply special handling, base enablement on theme.\n            delete visitingMergedOpts._enabledFromTheme;\n        }\n    }, { skip: ['data', 'theme'] });\n}\nfunction preparePieOptions(pieSeriesTheme, seriesOptions, mergedSeries) {\n    if (Array.isArray(seriesOptions.innerLabels)) {\n        mergedSeries.innerLabels = seriesOptions.innerLabels.map((ln) => {\n            return jsonMerge([pieSeriesTheme.innerLabels, ln]);\n        });\n    }\n    else {\n        mergedSeries.innerLabels = DELETE;\n    }\n}\n\nconst horizontalCrosslineTranslationDirections = {\n    top: { xTranslationDirection: 0, yTranslationDirection: -1 },\n    bottom: { xTranslationDirection: 0, yTranslationDirection: 1 },\n    left: { xTranslationDirection: -1, yTranslationDirection: 0 },\n    right: { xTranslationDirection: 1, yTranslationDirection: 0 },\n    topLeft: { xTranslationDirection: 1, yTranslationDirection: -1 },\n    topRight: { xTranslationDirection: -1, yTranslationDirection: -1 },\n    bottomLeft: { xTranslationDirection: 1, yTranslationDirection: 1 },\n    bottomRight: { xTranslationDirection: -1, yTranslationDirection: 1 },\n    inside: { xTranslationDirection: 0, yTranslationDirection: 0 },\n    insideLeft: { xTranslationDirection: 1, yTranslationDirection: 0 },\n    insideRight: { xTranslationDirection: -1, yTranslationDirection: 0 },\n    insideTop: { xTranslationDirection: 0, yTranslationDirection: 1 },\n    insideBottom: { xTranslationDirection: 0, yTranslationDirection: -1 },\n    insideTopLeft: { xTranslationDirection: 1, yTranslationDirection: 1 },\n    insideBottomLeft: { xTranslationDirection: 1, yTranslationDirection: -1 },\n    insideTopRight: { xTranslationDirection: -1, yTranslationDirection: 1 },\n    insideBottomRight: { xTranslationDirection: -1, yTranslationDirection: -1 },\n};\nconst verticalCrossLineTranslationDirections = {\n    top: { xTranslationDirection: 1, yTranslationDirection: 0 },\n    bottom: { xTranslationDirection: -1, yTranslationDirection: 0 },\n    left: { xTranslationDirection: 0, yTranslationDirection: -1 },\n    right: { xTranslationDirection: 0, yTranslationDirection: 1 },\n    topLeft: { xTranslationDirection: -1, yTranslationDirection: -1 },\n    topRight: { xTranslationDirection: -1, yTranslationDirection: 1 },\n    bottomLeft: { xTranslationDirection: 1, yTranslationDirection: -1 },\n    bottomRight: { xTranslationDirection: 1, yTranslationDirection: 1 },\n    inside: { xTranslationDirection: 0, yTranslationDirection: 0 },\n    insideLeft: { xTranslationDirection: 0, yTranslationDirection: 1 },\n    insideRight: { xTranslationDirection: 0, yTranslationDirection: -1 },\n    insideTop: { xTranslationDirection: -1, yTranslationDirection: 0 },\n    insideBottom: { xTranslationDirection: 1, yTranslationDirection: 0 },\n    insideTopLeft: { xTranslationDirection: -1, yTranslationDirection: 1 },\n    insideBottomLeft: { xTranslationDirection: 1, yTranslationDirection: 1 },\n    insideTopRight: { xTranslationDirection: -1, yTranslationDirection: -1 },\n    insideBottomRight: { xTranslationDirection: 1, yTranslationDirection: -1 },\n};\nfunction calculateLabelTranslation({ yDirection, padding = 0, position = 'top', bbox, }) {\n    const crossLineTranslationDirections = yDirection\n        ? horizontalCrosslineTranslationDirections\n        : verticalCrossLineTranslationDirections;\n    const { xTranslationDirection, yTranslationDirection } = crossLineTranslationDirections[position];\n    const w = yDirection ? bbox.width : bbox.height;\n    const h = yDirection ? bbox.height : bbox.width;\n    const xTranslation = xTranslationDirection * (padding + w / 2);\n    const yTranslation = yTranslationDirection * (padding + h / 2);\n    const result = {\n        xTranslation,\n        yTranslation,\n    };\n    return result;\n}\nfunction calculateLabelChartPadding({ yDirection, bbox, padding = 0, position = 'top', }) {\n    const chartPadding = {};\n    if (position.startsWith('inside'))\n        return chartPadding;\n    if (position === 'top' && !yDirection) {\n        chartPadding.top = padding + bbox.height;\n    }\n    else if (position === 'bottom' && !yDirection) {\n        chartPadding.bottom = padding + bbox.height;\n    }\n    else if (position === 'left' && yDirection) {\n        chartPadding.left = padding + bbox.width;\n    }\n    else if (position === 'right' && yDirection) {\n        chartPadding.right = padding + bbox.width;\n    }\n    return chartPadding;\n}\nconst POSITION_TOP_COORDINATES = ({ yDirection, xEnd, yStart, yEnd }) => {\n    if (yDirection) {\n        return { x: xEnd / 2, y: yStart };\n    }\n    else {\n        return { x: xEnd, y: !isNaN(yEnd) ? (yStart + yEnd) / 2 : yStart };\n    }\n};\nconst POSITION_LEFT_COORDINATES = ({ yDirection, xStart, xEnd, yStart, yEnd }) => {\n    if (yDirection) {\n        return { x: xStart, y: !isNaN(yEnd) ? (yStart + yEnd) / 2 : yStart };\n    }\n    else {\n        return { x: xEnd / 2, y: yStart };\n    }\n};\nconst POSITION_RIGHT_COORDINATES = ({ yDirection, xEnd, yStart, yEnd }) => {\n    if (yDirection) {\n        return { x: xEnd, y: !isNaN(yEnd) ? (yStart + yEnd) / 2 : yStart };\n    }\n    else {\n        return { x: xEnd / 2, y: !isNaN(yEnd) ? yEnd : yStart };\n    }\n};\nconst POSITION_BOTTOM_COORDINATES = ({ yDirection, xStart, xEnd, yStart, yEnd }) => {\n    if (yDirection) {\n        return { x: xEnd / 2, y: !isNaN(yEnd) ? yEnd : yStart };\n    }\n    else {\n        return { x: xStart, y: !isNaN(yEnd) ? (yStart + yEnd) / 2 : yStart };\n    }\n};\nconst POSITION_INSIDE_COORDINATES = ({ xEnd, yStart, yEnd }) => {\n    return { x: xEnd / 2, y: !isNaN(yEnd) ? (yStart + yEnd) / 2 : yStart };\n};\nconst POSITION_TOP_LEFT_COORDINATES = ({ yDirection, xStart, xEnd, yStart }) => {\n    if (yDirection) {\n        return { x: xStart / 2, y: yStart };\n    }\n    else {\n        return { x: xEnd, y: yStart };\n    }\n};\nconst POSITION_BOTTOM_LEFT_COORDINATES = ({ yDirection, xStart, yStart, yEnd }) => {\n    if (yDirection) {\n        return { x: xStart, y: !isNaN(yEnd) ? yEnd : yStart };\n    }\n    else {\n        return { x: xStart, y: yStart };\n    }\n};\nconst POSITION_TOP_RIGHT_COORDINATES = ({ yDirection, xEnd, yStart, yEnd }) => {\n    if (yDirection) {\n        return { x: xEnd, y: yStart };\n    }\n    else {\n        return { x: xEnd, y: !isNaN(yEnd) ? yEnd : yStart };\n    }\n};\nconst POSITION_BOTTOM_RIGHT_COORDINATES = ({ yDirection, xStart, xEnd, yStart, yEnd }) => {\n    if (yDirection) {\n        return { x: xEnd, y: !isNaN(yEnd) ? yEnd : yStart };\n    }\n    else {\n        return { x: xStart, y: !isNaN(yEnd) ? yEnd : yStart };\n    }\n};\nconst labeldDirectionHandling = {\n    top: { c: POSITION_TOP_COORDINATES },\n    bottom: { c: POSITION_BOTTOM_COORDINATES },\n    left: { c: POSITION_LEFT_COORDINATES },\n    right: { c: POSITION_RIGHT_COORDINATES },\n    topLeft: { c: POSITION_TOP_LEFT_COORDINATES },\n    topRight: { c: POSITION_TOP_RIGHT_COORDINATES },\n    bottomLeft: { c: POSITION_BOTTOM_LEFT_COORDINATES },\n    bottomRight: { c: POSITION_BOTTOM_RIGHT_COORDINATES },\n    inside: { c: POSITION_INSIDE_COORDINATES },\n    insideLeft: { c: POSITION_LEFT_COORDINATES },\n    insideRight: { c: POSITION_RIGHT_COORDINATES },\n    insideTop: { c: POSITION_TOP_COORDINATES },\n    insideBottom: { c: POSITION_BOTTOM_COORDINATES },\n    insideTopLeft: { c: POSITION_TOP_LEFT_COORDINATES },\n    insideBottomLeft: { c: POSITION_BOTTOM_LEFT_COORDINATES },\n    insideTopRight: { c: POSITION_TOP_RIGHT_COORDINATES },\n    insideBottomRight: { c: POSITION_BOTTOM_RIGHT_COORDINATES },\n};\n\nvar __decorate$1k = ( false) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nclass Range extends Shape {\n    constructor() {\n        super();\n        this.x1 = 0;\n        this.y1 = 0;\n        this.x2 = 0;\n        this.y2 = 0;\n        this.startLine = false;\n        this.endLine = false;\n        this.isRange = false;\n        this.restoreOwnStyles();\n    }\n    computeBBox() {\n        return new BBox(this.x1, this.y1, this.x2 - this.x1, this.y2 - this.y1);\n    }\n    isPointInPath(_x, _y) {\n        return false;\n    }\n    render(renderCtx) {\n        var _a;\n        const { ctx, forceRender, stats } = renderCtx;\n        if (this.dirty === RedrawType.NONE && !forceRender) {\n            if (stats)\n                stats.nodesSkipped += this.nodeCount.count;\n            return;\n        }\n        this.computeTransformMatrix();\n        this.matrix.toContext(ctx);\n        let { x1, y1, x2, y2 } = this;\n        x1 = this.align(x1);\n        y1 = this.align(y1);\n        x2 = this.align(x2);\n        y2 = this.align(y2);\n        const { fill, opacity, isRange } = this;\n        const fillActive = !!(isRange && fill);\n        if (fillActive) {\n            const { fillOpacity } = this;\n            ctx.fillStyle = fill;\n            ctx.globalAlpha = opacity * fillOpacity;\n            ctx.beginPath();\n            ctx.moveTo(x1, y1);\n            ctx.lineTo(x2, y1);\n            ctx.lineTo(x2, y2);\n            ctx.lineTo(x1, y2);\n            ctx.closePath();\n            ctx.fill();\n        }\n        const { stroke, strokeWidth, startLine, endLine } = this;\n        const strokeActive = !!((startLine || endLine) && stroke && strokeWidth);\n        if (strokeActive) {\n            const { strokeOpacity, lineDash, lineDashOffset, lineCap, lineJoin } = this;\n            ctx.strokeStyle = stroke;\n            ctx.globalAlpha = opacity * strokeOpacity;\n            ctx.lineWidth = strokeWidth;\n            if (lineDash) {\n                ctx.setLineDash(lineDash);\n            }\n            if (lineDashOffset) {\n                ctx.lineDashOffset = lineDashOffset;\n            }\n            if (lineCap) {\n                ctx.lineCap = lineCap;\n            }\n            if (lineJoin) {\n                ctx.lineJoin = lineJoin;\n            }\n            ctx.beginPath();\n            if (startLine) {\n                ctx.moveTo(x1, y1);\n                ctx.lineTo(x2, y1);\n            }\n            if (endLine) {\n                ctx.moveTo(x2, y2);\n                ctx.lineTo(x1, y2);\n            }\n            ctx.stroke();\n        }\n        (_a = this.fillShadow) === null || _a === void 0 ? void 0 : _a.markClean();\n        super.render(renderCtx);\n    }\n}\nRange.className = 'Range';\nRange.defaultStyles = Object.assign(Object.assign({}, Shape.defaultStyles), { strokeWidth: 1 });\n__decorate$1k([\n    SceneChangeDetection({ redraw: RedrawType.MINOR })\n], Range.prototype, \"x1\", void 0);\n__decorate$1k([\n    SceneChangeDetection({ redraw: RedrawType.MINOR })\n], Range.prototype, \"y1\", void 0);\n__decorate$1k([\n    SceneChangeDetection({ redraw: RedrawType.MINOR })\n], Range.prototype, \"x2\", void 0);\n__decorate$1k([\n    SceneChangeDetection({ redraw: RedrawType.MINOR })\n], Range.prototype, \"y2\", void 0);\n__decorate$1k([\n    SceneChangeDetection({ redraw: RedrawType.MINOR })\n], Range.prototype, \"startLine\", void 0);\n__decorate$1k([\n    SceneChangeDetection({ redraw: RedrawType.MINOR })\n], Range.prototype, \"endLine\", void 0);\n__decorate$1k([\n    SceneChangeDetection({ redraw: RedrawType.MINOR })\n], Range.prototype, \"isRange\", void 0);\n\nvar __decorate$1j = ( false) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nconst CROSSLINE_LABEL_POSITIONS = [\n    'top',\n    'left',\n    'right',\n    'bottom',\n    'topLeft',\n    'topRight',\n    'bottomLeft',\n    'bottomRight',\n    'inside',\n    'insideLeft',\n    'insideRight',\n    'insideTop',\n    'insideBottom',\n    'insideTopLeft',\n    'insideBottomLeft',\n    'insideTopRight',\n    'insideBottomRight',\n];\nconst OPT_CROSSLINE_LABEL_POSITION = predicateWithMessage((v, ctx) => OPTIONAL(v, ctx, (v) => CROSSLINE_LABEL_POSITIONS.includes(v)), `expecting an optional crossLine label position keyword such as 'topLeft', 'topRight' or 'inside'`);\nconst OPT_CROSSLINE_TYPE = predicateWithMessage((v, ctx) => OPTIONAL(v, ctx, (v) => v === 'range' || v === 'line'), `expecting a crossLine type keyword such as 'range' or 'line'`);\nclass CrossLineLabel {\n    constructor() {\n        this.enabled = undefined;\n        this.text = undefined;\n        this.fontStyle = undefined;\n        this.fontWeight = undefined;\n        this.fontSize = 14;\n        this.fontFamily = 'Verdana, sans-serif';\n        /**\n         * The padding between the label and the line.\n         */\n        this.padding = 5;\n        /**\n         * The color of the labels.\n         */\n        this.color = 'rgba(87, 87, 87, 1)';\n        this.position = undefined;\n        this.rotation = undefined;\n        this.parallel = undefined;\n    }\n}\n__decorate$1j([\n    Validate(OPT_BOOLEAN)\n], CrossLineLabel.prototype, \"enabled\", void 0);\n__decorate$1j([\n    Validate(OPT_STRING)\n], CrossLineLabel.prototype, \"text\", void 0);\n__decorate$1j([\n    Validate(OPT_FONT_STYLE)\n], CrossLineLabel.prototype, \"fontStyle\", void 0);\n__decorate$1j([\n    Validate(OPT_FONT_WEIGHT)\n], CrossLineLabel.prototype, \"fontWeight\", void 0);\n__decorate$1j([\n    Validate(NUMBER(0))\n], CrossLineLabel.prototype, \"fontSize\", void 0);\n__decorate$1j([\n    Validate(STRING)\n], CrossLineLabel.prototype, \"fontFamily\", void 0);\n__decorate$1j([\n    Validate(NUMBER(0))\n], CrossLineLabel.prototype, \"padding\", void 0);\n__decorate$1j([\n    Validate(OPT_COLOR_STRING)\n], CrossLineLabel.prototype, \"color\", void 0);\n__decorate$1j([\n    Validate(OPT_CROSSLINE_LABEL_POSITION)\n], CrossLineLabel.prototype, \"position\", void 0);\n__decorate$1j([\n    Validate(OPT_NUMBER(-360, 360))\n], CrossLineLabel.prototype, \"rotation\", void 0);\n__decorate$1j([\n    Validate(OPT_BOOLEAN)\n], CrossLineLabel.prototype, \"parallel\", void 0);\nclass CrossLine {\n    constructor() {\n        this.id = createId$1(this);\n        this.enabled = undefined;\n        this.type = undefined;\n        this.range = undefined;\n        this.value = undefined;\n        this.fill = undefined;\n        this.fillOpacity = undefined;\n        this.stroke = undefined;\n        this.strokeWidth = undefined;\n        this.strokeOpacity = undefined;\n        this.lineDash = undefined;\n        this.label = new CrossLineLabel();\n        this.scale = undefined;\n        this.clippedRange = [-Infinity, Infinity];\n        this.gridLength = 0;\n        this.sideFlag = -1;\n        this.parallelFlipRotation = 0;\n        this.regularFlipRotation = 0;\n        this.direction = ChartAxisDirection.X;\n        this.group = new Group({ name: `${this.id}`, layer: true, zIndex: CrossLine.LINE_LAYER_ZINDEX });\n        this.crossLineRange = new Range();\n        this.crossLineLabel = new Text();\n        this.labelPoint = undefined;\n        this.data = [];\n        this.startLine = false;\n        this.endLine = false;\n        this.isRange = false;\n        const { group, crossLineRange, crossLineLabel } = this;\n        group.append([crossLineRange, crossLineLabel]);\n        crossLineRange.pointerEvents = PointerEvents.None;\n    }\n    update(visible) {\n        if (!this.enabled) {\n            return;\n        }\n        this.group.visible = visible;\n        if (!visible) {\n            return;\n        }\n        const dataCreated = this.createNodeData();\n        if (!dataCreated) {\n            this.group.visible = false;\n            return;\n        }\n        this.updateNodes();\n        this.group.zIndex = this.getZIndex(this.isRange);\n    }\n    updateNodes() {\n        this.updateRangeNode();\n        if (this.label.enabled) {\n            this.updateLabel();\n            this.positionLabel();\n        }\n    }\n    createNodeData() {\n        var _a, _b;\n        const { scale, gridLength, sideFlag, direction, label: { position = 'top' }, clippedRange, strokeWidth = 0, } = this;\n        if (!scale) {\n            return false;\n        }\n        const bandwidth = (_a = scale.bandwidth) !== null && _a !== void 0 ? _a : 0;\n        const clippedRangeClamper = (x) => Math.max(Math.min(...clippedRange), Math.min(Math.max(...clippedRange), x));\n        const [xStart, xEnd] = [0, sideFlag * gridLength];\n        let [yStart, yEnd] = this.getRange();\n        let [clampedYStart, clampedYEnd] = [\n            Number(scale.convert(yStart, { strict: false })),\n            scale.convert(yEnd, { strict: false }) + bandwidth,\n        ];\n        clampedYStart = clippedRangeClamper(clampedYStart);\n        clampedYEnd = clippedRangeClamper(clampedYEnd);\n        [yStart, yEnd] = [Number(scale.convert(yStart)), scale.convert(yEnd) + bandwidth];\n        const validRange = !isNaN(clampedYStart) &&\n            !isNaN(clampedYEnd) &&\n            (yStart === clampedYStart || yEnd === clampedYEnd || clampedYStart !== clampedYEnd) &&\n            Math.abs(clampedYEnd - clampedYStart) > 0;\n        if (validRange) {\n            const reverse = clampedYStart !== Math.min(clampedYStart, clampedYEnd);\n            if (reverse) {\n                [clampedYStart, clampedYEnd] = [\n                    Math.min(clampedYStart, clampedYEnd),\n                    Math.max(clampedYStart, clampedYEnd),\n                ];\n                [yStart, yEnd] = [yEnd, yStart];\n            }\n        }\n        this.isRange = validRange;\n        this.startLine = !isNaN(yStart) && strokeWidth > 0 && yStart === clampedYStart;\n        this.endLine = !isNaN(yEnd) && strokeWidth > 0 && yEnd === clampedYEnd;\n        if (!validRange && !this.startLine && !this.endLine) {\n            return false;\n        }\n        this.data = [clampedYStart, clampedYEnd];\n        if (this.label.enabled) {\n            const yDirection = direction === ChartAxisDirection.Y;\n            const { c = POSITION_TOP_COORDINATES } = (_b = labeldDirectionHandling[position]) !== null && _b !== void 0 ? _b : {};\n            const { x: labelX, y: labelY } = c({ yDirection, xStart, xEnd, yStart: clampedYStart, yEnd: clampedYEnd });\n            this.labelPoint = {\n                x: labelX,\n                y: labelY,\n            };\n        }\n        return true;\n    }\n    updateRangeNode() {\n        var _a;\n        const { crossLineRange, sideFlag, gridLength, data, startLine, endLine, isRange, fill, fillOpacity, stroke, strokeWidth, lineDash, } = this;\n        crossLineRange.x1 = 0;\n        crossLineRange.x2 = sideFlag * gridLength;\n        crossLineRange.y1 = data[0];\n        crossLineRange.y2 = data[1];\n        crossLineRange.startLine = startLine;\n        crossLineRange.endLine = endLine;\n        crossLineRange.isRange = isRange;\n        crossLineRange.fill = fill;\n        crossLineRange.fillOpacity = fillOpacity !== null && fillOpacity !== void 0 ? fillOpacity : 1;\n        crossLineRange.stroke = stroke;\n        crossLineRange.strokeWidth = strokeWidth !== null && strokeWidth !== void 0 ? strokeWidth : 1;\n        crossLineRange.strokeOpacity = (_a = this.strokeOpacity) !== null && _a !== void 0 ? _a : 1;\n        crossLineRange.lineDash = lineDash;\n    }\n    updateLabel() {\n        const { crossLineLabel, label } = this;\n        if (!label.text) {\n            return;\n        }\n        crossLineLabel.fontStyle = label.fontStyle;\n        crossLineLabel.fontWeight = label.fontWeight;\n        crossLineLabel.fontSize = label.fontSize;\n        crossLineLabel.fontFamily = label.fontFamily;\n        crossLineLabel.fill = label.color;\n        crossLineLabel.text = label.text;\n    }\n    positionLabel() {\n        const { crossLineLabel, labelPoint: { x = undefined, y = undefined } = {}, label: { parallel, rotation, position = 'top', padding = 0 }, direction, parallelFlipRotation, regularFlipRotation, } = this;\n        if (x === undefined || y === undefined) {\n            return;\n        }\n        const { defaultRotation, configuredRotation } = calculateLabelRotation({\n            rotation,\n            parallel,\n            regularFlipRotation,\n            parallelFlipRotation,\n        });\n        crossLineLabel.rotation = defaultRotation + configuredRotation;\n        crossLineLabel.textBaseline = 'middle';\n        crossLineLabel.textAlign = 'center';\n        const bbox = this.computeLabelBBox();\n        if (!bbox) {\n            return;\n        }\n        const yDirection = direction === ChartAxisDirection.Y;\n        const { xTranslation, yTranslation } = calculateLabelTranslation({ yDirection, padding, position, bbox });\n        crossLineLabel.translationX = x + xTranslation;\n        crossLineLabel.translationY = y + yTranslation;\n    }\n    getZIndex(isRange = false) {\n        if (isRange) {\n            return CrossLine.RANGE_LAYER_ZINDEX;\n        }\n        return CrossLine.LINE_LAYER_ZINDEX;\n    }\n    getRange() {\n        const { value, range, scale } = this;\n        const isContinuous = scale instanceof ContinuousScale;\n        let [start, end] = range !== null && range !== void 0 ? range : [value, undefined];\n        if (!isContinuous && end === undefined) {\n            end = start;\n        }\n        start = checkDatum(start, isContinuous) != null ? start : undefined;\n        end = checkDatum(end, isContinuous) != null ? end : undefined;\n        if (isContinuous && start === end) {\n            end = undefined;\n        }\n        if (start === undefined && end !== undefined) {\n            start = end;\n            end = undefined;\n        }\n        return [start, end];\n    }\n    computeLabelBBox() {\n        return this.crossLineLabel.computeTransformedBBox();\n    }\n    calculatePadding(padding) {\n        var _a, _b, _c, _d, _e, _f, _g, _h;\n        const { isRange, startLine, endLine, direction, label: { padding: labelPadding = 0, position = 'top' }, } = this;\n        if (!isRange && !startLine && !endLine) {\n            return;\n        }\n        const crossLineLabelBBox = this.computeLabelBBox();\n        const labelX = crossLineLabelBBox === null || crossLineLabelBBox === void 0 ? void 0 : crossLineLabelBBox.x;\n        const labelY = crossLineLabelBBox === null || crossLineLabelBBox === void 0 ? void 0 : crossLineLabelBBox.y;\n        if (!crossLineLabelBBox || labelX == undefined || labelY == undefined) {\n            return;\n        }\n        const chartPadding = calculateLabelChartPadding({\n            yDirection: direction === ChartAxisDirection.Y,\n            padding: labelPadding,\n            position,\n            bbox: crossLineLabelBBox,\n        });\n        padding.left = Math.max((_a = padding.left) !== null && _a !== void 0 ? _a : 0, (_b = chartPadding.left) !== null && _b !== void 0 ? _b : 0);\n        padding.right = Math.max((_c = padding.right) !== null && _c !== void 0 ? _c : 0, (_d = chartPadding.right) !== null && _d !== void 0 ? _d : 0);\n        padding.top = Math.max((_e = padding.top) !== null && _e !== void 0 ? _e : 0, (_f = chartPadding.top) !== null && _f !== void 0 ? _f : 0);\n        padding.bottom = Math.max((_g = padding.bottom) !== null && _g !== void 0 ? _g : 0, (_h = chartPadding.bottom) !== null && _h !== void 0 ? _h : 0);\n    }\n}\nCrossLine.LINE_LAYER_ZINDEX = Layers.SERIES_CROSSLINE_LINE_ZINDEX;\nCrossLine.RANGE_LAYER_ZINDEX = Layers.SERIES_CROSSLINE_RANGE_ZINDEX;\nCrossLine.className = 'CrossLine';\n__decorate$1j([\n    Validate(OPT_BOOLEAN)\n], CrossLine.prototype, \"enabled\", void 0);\n__decorate$1j([\n    Validate(OPT_CROSSLINE_TYPE)\n], CrossLine.prototype, \"type\", void 0);\n__decorate$1j([\n    Validate(OPT_ARRAY(2))\n], CrossLine.prototype, \"range\", void 0);\n__decorate$1j([\n    Validate(OPT_COLOR_STRING)\n], CrossLine.prototype, \"fill\", void 0);\n__decorate$1j([\n    Validate(OPT_NUMBER(0, 1))\n], CrossLine.prototype, \"fillOpacity\", void 0);\n__decorate$1j([\n    Validate(OPT_COLOR_STRING)\n], CrossLine.prototype, \"stroke\", void 0);\n__decorate$1j([\n    Validate(OPT_NUMBER())\n], CrossLine.prototype, \"strokeWidth\", void 0);\n__decorate$1j([\n    Validate(OPT_NUMBER(0, 1))\n], CrossLine.prototype, \"strokeOpacity\", void 0);\n__decorate$1j([\n    Validate(OPT_LINE_DASH)\n], CrossLine.prototype, \"lineDash\", void 0);\n\nconst JSON_APPLY_PLUGINS = {\n    constructors: {},\n};\nconst JSON_APPLY_OPTIONS = {\n    constructors: {\n        title: Caption,\n        subtitle: Caption,\n        footnote: Caption,\n        shadow: DropShadow,\n        innerCircle: DoughnutInnerCircle,\n        'axes[].crossLines[]': CrossLine,\n        'axes[].title': AxisTitle,\n        'series[].innerLabels[]': DoughnutInnerLabel,\n    },\n    allowedTypes: {\n        'legend.pagination.marker.shape': ['primitive', 'function'],\n        'series[].marker.shape': ['primitive', 'function'],\n        'axis[].tick.count': ['primitive', 'class-instance'],\n    },\n};\nfunction getJsonApplyOptions() {\n    return {\n        constructors: Object.assign(Object.assign({}, JSON_APPLY_OPTIONS.constructors), JSON_APPLY_PLUGINS.constructors),\n        allowedTypes: Object.assign({}, JSON_APPLY_OPTIONS.allowedTypes),\n    };\n}\n\nclass BaseModuleInstance {\n    constructor() {\n        this.destroyFns = [];\n    }\n    destroy() {\n        for (const destroyFn of this.destroyFns) {\n            destroyFn();\n        }\n    }\n}\nconst REGISTERED_MODULES = [];\nfunction registerModule(module) {\n    const otherModule = REGISTERED_MODULES.find((other) => {\n        return (module.type === other.type &&\n            module.optionsKey === other.optionsKey &&\n            module.identifier === other.identifier);\n    });\n    if (otherModule) {\n        if (module.packageType === 'enterprise' && otherModule.packageType === 'community') {\n            // Replace the community module with an enterprise version\n            const index = REGISTERED_MODULES.indexOf(otherModule);\n            REGISTERED_MODULES.splice(index, 1, module);\n        }\n    }\n    else {\n        // Simply register the module\n        REGISTERED_MODULES.push(module);\n    }\n}\n\nvar __decorate$1i = ( false) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nclass RangeHandle$1 extends Path {\n    constructor() {\n        super(...arguments);\n        this._fill = '#f2f2f2';\n        this._stroke = '#999999';\n        this._strokeWidth = 1;\n        this._lineCap = 'square';\n        this._centerX = 0;\n        this._centerY = 0;\n        // Use an even number for better looking results.\n        this._width = 8;\n        // Use an even number for better looking results.\n        this._gripLineGap = 2;\n        // Use an even number for better looking results.\n        this._gripLineLength = 8;\n        this._height = 16;\n    }\n    set centerX(value) {\n        if (this._centerX !== value) {\n            this._centerX = value;\n            this.dirtyPath = true;\n        }\n    }\n    get centerX() {\n        return this._centerX;\n    }\n    set centerY(value) {\n        if (this._centerY !== value) {\n            this._centerY = value;\n            this.dirtyPath = true;\n        }\n    }\n    get centerY() {\n        return this._centerY;\n    }\n    set width(value) {\n        if (this._width !== value) {\n            this._width = value;\n            this.dirtyPath = true;\n        }\n    }\n    get width() {\n        return this._width;\n    }\n    set gripLineGap(value) {\n        if (this._gripLineGap !== value) {\n            this._gripLineGap = value;\n            this.dirtyPath = true;\n        }\n    }\n    get gripLineGap() {\n        return this._gripLineGap;\n    }\n    set gripLineLength(value) {\n        if (this._gripLineLength !== value) {\n            this._gripLineLength = value;\n            this.dirtyPath = true;\n        }\n    }\n    get gripLineLength() {\n        return this._gripLineLength;\n    }\n    set height(value) {\n        if (this._height !== value) {\n            this._height = value;\n            this.dirtyPath = true;\n        }\n    }\n    get height() {\n        return this._height;\n    }\n    computeBBox() {\n        const { centerX, centerY, width, height } = this;\n        const x = centerX - width / 2;\n        const y = centerY - height / 2;\n        return new BBox(x, y, width, height);\n    }\n    isPointInPath(x, y) {\n        const point = this.transformPoint(x, y);\n        const bbox = this.computeBBox();\n        return bbox.containsPoint(point.x, point.y);\n    }\n    updatePath() {\n        const { path, centerX, centerY, width, height } = this;\n        path.clear();\n        const x = centerX - width / 2;\n        const y = centerY - height / 2;\n        const ax = this.align(x);\n        const ay = this.align(y);\n        const axw = ax + this.align(x, width);\n        const ayh = ay + this.align(y, height);\n        // Handle.\n        path.moveTo(ax, ay);\n        path.lineTo(axw, ay);\n        path.lineTo(axw, ayh);\n        path.lineTo(ax, ayh);\n        path.lineTo(ax, ay);\n        // Grip lines.\n        const dx = this.gripLineGap / 2;\n        const dy = this.gripLineLength / 2;\n        path.moveTo(this.align(centerX - dx), this.align(centerY - dy));\n        path.lineTo(this.align(centerX - dx), this.align(centerY + dy));\n        path.moveTo(this.align(centerX + dx), this.align(centerY - dy));\n        path.lineTo(this.align(centerX + dx), this.align(centerY + dy));\n    }\n}\nRangeHandle$1.className = 'RangeHandle';\n__decorate$1i([\n    Validate(COLOR_STRING)\n], RangeHandle$1.prototype, \"_fill\", void 0);\n__decorate$1i([\n    Validate(COLOR_STRING)\n], RangeHandle$1.prototype, \"_stroke\", void 0);\n__decorate$1i([\n    Validate(NUMBER(0))\n], RangeHandle$1.prototype, \"_strokeWidth\", void 0);\n__decorate$1i([\n    Validate(LINE_CAP)\n], RangeHandle$1.prototype, \"_lineCap\", void 0);\n__decorate$1i([\n    Validate(NUMBER(0))\n], RangeHandle$1.prototype, \"_width\", void 0);\n__decorate$1i([\n    Validate(NUMBER(0))\n], RangeHandle$1.prototype, \"_gripLineGap\", void 0);\n__decorate$1i([\n    Validate(NUMBER(0))\n], RangeHandle$1.prototype, \"_gripLineLength\", void 0);\n__decorate$1i([\n    Validate(NUMBER(0))\n], RangeHandle$1.prototype, \"_height\", void 0);\n\nvar __decorate$1h = ( false) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nclass RangeMask extends Path {\n    constructor() {\n        super(...arguments);\n        this._stroke = '#999999';\n        this._strokeWidth = 1;\n        this._fill = '#999999';\n        this._fillOpacity = 0.2;\n        this._lineCap = 'square';\n        this._x = 0;\n        this._y = 0;\n        this._width = 200;\n        this._height = 30;\n        this.minRange = 0.05;\n        this._min = 0;\n        this._max = 1;\n    }\n    set x(value) {\n        if (this._x !== value) {\n            this._x = value;\n            this.dirtyPath = true;\n        }\n    }\n    get x() {\n        return this._x;\n    }\n    set y(value) {\n        if (this._y !== value) {\n            this._y = value;\n            this.dirtyPath = true;\n        }\n    }\n    get y() {\n        return this._y;\n    }\n    set width(value) {\n        if (this._width !== value) {\n            this._width = value;\n            this.dirtyPath = true;\n        }\n    }\n    get width() {\n        return this._width;\n    }\n    set height(value) {\n        if (this._height !== value) {\n            this._height = value;\n            this.dirtyPath = true;\n        }\n    }\n    get height() {\n        return this._height;\n    }\n    set min(value) {\n        var _a;\n        value = Math.min(Math.max(value, 0), this.max - this.minRange);\n        if (isNaN(value)) {\n            return;\n        }\n        if (this._min !== value) {\n            this._min = value;\n            this.dirtyPath = true;\n            (_a = this.onRangeChange) === null || _a === void 0 ? void 0 : _a.call(this);\n        }\n    }\n    get min() {\n        return this._min;\n    }\n    set max(value) {\n        var _a;\n        value = Math.max(Math.min(value, 1), this.min + this.minRange);\n        if (isNaN(value)) {\n            return;\n        }\n        if (this._max !== value) {\n            this._max = value;\n            this.dirtyPath = true;\n            (_a = this.onRangeChange) === null || _a === void 0 ? void 0 : _a.call(this);\n        }\n    }\n    get max() {\n        return this._max;\n    }\n    computeBBox() {\n        const { x, y, width, height } = this;\n        return new BBox(x, y, width, height);\n    }\n    computeVisibleRangeBBox() {\n        const { x, y, width, height, min, max } = this;\n        const minX = x + width * min;\n        const maxX = x + width * max;\n        return new BBox(minX, y, maxX - minX, height);\n    }\n    updatePath() {\n        const { path, x, y, width, height, min, max } = this;\n        path.clear();\n        const ax = this.align(x);\n        const ay = this.align(y);\n        const axw = ax + this.align(x, width);\n        const ayh = ay + this.align(y, height);\n        // Whole range.\n        path.moveTo(ax, ay);\n        path.lineTo(axw, ay);\n        path.lineTo(axw, ayh);\n        path.lineTo(ax, ayh);\n        path.lineTo(ax, ay);\n        const minX = this.align(x + width * min);\n        const maxX = this.align(x + width * max);\n        // Visible range.\n        path.moveTo(minX, ay);\n        path.lineTo(minX, ayh);\n        path.lineTo(maxX, ayh);\n        path.lineTo(maxX, ay);\n        path.lineTo(minX, ay);\n    }\n}\nRangeMask.className = 'RangeMask';\n__decorate$1h([\n    Validate(COLOR_STRING)\n], RangeMask.prototype, \"_stroke\", void 0);\n__decorate$1h([\n    Validate(NUMBER(0))\n], RangeMask.prototype, \"_strokeWidth\", void 0);\n__decorate$1h([\n    Validate(COLOR_STRING)\n], RangeMask.prototype, \"_fill\", void 0);\n__decorate$1h([\n    Validate(NUMBER(0, 1))\n], RangeMask.prototype, \"_fillOpacity\", void 0);\n__decorate$1h([\n    Validate(LINE_CAP)\n], RangeMask.prototype, \"_lineCap\", void 0);\n__decorate$1h([\n    Validate(NUMBER(0))\n], RangeMask.prototype, \"_width\", void 0);\n__decorate$1h([\n    Validate(NUMBER(0))\n], RangeMask.prototype, \"_height\", void 0);\n__decorate$1h([\n    Validate(NUMBER())\n], RangeMask.prototype, \"_min\", void 0);\n__decorate$1h([\n    Validate(NUMBER())\n], RangeMask.prototype, \"_max\", void 0);\n\nclass RangeSelector extends Group {\n    constructor() {\n        super({ name: 'rangeSelectorGroup' });\n        this.minHandle = new RangeHandle$1();\n        this.maxHandle = new RangeHandle$1();\n        this.mask = (() => {\n            const { x, y, width, height, min, max } = RangeSelector.defaults;\n            const mask = new RangeMask();\n            mask.x = x;\n            mask.y = y;\n            mask.width = width;\n            mask.height = height;\n            mask.min = min;\n            mask.max = max;\n            const { minHandle, maxHandle } = this;\n            minHandle.centerX = x;\n            maxHandle.centerX = x + width;\n            minHandle.centerY = maxHandle.centerY = y + height / 2;\n            this.append([mask, minHandle, maxHandle]);\n            mask.onRangeChange = () => {\n                var _a;\n                this.updateHandles();\n                (_a = this.onRangeChange) === null || _a === void 0 ? void 0 : _a.call(this);\n            };\n            return mask;\n        })();\n        this._x = RangeSelector.defaults.x;\n        this._y = RangeSelector.defaults.y;\n        this._width = RangeSelector.defaults.width;\n        this._height = RangeSelector.defaults.height;\n        this._min = RangeSelector.defaults.min;\n        this._max = RangeSelector.defaults.max;\n        this.isContainerNode = true;\n    }\n    set x(value) {\n        this.mask.x = value;\n        this.updateHandles();\n    }\n    get x() {\n        return this.mask.x;\n    }\n    set y(value) {\n        this.mask.y = value;\n        this.updateHandles();\n    }\n    get y() {\n        return this.mask.y;\n    }\n    set width(value) {\n        this.mask.width = value;\n        this.updateHandles();\n    }\n    get width() {\n        return this.mask.width;\n    }\n    set height(value) {\n        this.mask.height = value;\n        this.updateHandles();\n    }\n    get height() {\n        return this.mask.height;\n    }\n    set min(value) {\n        this.mask.min = value;\n    }\n    get min() {\n        return this.mask.min;\n    }\n    set max(value) {\n        this.mask.max = value;\n    }\n    get max() {\n        return this.mask.max;\n    }\n    updateHandles() {\n        const { minHandle, maxHandle, x, y, width, height, mask } = this;\n        minHandle.centerX = x + width * mask.min;\n        maxHandle.centerX = x + width * mask.max;\n        minHandle.centerY = maxHandle.centerY = y + height / 2;\n    }\n    computeBBox() {\n        return this.mask.computeBBox();\n    }\n    computeVisibleRangeBBox() {\n        return this.mask.computeVisibleRangeBBox();\n    }\n    render(renderCtx) {\n        const { ctx, forceRender, stats } = renderCtx;\n        if (this.dirty === RedrawType.NONE && !forceRender) {\n            if (stats)\n                stats.nodesSkipped++;\n            return;\n        }\n        this.computeTransformMatrix();\n        this.matrix.toContext(ctx);\n        const { mask, minHandle, maxHandle } = this;\n        [mask, minHandle, maxHandle].forEach((child) => {\n            if (child.visible && (forceRender || child.dirty > RedrawType.NONE)) {\n                ctx.save();\n                child.render(Object.assign(Object.assign({}, renderCtx), { ctx, forceRender }));\n                ctx.restore();\n            }\n        });\n        this.markClean({ force: true });\n        if (stats)\n            stats.nodesRendered++;\n    }\n}\nRangeSelector.className = 'Range';\nRangeSelector.defaults = {\n    x: 0,\n    y: 0,\n    width: 200,\n    height: 30,\n    min: 0,\n    max: 1,\n};\n\nclass NavigatorMask {\n    constructor(rangeMask) {\n        this.rm = rangeMask;\n    }\n    set fill(value) {\n        this.rm.fill = value;\n    }\n    get fill() {\n        return this.rm.fill;\n    }\n    set stroke(value) {\n        this.rm.stroke = value;\n    }\n    get stroke() {\n        return this.rm.stroke;\n    }\n    set strokeWidth(value) {\n        this.rm.strokeWidth = value;\n    }\n    get strokeWidth() {\n        return this.rm.strokeWidth;\n    }\n    set fillOpacity(value) {\n        this.rm.fillOpacity = value;\n    }\n    get fillOpacity() {\n        return this.rm.fillOpacity;\n    }\n}\n\nclass NavigatorHandle {\n    constructor(rangeHandle) {\n        this.rh = rangeHandle;\n    }\n    set fill(value) {\n        this.rh.fill = value;\n    }\n    get fill() {\n        return this.rh.fill;\n    }\n    set stroke(value) {\n        this.rh.stroke = value;\n    }\n    get stroke() {\n        return this.rh.stroke;\n    }\n    set strokeWidth(value) {\n        this.rh.strokeWidth = value;\n    }\n    get strokeWidth() {\n        return this.rh.strokeWidth;\n    }\n    set width(value) {\n        this.rh.width = value;\n    }\n    get width() {\n        return this.rh.width;\n    }\n    set height(value) {\n        this.rh.height = value;\n    }\n    get height() {\n        return this.rh.height;\n    }\n    set gripLineGap(value) {\n        this.rh.gripLineGap = value;\n    }\n    get gripLineGap() {\n        return this.rh.gripLineGap;\n    }\n    set gripLineLength(value) {\n        this.rh.gripLineLength = value;\n    }\n    get gripLineLength() {\n        return this.rh.gripLineLength;\n    }\n}\n\nvar __decorate$1g = ( false) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nclass Navigator extends BaseModuleInstance {\n    constructor(ctx) {\n        super();\n        this.ctx = ctx;\n        this.rs = new RangeSelector();\n        // Wrappers to allow option application to the scene graph nodes.\n        this.mask = new NavigatorMask(this.rs.mask);\n        this.minHandle = new NavigatorHandle(this.rs.minHandle);\n        this.maxHandle = new NavigatorHandle(this.rs.maxHandle);\n        this.minHandleDragging = false;\n        this.maxHandleDragging = false;\n        this.panHandleOffset = NaN;\n        this._enabled = false;\n        this.margin = 10;\n        this._visible = true;\n        this.rs.onRangeChange = () => this.ctx.zoomManager.updateZoom('navigator', { x: { min: this.rs.min, max: this.rs.max } });\n        [\n            ctx.interactionManager.addListener('drag-start', (event) => this.onDragStart(event)),\n            ctx.interactionManager.addListener('drag', (event) => this.onDrag(event)),\n            ctx.interactionManager.addListener('hover', (event) => this.onDrag(event)),\n            ctx.interactionManager.addListener('drag-end', () => this.onDragStop()),\n        ].forEach((s) => this.destroyFns.push(() => ctx.interactionManager.removeListener(s)));\n        [\n            ctx.layoutService.addListener('before-series', (event) => this.layout(event)),\n            ctx.layoutService.addListener('layout-complete', (event) => this.layoutComplete(event)),\n        ].forEach((s) => this.destroyFns.push(() => ctx.layoutService.removeListener(s)));\n        ctx.scene.root.appendChild(this.rs);\n        this.destroyFns.push(() => { var _a; return (_a = ctx.scene.root) === null || _a === void 0 ? void 0 : _a.removeChild(this.rs); });\n        this.destroyFns.push(() => this.ctx.zoomManager.updateZoom('navigator'));\n        this.updateGroupVisibility();\n    }\n    set enabled(value) {\n        this._enabled = value;\n        this.updateGroupVisibility();\n    }\n    get enabled() {\n        return this._enabled;\n    }\n    set width(value) {\n        this.rs.width = value;\n    }\n    get width() {\n        return this.rs.width;\n    }\n    set height(value) {\n        this.rs.height = value;\n    }\n    get height() {\n        return this.rs.height;\n    }\n    set min(value) {\n        this.rs.min = value;\n    }\n    get min() {\n        return this.rs.min;\n    }\n    set max(value) {\n        this.rs.max = value;\n    }\n    get max() {\n        return this.rs.max;\n    }\n    set visible(value) {\n        this._visible = value;\n        this.updateGroupVisibility();\n    }\n    get visible() {\n        return this._visible;\n    }\n    updateGroupVisibility() {\n        const visible = this.enabled && this.visible;\n        this.rs.visible = visible;\n        if (visible) {\n            this.ctx.zoomManager.updateZoom('navigator', { x: { min: this.rs.min, max: this.rs.max } });\n        }\n        else {\n            this.ctx.zoomManager.updateZoom('navigator');\n        }\n    }\n    layout({ shrinkRect }) {\n        if (this.enabled) {\n            const navigatorTotalHeight = this.rs.height + this.margin;\n            shrinkRect.shrink(navigatorTotalHeight, 'bottom');\n            this.rs.y = shrinkRect.y + shrinkRect.height + this.margin;\n        }\n        return { shrinkRect };\n    }\n    layoutComplete({ series: { rect, visible } }) {\n        if (this.enabled && visible) {\n            this.rs.x = rect.x;\n            this.rs.width = rect.width;\n        }\n        this.visible = visible;\n    }\n    onDragStart(offset) {\n        if (!this.enabled) {\n            return;\n        }\n        const { offsetX, offsetY } = offset;\n        const { rs } = this;\n        const { minHandle, maxHandle, x, width, min } = rs;\n        const visibleRange = rs.computeVisibleRangeBBox();\n        if (!(this.minHandleDragging || this.maxHandleDragging)) {\n            if (minHandle.containsPoint(offsetX, offsetY)) {\n                this.minHandleDragging = true;\n            }\n            else if (maxHandle.containsPoint(offsetX, offsetY)) {\n                this.maxHandleDragging = true;\n            }\n            else if (visibleRange.containsPoint(offsetX, offsetY)) {\n                this.panHandleOffset = (offsetX - x) / width - min;\n            }\n        }\n    }\n    onDrag(offset) {\n        if (!this.enabled) {\n            return;\n        }\n        const { rs, panHandleOffset } = this;\n        const { x, y, width, height, minHandle, maxHandle } = rs;\n        const { offsetX, offsetY } = offset;\n        const minX = x + width * rs.min;\n        const maxX = x + width * rs.max;\n        const visibleRange = new BBox(minX, y, maxX - minX, height);\n        const getRatio = () => Math.min(Math.max((offsetX - x) / width, 0), 1);\n        if (minHandle.containsPoint(offsetX, offsetY) || maxHandle.containsPoint(offsetX, offsetY)) {\n            this.ctx.cursorManager.updateCursor('navigator', 'ew-resize');\n        }\n        else if (visibleRange.containsPoint(offsetX, offsetY)) {\n            this.ctx.cursorManager.updateCursor('navigator', 'grab');\n        }\n        else {\n            this.ctx.cursorManager.updateCursor('navigator');\n        }\n        if (this.minHandleDragging) {\n            rs.min = getRatio();\n        }\n        else if (this.maxHandleDragging) {\n            rs.max = getRatio();\n        }\n        else if (!isNaN(panHandleOffset)) {\n            const span = rs.max - rs.min;\n            const min = Math.min(getRatio() - panHandleOffset, 1 - span);\n            if (min <= rs.min) {\n                // pan left\n                rs.min = min;\n                rs.max = rs.min + span;\n            }\n            else {\n                // pan right\n                rs.max = min + span;\n                rs.min = rs.max - span;\n            }\n        }\n    }\n    onDragStop() {\n        this.stopHandleDragging();\n    }\n    stopHandleDragging() {\n        this.minHandleDragging = this.maxHandleDragging = false;\n        this.panHandleOffset = NaN;\n    }\n}\n__decorate$1g([\n    Validate(BOOLEAN)\n], Navigator.prototype, \"_enabled\", void 0);\n__decorate$1g([\n    Validate(NUMBER(0))\n], Navigator.prototype, \"margin\", void 0);\n\nconst CHART_NAVIGATOR_MODULE = {\n    type: 'root',\n    optionsKey: 'navigator',\n    packageType: 'community',\n    chartTypes: ['cartesian'],\n    instanceConstructor: Navigator,\n    themeTemplate: {\n        navigator: {\n            enabled: false,\n            height: 30,\n            mask: {\n                fill: '#999999',\n                stroke: '#999999',\n                strokeWidth: 1,\n                fillOpacity: 0.2,\n            },\n            minHandle: {\n                fill: '#f2f2f2',\n                stroke: '#999999',\n                strokeWidth: 1,\n                width: 8,\n                height: 16,\n                gripLineGap: 2,\n                gripLineLength: 8,\n            },\n            maxHandle: {\n                fill: '#f2f2f2',\n                stroke: '#999999',\n                strokeWidth: 1,\n                width: 8,\n                height: 16,\n                gripLineGap: 2,\n                gripLineLength: 8,\n            },\n        },\n    },\n};\nregisterModule(CHART_NAVIGATOR_MODULE);\n\nvar __decorate$1f = ( false) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nclass Background extends BaseModuleInstance {\n    constructor(ctx) {\n        var _a;\n        super();\n        this.onLayoutComplete = (e) => {\n            const { width, height } = e.chart;\n            this.rectNode.width = width;\n            this.rectNode.height = height;\n        };\n        this.node = new Group({ name: 'background' });\n        this.node.zIndex = Layers.SERIES_BACKGROUND_ZINDEX;\n        this.rectNode = new Rect();\n        this.node.appendChild(this.rectNode);\n        this.fill = 'white';\n        this.visible = true;\n        (_a = ctx.scene.root) === null || _a === void 0 ? void 0 : _a.appendChild(this.node);\n        this.destroyFns.push(() => { var _a; return (_a = ctx.scene.root) === null || _a === void 0 ? void 0 : _a.removeChild(this.node); });\n        const layoutHandle = ctx.layoutService.addListener('layout-complete', this.onLayoutComplete);\n        this.destroyFns.push(() => ctx.layoutService.removeListener(layoutHandle));\n    }\n}\n__decorate$1f([\n    Validate(BOOLEAN),\n    ProxyPropertyOnWrite('node', 'visible')\n], Background.prototype, \"visible\", void 0);\n__decorate$1f([\n    Validate(OPT_COLOR_STRING),\n    ProxyPropertyOnWrite('rectNode', 'fill')\n], Background.prototype, \"fill\", void 0);\n\nconst CHART_BACKGROUND_MODULE = {\n    type: 'root',\n    optionsKey: 'background',\n    packageType: 'community',\n    chartTypes: ['cartesian', 'polar', 'hierarchy'],\n    instanceConstructor: Background,\n};\nregisterModule(CHART_BACKGROUND_MODULE);\n\nfunction setupModules() {\n    for (const m of REGISTERED_MODULES) {\n        if (m.optionConstructors != null) {\n            Object.assign(JSON_APPLY_PLUGINS.constructors, m.optionConstructors);\n        }\n        if (m.type === 'root') {\n            if (m.themeTemplate) {\n                for (const chartType of m.chartTypes) {\n                    registerChartDefaults(chartType, m.themeTemplate);\n                }\n            }\n        }\n        if (m.type === 'series') {\n            if (m.chartTypes.length > 1)\n                throw new Error('AG Charts - Module definition error: ' + m.identifier);\n            registerSeries(m.identifier, m.chartTypes[0], m.instanceConstructor, m.seriesDefaults, m.themeTemplate);\n        }\n        if (m.type === 'axis') {\n            if (m.themeTemplate) {\n                for (const axisType of m.axisTypes) {\n                    registerAxisThemeTemplate(axisType, m.themeTemplate);\n                }\n            }\n        }\n        if (m.type === 'legend') {\n            registerLegend(m.identifier, m.instanceConstructor);\n        }\n    }\n}\n\nvar __awaiter = ( false) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nfunction chartType(options) {\n    if (isAgCartesianChartOptions(options)) {\n        return 'cartesian';\n    }\n    else if (isAgPolarChartOptions(options)) {\n        return 'polar';\n    }\n    else if (isAgHierarchyChartOptions(options)) {\n        return 'hierarchy';\n    }\n    throw new Error(`AG Chart - unknown type of chart for options with type: ${options.type}`);\n}\n/**\n * Factory for creating and updating instances of AgChartInstance.\n *\n * @docsInterface\n */\nclass AgChart {\n    /**\n     * Create a new `AgChartInstance` based upon the given configuration options.\n     */\n    static create(options) {\n        return AgChartInternal.createOrUpdate(options);\n    }\n    /**\n     * Update an existing `AgChartInstance`. Options provided should be complete and not\n     * partial.\n     * <br/>\n     * <br/>\n     * **NOTE**: As each call could trigger a chart redraw, multiple calls to update options in\n     * quick succession could result in undesirable flickering, so callers should batch up and/or\n     * debounce changes to avoid unintended partial update renderings.\n     */\n    static update(chart, options) {\n        if (!AgChartInstanceProxy.isInstance(chart)) {\n            throw new Error('AG Charts - invalid chart reference passed');\n        }\n        AgChartInternal.createOrUpdate(options, chart);\n    }\n    /**\n     * Update an existing `AgChartInstance` by applying a partial set of option changes.\n     * <br/>\n     * <br/>\n     * **NOTE**: As each call could trigger a chart redraw, each individual delta options update\n     * should leave the chart in a valid options state. Also, multiple calls to update options in\n     * quick succession could result in undesirable flickering, so callers should batch up and/or\n     * debounce changes to avoid unintended partial update renderings.\n     */\n    static updateDelta(chart, deltaOptions) {\n        if (!AgChartInstanceProxy.isInstance(chart)) {\n            throw new Error('AG Charts - invalid chart reference passed');\n        }\n        return AgChartInternal.updateUserDelta(chart, deltaOptions);\n    }\n    /**\n     * Starts a browser-based image download for the given `AgChartInstance`.\n     */\n    static download(chart, options) {\n        if (!(chart instanceof AgChartInstanceProxy)) {\n            throw new Error('AG Charts - invalid chart reference passed');\n        }\n        return AgChartInternal.download(chart, options);\n    }\n    /**\n     * Returns a base64-encoded image data URL for the given `AgChartInstance`.\n     */\n    static getImageDataURL(chart, options) {\n        if (!(chart instanceof AgChartInstanceProxy)) {\n            throw new Error('AG Charts - invalid chart reference passed');\n        }\n        return AgChartInternal.getImageDataURL(chart, options);\n    }\n}\n/**\n * Proxy class, to allow library users to keep a stable reference to their chart, even if we need\n * to switch concrete class (e.g. when switching between CartesianChart vs. PolarChart).\n */\nclass AgChartInstanceProxy {\n    constructor(chart) {\n        this.chart = chart;\n    }\n    static isInstance(x) {\n        var _a, _b;\n        if (x instanceof AgChartInstanceProxy) {\n            // Simple case.\n            return true;\n        }\n        if (((_a = x.constructor) === null || _a === void 0 ? void 0 : _a.name) === 'AgChartInstanceProxy' && x.chart != null) {\n            // instanceof can fail if mixing bundles (e.g. grid all-modules vs. standalone).\n            return true;\n        }\n        const signatureProps = Object.keys((_b = x.constructor) === null || _b === void 0 ? void 0 : _b.prototype);\n        const heuristicTypeCheck = Object.keys(AgChartInstanceProxy.prototype).every((prop) => signatureProps.includes(prop));\n        if (heuristicTypeCheck && x.chart != null) {\n            // minimised code case - the constructor name is mangled but prototype names are not :P\n            return true;\n        }\n        return false;\n    }\n    getOptions() {\n        return this.chart.getOptions();\n    }\n    destroy() {\n        this.chart.destroy();\n    }\n}\nclass AgChartInternal {\n    static initialiseModules() {\n        if (AgChartInternal.initialised)\n            return;\n        setupModules();\n        AgChartInternal.initialised = true;\n    }\n    static createOrUpdate(userOptions, proxy) {\n        AgChartInternal.initialiseModules();\n        debug('>>> createOrUpdate() user options', userOptions);\n        const mixinOpts = {};\n        if (AgChartInternal.DEBUG() === true) {\n            mixinOpts['debug'] = true;\n        }\n        const { overrideDevicePixelRatio } = userOptions;\n        delete userOptions['overrideDevicePixelRatio'];\n        const processedOptions = prepareOptions(userOptions, mixinOpts);\n        let chart = proxy === null || proxy === void 0 ? void 0 : proxy.chart;\n        if (chart == null || chartType(userOptions) !== chartType(chart.processedOptions)) {\n            chart = AgChartInternal.createChartInstance(processedOptions, overrideDevicePixelRatio, chart);\n        }\n        if (proxy == null) {\n            proxy = new AgChartInstanceProxy(chart);\n        }\n        else {\n            proxy.chart = chart;\n        }\n        const chartToUpdate = chart;\n        chartToUpdate.queuedUserOptions.push(userOptions);\n        const dequeue = () => {\n            // If there are a lot of update calls, `requestFactoryUpdate()` may skip callbacks,\n            // so we need to remove all queue items up to the last successfully applied item.\n            const queuedOptionsIdx = chartToUpdate.queuedUserOptions.indexOf(userOptions);\n            chartToUpdate.queuedUserOptions.splice(0, queuedOptionsIdx);\n        };\n        chartToUpdate.requestFactoryUpdate(() => __awaiter(this, void 0, void 0, function* () {\n            // Chart destroyed, skip processing.\n            if (chartToUpdate.destroyed)\n                return;\n            const deltaOptions = jsonDiff(chartToUpdate.processedOptions, processedOptions);\n            if (deltaOptions == null) {\n                dequeue();\n                return;\n            }\n            yield AgChartInternal.updateDelta(chartToUpdate, deltaOptions, userOptions);\n            dequeue();\n        }));\n        return proxy;\n    }\n    static updateUserDelta(proxy, deltaOptions) {\n        var _a;\n        const { chart, chart: { queuedUserOptions }, } = proxy;\n        const lastUpdateOptions = (_a = queuedUserOptions[queuedUserOptions.length - 1]) !== null && _a !== void 0 ? _a : chart.userOptions;\n        const userOptions = jsonMerge([lastUpdateOptions, deltaOptions]);\n        debug('>>> updateUserDelta() user delta', deltaOptions);\n        debug('base options', lastUpdateOptions);\n        AgChartInternal.createOrUpdate(userOptions, proxy);\n    }\n    /**\n     * Returns the content of the current canvas as an image.\n     * @param opts The download options including `width` and `height` of the image as well as `fileName` and `fileFormat`.\n     */\n    static download(proxy, opts) {\n        const asyncDownload = () => __awaiter(this, void 0, void 0, function* () {\n            const maybeClone = yield AgChartInternal.prepareResizedChart(proxy, opts);\n            const { chart } = maybeClone;\n            chart.scene.download(opts === null || opts === void 0 ? void 0 : opts.fileName, opts === null || opts === void 0 ? void 0 : opts.fileFormat);\n            if (maybeClone !== proxy) {\n                maybeClone.destroy();\n            }\n        });\n        asyncDownload().catch((e) => Logger.errorOnce(e));\n    }\n    static getImageDataURL(proxy, opts) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const maybeClone = yield AgChartInternal.prepareResizedChart(proxy, opts);\n            const { chart } = maybeClone;\n            const result = chart.scene.canvas.getDataURL(opts === null || opts === void 0 ? void 0 : opts.fileFormat);\n            if (maybeClone !== proxy) {\n                maybeClone.destroy();\n            }\n            return result;\n        });\n    }\n    static prepareResizedChart(proxy, opts) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const { chart } = proxy;\n            let { width, height } = opts !== null && opts !== void 0 ? opts : {};\n            const currentWidth = chart.width;\n            const currentHeight = chart.height;\n            const unchanged = (width === undefined && height === undefined) ||\n                (chart.scene.canvas.pixelRatio === 1 && currentWidth === width && currentHeight === height);\n            if (unchanged) {\n                return proxy;\n            }\n            width = width !== null && width !== void 0 ? width : currentWidth;\n            height = height !== null && height !== void 0 ? height : currentHeight;\n            const options = Object.assign(Object.assign({}, chart.userOptions), { container: document.createElement('div'), width,\n                height, autoSize: false, overrideDevicePixelRatio: 1 });\n            const clonedChart = AgChartInternal.createOrUpdate(options);\n            yield clonedChart.chart.waitForUpdate();\n            return clonedChart;\n        });\n    }\n    static createChartInstance(options, overrideDevicePixelRatio, oldChart) {\n        const transferableResource = oldChart === null || oldChart === void 0 ? void 0 : oldChart.destroy({ keepTransferableResources: true });\n        if (isAgCartesianChartOptions(options)) {\n            return new CartesianChart(document, overrideDevicePixelRatio, transferableResource);\n        }\n        else if (isAgHierarchyChartOptions(options)) {\n            return new HierarchyChart(document, overrideDevicePixelRatio, transferableResource);\n        }\n        else if (isAgPolarChartOptions(options)) {\n            return new PolarChart(document, overrideDevicePixelRatio, transferableResource);\n        }\n        throw new Error(`AG Charts - couldn't apply configuration, check type of options: ${options['type']}`);\n    }\n    static updateDelta(chart, processedOptions, userOptions) {\n        var _a;\n        return __awaiter(this, void 0, void 0, function* () {\n            if (processedOptions.type == null) {\n                processedOptions = Object.assign(Object.assign({}, processedOptions), { type: (_a = chart.processedOptions.type) !== null && _a !== void 0 ? _a : optionsType(processedOptions) });\n            }\n            yield chart.awaitUpdateCompletion();\n            if (chart.destroyed)\n                return;\n            debug('applying delta', processedOptions);\n            applyChartOptions(chart, processedOptions, userOptions);\n        });\n    }\n}\nAgChartInternal.DEBUG = () => { var _a; return (_a = windowValue('agChartsDebug')) !== null && _a !== void 0 ? _a : false; };\nAgChartInternal.initialised = false;\nfunction debug(message, ...optionalParams) {\n    if ([true, 'opts'].includes(AgChartInternal.DEBUG())) {\n        Logger.debug(message, ...optionalParams);\n    }\n}\nfunction applyChartOptions(chart, processedOptions, userOptions) {\n    var _a, _b, _c, _d;\n    const completeOptions = jsonMerge([(_a = chart.processedOptions) !== null && _a !== void 0 ? _a : {}, processedOptions], noDataCloneMergeOptions);\n    const modulesChanged = applyModules(chart, completeOptions);\n    const skip = ['type', 'data', 'series', 'listeners', 'theme', 'legend'];\n    if (isAgCartesianChartOptions(processedOptions)) {\n        // Append axes to defaults.\n        skip.push('axes');\n    }\n    else if (isAgPolarChartOptions(processedOptions) || isAgHierarchyChartOptions(processedOptions)) ;\n    else {\n        throw new Error(`AG Charts - couldn't apply configuration, check type of options and chart: ${processedOptions['type']}`);\n    }\n    // Needs to be done before applying the series to detect if a seriesNode[Double]Click listener has been added\n    if (processedOptions.listeners) {\n        registerListeners(chart, processedOptions.listeners);\n    }\n    applyOptionValues(chart, processedOptions, { skip });\n    let forceNodeDataRefresh = false;\n    if (processedOptions.series && processedOptions.series.length > 0) {\n        applySeries(chart, processedOptions);\n        forceNodeDataRefresh = true;\n    }\n    if (isAgCartesianChartOptions(processedOptions) && processedOptions.axes) {\n        const axesPresent = applyAxes(chart, processedOptions);\n        if (axesPresent) {\n            forceNodeDataRefresh = true;\n        }\n    }\n    applyLegend(chart, processedOptions);\n    const seriesOpts = processedOptions.series;\n    const seriesDataUpdate = !!processedOptions.data || (seriesOpts === null || seriesOpts === void 0 ? void 0 : seriesOpts.some((s) => s.data != null));\n    const otherRefreshUpdate = (_c = (_b = processedOptions.legend) !== null && _b !== void 0 ? _b : processedOptions.title) !== null && _c !== void 0 ? _c : processedOptions.subtitle;\n    forceNodeDataRefresh = forceNodeDataRefresh || seriesDataUpdate || !!otherRefreshUpdate;\n    if (processedOptions.data) {\n        chart.data = processedOptions.data;\n    }\n    if (processedOptions.listeners) {\n        chart.updateAllSeriesListeners();\n    }\n    chart.processedOptions = completeOptions;\n    chart.userOptions = jsonMerge([(_d = chart.userOptions) !== null && _d !== void 0 ? _d : {}, userOptions], noDataCloneMergeOptions);\n    const majorChange = forceNodeDataRefresh || modulesChanged;\n    const updateType = majorChange ? ChartUpdateType.PROCESS_DATA : ChartUpdateType.PERFORM_LAYOUT;\n    debug('chart update type', { updateType: ChartUpdateType[updateType] });\n    chart.update(updateType, { forceNodeDataRefresh });\n}\nfunction applyModules(chart, options) {\n    const matchingChartType = (module) => {\n        return ((chart instanceof CartesianChart && module.chartTypes.includes('cartesian')) ||\n            (chart instanceof PolarChart && module.chartTypes.includes('polar')) ||\n            (chart instanceof HierarchyChart && module.chartTypes.includes('hierarchy')));\n    };\n    let modulesChanged = false;\n    const rootModules = REGISTERED_MODULES.filter((m) => m.type === 'root');\n    for (const next of rootModules) {\n        const shouldBeEnabled = matchingChartType(next) && options[next.optionsKey] != null;\n        const isEnabled = chart.isModuleEnabled(next);\n        if (shouldBeEnabled === isEnabled)\n            continue;\n        modulesChanged = true;\n        if (shouldBeEnabled) {\n            chart.addModule(next);\n        }\n        else {\n            chart.removeModule(next);\n        }\n    }\n    return modulesChanged;\n}\nfunction applySeries(chart, options) {\n    const optSeries = options.series;\n    if (!optSeries) {\n        return;\n    }\n    const matchingTypes = chart.series.length === optSeries.length && chart.series.every((s, i) => { var _a; return s.type === ((_a = optSeries[i]) === null || _a === void 0 ? void 0 : _a.type); });\n    // Try to optimise series updates if series count and types didn't change.\n    if (matchingTypes) {\n        chart.series.forEach((s, i) => {\n            var _a, _b, _c, _d;\n            const previousOpts = (_c = (_b = (_a = chart.processedOptions) === null || _a === void 0 ? void 0 : _a.series) === null || _b === void 0 ? void 0 : _b[i]) !== null && _c !== void 0 ? _c : {};\n            const seriesDiff = jsonDiff(previousOpts, (_d = optSeries[i]) !== null && _d !== void 0 ? _d : {});\n            if (!seriesDiff) {\n                return;\n            }\n            debug(`applying series diff idx ${i}`, seriesDiff);\n            applySeriesValues(s, seriesDiff, { path: `series[${i}]`, index: i });\n            s.markNodeDataDirty();\n        });\n        return;\n    }\n    chart.series = createSeries(chart, optSeries);\n}\nfunction applyAxes(chart, options) {\n    const optAxes = options.axes;\n    if (!optAxes) {\n        return false;\n    }\n    const matchingTypes = chart.axes.length === optAxes.length && chart.axes.every((a, i) => a.type === optAxes[i].type);\n    // Try to optimise series updates if series count and types didn't change.\n    if (matchingTypes) {\n        const oldOpts = chart.processedOptions;\n        if (isAgCartesianChartOptions(oldOpts)) {\n            chart.axes.forEach((a, i) => {\n                var _a, _b;\n                const previousOpts = (_b = (_a = oldOpts.axes) === null || _a === void 0 ? void 0 : _a[i]) !== null && _b !== void 0 ? _b : {};\n                const axisDiff = jsonDiff(previousOpts, optAxes[i]);\n                debug(`applying axis diff idx ${i}`, axisDiff);\n                const path = `axes[${i}]`;\n                const skip = ['axes[].type'];\n                applyOptionValues(a, axisDiff, { path, skip });\n            });\n            return true;\n        }\n    }\n    chart.axes = createAxis(chart, optAxes);\n    return true;\n}\nfunction applyLegend(chart, options) {\n    const skip = ['listeners'];\n    chart.setLegendInit((legend) => {\n        var _a, _b, _c;\n        applyOptionValues(legend, (_a = options.legend) !== null && _a !== void 0 ? _a : {}, { skip });\n        if ((_b = options.legend) === null || _b === void 0 ? void 0 : _b.listeners) {\n            Object.assign(chart.legend.listeners, (_c = options.legend.listeners) !== null && _c !== void 0 ? _c : {});\n        }\n    });\n}\nfunction createSeries(chart, options) {\n    const series = [];\n    const moduleContext = chart.getModuleContext();\n    let index = 0;\n    for (const seriesOptions of options !== null && options !== void 0 ? options : []) {\n        const path = `series[${index++}]`;\n        const seriesInstance = getSeries(seriesOptions.type, moduleContext);\n        applySeriesValues(seriesInstance, seriesOptions, { path, index });\n        series.push(seriesInstance);\n    }\n    return series;\n}\nfunction createAxis(chart, options) {\n    const axes = [];\n    const skip = ['axes[].type'];\n    const moduleContext = chart.getModuleContext();\n    let index = 0;\n    for (const axisOptions of options !== null && options !== void 0 ? options : []) {\n        let axis;\n        switch (axisOptions.type) {\n            case 'number':\n                axis = new NumberAxis(moduleContext);\n                break;\n            case LogAxis.type:\n                axis = new LogAxis(moduleContext);\n                break;\n            case CategoryAxis.type:\n                axis = new CategoryAxis(moduleContext);\n                break;\n            case GroupedCategoryAxis.type:\n                axis = new GroupedCategoryAxis(moduleContext);\n                break;\n            case TimeAxis.type:\n                axis = new TimeAxis(moduleContext);\n                break;\n            default:\n                throw new Error('AG Charts - unknown axis type: ' + axisOptions['type']);\n        }\n        const path = `axes[${index++}]`;\n        applyAxisModules(axis, axisOptions);\n        applyOptionValues(axis, axisOptions, { path, skip });\n        axes.push(axis);\n    }\n    return axes;\n}\nfunction applyAxisModules(axis, options) {\n    let modulesChanged = false;\n    const rootModules = REGISTERED_MODULES.filter((m) => m.type === 'axis');\n    for (const next of rootModules) {\n        const shouldBeEnabled = options[next.optionsKey] != null;\n        const isEnabled = axis.isModuleEnabled(next);\n        if (shouldBeEnabled === isEnabled)\n            continue;\n        modulesChanged = true;\n        if (shouldBeEnabled) {\n            axis.addModule(next);\n        }\n        else {\n            axis.removeModule(next);\n        }\n    }\n    return modulesChanged;\n}\nfunction registerListeners(source, listeners) {\n    source.clearEventListeners();\n    for (const property in listeners) {\n        const listener = listeners[property];\n        if (typeof listener !== 'function')\n            continue;\n        source.addEventListener(property, listener);\n    }\n}\nfunction applyOptionValues(target, options, { skip, path } = {}) {\n    const applyOpts = Object.assign(Object.assign(Object.assign({}, getJsonApplyOptions()), { skip }), (path ? { path } : {}));\n    return jsonApply(target, options, applyOpts);\n}\nfunction applySeriesValues(target, options, { path, index } = {}) {\n    var _a;\n    const skip = ['series[].listeners'];\n    const jsonApplyOptions = getJsonApplyOptions();\n    const ctrs = (_a = jsonApplyOptions.constructors) !== null && _a !== void 0 ? _a : {};\n    const seriesTypeOverrides = {\n        constructors: Object.assign(Object.assign({}, ctrs), { title: target.type === 'pie' ? PieTitle : ctrs['title'] }),\n    };\n    const applyOpts = Object.assign(Object.assign(Object.assign(Object.assign(Object.assign({}, jsonApplyOptions), seriesTypeOverrides), { skip: ['series[].type', ...(skip !== null && skip !== void 0 ? skip : [])] }), (path ? { path } : {})), { idx: index !== null && index !== void 0 ? index : -1 });\n    const result = jsonApply(target, options, applyOpts);\n    const listeners = options === null || options === void 0 ? void 0 : options.listeners;\n    if (listeners != null) {\n        registerListeners(target, listeners);\n    }\n    return result;\n}\n\n// DO NOT UPDATE MANUALLY: Generated from script during build time\nconst VERSION$b = '8.0.0';\n\nvar __decorate$1e = ( false) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nclass Image extends Node {\n    constructor(sourceImage) {\n        super();\n        this.x = 0;\n        this.y = 0;\n        this.width = 0;\n        this.height = 0;\n        this.opacity = 1;\n        this.sourceImage = sourceImage;\n    }\n    render(renderCtx) {\n        const { ctx, forceRender, stats } = renderCtx;\n        if (this.dirty === RedrawType.NONE && !forceRender) {\n            if (stats)\n                stats.nodesSkipped++;\n            return;\n        }\n        this.computeTransformMatrix();\n        this.matrix.toContext(ctx);\n        const image = this.sourceImage;\n        ctx.globalAlpha = this.opacity;\n        ctx.drawImage(image, 0, 0, image.width, image.height, this.x, this.y, this.width, this.height);\n        super.render(renderCtx);\n    }\n}\n__decorate$1e([\n    SceneChangeDetection({ redraw: RedrawType.MAJOR })\n], Image.prototype, \"x\", void 0);\n__decorate$1e([\n    SceneChangeDetection({ redraw: RedrawType.MAJOR })\n], Image.prototype, \"y\", void 0);\n__decorate$1e([\n    SceneChangeDetection({ redraw: RedrawType.MAJOR })\n], Image.prototype, \"width\", void 0);\n__decorate$1e([\n    SceneChangeDetection({ redraw: RedrawType.MAJOR })\n], Image.prototype, \"height\", void 0);\n__decorate$1e([\n    SceneChangeDetection({ redraw: RedrawType.MAJOR })\n], Image.prototype, \"opacity\", void 0);\n\nconst themes = Object.entries(themes$1).reduce((obj, [name, factory]) => {\n    obj[name] = factory();\n    return obj;\n}, {});\n\nvar _Scale = /*#__PURE__*/Object.freeze({\n    __proto__: null,\n    TimeScale: TimeScale$1,\n    BandScale: BandScale$5,\n    ContinuousScale: ContinuousScale,\n    ColorScale: ColorScale,\n    LinearScale: LinearScale$1\n});\n\nvar _Util = /*#__PURE__*/Object.freeze({\n    __proto__: null,\n    ticks: ticks,\n    extent: extent$4,\n    toFixed: toFixed,\n    isNumberEqual: isEqual$2,\n    tickFormat: tickFormat,\n    interpolateString: interpolate,\n    Color: Color,\n    isString: isString$2,\n    isStringObject: isStringObject$1,\n    isDate: isDate$1,\n    isDiscrete: isDiscrete,\n    isContinuous: isContinuous,\n    checkDatum: checkDatum,\n    isNumber: isNumber$4,\n    resetIds: resetIds,\n    createId: createId$1,\n    Padding: Padding$1,\n    jsonDiff: jsonDiff,\n    DELETE: DELETE,\n    jsonMerge: jsonMerge,\n    jsonApply: jsonApply,\n    jsonWalk: jsonWalk,\n    normalizeAngle360: normalizeAngle360,\n    normalizeAngle360Inclusive: normalizeAngle360Inclusive,\n    normalizeAngle180: normalizeAngle180,\n    toRadians: toRadians$1,\n    toDegrees: toDegrees,\n    sanitizeHtml: sanitizeHtml,\n    Logger: Logger\n});\n\nconst VALID_SERIES_TYPES = [\n    'area',\n    'bar',\n    'column',\n    'histogram',\n    'line',\n    'pie',\n    'scatter',\n];\nfunction getSeriesType(chartType) {\n    switch (chartType) {\n        case 'bar':\n        case 'groupedBar':\n        case 'stackedBar':\n        case 'normalizedBar':\n            return 'bar';\n        case 'column':\n        case 'groupedColumn':\n        case 'stackedColumn':\n        case 'normalizedColumn':\n            return 'column';\n        case 'line':\n            return 'line';\n        case 'area':\n        case 'stackedArea':\n        case 'normalizedArea':\n            return 'area';\n        case 'scatter':\n        case 'bubble':\n            return 'scatter';\n        case 'histogram':\n            return 'histogram';\n        case 'pie':\n        case 'doughnut':\n            return 'pie';\n        default:\n            return 'cartesian';\n    }\n}\n\nconst ALL_AXIS_TYPES = ['number', 'category', 'groupedCategory', 'log', 'time'];\nfunction getLegacyAxisType(chartType) {\n    switch (chartType) {\n        case 'bar':\n        case 'stackedBar':\n        case 'normalizedBar':\n            return ['number', 'category'];\n        case 'groupedBar':\n            return ['number', 'groupedCategory'];\n        case 'column':\n        case 'stackedColumn':\n        case 'normalizedColumn':\n        case 'line':\n        case 'area':\n        case 'stackedArea':\n        case 'normalizedArea':\n        case 'histogram':\n            return ['category', 'number'];\n        case 'groupedColumn':\n            return ['groupedCategory', 'number'];\n        case 'scatter':\n        case 'bubble':\n            return ['number', 'number'];\n        default:\n            return undefined;\n    }\n}\n\nfunction createAgChartTheme(chartProxyParams, proxy) {\n    var _a;\n    const { chartOptionsToRestore, chartPaletteToRestore, chartThemeToRestore } = chartProxyParams;\n    const themeName = getSelectedTheme(chartProxyParams);\n    const stockTheme = isStockTheme(themeName);\n    const rootTheme = stockTheme\n        ? { baseTheme: themeName }\n        : (_a = lookupCustomChartTheme(chartProxyParams, themeName)) !== null && _a !== void 0 ? _a : {};\n    const gridOptionsThemeOverrides = chartProxyParams.getGridOptionsChartThemeOverrides();\n    const apiThemeOverrides = chartProxyParams.apiChartThemeOverrides;\n    const standaloneChartType = getSeriesType(chartProxyParams.chartType);\n    const crossFilterThemeOverridePoint = standaloneChartType === 'pie' ? 'polar' : 'cartesian';\n    const crossFilteringOverrides = chartProxyParams.crossFiltering\n        ? createCrossFilterThemeOverrides(proxy, chartProxyParams, crossFilterThemeOverridePoint)\n        : undefined;\n    const formattingPanelOverrides = Object.assign({}, (chartOptionsToRestore !== null && chartOptionsToRestore !== void 0 ? chartOptionsToRestore : {}));\n    const isTitleEnabled = () => {\n        const isTitleEnabled = (obj) => {\n            if (!obj) {\n                return false;\n            }\n            return Object.keys(obj).some(key => ag_grid_community__WEBPACK_IMPORTED_MODULE_0__._.get(obj[key], 'title.enabled', false));\n        };\n        return isTitleEnabled(gridOptionsThemeOverrides) || isTitleEnabled(apiThemeOverrides);\n    };\n    // Overrides in ascending precedence ordering.\n    const overrides = [\n        stockTheme ? inbuiltStockThemeOverrides(chartProxyParams, isTitleEnabled()) : undefined,\n        crossFilteringOverrides,\n        gridOptionsThemeOverrides,\n        apiThemeOverrides,\n        formattingPanelOverrides,\n    ];\n    // Recursively nest theme overrides so they are applied with correct precedence in\n    // Standalone Charts - this is an undocumented feature.\n    // Outermost theme overrides will be the formatting panel configured values, so they are\n    // differentiated from grid-config and inbuilt overrides.\n    const theme = overrides\n        .filter((v) => !!v)\n        .reduce((r, n) => ({\n        baseTheme: r,\n        overrides: n,\n    }), rootTheme);\n    // Avoid explicitly setting the `theme.palette` property unless we're using the restored theme\n    // AND the palette is actually different.\n    if (chartPaletteToRestore && themeName === chartThemeToRestore) {\n        const rootThemePalette = getChartTheme(rootTheme).palette;\n        if (!isIdenticalPalette(chartPaletteToRestore, rootThemePalette)) {\n            theme.palette = chartPaletteToRestore;\n        }\n    }\n    return theme;\n}\nfunction isIdenticalPalette(paletteA, paletteB) {\n    const arrayCompare = (arrA, arrB) => {\n        if (arrA.length !== arrB.length)\n            return false;\n        return arrA.every((v, i) => v === arrB[i]);\n    };\n    return arrayCompare(paletteA.fills, paletteB.fills) &&\n        arrayCompare(paletteA.strokes, paletteB.strokes);\n}\nfunction isStockTheme(themeName) {\n    return ag_grid_community__WEBPACK_IMPORTED_MODULE_0__._.includes(Object.keys(themes), themeName);\n}\nfunction createCrossFilterThemeOverrides(proxy, chartProxyParams, overrideType) {\n    const legend = {\n        listeners: {\n            legendItemClick: (e) => {\n                const chart = proxy.getChart();\n                chart.series.forEach((s) => {\n                    s.toggleSeriesItem(e.itemId, e.enabled);\n                    s.toggleSeriesItem(`${e.itemId}-filtered-out`, e.enabled);\n                });\n            },\n        },\n    };\n    const series = {};\n    if (overrideType === 'polar') {\n        series.pie = {\n            tooltip: {\n                renderer: ({ angleName, datum, calloutLabelKey, radiusKey, angleValue, }) => {\n                    const title = angleName;\n                    const label = datum[calloutLabelKey];\n                    const ratio = datum[radiusKey];\n                    const totalValue = angleValue;\n                    return { title, content: `${label}: ${totalValue * ratio}` };\n                },\n            },\n        };\n    }\n    return {\n        [overrideType]: {\n            tooltip: {\n                delay: 500,\n            },\n            legend,\n            listeners: {\n                click: (e) => chartProxyParams.crossFilterCallback(e, true),\n            },\n            series,\n        },\n    };\n}\nconst STATIC_INBUILT_STOCK_THEME_AXES_OVERRIDES = ALL_AXIS_TYPES.reduce((r, n) => (Object.assign(Object.assign({}, r), { [n]: { title: { _enabledFromTheme: true } } })), {});\nfunction inbuiltStockThemeOverrides(params, titleEnabled) {\n    const extraPadding = params.getExtraPaddingDirections();\n    return {\n        common: {\n            axes: STATIC_INBUILT_STOCK_THEME_AXES_OVERRIDES,\n            padding: {\n                // don't add extra padding when a title is present!\n                top: !titleEnabled && extraPadding.includes('top') ? 40 : 20,\n                right: extraPadding.includes('right') ? 30 : 20,\n                bottom: extraPadding.includes('bottom') ? 40 : 20,\n                left: extraPadding.includes('left') ? 30 : 20,\n            },\n        },\n        pie: {\n            series: {\n                title: { _enabledFromTheme: true },\n                calloutLabel: { _enabledFromTheme: true },\n                sectorLabel: {\n                    enabled: false,\n                    _enabledFromTheme: true,\n                },\n            },\n        },\n    };\n}\nfunction getSelectedTheme(chartProxyParams) {\n    let chartThemeName = chartProxyParams.getChartThemeName();\n    const availableThemes = chartProxyParams.getChartThemes();\n    if (!ag_grid_community__WEBPACK_IMPORTED_MODULE_0__._.includes(availableThemes, chartThemeName)) {\n        chartThemeName = availableThemes[0];\n    }\n    return chartThemeName;\n}\nfunction lookupCustomChartTheme(chartProxyParams, name) {\n    const { customChartThemes } = chartProxyParams;\n    const customChartTheme = customChartThemes && customChartThemes[name];\n    if (!customChartTheme) {\n        console.warn(`AG Grid: no stock theme exists with the name '${name}' and no ` +\n            \"custom chart theme with that name was supplied to 'customChartThemes'\");\n    }\n    return customChartTheme;\n}\n\nconst validateIfDefined = (validationFn) => {\n    return (value) => {\n        if (value === undefined)\n            return true;\n        return validationFn(value);\n    };\n};\nconst isString$1 = (value) => typeof value === 'string';\nconst isBoolean = (value) => typeof value === 'boolean';\nconst isValidSeriesChartType = (value) => typeof value === 'object';\nconst createWarnMessage = (property, expectedType) => (value) => `AG Grid - unable to update chart as invalid params supplied:  \\`${property}: ${value}\\`, expected ${expectedType}.`;\nclass UpdateParamsValidator {\n    static validateChartParams(params) {\n        let paramsToValidate = params;\n        switch (paramsToValidate.type) {\n            case 'rangeChartUpdate':\n                return UpdateParamsValidator.validateUpdateRangeChartParams(params);\n            case 'pivotChartUpdate':\n                return UpdateParamsValidator.validateUpdatePivotChartParams(params);\n            case 'crossFilterChartUpdate':\n                return UpdateParamsValidator.validateUpdateCrossFilterChartParams(params);\n            default:\n                console.warn(`AG Grid - Invalid value supplied for 'type': ${params.type}. It must be either 'rangeChartUpdate', 'pivotChartUpdate', or 'crossFilterChartUpdate'.`);\n                return false;\n        }\n    }\n    static validateUpdateRangeChartParams(params) {\n        const validations = [\n            ...UpdateParamsValidator.commonValidations,\n            ...UpdateParamsValidator.cellRangeValidations,\n            {\n                property: 'seriesChartTypes',\n                validationFn: (value) => value === undefined || (Array.isArray(value) && value.every(isValidSeriesChartType)),\n                warnMessage: createWarnMessage('seriesChartTypes', 'Array of SeriesChartType'),\n            },\n        ];\n        return UpdateParamsValidator.validateProperties(params, validations, ['type', 'chartId', 'chartType', 'chartThemeName', 'chartThemeOverrides', 'unlinkChart', 'cellRange', 'suppressChartRanges', 'aggFunc', 'seriesChartTypes'], 'UpdateRangeChartParams');\n    }\n    static validateUpdatePivotChartParams(params) {\n        const validations = [\n            ...UpdateParamsValidator.commonValidations,\n        ];\n        return UpdateParamsValidator.validateProperties(params, validations, ['type', 'chartId', 'chartType', 'chartThemeName', 'chartThemeOverrides', 'unlinkChart'], 'UpdatePivotChartParams');\n    }\n    static validateUpdateCrossFilterChartParams(params) {\n        const validations = [\n            ...UpdateParamsValidator.commonValidations,\n            ...UpdateParamsValidator.cellRangeValidations,\n        ];\n        return UpdateParamsValidator.validateProperties(params, validations, ['type', 'chartId', 'chartType', 'chartThemeName', 'chartThemeOverrides', 'unlinkChart', 'cellRange', 'suppressChartRanges', 'aggFunc'], 'UpdateCrossFilterChartParams');\n    }\n    static validateProperties(params, validations, validPropertyNames, paramsType) {\n        for (const validation of validations) {\n            const { property, validationFn, warnMessage } = validation;\n            if (property in params) {\n                const value = params[property];\n                if (!validationFn(value)) {\n                    console.warn(warnMessage(value));\n                    return false;\n                }\n            }\n        }\n        // Check for unexpected properties\n        for (const property in params) {\n            if (!validPropertyNames.includes(property)) {\n                console.warn(`AG Grid - Unexpected property supplied. ${paramsType} does not contain: \\`${property}\\`.`);\n                return false;\n            }\n        }\n        return true;\n    }\n}\nUpdateParamsValidator.validChartTypes = [\n    'column',\n    'groupedColumn',\n    'stackedColumn',\n    'normalizedColumn',\n    'bar',\n    'groupedBar',\n    'stackedBar',\n    'normalizedBar',\n    'line',\n    'scatter',\n    'bubble',\n    'pie',\n    'doughnut',\n    'area',\n    'stackedArea',\n    'normalizedArea',\n    'histogram',\n    'columnLineCombo',\n    'areaColumnCombo',\n    'customCombo'\n];\nUpdateParamsValidator.validateChartType = validateIfDefined((chartType) => {\n    return UpdateParamsValidator.validChartTypes.includes(chartType);\n});\nUpdateParamsValidator.validateAgChartThemeOverrides = validateIfDefined((themeOverrides) => {\n    // ensure supplied AgChartThemeOverrides is an object - can be improved if necessary?\n    return typeof themeOverrides === 'object';\n});\nUpdateParamsValidator.validateChartParamsCellRange = validateIfDefined((cellRange) => {\n    // ensure supplied ChartParamsCellRange is an object - can be improved if necessary?\n    return typeof cellRange === 'object';\n});\nUpdateParamsValidator.validateAggFunc = validateIfDefined((aggFunc) => {\n    // ensure supplied aggFunc is a `string` or `function` - can be improved if necessary?\n    return typeof aggFunc === 'string' || typeof aggFunc === 'function';\n});\nUpdateParamsValidator.commonValidations = [\n    { property: 'chartId', validationFn: isString$1, warnMessage: createWarnMessage('chartId', 'string') },\n    {\n        property: 'chartType',\n        validationFn: UpdateParamsValidator.validateChartType,\n        warnMessage: createWarnMessage('chartType', UpdateParamsValidator.validChartTypes.join(', '))\n    },\n    {\n        property: 'chartThemeName',\n        validationFn: isString$1,\n        warnMessage: createWarnMessage('chartThemeName', 'string')\n    },\n    {\n        property: 'chartThemeOverrides',\n        validationFn: UpdateParamsValidator.validateAgChartThemeOverrides,\n        warnMessage: createWarnMessage('chartThemeOverrides', 'AgChartThemeOverrides')\n    },\n    { property: 'unlinkChart', validationFn: isBoolean, warnMessage: createWarnMessage('unlinkChart', 'boolean') },\n];\nUpdateParamsValidator.cellRangeValidations = [\n    {\n        property: 'cellRange',\n        validationFn: UpdateParamsValidator.validateChartParamsCellRange,\n        warnMessage: createWarnMessage('cellRange', 'ChartParamsCellRange')\n    },\n    {\n        property: 'suppressChartRanges',\n        validationFn: isBoolean,\n        warnMessage: createWarnMessage('suppressChartRanges', 'boolean')\n    },\n    {\n        property: 'aggFunc',\n        validationFn: UpdateParamsValidator.validateAggFunc,\n        warnMessage: createWarnMessage('aggFunc', 'string or IAggFunc')\n    },\n];\n\nvar __decorate$1d = ( false) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nconst DEFAULT_THEMES = ['ag-default', 'ag-material', 'ag-pastel', 'ag-vivid', 'ag-solar'];\nclass ChartController extends ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.BeanStub {\n    constructor(model) {\n        super();\n        this.model = model;\n    }\n    init() {\n        this.setChartRange();\n        this.addManagedListener(this.eventService, ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.Events.EVENT_RANGE_SELECTION_CHANGED, event => {\n            if (event.id && event.id === this.model.chartId) {\n                this.updateForRangeChange();\n            }\n        });\n        if (this.model.unlinked) {\n            if (this.rangeService) {\n                this.rangeService.setCellRanges([]);\n            }\n        }\n        this.addManagedListener(this.eventService, ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.Events.EVENT_COLUMN_MOVED, this.updateForGridChange.bind(this));\n        this.addManagedListener(this.eventService, ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.Events.EVENT_COLUMN_PINNED, this.updateForGridChange.bind(this));\n        this.addManagedListener(this.eventService, ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.Events.EVENT_COLUMN_VISIBLE, this.updateForGridChange.bind(this));\n        this.addManagedListener(this.eventService, ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.Events.EVENT_COLUMN_ROW_GROUP_CHANGED, this.updateForGridChange.bind(this));\n        this.addManagedListener(this.eventService, ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.Events.EVENT_MODEL_UPDATED, this.updateForGridChange.bind(this));\n        this.addManagedListener(this.eventService, ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.Events.EVENT_CELL_VALUE_CHANGED, this.updateForDataChange.bind(this));\n    }\n    update(params) {\n        var _a, _b, _c, _d, _e, _f, _g;\n        if (!this.validUpdateType(params) || !UpdateParamsValidator.validateChartParams(params)) {\n            return false;\n        }\n        const { chartId, chartType, chartThemeName, unlinkChart } = params;\n        // create a common base for the chart model parameters (this covers pivot chart updates)\n        const common = {\n            chartId: chartId,\n            pivotChart: this.model.pivotChart,\n            chartType: chartType !== null && chartType !== void 0 ? chartType : this.model.chartType,\n            chartThemeName: chartThemeName !== null && chartThemeName !== void 0 ? chartThemeName : this.model.chartThemeName,\n            unlinkChart: unlinkChart !== null && unlinkChart !== void 0 ? unlinkChart : this.model.unlinked,\n            cellRange: this.model.suppliedCellRange,\n            aggFunc: this.model.aggFunc,\n            seriesChartTypes: undefined,\n            suppressChartRanges: false,\n            crossFiltering: false\n        };\n        let chartModelParams = Object.assign({}, common);\n        // modify the chart model properties based on the type of update\n        switch (params.type) {\n            case 'rangeChartUpdate':\n                chartModelParams.cellRange = (_a = this.createCellRange(params)) !== null && _a !== void 0 ? _a : this.model.suppliedCellRange;\n                chartModelParams.aggFunc = (_b = params.aggFunc) !== null && _b !== void 0 ? _b : this.model.aggFunc;\n                chartModelParams.seriesChartTypes = params.seriesChartTypes;\n                chartModelParams.suppressChartRanges = (_c = params.suppressChartRanges) !== null && _c !== void 0 ? _c : this.model.suppressChartRanges;\n                break;\n            case 'crossFilterChartUpdate':\n                chartModelParams.cellRange = (_d = this.createCellRange(params)) !== null && _d !== void 0 ? _d : this.model.suppliedCellRange;\n                chartModelParams.aggFunc = (_e = params.aggFunc) !== null && _e !== void 0 ? _e : this.model.aggFunc;\n                chartModelParams.crossFiltering = true;\n                chartModelParams.suppressChartRanges = (_f = params.suppressChartRanges) !== null && _f !== void 0 ? _f : this.model.suppressChartRanges;\n                break;\n        }\n        this.model.updateModel(chartModelParams);\n        // if the chart should be unlinked or chart ranges suppressed, remove all cell ranges; otherwise, set the chart range\n        const removeChartCellRanges = chartModelParams.unlinkChart || chartModelParams.suppressChartRanges;\n        removeChartCellRanges ? (_g = this.rangeService) === null || _g === void 0 ? void 0 : _g.setCellRanges([]) : this.setChartRange();\n        return true;\n    }\n    updateForGridChange() {\n        if (this.model.unlinked) {\n            return;\n        }\n        this.model.updateCellRanges();\n        this.model.updateData();\n        this.setChartRange();\n    }\n    updateForDataChange() {\n        if (this.model.unlinked) {\n            return;\n        }\n        this.model.updateData();\n        this.raiseChartModelUpdateEvent();\n    }\n    updateForRangeChange() {\n        this.updateForGridChange();\n        this.raiseChartRangeSelectionChangedEvent();\n    }\n    updateForPanelChange(updatedCol) {\n        this.model.updateCellRanges(updatedCol);\n        this.model.updateData();\n        this.setChartRange();\n        this.raiseChartRangeSelectionChangedEvent();\n    }\n    getChartUpdateParams(updatedOverrides) {\n        const selectedCols = this.getSelectedValueColState();\n        const fields = selectedCols.map(c => ({ colId: c.colId, displayName: c.displayName }));\n        const data = this.getChartData();\n        const selectedDimension = this.getSelectedDimension();\n        return {\n            data,\n            grouping: this.isGrouping(),\n            category: {\n                id: selectedDimension.colId,\n                name: selectedDimension.displayName,\n                chartDataType: this.model.getChartDataType(selectedDimension.colId)\n            },\n            fields,\n            chartId: this.getChartId(),\n            getCrossFilteringContext: () => ({ lastSelectedChartId: 'xxx' }),\n            seriesChartTypes: this.getSeriesChartTypes(),\n            updatedOverrides: updatedOverrides\n        };\n    }\n    getChartModel() {\n        const modelType = this.model.pivotChart ? 'pivot' : 'range';\n        const seriesChartTypes = this.isComboChart() ? this.model.comboChartModel.seriesChartTypes : undefined;\n        return {\n            modelType,\n            chartId: this.model.chartId,\n            chartType: this.model.chartType,\n            chartThemeName: this.getChartThemeName(),\n            chartOptions: this.chartProxy.getChartThemeOverrides(),\n            chartPalette: this.chartProxy.getChartPalette(),\n            cellRange: this.getCellRangeParams(),\n            suppressChartRanges: this.model.suppressChartRanges,\n            aggFunc: this.model.aggFunc,\n            unlinkChart: this.model.unlinked,\n            seriesChartTypes\n        };\n    }\n    getChartId() {\n        return this.model.chartId;\n    }\n    getChartData() {\n        return this.model.chartData;\n    }\n    getChartType() {\n        return this.model.chartType;\n    }\n    setChartType(chartType) {\n        this.model.chartType = chartType;\n        this.model.comboChartModel.updateSeriesChartTypes();\n        this.raiseChartModelUpdateEvent();\n        this.raiseChartOptionsChangedEvent();\n    }\n    setChartThemeName(chartThemeName) {\n        this.model.chartThemeName = chartThemeName;\n        this.raiseChartModelUpdateEvent();\n        this.raiseChartOptionsChangedEvent();\n    }\n    getChartThemeName() {\n        return this.model.chartThemeName;\n    }\n    isPivotChart() {\n        return this.model.pivotChart;\n    }\n    isPivotMode() {\n        return this.model.isPivotMode();\n    }\n    isGrouping() {\n        return this.model.isGrouping();\n    }\n    isCrossFilterChart() {\n        return this.model.crossFiltering;\n    }\n    getThemes() {\n        return this.gridOptionsService.get('chartThemes') || DEFAULT_THEMES;\n    }\n    getPalettes() {\n        const themeNames = this.getThemes();\n        return themeNames.map(themeName => {\n            const stockTheme = isStockTheme(themeName);\n            const theme = stockTheme ? themeName : this.chartProxy.lookupCustomChartTheme(themeName);\n            return getChartTheme(theme).palette;\n        });\n    }\n    getValueColState() {\n        return this.model.valueColState.map(this.displayNameMapper.bind(this));\n    }\n    getSelectedValueColState() {\n        return this.getValueColState().filter(cs => cs.selected);\n    }\n    getSelectedDimension() {\n        return this.model.getSelectedDimension();\n    }\n    displayNameMapper(col) {\n        const columnNames = this.model.columnNames[col.colId];\n        col.displayName = columnNames ? columnNames.join(' - ') : this.model.getColDisplayName(col.column);\n        return col;\n    }\n    getColStateForMenu() {\n        return { dimensionCols: this.model.dimensionColState, valueCols: this.getValueColState() };\n    }\n    setChartRange(silent = false) {\n        if (this.rangeService && !this.model.suppressChartRanges && !this.model.unlinked) {\n            this.rangeService.setCellRanges(this.getCellRanges());\n        }\n        if (!silent) {\n            this.raiseChartModelUpdateEvent();\n        }\n    }\n    detachChartRange() {\n        // when chart is detached it won't listen to changes from the grid\n        this.model.unlinked = !this.model.unlinked;\n        if (this.model.unlinked) {\n            // remove range from grid\n            if (this.rangeService) {\n                this.rangeService.setCellRanges([]);\n            }\n        }\n        else {\n            // update chart data may have changed\n            this.updateForGridChange();\n        }\n    }\n    setChartProxy(chartProxy) {\n        this.chartProxy = chartProxy;\n    }\n    getChartProxy() {\n        return this.chartProxy;\n    }\n    isActiveXYChart() {\n        return ag_grid_community__WEBPACK_IMPORTED_MODULE_0__._.includes(['scatter', 'bubble'], this.getChartType());\n    }\n    isChartLinked() {\n        return !this.model.unlinked;\n    }\n    customComboExists() {\n        const savedCustomSeriesChartTypes = this.model.comboChartModel.savedCustomSeriesChartTypes;\n        return savedCustomSeriesChartTypes && savedCustomSeriesChartTypes.length > 0;\n    }\n    getSeriesChartTypes() {\n        return this.model.comboChartModel.seriesChartTypes;\n    }\n    isComboChart() {\n        return this.model.isComboChart();\n    }\n    updateSeriesChartType(colId, chartType, secondaryAxis) {\n        const seriesChartType = this.model.comboChartModel.seriesChartTypes.find(s => s.colId === colId);\n        if (seriesChartType) {\n            // once a combo chart has been modified it is now a 'customCombo' chart\n            const updateChartType = this.model.chartType !== 'customCombo';\n            if (updateChartType) {\n                this.model.chartType = 'customCombo';\n            }\n            const prevSeriesChartType = seriesChartType.chartType;\n            if (chartType != null) {\n                seriesChartType.chartType = chartType;\n            }\n            if (secondaryAxis != null) {\n                seriesChartType.secondaryAxis = secondaryAxis;\n            }\n            // replace existing custom series types with this latest version\n            this.model.comboChartModel.savedCustomSeriesChartTypes = this.model.comboChartModel.seriesChartTypes;\n            // series chart types can be modified, i.e. column chart types should be moved to primary axis\n            this.model.comboChartModel.updateSeriesChartTypes();\n            this.updateForDataChange();\n            if (updateChartType) {\n                // update the settings panel by raising an EVENT_CHART_TYPE_CHANGED event\n                this.dispatchEvent({\n                    type: ChartController.EVENT_CHART_TYPE_CHANGED\n                });\n            }\n            if (prevSeriesChartType !== chartType) {\n                // update the format panel by raising an EVENT_CHART_SERIES_CHART_TYPE_CHANGED event\n                this.dispatchEvent({\n                    type: ChartController.EVENT_CHART_SERIES_CHART_TYPE_CHANGED\n                });\n            }\n            this.raiseChartOptionsChangedEvent();\n        }\n    }\n    getActiveSeriesChartTypes() {\n        const selectedColIds = this.getSelectedValueColState().map(c => c.colId);\n        return this.getSeriesChartTypes().filter(s => selectedColIds.includes(s.colId));\n    }\n    getChartSeriesTypes() {\n        const supportedComboSeriesTypes = ['line', 'column', 'area'];\n        return this.isComboChart() ? supportedComboSeriesTypes : [getSeriesType(this.getChartType())];\n    }\n    getCellRanges() {\n        return [this.model.dimensionCellRange, this.model.valueCellRange].filter(r => r);\n    }\n    createCellRange(params) {\n        var _a;\n        return params.cellRange && ((_a = this.rangeService) === null || _a === void 0 ? void 0 : _a.createCellRangeFromCellRangeParams(params.cellRange));\n    }\n    validUpdateType(params) {\n        var _a;\n        if (!params.type) {\n            console.warn(`AG Grid - Unable to update chart as the 'type' is missing. It must be either 'rangeChartUpdate', 'pivotChartUpdate', or 'crossFilterChartUpdate'.`);\n            return false;\n        }\n        const chartTypeMap = {\n            'Range Chart': () => !this.isPivotChart() && !this.isCrossFilterChart(),\n            'Pivot Chart': () => this.isPivotChart(),\n            'Cross Filter Chart': () => this.isCrossFilterChart()\n        };\n        const currentChartType = (_a = Object.keys(chartTypeMap).find(type => chartTypeMap[type]())) !== null && _a !== void 0 ? _a : 'Range Chart';\n        const valid = params.type ===\n            `${currentChartType[0].toLowerCase()}${currentChartType.slice(1).replace(/ /g, '')}Update`;\n        if (!valid) {\n            console.warn(`AG Grid - Unable to update chart as a '${params.type}' update type is not permitted on a ${currentChartType}.`);\n        }\n        return valid;\n    }\n    getCellRangeParams() {\n        const cellRanges = this.getCellRanges();\n        const firstCellRange = cellRanges[0];\n        const startRow = (firstCellRange && firstCellRange.startRow) || null;\n        const endRow = (firstCellRange && firstCellRange.endRow) || null;\n        return {\n            rowStartIndex: startRow && startRow.rowIndex,\n            rowStartPinned: startRow && startRow.rowPinned,\n            rowEndIndex: endRow && endRow.rowIndex,\n            rowEndPinned: endRow && endRow.rowPinned,\n            columns: cellRanges.reduce((columns, value) => columns.concat(value.columns.map(c => c.getId())), [])\n        };\n    }\n    raiseChartModelUpdateEvent() {\n        const event = {\n            type: ChartController.EVENT_CHART_MODEL_UPDATE\n        };\n        this.dispatchEvent(event);\n    }\n    raiseChartUpdatedEvent() {\n        const event = {\n            type: ChartController.EVENT_CHART_UPDATED\n        };\n        this.dispatchEvent(event);\n    }\n    raiseChartApiUpdateEvent() {\n        const event = {\n            type: ChartController.EVENT_CHART_API_UPDATE\n        };\n        this.dispatchEvent(event);\n    }\n    raiseChartOptionsChangedEvent() {\n        const { chartId, chartType } = this.getChartModel();\n        const event = {\n            type: ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.Events.EVENT_CHART_OPTIONS_CHANGED,\n            chartId,\n            chartType,\n            chartThemeName: this.getChartThemeName(),\n            chartOptions: this.chartProxy.getChartThemeOverrides()\n        };\n        this.eventService.dispatchEvent(event);\n    }\n    raiseChartRangeSelectionChangedEvent() {\n        const event = {\n            type: ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.Events.EVENT_CHART_RANGE_SELECTION_CHANGED,\n            id: this.model.chartId,\n            chartId: this.model.chartId,\n            cellRange: this.getCellRangeParams()\n        };\n        this.eventService.dispatchEvent(event);\n    }\n    destroy() {\n        super.destroy();\n        if (this.rangeService) {\n            this.rangeService.setCellRanges([]);\n        }\n    }\n}\nChartController.EVENT_CHART_UPDATED = 'chartUpdated';\nChartController.EVENT_CHART_API_UPDATE = 'chartApiUpdate';\nChartController.EVENT_CHART_MODEL_UPDATE = 'chartModelUpdate';\nChartController.EVENT_CHART_TYPE_CHANGED = 'chartTypeChanged';\nChartController.EVENT_CHART_SERIES_CHART_TYPE_CHANGED = 'chartSeriesChartTypeChanged';\n__decorate$1d([\n    (0,ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.Autowired)('rangeService')\n], ChartController.prototype, \"rangeService\", void 0);\n__decorate$1d([\n    ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.PostConstruct\n], ChartController.prototype, \"init\", null);\n\nvar __decorate$1c = ( false) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nconst DefaultDataPanelDef = {\n    groups: [\n        { type: 'categories', isOpen: true },\n        { type: 'series', isOpen: true },\n        { type: 'seriesChartType', isOpen: true }\n    ]\n};\nclass ChartDataPanel extends ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.Component {\n    constructor(chartController, chartOptionsService) {\n        super(ChartDataPanel.TEMPLATE);\n        this.chartController = chartController;\n        this.chartOptionsService = chartOptionsService;\n        this.columnComps = new Map();\n    }\n    init() {\n        this.updatePanels();\n        this.addManagedListener(this.chartController, ChartController.EVENT_CHART_MODEL_UPDATE, this.updatePanels.bind(this));\n        this.addManagedListener(this.chartController, ChartController.EVENT_CHART_API_UPDATE, this.updatePanels.bind(this));\n        this.createAutoScrollService();\n    }\n    destroy() {\n        this.clearComponents();\n        super.destroy();\n    }\n    updatePanels() {\n        var _a, _b;\n        const currentChartType = this.chartType;\n        const { dimensionCols, valueCols } = this.chartController.getColStateForMenu();\n        const colIds = dimensionCols.map(c => c.colId).concat(valueCols.map(c => c.colId));\n        this.chartType = this.chartController.getChartType();\n        const groupExpandedState = this.getGroupExpandedState();\n        if (ag_grid_community__WEBPACK_IMPORTED_MODULE_0__._.areEqual(ag_grid_community__WEBPACK_IMPORTED_MODULE_0__._.keys(this.columnComps), colIds) && this.chartType === currentChartType) {\n            // if possible, we just update existing components\n            [...dimensionCols, ...valueCols].forEach(col => {\n                this.columnComps.get(col.colId).setValue(col.selected, true);\n            });\n            if (this.chartController.isActiveXYChart()) {\n                const getSeriesLabel = this.generateGetSeriesLabel();\n                valueCols.forEach(col => {\n                    this.columnComps.get(col.colId).setLabel(getSeriesLabel(col));\n                });\n            }\n            // recreate series chart type group if it exists as series may be added or removed via series group panel\n            ag_grid_community__WEBPACK_IMPORTED_MODULE_0__._.removeFromParent(this.getGui().querySelector('#seriesChartTypeGroup'));\n            this.seriesChartTypeGroupComp = this.destroyBean(this.seriesChartTypeGroupComp);\n            const seriesChartTypeIndex = (_a = this.getDataPanelDef().groups) === null || _a === void 0 ? void 0 : _a.reduce((prevVal, { type }, index) => {\n                if (type === 'seriesChartType') {\n                    return index;\n                }\n                return prevVal;\n            }, -1);\n            if (seriesChartTypeIndex !== -1) {\n                this.createSeriesChartTypeGroup(valueCols, seriesChartTypeIndex);\n            }\n        }\n        else {\n            // otherwise, we re-create everything\n            this.clearComponents();\n            (_b = this.getDataPanelDef().groups) === null || _b === void 0 ? void 0 : _b.forEach(({ type }) => {\n                if (type === 'categories') {\n                    this.createCategoriesGroup(dimensionCols);\n                }\n                else if (type === 'series') {\n                    this.createSeriesGroup(valueCols);\n                }\n                else if (type === 'seriesChartType') {\n                    this.createSeriesChartTypeGroup(valueCols);\n                }\n                else {\n                    console.warn(`AG Grid: invalid charts data panel group name supplied: '${type}'`);\n                }\n            });\n        }\n        this.restoreGroupExpandedState(groupExpandedState);\n    }\n    getGroupExpandedState() {\n        const groups = [\n            { groupType: 'categories', comp: this.categoriesGroupComp },\n            { groupType: 'series', comp: this.seriesGroupComp },\n            { groupType: 'seriesChartType', comp: this.seriesChartTypeGroupComp }\n        ];\n        return groups.map(({ groupType, comp }) => {\n            var _a, _b;\n            const defaultExpanded = Boolean((_b = (_a = this.getDataPanelDef().groups) === null || _a === void 0 ? void 0 : _a.find(({ type }) => type === groupType)) === null || _b === void 0 ? void 0 : _b.isOpen);\n            return !comp ? defaultExpanded : comp.isExpanded();\n        });\n    }\n    restoreGroupExpandedState(groupExpandedState) {\n        [\n            this.categoriesGroupComp,\n            this.seriesGroupComp,\n            this.seriesChartTypeGroupComp\n        ].forEach((group, idx) => {\n            if (!group) {\n                return;\n            }\n            group.toggleGroupExpand(groupExpandedState[idx]);\n        });\n    }\n    createAutoScrollService() {\n        const eGui = this.getGui();\n        this.autoScrollService = new ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.AutoScrollService({\n            scrollContainer: eGui,\n            scrollAxis: 'y',\n            getVerticalPosition: () => eGui.scrollTop,\n            setVerticalPosition: (position) => eGui.scrollTop = position\n        });\n    }\n    createComponent(component, id) {\n        const eDiv = document.createElement('div');\n        eDiv.id = id;\n        eDiv.className = 'ag-chart-data-section';\n        eDiv.appendChild(component.getGui());\n        return eDiv;\n    }\n    addComponent(parent, component, id) {\n        const eDiv = this.createComponent(component, id);\n        parent.appendChild(eDiv);\n    }\n    addComponentAtIndex(parent, component, id, index) {\n        const eDiv = this.createComponent(component, id);\n        parent.insertBefore(eDiv, parent.children[index]);\n    }\n    addChangeListener(component, columnState) {\n        this.addManagedListener(component, ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.AgAbstractField.EVENT_CHANGED, () => {\n            columnState.selected = component.getValue();\n            this.chartController.updateForPanelChange(columnState);\n        });\n    }\n    createCategoriesGroup(columns) {\n        this.categoriesGroupComp = this.createBean(new ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.AgGroupComponent({\n            title: this.getCategoryGroupTitle(),\n            enabled: true,\n            suppressEnabledCheckbox: true,\n            suppressOpenCloseIcons: false,\n            cssIdentifier: 'charts-data'\n        }));\n        const inputName = `chartDimension${this.getCompId()}`;\n        columns.forEach(col => {\n            const comp = this.categoriesGroupComp.createManagedBean(new ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.AgRadioButton());\n            comp.setLabel(ag_grid_community__WEBPACK_IMPORTED_MODULE_0__._.escapeString(col.displayName));\n            comp.setValue(col.selected);\n            comp.setInputName(inputName);\n            this.addChangeListener(comp, col);\n            this.categoriesGroupComp.addItem(comp);\n            this.columnComps.set(col.colId, comp);\n        });\n        this.addComponent(this.getGui(), this.categoriesGroupComp, 'categoriesGroup');\n    }\n    createSeriesGroup(columns) {\n        this.seriesGroupComp = this.createManagedBean(new ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.AgGroupComponent({\n            title: this.getSeriesGroupTitle(),\n            enabled: true,\n            suppressEnabledCheckbox: true,\n            suppressOpenCloseIcons: false,\n            cssIdentifier: 'charts-data'\n        }));\n        if (this.chartController.isActiveXYChart()) {\n            const pairedModeToggle = this.seriesGroupComp.createManagedBean(new ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.AgToggleButton());\n            pairedModeToggle\n                .setLabel(this.chartTranslationService.translate('paired'))\n                .setLabelAlignment('left')\n                .setLabelWidth('flex')\n                .setInputWidth(45)\n                .setValue(this.chartOptionsService.getPairedMode())\n                .onValueChange(newValue => {\n                this.chartOptionsService.setPairedMode(!!newValue);\n                this.chartController.updateForGridChange();\n            });\n            this.seriesGroupComp.addItem(pairedModeToggle);\n        }\n        const getSeriesLabel = this.generateGetSeriesLabel();\n        columns.forEach(col => {\n            const comp = this.seriesGroupComp.createManagedBean(new ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.AgCheckbox());\n            comp.addCssClass('ag-data-select-checkbox');\n            const label = getSeriesLabel(col);\n            comp.setLabel(label);\n            comp.setValue(col.selected);\n            this.addChangeListener(comp, col);\n            this.seriesGroupComp.addItem(comp);\n            this.columnComps.set(col.colId, comp);\n            this.addDragHandle(comp, col);\n        });\n        const eGui = this.getGui();\n        const seriesGroupGui = this.seriesGroupComp.getGui();\n        this.addComponent(eGui, this.seriesGroupComp, 'seriesGroup');\n        const dropTarget = {\n            getIconName: () => ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.DragAndDropService.ICON_MOVE,\n            getContainer: () => seriesGroupGui,\n            onDragging: (params) => this.onDragging(params),\n            onDragLeave: () => this.onDragLeave(),\n            isInterestedIn: this.isInterestedIn.bind(this),\n            targetContainsSource: true\n        };\n        this.dragAndDropService.addDropTarget(dropTarget);\n        this.addDestroyFunc(() => this.dragAndDropService.removeDropTarget(dropTarget));\n    }\n    createSeriesChartTypeGroup(columns, index) {\n        if (!this.chartController.isComboChart()) {\n            return;\n        }\n        this.seriesChartTypeGroupComp = this.createManagedBean(new ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.AgGroupComponent({\n            title: this.chartTranslationService.translate('seriesChartType'),\n            enabled: true,\n            suppressEnabledCheckbox: true,\n            suppressOpenCloseIcons: false,\n            cssIdentifier: 'charts-data'\n        }));\n        const seriesChartTypes = this.chartController.getSeriesChartTypes();\n        columns.forEach(col => {\n            if (!col.selected) {\n                return;\n            }\n            const seriesChartType = seriesChartTypes.filter(s => s.colId === col.colId)[0];\n            if (!seriesChartType) {\n                return;\n            }\n            const seriesItemGroup = this.seriesChartTypeGroupComp.createManagedBean(new ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.AgGroupComponent({\n                title: col.displayName,\n                enabled: true,\n                suppressEnabledCheckbox: true,\n                suppressOpenCloseIcons: true,\n                cssIdentifier: 'charts-format-sub-level'\n            }));\n            const secondaryAxisComp = this.seriesChartTypeGroupComp\n                .createManagedBean(new ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.AgCheckbox())\n                .setLabel(this.chartTranslationService.translate('secondaryAxis'))\n                .setLabelWidth(\"flex\")\n                .setDisabled(['groupedColumn', 'stackedColumn', 'stackedArea'].includes(seriesChartType.chartType))\n                .setValue(!!seriesChartType.secondaryAxis)\n                .onValueChange((enabled) => this.chartController.updateSeriesChartType(col.colId, undefined, enabled));\n            seriesItemGroup.addItem(secondaryAxisComp);\n            const translate = (key, defaultText) => {\n                return this.chartTranslationService.translate(key, defaultText);\n            };\n            const availableChartTypes = [\n                { value: 'line', text: translate('line', 'Line') },\n                { value: 'area', text: translate('area', 'Area') },\n                { value: 'stackedArea', text: translate('stackedArea', 'StackedArea') },\n                { value: 'groupedColumn', text: translate('groupedColumn', 'Grouped Column') },\n                { value: 'stackedColumn', text: translate('stackedColumn', 'Stacked Column') },\n            ];\n            const chartTypeComp = seriesItemGroup.createManagedBean(new ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.AgSelect());\n            chartTypeComp\n                .setLabelAlignment('left')\n                .setLabelWidth(\"flex\")\n                .addOptions(availableChartTypes)\n                .setValue(seriesChartType.chartType)\n                .onValueChange((chartType) => this.chartController.updateSeriesChartType(col.colId, chartType));\n            seriesItemGroup.addItem(chartTypeComp);\n            this.seriesChartTypeGroupComp.addItem(seriesItemGroup);\n        });\n        if (index === undefined) {\n            this.addComponent(this.getGui(), this.seriesChartTypeGroupComp, 'seriesChartTypeGroup');\n        }\n        else {\n            this.addComponentAtIndex(this.getGui(), this.seriesChartTypeGroupComp, 'seriesChartTypeGroup', index);\n        }\n    }\n    addDragHandle(comp, col) {\n        const eDragHandle = ag_grid_community__WEBPACK_IMPORTED_MODULE_0__._.createIconNoSpan('columnDrag', this.gridOptionsService);\n        eDragHandle.classList.add('ag-drag-handle', 'ag-chart-data-column-drag-handle');\n        comp.getGui().insertAdjacentElement('beforeend', eDragHandle);\n        const dragSource = {\n            type: ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.DragSourceType.ChartPanel,\n            eElement: eDragHandle,\n            dragItemName: col.displayName,\n            getDragItem: () => ({ columns: [col.column] }),\n            onDragStopped: () => this.onDragStop()\n        };\n        this.dragAndDropService.addDragSource(dragSource, true);\n        this.addDestroyFunc(() => this.dragAndDropService.removeDragSource(dragSource));\n    }\n    generateGetSeriesLabel() {\n        if (!this.chartController.isActiveXYChart()) {\n            return col => ag_grid_community__WEBPACK_IMPORTED_MODULE_0__._.escapeString(col.displayName);\n        }\n        const isBubble = this.chartType === 'bubble';\n        const isInPairedMode = this.isInPairedMode();\n        let selectedValuesCount = 0;\n        const indexToAxisLabel = new Map();\n        indexToAxisLabel.set(0, 'X');\n        indexToAxisLabel.set(1, 'Y');\n        indexToAxisLabel.set(2, 'size');\n        return (col) => {\n            const escapedLabel = ag_grid_community__WEBPACK_IMPORTED_MODULE_0__._.escapeString(col.displayName);\n            if (!col.selected) {\n                return escapedLabel;\n            }\n            let axisLabel;\n            if (isInPairedMode) {\n                axisLabel = indexToAxisLabel.get(selectedValuesCount % (isBubble ? 3 : 2));\n            }\n            else {\n                if (selectedValuesCount === 0) {\n                    axisLabel = 'X';\n                }\n                else {\n                    axisLabel = isBubble && selectedValuesCount % 2 === 0 ? 'size' : 'Y';\n                }\n            }\n            selectedValuesCount++;\n            return `${escapedLabel} (${axisLabel})`;\n        };\n    }\n    getCategoryGroupTitle() {\n        return this.chartTranslationService.translate(this.chartController.isActiveXYChart() ? 'labels' : 'categories');\n    }\n    getSeriesGroupTitle() {\n        return this.chartTranslationService.translate(this.chartController.isActiveXYChart() ? 'xyValues' : 'series');\n    }\n    getDataPanelDef() {\n        var _a;\n        const userProvidedDataPanelDef = (_a = this.gridOptionsService.get('chartToolPanelsDef')) === null || _a === void 0 ? void 0 : _a.dataPanel;\n        return userProvidedDataPanelDef ? userProvidedDataPanelDef : DefaultDataPanelDef;\n    }\n    isInPairedMode() {\n        return this.chartController.isActiveXYChart() && this.chartOptionsService.getSeriesOption('paired', 'scatter');\n    }\n    clearComponents() {\n        ag_grid_community__WEBPACK_IMPORTED_MODULE_0__._.clearElement(this.getGui());\n        this.categoriesGroupComp = this.destroyBean(this.categoriesGroupComp);\n        this.seriesGroupComp = this.destroyBean(this.seriesGroupComp);\n        this.seriesChartTypeGroupComp = this.destroyBean(this.seriesChartTypeGroupComp);\n        this.columnComps.clear();\n    }\n    onDragging(draggingEvent) {\n        const itemHovered = this.checkHoveredItem(draggingEvent);\n        if (!itemHovered) {\n            return;\n        }\n        this.lastDraggedColumn = draggingEvent.dragItem.columns[0];\n        const { comp, position } = itemHovered;\n        const { comp: lastHoveredComp, position: lastHoveredPosition } = this.lastHoveredItem || {};\n        if (comp === lastHoveredComp && position === lastHoveredPosition) {\n            return;\n        }\n        this.autoScrollService.check(draggingEvent.event);\n        this.clearHoveredItems();\n        this.lastHoveredItem = { comp, position };\n        const eGui = comp.getGui();\n        eGui.classList.add('ag-list-item-hovered', `ag-item-highlight-${position}`);\n    }\n    checkHoveredItem(draggingEvent) {\n        if (ag_grid_community__WEBPACK_IMPORTED_MODULE_0__._.missing(draggingEvent.vDirection)) {\n            return null;\n        }\n        const mouseEvent = draggingEvent.event;\n        for (const comp of this.columnComps.values()) {\n            const eGui = comp.getGui();\n            if (!eGui.querySelector('.ag-chart-data-column-drag-handle')) {\n                continue;\n            }\n            const rect = eGui.getBoundingClientRect();\n            const isOverComp = mouseEvent.clientY >= rect.top && mouseEvent.clientY <= rect.bottom;\n            if (isOverComp) {\n                const height = eGui.clientHeight;\n                const position = mouseEvent.clientY > rect.top + (height / 2) ? 'bottom' : 'top';\n                return { comp, position };\n            }\n        }\n        return null;\n    }\n    onDragLeave() {\n        this.clearHoveredItems();\n    }\n    onDragStop() {\n        if (this.lastHoveredItem) {\n            const { dimensionCols, valueCols } = this.chartController.getColStateForMenu();\n            const draggedColumnState = [...dimensionCols, ...valueCols]\n                .find(state => state.column === this.lastDraggedColumn);\n            if (draggedColumnState) {\n                let targetIndex = Array.from(this.columnComps.values()).indexOf(this.lastHoveredItem.comp);\n                if (this.lastHoveredItem.position === 'bottom') {\n                    targetIndex++;\n                }\n                draggedColumnState.order = targetIndex;\n                this.chartController.updateForPanelChange(draggedColumnState);\n            }\n        }\n        this.clearHoveredItems();\n        this.lastDraggedColumn = undefined;\n        this.autoScrollService.ensureCleared();\n    }\n    clearHoveredItems() {\n        this.columnComps.forEach(columnComp => {\n            columnComp.getGui().classList.remove('ag-list-item-hovered', 'ag-item-highlight-top', 'ag-item-highlight-bottom');\n        });\n        this.lastHoveredItem = undefined;\n    }\n    isInterestedIn(type) {\n        return type === ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.DragSourceType.ChartPanel;\n    }\n}\nChartDataPanel.TEMPLATE = `<div class=\"ag-chart-data-wrapper ag-scrollable-container\"></div>`;\n__decorate$1c([\n    (0,ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.Autowired)('dragAndDropService')\n], ChartDataPanel.prototype, \"dragAndDropService\", void 0);\n__decorate$1c([\n    (0,ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.Autowired)('chartTranslationService')\n], ChartDataPanel.prototype, \"chartTranslationService\", void 0);\n__decorate$1c([\n    ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.PostConstruct\n], ChartDataPanel.prototype, \"init\", null);\n\nvar __decorate$1b = ( false) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nclass FontPanel extends ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.Component {\n    constructor(params) {\n        super();\n        this.activeComps = [];\n        this.params = params;\n    }\n    init() {\n        const groupParams = {\n            cssIdentifier: 'charts-format-sub-level',\n            direction: 'vertical',\n            suppressOpenCloseIcons: true\n        };\n        this.setTemplate(FontPanel.TEMPLATE, { fontGroup: groupParams });\n        this.initGroup();\n        this.initFontFamilySelect();\n        this.initFontWeightStyleSelect();\n        this.initFontSizeSelect();\n        this.initFontColorPicker();\n    }\n    addCompToPanel(comp) {\n        this.fontGroup.addItem(comp);\n        this.activeComps.push(comp);\n    }\n    setEnabled(enabled) {\n        this.fontGroup.setEnabled(enabled);\n    }\n    initGroup() {\n        this.fontGroup\n            .setTitle(this.params.name || this.chartTranslationService.translate('font'))\n            .setEnabled(this.params.enabled)\n            .hideEnabledCheckbox(!!this.params.suppressEnabledCheckbox)\n            .hideOpenCloseIcons(true)\n            .onEnableChange(enabled => {\n            if (this.params.setEnabled) {\n                this.params.setEnabled(enabled);\n            }\n        });\n    }\n    initFontFamilySelect() {\n        const families = [\n            'Arial, sans-serif',\n            'Aria Black, sans-serif',\n            'Book Antiqua,  serif',\n            'Charcoal, sans-serif',\n            'Comic Sans MS, cursive',\n            'Courier, monospace',\n            'Courier New, monospace',\n            'Gadget, sans-serif',\n            'Geneva, sans-serif',\n            'Helvetica, sans-serif',\n            'Impact, sans-serif',\n            'Lucida Console, monospace',\n            'Lucida Grande, sans-serif',\n            'Lucida Sans Unicode,  sans-serif',\n            'Monaco, monospace',\n            'Palatino Linotype, serif',\n            'Palatino, serif',\n            'Times New Roman, serif',\n            'Times, serif',\n            'Verdana, sans-serif'\n        ];\n        const { family } = this.params.initialFont;\n        let initialValue = families[0];\n        if (family) {\n            // check for known values using lowercase\n            const lowerCaseValues = families.map(f => f.toLowerCase());\n            const valueIndex = lowerCaseValues.indexOf(family.toLowerCase());\n            if (valueIndex >= 0) {\n                initialValue = families[valueIndex];\n            }\n            else {\n                // add user provided value to list\n                const capitalisedFontValue = ag_grid_community__WEBPACK_IMPORTED_MODULE_0__._.capitalise(family);\n                families.push(capitalisedFontValue);\n                initialValue = capitalisedFontValue;\n            }\n        }\n        const options = families.sort().map(value => ({ value, text: value }));\n        this.familySelect.addOptions(options)\n            .setInputWidth('flex')\n            .setValue(`${initialValue}`)\n            .onValueChange(newValue => this.params.setFont({ family: newValue }));\n    }\n    initFontSizeSelect() {\n        const sizes = [8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32, 34, 36];\n        const { size } = this.params.initialFont;\n        if (!ag_grid_community__WEBPACK_IMPORTED_MODULE_0__._.includes(sizes, size)) {\n            sizes.push(size);\n        }\n        const options = sizes.sort((a, b) => a - b).map(value => ({ value: `${value}`, text: `${value}` }));\n        this.sizeSelect.addOptions(options)\n            .setInputWidth('flex')\n            .setValue(`${size}`)\n            .onValueChange(newValue => this.params.setFont({ size: parseInt(newValue, 10) }));\n        this.sizeSelect.setLabel(this.chartTranslationService.translate('size'));\n    }\n    initFontWeightStyleSelect() {\n        const { weight = 'normal', style = 'normal' } = this.params.initialFont;\n        const weightStyles = [\n            { name: 'normal', weight: 'normal', style: 'normal' },\n            { name: 'bold', weight: 'bold', style: 'normal' },\n            { name: 'italic', weight: 'normal', style: 'italic' },\n            { name: 'boldItalic', weight: 'bold', style: 'italic' }\n        ];\n        let selectedOption = weightStyles.find(x => x.weight === weight && x.style === style);\n        if (!selectedOption) {\n            selectedOption = { name: 'predefined', weight, style };\n            weightStyles.unshift(selectedOption);\n        }\n        const options = weightStyles.map(ws => ({\n            value: ws.name,\n            text: this.chartTranslationService.translate(ws.name),\n        }));\n        this.weightStyleSelect.addOptions(options)\n            .setInputWidth('flex')\n            .setValue(selectedOption.name)\n            .onValueChange(newValue => {\n            const selectedWeightStyle = weightStyles.find(x => x.name === newValue);\n            this.params.setFont({ weight: selectedWeightStyle.weight, style: selectedWeightStyle.style });\n        });\n    }\n    initFontColorPicker() {\n        this.colorPicker\n            .setLabel(this.chartTranslationService.translate('color'))\n            .setInputWidth(45)\n            .setValue(`${this.params.initialFont.color}`)\n            .onValueChange(newColor => this.params.setFont({ color: newColor }));\n    }\n    addItemToPanel(item) {\n        this.fontGroup.addItem(item);\n        this.activeComps.push(item);\n    }\n    destroyActiveComps() {\n        this.activeComps.forEach(comp => {\n            ag_grid_community__WEBPACK_IMPORTED_MODULE_0__._.removeFromParent(comp.getGui());\n            this.destroyBean(comp);\n        });\n    }\n    destroy() {\n        this.destroyActiveComps();\n        super.destroy();\n    }\n}\nFontPanel.TEMPLATE = `<div class=\"ag-font-panel\">\n            <ag-group-component ref=\"fontGroup\">\n                <ag-select ref=\"familySelect\"></ag-select>\n                <ag-select ref=\"weightStyleSelect\"></ag-select>\n                <div class=\"ag-charts-font-size-color\">\n                    <ag-select ref=\"sizeSelect\"></ag-select>\n                    <ag-color-picker ref=\"colorPicker\"></ag-color-picker>\n                </div>\n            </ag-group-component>\n        </div>`;\n__decorate$1b([\n    (0,ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.RefSelector)('fontGroup')\n], FontPanel.prototype, \"fontGroup\", void 0);\n__decorate$1b([\n    (0,ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.RefSelector)('familySelect')\n], FontPanel.prototype, \"familySelect\", void 0);\n__decorate$1b([\n    (0,ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.RefSelector)('weightStyleSelect')\n], FontPanel.prototype, \"weightStyleSelect\", void 0);\n__decorate$1b([\n    (0,ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.RefSelector)('sizeSelect')\n], FontPanel.prototype, \"sizeSelect\", void 0);\n__decorate$1b([\n    (0,ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.RefSelector)('colorPicker')\n], FontPanel.prototype, \"colorPicker\", void 0);\n__decorate$1b([\n    (0,ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.Autowired)('chartTranslationService')\n], FontPanel.prototype, \"chartTranslationService\", void 0);\n__decorate$1b([\n    ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.PostConstruct\n], FontPanel.prototype, \"init\", null);\n\nvar __decorate$1a = ( false) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nclass LegendPanel extends ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.Component {\n    constructor({ chartOptionsService, isExpandedOnInit = false }) {\n        super();\n        this.activePanels = [];\n        this.chartOptionsService = chartOptionsService;\n        this.isExpandedOnInit = isExpandedOnInit;\n    }\n    init() {\n        const groupParams = {\n            cssIdentifier: 'charts-format-top-level',\n            direction: 'vertical'\n        };\n        this.setTemplate(LegendPanel.TEMPLATE, { legendGroup: groupParams });\n        this.initLegendGroup();\n        this.initLegendPosition();\n        this.initLegendPadding();\n        this.initLegendItems();\n        this.initLabelPanel();\n    }\n    initLegendGroup() {\n        this.legendGroup\n            .setTitle(this.chartTranslationService.translate(\"legend\"))\n            .hideEnabledCheckbox(false)\n            .setEnabled(this.chartOptionsService.getChartOption(\"legend.enabled\") || false)\n            .toggleGroupExpand(this.isExpandedOnInit)\n            .onEnableChange(enabled => {\n            this.chartOptionsService.setChartOption(\"legend.enabled\", enabled);\n            this.legendGroup.toggleGroupExpand(true);\n        });\n    }\n    initLegendPosition() {\n        const positions = ['top', 'right', 'bottom', 'left'];\n        this.legendPositionSelect\n            .setLabel(this.chartTranslationService.translate(\"position\"))\n            .setLabelWidth(\"flex\")\n            .setInputWidth(80)\n            .addOptions(positions.map(position => ({\n            value: position,\n            text: this.chartTranslationService.translate(position)\n        })))\n            .setValue(this.chartOptionsService.getChartOption(\"legend.position\"))\n            .onValueChange(newValue => this.chartOptionsService.setChartOption(\"legend.position\", newValue));\n    }\n    initLegendPadding() {\n        const currentValue = this.chartOptionsService.getChartOption(\"legend.spacing\");\n        this.legendPaddingSlider\n            .setLabel(this.chartTranslationService.translate(\"spacing\"))\n            .setMaxValue(getMaxValue(currentValue, 200))\n            .setValue(`${currentValue}`)\n            .setTextFieldWidth(45)\n            .onValueChange(newValue => this.chartOptionsService.setChartOption(\"legend.spacing\", newValue));\n    }\n    initLegendItems() {\n        const initSlider = (expression, labelKey, input, defaultMaxValue) => {\n            const currentValue = this.chartOptionsService.getChartOption(`legend.${expression}`);\n            input.setLabel(this.chartTranslationService.translate(labelKey))\n                .setMaxValue(getMaxValue(currentValue, defaultMaxValue))\n                .setValue(`${currentValue}`)\n                .setTextFieldWidth(45)\n                .onValueChange(newValue => {\n                this.chartOptionsService.setChartOption(`legend.${expression}`, newValue);\n            });\n        };\n        initSlider(\"item.marker.size\", \"markerSize\", this.markerSizeSlider, 40);\n        initSlider(\"item.marker.strokeWidth\", \"markerStroke\", this.markerStrokeSlider, 10);\n        initSlider(\"item.marker.padding\", \"itemSpacing\", this.markerPaddingSlider, 20);\n        initSlider(\"item.paddingX\", \"layoutHorizontalSpacing\", this.itemPaddingXSlider, 50);\n        initSlider(\"item.paddingY\", \"layoutVerticalSpacing\", this.itemPaddingYSlider, 50);\n    }\n    initLabelPanel() {\n        const chartProxy = this.chartOptionsService;\n        const initialFont = {\n            family: chartProxy.getChartOption(\"legend.item.label.fontFamily\"),\n            style: chartProxy.getChartOption(\"legend.item.label.fontStyle\"),\n            weight: chartProxy.getChartOption(\"legend.item.label.fontWeight\"),\n            size: chartProxy.getChartOption(\"legend.item.label.fontSize\"),\n            color: chartProxy.getChartOption(\"legend.item.label.color\")\n        };\n        const setFont = (font) => {\n            const proxy = this.chartOptionsService;\n            if (font.family) {\n                proxy.setChartOption(\"legend.item.label.fontFamily\", font.family);\n            }\n            if (font.weight) {\n                proxy.setChartOption(\"legend.item.label.fontWeight\", font.weight);\n            }\n            if (font.style) {\n                proxy.setChartOption(\"legend.item.label.fontStyle\", font.style);\n            }\n            if (font.size) {\n                proxy.setChartOption(\"legend.item.label.fontSize\", font.size);\n            }\n            if (font.color) {\n                proxy.setChartOption(\"legend.item.label.color\", font.color);\n            }\n        };\n        const params = {\n            enabled: true,\n            suppressEnabledCheckbox: true,\n            initialFont: initialFont,\n            setFont: setFont\n        };\n        const fontPanelComp = this.createBean(new FontPanel(params));\n        this.legendGroup.addItem(fontPanelComp);\n        this.activePanels.push(fontPanelComp);\n    }\n    destroyActivePanels() {\n        this.activePanels.forEach(panel => {\n            ag_grid_community__WEBPACK_IMPORTED_MODULE_0__._.removeFromParent(panel.getGui());\n            this.destroyBean(panel);\n        });\n    }\n    destroy() {\n        this.destroyActivePanels();\n        super.destroy();\n    }\n}\nLegendPanel.TEMPLATE = `<div>\n            <ag-group-component ref=\"legendGroup\">\n                <ag-select ref=\"legendPositionSelect\"></ag-select>\n                <ag-slider ref=\"legendPaddingSlider\"></ag-slider>\n                <ag-slider ref=\"markerSizeSlider\"></ag-slider>\n                <ag-slider ref=\"markerStrokeSlider\"></ag-slider>\n                <ag-slider ref=\"markerPaddingSlider\"></ag-slider>\n                <ag-slider ref=\"itemPaddingXSlider\"></ag-slider>\n                <ag-slider ref=\"itemPaddingYSlider\"></ag-slider>\n            </ag-group-component>\n        </div>`;\n__decorate$1a([\n    (0,ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.RefSelector)('legendGroup')\n], LegendPanel.prototype, \"legendGroup\", void 0);\n__decorate$1a([\n    (0,ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.RefSelector)('legendPositionSelect')\n], LegendPanel.prototype, \"legendPositionSelect\", void 0);\n__decorate$1a([\n    (0,ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.RefSelector)('legendPaddingSlider')\n], LegendPanel.prototype, \"legendPaddingSlider\", void 0);\n__decorate$1a([\n    (0,ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.RefSelector)('markerSizeSlider')\n], LegendPanel.prototype, \"markerSizeSlider\", void 0);\n__decorate$1a([\n    (0,ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.RefSelector)('markerStrokeSlider')\n], LegendPanel.prototype, \"markerStrokeSlider\", void 0);\n__decorate$1a([\n    (0,ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.RefSelector)('markerPaddingSlider')\n], LegendPanel.prototype, \"markerPaddingSlider\", void 0);\n__decorate$1a([\n    (0,ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.RefSelector)('itemPaddingXSlider')\n], LegendPanel.prototype, \"itemPaddingXSlider\", void 0);\n__decorate$1a([\n    (0,ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.RefSelector)('itemPaddingYSlider')\n], LegendPanel.prototype, \"itemPaddingYSlider\", void 0);\n__decorate$1a([\n    (0,ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.Autowired)('chartTranslationService')\n], LegendPanel.prototype, \"chartTranslationService\", void 0);\n__decorate$1a([\n    ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.PostConstruct\n], LegendPanel.prototype, \"init\", null);\n\nvar __decorate$19 = ( false) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nclass AxisTicksPanel extends ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.Component {\n    constructor(chartOptionsService) {\n        super();\n        this.chartOptionsService = chartOptionsService;\n    }\n    init() {\n        const groupParams = {\n            cssIdentifier: 'charts-format-sub-level',\n            direction: 'vertical',\n            suppressOpenCloseIcons: true\n        };\n        this.setTemplate(AxisTicksPanel.TEMPLATE, { axisTicksGroup: groupParams });\n        this.initAxisTicks();\n    }\n    initAxisTicks() {\n        this.axisTicksGroup\n            .setTitle(this.chartTranslationService.translate(\"ticks\"))\n            .hideOpenCloseIcons(true)\n            .hideEnabledCheckbox(true);\n        this.axisTicksColorPicker\n            .setLabel(this.chartTranslationService.translate(\"color\"))\n            .setLabelWidth(\"flex\")\n            .setInputWidth(45)\n            .setValue(this.chartOptionsService.getAxisProperty(\"tick.color\"))\n            .onValueChange(newColor => this.chartOptionsService.setAxisProperty(\"tick.color\", newColor));\n        const initInput = (expression, input, label, defaultMaxValue) => {\n            const currentValue = this.chartOptionsService.getAxisProperty(expression);\n            input.setLabel(label)\n                .setMaxValue(getMaxValue(currentValue, defaultMaxValue))\n                .setValue(`${currentValue}`)\n                .setTextFieldWidth(45)\n                .onValueChange(newValue => this.chartOptionsService.setAxisProperty(expression, newValue));\n        };\n        initInput(\"tick.width\", this.axisTicksWidthSlider, this.chartTranslationService.translate(\"width\"), 10);\n        initInput(\"tick.size\", this.axisTicksSizeSlider, this.chartTranslationService.translate(\"length\"), 30);\n    }\n}\nAxisTicksPanel.TEMPLATE = `<div>\n            <ag-group-component ref=\"axisTicksGroup\">\n                <ag-color-picker ref=\"axisTicksColorPicker\"></ag-color-picker>\n                <ag-slider ref=\"axisTicksWidthSlider\"></ag-slider>\n                <ag-slider ref=\"axisTicksSizeSlider\"></ag-slider>\n            </ag-group-component>\n        </div>`;\n__decorate$19([\n    (0,ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.RefSelector)('axisTicksGroup')\n], AxisTicksPanel.prototype, \"axisTicksGroup\", void 0);\n__decorate$19([\n    (0,ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.RefSelector)('axisTicksColorPicker')\n], AxisTicksPanel.prototype, \"axisTicksColorPicker\", void 0);\n__decorate$19([\n    (0,ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.RefSelector)('axisTicksWidthSlider')\n], AxisTicksPanel.prototype, \"axisTicksWidthSlider\", void 0);\n__decorate$19([\n    (0,ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.RefSelector)('axisTicksSizeSlider')\n], AxisTicksPanel.prototype, \"axisTicksSizeSlider\", void 0);\n__decorate$19([\n    (0,ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.Autowired)('chartTranslationService')\n], AxisTicksPanel.prototype, \"chartTranslationService\", void 0);\n__decorate$19([\n    ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.PostConstruct\n], AxisTicksPanel.prototype, \"init\", null);\n\nvar __decorate$18 = ( false) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nclass AgAngleSelect extends ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.AgAbstractLabel {\n    constructor(config) {\n        super(config, AgAngleSelect.TEMPLATE);\n        this.radius = 0;\n        this.offsetX = 0;\n        this.offsetY = 0;\n    }\n    postConstruct() {\n        super.postConstruct();\n        this.dragListener = {\n            eElement: this.eParentCircle,\n            dragStartPixels: 0,\n            onDragStart: (e) => {\n                this.parentCircleRect = this.eParentCircle.getBoundingClientRect();\n            },\n            onDragging: (e) => this.calculateAngleDrag(e),\n            onDragStop: () => { }\n        };\n        this.dragService.addDragSource(this.dragListener);\n        this.eAngleValue\n            .setLabel('')\n            .setLabelWidth(5)\n            .setInputWidth(45)\n            .setMin(0)\n            .setMax(360)\n            .setValue(`${this.degrees}`)\n            .onValueChange((value) => {\n            if (value == null || value === '') {\n                value = '0';\n            }\n            value = this.eAngleValue.normalizeValue(value);\n            let floatValue = parseFloat(value);\n            if (floatValue > 180) {\n                floatValue = floatValue - 360;\n            }\n            this.setValue(floatValue);\n        });\n        this.updateNumberInput();\n        if (ag_grid_community__WEBPACK_IMPORTED_MODULE_0__._.exists(this.getValue())) {\n            this.eAngleValue.setValue(this.normalizeNegativeValue(this.getValue()).toString());\n        }\n        this.addManagedListener(this, ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.AgAbstractField.EVENT_CHANGED, () => {\n            const eDocument = this.gridOptionsService.getDocument();\n            if (this.eAngleValue.getInputElement().contains(eDocument.activeElement)) {\n                return;\n            }\n            this.updateNumberInput();\n        });\n    }\n    updateNumberInput() {\n        const normalizedValue = this.normalizeNegativeValue(this.getValue());\n        this.eAngleValue.setValue(normalizedValue.toString());\n    }\n    positionChildCircle(radians) {\n        const rect = this.parentCircleRect || { width: 24, height: 24 };\n        const eChildCircle = this.eChildCircle;\n        const centerX = rect.width / 2;\n        const centerY = rect.height / 2;\n        eChildCircle.style.left = `${centerX + Math.cos(radians) * 8}px`;\n        eChildCircle.style.top = `${centerY + Math.sin(radians) * 8}px`;\n    }\n    calculatePolar() {\n        const x = this.offsetX;\n        const y = this.offsetY;\n        const radians = Math.atan2(y, x);\n        this.degrees = this.toDegrees(radians);\n        this.radius = Math.sqrt((x * x) + (y * y));\n        this.positionChildCircle(radians);\n    }\n    calculateCartesian() {\n        const radians = this.toRadians(this.getValue());\n        const radius = this.getRadius();\n        this\n            .setOffsetX(Math.cos(radians) * radius)\n            .setOffsetY(Math.sin(radians) * radius);\n    }\n    setOffsetX(offset) {\n        if (this.offsetX !== offset) {\n            this.offsetX = offset;\n            this.calculatePolar();\n        }\n        return this;\n    }\n    setOffsetY(offset) {\n        if (this.offsetY !== offset) {\n            this.offsetY = offset;\n            this.calculatePolar();\n        }\n        return this;\n    }\n    calculateAngleDrag(e) {\n        const rect = this.parentCircleRect;\n        const centerX = rect.width / 2;\n        const centerY = rect.height / 2;\n        const x = e.clientX - rect.left;\n        const y = e.clientY - rect.top;\n        const dx = x - centerX;\n        const dy = y - centerY;\n        const radians = Math.atan2(dy, dx);\n        this.setValue(radians, true);\n    }\n    toDegrees(radians) {\n        return radians / Math.PI * 180;\n    }\n    toRadians(degrees) {\n        return degrees / 180 * Math.PI;\n    }\n    normalizeNegativeValue(degrees) {\n        return degrees < 0 ? 360 + degrees : degrees;\n    }\n    normalizeAngle180(radians) {\n        radians %= Math.PI * 2;\n        if (radians < -Math.PI) {\n            radians += Math.PI * 2;\n        }\n        else if (radians >= Math.PI) {\n            radians -= Math.PI * 2;\n        }\n        return radians;\n    }\n    getRadius() {\n        return this.radius;\n    }\n    setRadius(r) {\n        if (this.radius === r) {\n            return this;\n        }\n        this.radius = r;\n        this.calculateCartesian();\n        return this;\n    }\n    onValueChange(callbackFn) {\n        this.addManagedListener(this, ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.AgAbstractField.EVENT_CHANGED, () => {\n            callbackFn(this.degrees);\n        });\n        return this;\n    }\n    getValue(radians) {\n        return radians ? this.toRadians(this.degrees) : this.degrees;\n    }\n    setValue(degrees, radians) {\n        let radiansValue;\n        if (!radians) {\n            radiansValue = this.normalizeAngle180(this.toRadians(degrees));\n        }\n        else {\n            radiansValue = degrees;\n        }\n        degrees = this.toDegrees(radiansValue);\n        if (this.degrees !== degrees) {\n            this.degrees = Math.floor(degrees);\n            this.calculateCartesian();\n            this.positionChildCircle(radiansValue);\n            this.dispatchEvent({ type: ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.AgAbstractField.EVENT_CHANGED });\n        }\n        return this;\n    }\n    setWidth(width) {\n        ag_grid_community__WEBPACK_IMPORTED_MODULE_0__._.setFixedWidth(this.getGui(), width);\n        return this;\n    }\n    setDisabled(disabled) {\n        super.setDisabled(disabled);\n        this.eAngleValue.setDisabled(disabled);\n        return this;\n    }\n    destroy() {\n        this.dragService.removeDragSource(this.dragListener);\n        super.destroy();\n    }\n}\nAgAngleSelect.TEMPLATE = `<div class=\"ag-angle-select\">\n            <div ref=\"eLabel\"></div>\n            <div class=\"ag-wrapper ag-angle-select-wrapper\">\n                <div ref=\"eAngleSelectField\" class=\"ag-angle-select-field\">\n                    <div ref=\"eParentCircle\" class=\"ag-angle-select-parent-circle\">\n                        <div ref=\"eChildCircle\" class=\"ag-angle-select-child-circle\"></div>\n                    </div>\n                </div>\n                <ag-input-number-field ref=\"eAngleValue\"></ag-input-number-field>\n            </div>\n        </div>`;\n__decorate$18([\n    (0,ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.RefSelector)('eLabel')\n], AgAngleSelect.prototype, \"eLabel\", void 0);\n__decorate$18([\n    (0,ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.RefSelector)('eParentCircle')\n], AgAngleSelect.prototype, \"eParentCircle\", void 0);\n__decorate$18([\n    (0,ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.RefSelector)('eChildCircle')\n], AgAngleSelect.prototype, \"eChildCircle\", void 0);\n__decorate$18([\n    (0,ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.RefSelector)('eAngleValue')\n], AgAngleSelect.prototype, \"eAngleValue\", void 0);\n__decorate$18([\n    (0,ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.Autowired)('dragService')\n], AgAngleSelect.prototype, \"dragService\", void 0);\n\nvar __decorate$17 = ( false) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nclass AxisPanel extends ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.Component {\n    constructor({ chartController, chartOptionsService, isExpandedOnInit = false }) {\n        super();\n        this.activePanels = [];\n        this.axisLabelUpdateFuncs = [];\n        this.prevXRotation = 0;\n        this.prevYRotation = 0;\n        this.chartController = chartController;\n        this.chartOptionsService = chartOptionsService;\n        this.isExpandedOnInit = isExpandedOnInit;\n    }\n    init() {\n        const groupParams = {\n            cssIdentifier: 'charts-format-top-level',\n            direction: 'vertical'\n        };\n        this.setTemplate(AxisPanel.TEMPLATE, { axisGroup: groupParams });\n        this.initAxis();\n        this.initAxisTicks();\n        this.initAxisLabels();\n        const updateAxisLabelRotations = () => this.axisLabelUpdateFuncs.forEach(func => func());\n        this.addManagedListener(this.chartController, ChartController.EVENT_CHART_UPDATED, updateAxisLabelRotations);\n    }\n    initAxis() {\n        this.axisGroup\n            .setTitle(this.translate(\"axis\"))\n            .toggleGroupExpand(this.isExpandedOnInit)\n            .hideEnabledCheckbox(true);\n        this.axisColorInput\n            .setLabel(this.translate(\"color\"))\n            .setLabelWidth(\"flex\")\n            .setInputWidth(45)\n            .setValue(this.chartOptionsService.getAxisProperty(\"line.color\"))\n            .onValueChange(newColor => this.chartOptionsService.setAxisProperty(\"line.color\", newColor));\n        const currentValue = this.chartOptionsService.getAxisProperty(\"line.width\");\n        this.axisLineWidthSlider\n            .setMaxValue(getMaxValue(currentValue, 10))\n            .setLabel(this.translate(\"thickness\"))\n            .setTextFieldWidth(45)\n            .setValue(`${currentValue}`)\n            .onValueChange(newValue => this.chartOptionsService.setAxisProperty(\"line.width\", newValue));\n    }\n    initAxisTicks() {\n        const axisTicksComp = this.createBean(new AxisTicksPanel(this.chartOptionsService));\n        this.axisGroup.addItem(axisTicksComp);\n        this.activePanels.push(axisTicksComp);\n    }\n    initAxisLabels() {\n        const initialFont = {\n            family: this.chartOptionsService.getAxisProperty(\"label.fontFamily\"),\n            style: this.chartOptionsService.getAxisProperty(\"label.fontStyle\"),\n            weight: this.chartOptionsService.getAxisProperty(\"label.fontWeight\"),\n            size: this.chartOptionsService.getAxisProperty(\"label.fontSize\"),\n            color: this.chartOptionsService.getAxisProperty(\"label.color\")\n        };\n        const setFont = (font) => {\n            if (font.family) {\n                this.chartOptionsService.setAxisProperty(\"label.fontFamily\", font.family);\n            }\n            if (font.weight) {\n                this.chartOptionsService.setAxisProperty(\"label.fontWeight\", font.weight);\n            }\n            if (font.style) {\n                this.chartOptionsService.setAxisProperty(\"label.fontStyle\", font.style);\n            }\n            if (font.size) {\n                this.chartOptionsService.setAxisProperty(\"label.fontSize\", font.size);\n            }\n            if (font.color) {\n                this.chartOptionsService.setAxisProperty(\"label.color\", font.color);\n            }\n        };\n        const params = {\n            name: this.translate(\"labels\"),\n            enabled: true,\n            suppressEnabledCheckbox: true,\n            initialFont,\n            setFont\n        };\n        const labelPanelComp = this.createBean(new FontPanel(params));\n        this.axisGroup.addItem(labelPanelComp);\n        this.activePanels.push(labelPanelComp);\n        this.addAdditionalLabelComps(labelPanelComp);\n    }\n    addAdditionalLabelComps(labelPanelComp) {\n        this.addLabelPadding(labelPanelComp);\n        const { xRotationComp, yRotationComp } = this.createRotationWidgets();\n        const autoRotateCb = this.initLabelRotations(xRotationComp, yRotationComp);\n        labelPanelComp.addCompToPanel(autoRotateCb);\n        labelPanelComp.addCompToPanel(xRotationComp);\n        labelPanelComp.addCompToPanel(yRotationComp);\n    }\n    initLabelRotations(xRotationComp, yRotationComp) {\n        const getLabelRotation = (axisType) => {\n            return this.chartOptionsService.getLabelRotation(axisType);\n        };\n        const setLabelRotation = (axisType, value) => {\n            this.chartOptionsService.setLabelRotation(axisType, value);\n        };\n        const updateAutoRotate = (autoRotate) => {\n            this.chartOptionsService.setAxisProperty(\"label.autoRotate\", autoRotate);\n            if (autoRotate) {\n                // store prev rotations before we remove them from the options\n                this.prevXRotation = getLabelRotation(\"xAxis\");\n                this.prevYRotation = getLabelRotation(\"yAxis\");\n                // `autoRotate` is only\n                setLabelRotation(\"xAxis\", undefined);\n                setLabelRotation(\"yAxis\", undefined);\n            }\n            else {\n                // reinstate prev rotations\n                setLabelRotation(\"xAxis\", this.prevXRotation);\n                setLabelRotation(\"yAxis\", this.prevYRotation);\n            }\n            xRotationComp.setDisabled(autoRotate);\n            yRotationComp.setDisabled(autoRotate);\n        };\n        const getAutoRotateValue = () => {\n            const xRotation = getLabelRotation(\"xAxis\");\n            const yRotation = getLabelRotation(\"yAxis\");\n            if (xRotation == undefined && yRotation == undefined) {\n                return this.chartOptionsService.getAxisProperty(\"label.autoRotate\");\n            }\n            return false;\n        };\n        const autoRotate = getAutoRotateValue();\n        const autoRotateCheckbox = this.createBean(new ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.AgCheckbox())\n            .setLabel(this.translate('autoRotate'))\n            .setValue(autoRotate)\n            .onValueChange(updateAutoRotate);\n        // init rotation comp state\n        xRotationComp.setDisabled(autoRotate);\n        yRotationComp.setDisabled(autoRotate);\n        return autoRotateCheckbox;\n    }\n    createRotationWidgets() {\n        const degreesSymbol = String.fromCharCode(176);\n        const createRotationComp = (labelKey, axisType) => {\n            const label = `${this.chartTranslationService.translate(labelKey)} ${degreesSymbol}`;\n            const value = this.chartOptionsService.getLabelRotation(axisType);\n            const angleSelect = new AgAngleSelect()\n                .setLabel(label)\n                .setLabelWidth(\"flex\")\n                .setValue(value || 0)\n                .onValueChange(newValue => this.chartOptionsService.setLabelRotation(axisType, newValue));\n            // the axis label rotation needs to be updated when the default category changes in the data panel\n            this.axisLabelUpdateFuncs.push(() => {\n                const value = this.chartOptionsService.getLabelRotation(axisType);\n                angleSelect.setValue(value || 0);\n            });\n            return this.createBean(angleSelect);\n        };\n        return {\n            xRotationComp: createRotationComp(\"xRotation\", \"xAxis\"),\n            yRotationComp: createRotationComp(\"yRotation\", \"yAxis\")\n        };\n    }\n    addLabelPadding(labelPanelComp) {\n        const labelPaddingSlider = this.createBean(new ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.AgSlider());\n        const currentValue = this.chartOptionsService.getAxisProperty(\"label.padding\");\n        labelPaddingSlider.setLabel(this.chartTranslationService.translate(\"padding\"))\n            .setMaxValue(getMaxValue(currentValue, 30))\n            .setValue(`${currentValue}`)\n            .setTextFieldWidth(45)\n            .onValueChange(newValue => this.chartOptionsService.setAxisProperty(\"label.padding\", newValue));\n        labelPanelComp.addCompToPanel(labelPaddingSlider);\n    }\n    translate(key, defaultText) {\n        return this.chartTranslationService.translate(key, defaultText);\n    }\n    destroyActivePanels() {\n        this.activePanels.forEach(panel => {\n            ag_grid_community__WEBPACK_IMPORTED_MODULE_0__._.removeFromParent(panel.getGui());\n            this.destroyBean(panel);\n        });\n    }\n    destroy() {\n        this.destroyActivePanels();\n        super.destroy();\n    }\n}\nAxisPanel.TEMPLATE = `<div>\n            <ag-group-component ref=\"axisGroup\">\n                <ag-color-picker ref=\"axisColorInput\"></ag-color-picker>\n                <ag-slider ref=\"axisLineWidthSlider\"></ag-slider>\n            </ag-group-component>\n        </div>`;\n__decorate$17([\n    (0,ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.RefSelector)('axisGroup')\n], AxisPanel.prototype, \"axisGroup\", void 0);\n__decorate$17([\n    (0,ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.RefSelector)('axisColorInput')\n], AxisPanel.prototype, \"axisColorInput\", void 0);\n__decorate$17([\n    (0,ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.RefSelector)('axisLineWidthSlider')\n], AxisPanel.prototype, \"axisLineWidthSlider\", void 0);\n__decorate$17([\n    (0,ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.Autowired)('chartTranslationService')\n], AxisPanel.prototype, \"chartTranslationService\", void 0);\n__decorate$17([\n    ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.PostConstruct\n], AxisPanel.prototype, \"init\", null);\n\nvar __decorate$16 = ( false) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nclass NavigatorPanel extends ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.Component {\n    constructor({ chartOptionsService, isExpandedOnInit = false }) {\n        super();\n        this.chartOptionsService = chartOptionsService;\n        this.isExpandedOnInit = isExpandedOnInit;\n    }\n    init() {\n        const groupParams = {\n            cssIdentifier: 'charts-format-top-level',\n            direction: 'vertical'\n        };\n        this.setTemplate(NavigatorPanel.TEMPLATE, { navigatorGroup: groupParams });\n        this.initNavigator();\n    }\n    initNavigator() {\n        const { chartTranslationService } = this;\n        this.navigatorGroup\n            .setTitle(chartTranslationService.translate(\"navigator\"))\n            .hideEnabledCheckbox(false)\n            .setEnabled(this.chartOptionsService.getChartOption(\"navigator.enabled\") || false)\n            .onEnableChange(enabled => {\n            this.chartOptionsService.setChartOption(\"navigator.enabled\", enabled);\n            this.navigatorGroup.toggleGroupExpand(true);\n        })\n            .toggleGroupExpand(this.isExpandedOnInit);\n        const currentValue = this.chartOptionsService.getChartOption(\"navigator.height\");\n        this.navigatorHeightSlider\n            .setLabel(chartTranslationService.translate(\"height\"))\n            .setMinValue(10)\n            .setMaxValue(getMaxValue(currentValue, 60))\n            .setTextFieldWidth(45)\n            .setValue(`${currentValue || 30}`)\n            .onValueChange(height => this.chartOptionsService.setChartOption(\"navigator.height\", height));\n    }\n    destroy() {\n        super.destroy();\n    }\n}\nNavigatorPanel.TEMPLATE = `<div>\n            <ag-group-component ref=\"navigatorGroup\">\n                <ag-slider ref=\"navigatorHeightSlider\"></ag-slider>\n            </ag-group-component>\n        </div>`;\n__decorate$16([\n    (0,ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.RefSelector)('navigatorGroup')\n], NavigatorPanel.prototype, \"navigatorGroup\", void 0);\n__decorate$16([\n    (0,ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.RefSelector)('navigatorHeightSlider')\n], NavigatorPanel.prototype, \"navigatorHeightSlider\", void 0);\n__decorate$16([\n    (0,ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.Autowired)('chartTranslationService')\n], NavigatorPanel.prototype, \"chartTranslationService\", void 0);\n__decorate$16([\n    ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.PostConstruct\n], NavigatorPanel.prototype, \"init\", null);\n\nvar __decorate$15 = ( false) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nclass PaddingPanel extends ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.Component {\n    constructor(chartOptionsService, chartController) {\n        super();\n        this.chartOptionsService = chartOptionsService;\n        this.chartController = chartController;\n    }\n    init() {\n        const groupParams = {\n            cssIdentifier: 'charts-format-sub-level',\n            direction: 'vertical',\n            suppressOpenCloseIcons: true\n        };\n        this.setTemplate(PaddingPanel.TEMPLATE, { chartPaddingGroup: groupParams });\n        this.addManagedListener(this.eventService, ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.Events.EVENT_CHART_OPTIONS_CHANGED, (e) => {\n            this.updateTopPadding(e.chartOptions);\n        });\n        this.initGroup();\n        this.initChartPaddingItems();\n    }\n    initGroup() {\n        this.chartPaddingGroup\n            .setTitle(this.chartTranslationService.translate(\"padding\"))\n            .hideOpenCloseIcons(true)\n            .hideEnabledCheckbox(true);\n    }\n    initChartPaddingItems() {\n        const initInput = (property, input) => {\n            const currentValue = this.chartOptionsService.getChartOption('padding.' + property);\n            input.setLabel(this.chartTranslationService.translate(property))\n                .setMaxValue(getMaxValue(currentValue, 200))\n                .setValue(`${currentValue}`)\n                .setTextFieldWidth(45)\n                .onValueChange(newValue => this.chartOptionsService.setChartOption('padding.' + property, newValue));\n        };\n        initInput('top', this.paddingTopSlider);\n        initInput('right', this.paddingRightSlider);\n        initInput('bottom', this.paddingBottomSlider);\n        initInput('left', this.paddingLeftSlider);\n    }\n    updateTopPadding(chartOptions) {\n        var _a, _b;\n        // keep 'top' padding in sync with chart as toggling chart title on / off change the 'top' padding\n        const seriesType = this.chartController.getChartSeriesTypes()[0];\n        const topPadding = (_b = (_a = chartOptions[seriesType]) === null || _a === void 0 ? void 0 : _a.padding) === null || _b === void 0 ? void 0 : _b.top;\n        if (topPadding != null) {\n            this.paddingTopSlider.setValue(topPadding);\n        }\n    }\n}\nPaddingPanel.TEMPLATE = `<div>\n            <ag-group-component ref=\"chartPaddingGroup\">\n                <ag-slider ref=\"paddingTopSlider\"></ag-slider>\n                <ag-slider ref=\"paddingRightSlider\"></ag-slider>\n                <ag-slider ref=\"paddingBottomSlider\"></ag-slider>\n                <ag-slider ref=\"paddingLeftSlider\"></ag-slider>\n            </ag-group-component>\n        <div>`;\n__decorate$15([\n    (0,ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.RefSelector)('chartPaddingGroup')\n], PaddingPanel.prototype, \"chartPaddingGroup\", void 0);\n__decorate$15([\n    (0,ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.RefSelector)('paddingTopSlider')\n], PaddingPanel.prototype, \"paddingTopSlider\", void 0);\n__decorate$15([\n    (0,ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.RefSelector)('paddingRightSlider')\n], PaddingPanel.prototype, \"paddingRightSlider\", void 0);\n__decorate$15([\n    (0,ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.RefSelector)('paddingBottomSlider')\n], PaddingPanel.prototype, \"paddingBottomSlider\", void 0);\n__decorate$15([\n    (0,ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.RefSelector)('paddingLeftSlider')\n], PaddingPanel.prototype, \"paddingLeftSlider\", void 0);\n__decorate$15([\n    (0,ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.Autowired)('chartTranslationService')\n], PaddingPanel.prototype, \"chartTranslationService\", void 0);\n__decorate$15([\n    ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.PostConstruct\n], PaddingPanel.prototype, \"init\", null);\n\nvar __decorate$14 = ( false) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nclass BackgroundPanel extends ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.Component {\n    constructor(chartOptionsService) {\n        super();\n        this.chartOptionsService = chartOptionsService;\n    }\n    init() {\n        const groupParams = {\n            cssIdentifier: 'charts-format-sub-level',\n            direction: 'vertical',\n            suppressOpenCloseIcons: true\n        };\n        this.setTemplate(BackgroundPanel.TEMPLATE, { chartBackgroundGroup: groupParams });\n        this.initGroup();\n        this.initColorPicker();\n    }\n    initGroup() {\n        this.group\n            .setTitle(this.chartTranslationService.translate('background'))\n            .setEnabled(this.chartOptionsService.getChartOption('background.visible'))\n            .hideOpenCloseIcons(true)\n            .hideEnabledCheckbox(false)\n            .onEnableChange(enabled => this.chartOptionsService.setChartOption('background.visible', enabled));\n    }\n    initColorPicker() {\n        this.colorPicker\n            .setLabel(this.chartTranslationService.translate('color'))\n            .setLabelWidth('flex')\n            .setInputWidth(45)\n            .setValue(this.chartOptionsService.getChartOption('background.fill'))\n            .onValueChange(newColor => this.chartOptionsService.setChartOption('background.fill', newColor));\n    }\n}\nBackgroundPanel.TEMPLATE = `<div>\n            <ag-group-component ref=\"chartBackgroundGroup\">\n                <ag-color-picker ref=\"colorPicker\"></ag-color-picker>\n            </ag-group-component>\n        <div>`;\n__decorate$14([\n    (0,ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.RefSelector)('chartBackgroundGroup')\n], BackgroundPanel.prototype, \"group\", void 0);\n__decorate$14([\n    (0,ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.RefSelector)('colorPicker')\n], BackgroundPanel.prototype, \"colorPicker\", void 0);\n__decorate$14([\n    (0,ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.Autowired)('chartTranslationService')\n], BackgroundPanel.prototype, \"chartTranslationService\", void 0);\n__decorate$14([\n    ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.PostConstruct\n], BackgroundPanel.prototype, \"init\", null);\n\nvar __decorate$13 = ( false) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nclass TitlePanel extends ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.Component {\n    constructor(chartOptionsService) {\n        super(TitlePanel.TEMPLATE);\n        this.chartOptionsService = chartOptionsService;\n        this.activePanels = [];\n    }\n    init() {\n        this.initFontPanel();\n        this.titlePlaceholder = this.chartTranslationService.translate('titlePlaceholder');\n    }\n    hasTitle() {\n        const title = this.getOption('title');\n        return title && title.enabled && title.text && title.text.length > 0;\n    }\n    initFontPanel() {\n        const hasTitle = this.hasTitle();\n        const setFont = (font, isSilent) => {\n            if (font.family) {\n                this.setOption('title.fontFamily', font.family, isSilent);\n            }\n            if (font.weight) {\n                this.setOption('title.fontWeight', font.weight, isSilent);\n            }\n            if (font.style) {\n                this.setOption('title.fontStyle', font.style, isSilent);\n            }\n            if (font.size) {\n                this.setOption('title.fontSize', font.size, isSilent);\n            }\n            if (font.color) {\n                this.setOption('title.color', font.color, isSilent);\n            }\n        };\n        const initialFont = {\n            family: this.getOption('title.fontFamily'),\n            style: this.getOption('title.fontStyle'),\n            weight: this.getOption('title.fontWeight'),\n            size: this.getOption('title.fontSize'),\n            color: this.getOption('title.color')\n        };\n        if (!hasTitle) {\n            setFont(initialFont, true);\n        }\n        const fontPanelParams = {\n            name: this.chartTranslationService.translate('title'),\n            enabled: hasTitle,\n            suppressEnabledCheckbox: false,\n            initialFont,\n            setFont,\n            setEnabled: (enabled) => {\n                if (this.toolbarExists()) {\n                    // extra padding is only included when the toolbar is present\n                    const topPadding = this.getOption('padding.top');\n                    this.setOption('padding.top', enabled ? topPadding - 20 : topPadding + 20);\n                }\n                this.setOption('title.enabled', enabled);\n                const currentTitleText = this.getOption('title.text');\n                const replaceableTitleText = currentTitleText === 'Title' || (currentTitleText === null || currentTitleText === void 0 ? void 0 : currentTitleText.trim().length) === 0;\n                if (enabled && replaceableTitleText) {\n                    this.setOption('title.text', this.titlePlaceholder);\n                }\n            }\n        };\n        const fontPanelComp = this.createBean(new FontPanel(fontPanelParams));\n        // add the title spacing slider to font panel\n        fontPanelComp.addItemToPanel(this.createSpacingSlicer());\n        this.getGui().appendChild(fontPanelComp.getGui());\n        this.activePanels.push(fontPanelComp);\n        // edits to the title can disable it, so keep the checkbox in sync:\n        this.addManagedListener(this.eventService, 'chartTitleEdit', () => {\n            fontPanelComp.setEnabled(this.hasTitle());\n        });\n    }\n    createSpacingSlicer() {\n        const spacingSlider = this.createBean(new ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.AgSlider());\n        const currentValue = this.chartOptionsService.getChartOption('title.spacing');\n        spacingSlider.setLabel(this.chartTranslationService.translate('spacing'))\n            .setMaxValue(Math.max(currentValue, 100))\n            .setValue(`${currentValue}`)\n            .setTextFieldWidth(45)\n            .onValueChange(newValue => this.chartOptionsService.setChartOption('title.spacing', newValue));\n        return spacingSlider;\n    }\n    toolbarExists() {\n        const toolbarItemsFunc = this.gridOptionsService.getCallback('getChartToolbarItems');\n        if (!toolbarItemsFunc) {\n            return true;\n        }\n        const params = {\n            defaultItems: ['chartUnlink', 'chartDownload']\n        };\n        const topItems = ['chartLink', 'chartUnlink', 'chartDownload'];\n        return topItems.some(v => { var _a; return (_a = (toolbarItemsFunc && toolbarItemsFunc(params))) === null || _a === void 0 ? void 0 : _a.includes(v); });\n    }\n    getOption(expression) {\n        return this.chartOptionsService.getChartOption(expression);\n    }\n    setOption(property, value, isSilent) {\n        this.chartOptionsService.setChartOption(property, value, isSilent);\n    }\n    destroyActivePanels() {\n        this.activePanels.forEach(panel => {\n            ag_grid_community__WEBPACK_IMPORTED_MODULE_0__._.removeFromParent(panel.getGui());\n            this.destroyBean(panel);\n        });\n    }\n    destroy() {\n        this.destroyActivePanels();\n        super.destroy();\n    }\n}\nTitlePanel.TEMPLATE = `<div></div>`;\n__decorate$13([\n    (0,ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.Autowired)('chartTranslationService')\n], TitlePanel.prototype, \"chartTranslationService\", void 0);\n__decorate$13([\n    ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.PostConstruct\n], TitlePanel.prototype, \"init\", null);\n\nvar __decorate$12 = ( false) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nclass ChartPanel extends ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.Component {\n    constructor({ chartController, chartOptionsService, isExpandedOnInit = false }) {\n        super();\n        this.activePanels = [];\n        this.chartController = chartController;\n        this.chartOptionsService = chartOptionsService;\n        this.isExpandedOnInit = isExpandedOnInit;\n    }\n    init() {\n        const groupParams = {\n            cssIdentifier: 'charts-format-top-level',\n            direction: 'vertical'\n        };\n        this.setTemplate(ChartPanel.TEMPLATE, { chartGroup: groupParams });\n        this.initGroup();\n        this.initTitles();\n        this.initPaddingPanel();\n        this.initBackgroundPanel();\n    }\n    initGroup() {\n        this.chartGroup\n            .setTitle(this.chartTranslationService.translate('chart'))\n            .toggleGroupExpand(this.isExpandedOnInit)\n            .hideEnabledCheckbox(true);\n    }\n    initTitles() {\n        const titlePanelComp = this.createBean(new TitlePanel(this.chartOptionsService));\n        this.chartGroup.addItem(titlePanelComp);\n        this.activePanels.push(titlePanelComp);\n    }\n    initPaddingPanel() {\n        const paddingPanelComp = this.createBean(new PaddingPanel(this.chartOptionsService, this.chartController));\n        this.chartGroup.addItem(paddingPanelComp);\n        this.activePanels.push(paddingPanelComp);\n    }\n    initBackgroundPanel() {\n        const backgroundPanelComp = this.createBean(new BackgroundPanel(this.chartOptionsService));\n        this.chartGroup.addItem(backgroundPanelComp);\n        this.activePanels.push(backgroundPanelComp);\n    }\n    destroyActivePanels() {\n        this.activePanels.forEach(panel => {\n            ag_grid_community__WEBPACK_IMPORTED_MODULE_0__._.removeFromParent(panel.getGui());\n            this.destroyBean(panel);\n        });\n    }\n    destroy() {\n        this.destroyActivePanels();\n        super.destroy();\n    }\n}\nChartPanel.TEMPLATE = `<div>\n            <ag-group-component ref=\"chartGroup\"></ag-group-component>\n        </div>`;\n__decorate$12([\n    (0,ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.RefSelector)('chartGroup')\n], ChartPanel.prototype, \"chartGroup\", void 0);\n__decorate$12([\n    (0,ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.Autowired)('chartTranslationService')\n], ChartPanel.prototype, \"chartTranslationService\", void 0);\n__decorate$12([\n    ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.PostConstruct\n], ChartPanel.prototype, \"init\", null);\n\nvar __decorate$11 = ( false) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nclass ShadowPanel extends ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.Component {\n    constructor(chartOptionsService, getSelectedSeries) {\n        super();\n        this.chartOptionsService = chartOptionsService;\n        this.getSelectedSeries = getSelectedSeries;\n    }\n    init() {\n        const groupParams = {\n            cssIdentifier: 'charts-format-sub-level',\n            direction: 'vertical',\n            suppressOpenCloseIcons: true\n        };\n        this.setTemplate(ShadowPanel.TEMPLATE, { shadowGroup: groupParams });\n        this.shadowBlurSlider.setTextFieldWidth(45);\n        this.shadowXOffsetSlider.setTextFieldWidth(45);\n        this.shadowYOffsetSlider.setTextFieldWidth(45);\n        this.initSeriesShadow();\n    }\n    initSeriesShadow() {\n        this.shadowGroup\n            .setTitle(this.chartTranslationService.translate(\"shadow\"))\n            .setEnabled(this.chartOptionsService.getSeriesOption(\"shadow.enabled\", this.getSelectedSeries()))\n            .hideOpenCloseIcons(true)\n            .hideEnabledCheckbox(false)\n            .onEnableChange(newValue => this.chartOptionsService.setSeriesOption(\"shadow.enabled\", newValue, this.getSelectedSeries()));\n        this.shadowColorPicker\n            .setLabel(this.chartTranslationService.translate(\"color\"))\n            .setLabelWidth(\"flex\")\n            .setInputWidth(45)\n            .setValue(this.chartOptionsService.getSeriesOption(\"shadow.color\", this.getSelectedSeries()))\n            .onValueChange(newValue => this.chartOptionsService.setSeriesOption(\"shadow.color\", newValue, this.getSelectedSeries()));\n        const initInput = (input, property, minValue, defaultMaxValue) => {\n            const currentValue = this.chartOptionsService.getSeriesOption(`shadow.${property}`, this.getSelectedSeries());\n            input.setLabel(this.chartTranslationService.translate(property))\n                .setMinValue(minValue)\n                .setMaxValue(getMaxValue(currentValue, defaultMaxValue))\n                .setValue(`${currentValue}`)\n                .onValueChange(newValue => this.chartOptionsService.setSeriesOption(`shadow.${property}`, newValue, this.getSelectedSeries()));\n        };\n        initInput(this.shadowBlurSlider, \"blur\", 0, 20);\n        initInput(this.shadowXOffsetSlider, \"xOffset\", -10, 10);\n        initInput(this.shadowYOffsetSlider, \"yOffset\", -10, 10);\n    }\n}\nShadowPanel.TEMPLATE = `<div>\n            <ag-group-component ref=\"shadowGroup\">\n                <ag-color-picker ref=\"shadowColorPicker\"></ag-color-picker>\n                <ag-slider ref=\"shadowBlurSlider\"></ag-slider>\n                <ag-slider ref=\"shadowXOffsetSlider\"></ag-slider>\n                <ag-slider ref=\"shadowYOffsetSlider\"></ag-slider>\n            </ag-group-component>\n        </div>`;\n__decorate$11([\n    (0,ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.RefSelector)('shadowGroup')\n], ShadowPanel.prototype, \"shadowGroup\", void 0);\n__decorate$11([\n    (0,ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.RefSelector)('shadowColorPicker')\n], ShadowPanel.prototype, \"shadowColorPicker\", void 0);\n__decorate$11([\n    (0,ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.RefSelector)('shadowBlurSlider')\n], ShadowPanel.prototype, \"shadowBlurSlider\", void 0);\n__decorate$11([\n    (0,ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.RefSelector)('shadowXOffsetSlider')\n], ShadowPanel.prototype, \"shadowXOffsetSlider\", void 0);\n__decorate$11([\n    (0,ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.RefSelector)('shadowYOffsetSlider')\n], ShadowPanel.prototype, \"shadowYOffsetSlider\", void 0);\n__decorate$11([\n    (0,ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.Autowired)('chartTranslationService')\n], ShadowPanel.prototype, \"chartTranslationService\", void 0);\n__decorate$11([\n    ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.PostConstruct\n], ShadowPanel.prototype, \"init\", null);\n\nfunction initFontPanelParams({ labelName, chartOptionsService, getSelectedSeries, seriesOptionLabelProperty }) {\n    const getFontOptionExpression = (fontOption) => {\n        return `${seriesOptionLabelProperty}.${fontOption}`;\n    };\n    const getFontOption = (fontOption) => {\n        const expression = getFontOptionExpression(fontOption);\n        return chartOptionsService.getSeriesOption(expression, getSelectedSeries());\n    };\n    const setFontOption = (fontOption, value) => {\n        const expression = getFontOptionExpression(fontOption);\n        chartOptionsService.setSeriesOption(expression, value, getSelectedSeries());\n    };\n    const initialFont = {\n        family: getFontOption('fontFamily'),\n        style: getFontOption('fontStyle'),\n        weight: getFontOption('fontWeight'),\n        size: getFontOption('fontSize'),\n        color: getFontOption('color'),\n    };\n    const setFont = (font) => {\n        if (font.family) {\n            setFontOption('fontFamily', font.family);\n        }\n        if (font.weight) {\n            setFontOption('fontWeight', font.weight);\n        }\n        if (font.style) {\n            setFontOption('fontStyle', font.style);\n        }\n        if (font.size) {\n            setFontOption('fontSize', font.size);\n        }\n        if (font.color) {\n            setFontOption('color', font.color);\n        }\n    };\n    const params = {\n        name: labelName,\n        enabled: getFontOption('enabled') || false,\n        setEnabled: (enabled) => setFontOption('enabled', enabled),\n        suppressEnabledCheckbox: false,\n        initialFont: initialFont,\n        setFont: setFont\n    };\n    return params;\n}\n\nvar __decorate$10 = ( false) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nclass MarkersPanel extends ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.Component {\n    constructor(chartOptionsService, getSelectedSeries) {\n        super();\n        this.chartOptionsService = chartOptionsService;\n        this.getSelectedSeries = getSelectedSeries;\n    }\n    init() {\n        const groupParams = {\n            cssIdentifier: 'charts-format-sub-level',\n            direction: 'vertical'\n        };\n        this.setTemplate(MarkersPanel.TEMPLATE, { seriesMarkersGroup: groupParams });\n        this.initMarkers();\n    }\n    initMarkers() {\n        const seriesMarkerShapeOptions = [\n            {\n                value: 'square',\n                text: 'Square'\n            },\n            {\n                value: 'circle',\n                text: 'Circle'\n            },\n            {\n                value: 'cross',\n                text: 'Cross'\n            },\n            {\n                value: 'diamond',\n                text: 'Diamond'\n            },\n            {\n                value: 'plus',\n                text: 'Plus'\n            },\n            {\n                value: 'triangle',\n                text: 'Triangle'\n            },\n            {\n                value: 'heart',\n                text: 'Heart'\n            }\n        ];\n        this.seriesMarkerShapeSelect\n            .addOptions(seriesMarkerShapeOptions)\n            .setLabel(this.chartTranslationService.translate('shape'))\n            .setValue(this.getSeriesOption(\"marker.shape\"))\n            .onValueChange(value => this.setSeriesOption(\"marker.shape\", value));\n        // scatter charts should always show markers\n        const chartType = this.chartOptionsService.getChartType();\n        const shouldHideEnabledCheckbox = ag_grid_community__WEBPACK_IMPORTED_MODULE_0__._.includes(['scatter', 'bubble'], chartType);\n        this.seriesMarkersGroup\n            .setTitle(this.chartTranslationService.translate(\"markers\"))\n            .hideEnabledCheckbox(shouldHideEnabledCheckbox)\n            .setEnabled(this.getSeriesOption(\"marker.enabled\") || false)\n            .hideOpenCloseIcons(true)\n            .onEnableChange(newValue => this.setSeriesOption(\"marker.enabled\", newValue));\n        const initInput = (expression, input, labelKey, defaultMaxValue) => {\n            const currentValue = this.getSeriesOption(expression);\n            input.setLabel(this.chartTranslationService.translate(labelKey))\n                .setMaxValue(getMaxValue(currentValue, defaultMaxValue))\n                .setValue(`${currentValue}`)\n                .setTextFieldWidth(45)\n                .onValueChange(newValue => this.setSeriesOption(expression, newValue));\n        };\n        if (chartType === 'bubble') {\n            initInput(\"marker.maxSize\", this.seriesMarkerMinSizeSlider, \"maxSize\", 60);\n            initInput(\"marker.size\", this.seriesMarkerSizeSlider, \"minSize\", 60);\n        }\n        else {\n            this.seriesMarkerMinSizeSlider.setDisplayed(false);\n            initInput(\"marker.size\", this.seriesMarkerSizeSlider, \"size\", 60);\n        }\n        initInput(\"marker.strokeWidth\", this.seriesMarkerStrokeWidthSlider, \"strokeWidth\", 10);\n    }\n    getSeriesOption(expression) {\n        return this.chartOptionsService.getSeriesOption(expression, this.getSelectedSeries());\n    }\n    setSeriesOption(expression, newValue) {\n        this.chartOptionsService.setSeriesOption(expression, newValue, this.getSelectedSeries());\n    }\n}\nMarkersPanel.TEMPLATE = `<div>\n            <ag-group-component ref=\"seriesMarkersGroup\">\n                <ag-select ref=\"seriesMarkerShapeSelect\"></ag-select>\n                <ag-slider ref=\"seriesMarkerMinSizeSlider\"></ag-slider>\n                <ag-slider ref=\"seriesMarkerSizeSlider\"></ag-slider>\n                <ag-slider ref=\"seriesMarkerStrokeWidthSlider\"></ag-slider>\n            </ag-group-component>\n        </div>`;\n__decorate$10([\n    (0,ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.RefSelector)('seriesMarkersGroup')\n], MarkersPanel.prototype, \"seriesMarkersGroup\", void 0);\n__decorate$10([\n    (0,ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.RefSelector)('seriesMarkerShapeSelect')\n], MarkersPanel.prototype, \"seriesMarkerShapeSelect\", void 0);\n__decorate$10([\n    (0,ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.RefSelector)('seriesMarkerSizeSlider')\n], MarkersPanel.prototype, \"seriesMarkerSizeSlider\", void 0);\n__decorate$10([\n    (0,ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.RefSelector)('seriesMarkerMinSizeSlider')\n], MarkersPanel.prototype, \"seriesMarkerMinSizeSlider\", void 0);\n__decorate$10([\n    (0,ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.RefSelector)('seriesMarkerStrokeWidthSlider')\n], MarkersPanel.prototype, \"seriesMarkerStrokeWidthSlider\", void 0);\n__decorate$10([\n    (0,ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.Autowired)('chartTranslationService')\n], MarkersPanel.prototype, \"chartTranslationService\", void 0);\n__decorate$10([\n    ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.PostConstruct\n], MarkersPanel.prototype, \"init\", null);\n\nvar __decorate$$ = ( false) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nclass CalloutPanel extends ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.Component {\n    constructor(chartOptionsService, getSelectedSeries) {\n        super();\n        this.chartOptionsService = chartOptionsService;\n        this.getSelectedSeries = getSelectedSeries;\n    }\n    init() {\n        const groupParams = {\n            cssIdentifier: 'charts-format-sub-level',\n            direction: 'vertical'\n        };\n        this.setTemplate(CalloutPanel.TEMPLATE, { calloutGroup: groupParams });\n        this.initCalloutOptions();\n    }\n    initCalloutOptions() {\n        this.calloutGroup\n            .setTitle(this.chartTranslationService.translate(\"callout\"))\n            .setEnabled(true)\n            .hideOpenCloseIcons(true)\n            .hideEnabledCheckbox(true);\n        const initInput = (expression, input, labelKey, defaultMaxValue) => {\n            const currentValue = this.chartOptionsService.getSeriesOption(expression, this.getSelectedSeries());\n            input.setLabel(this.chartTranslationService.translate(labelKey))\n                .setMaxValue(getMaxValue(currentValue, defaultMaxValue))\n                .setValue(`${currentValue}`)\n                .setTextFieldWidth(45)\n                .onValueChange(newValue => this.chartOptionsService.setSeriesOption(expression, newValue, this.getSelectedSeries()));\n        };\n        initInput('calloutLine.length', this.calloutLengthSlider, 'length', 40);\n        initInput('calloutLine.strokeWidth', this.calloutStrokeWidthSlider, 'strokeWidth', 10);\n        initInput('calloutLabel.offset', this.labelOffsetSlider, 'offset', 30);\n    }\n}\nCalloutPanel.TEMPLATE = `<div>\n            <ag-group-component ref=\"calloutGroup\">\n                <ag-slider ref=\"calloutLengthSlider\"></ag-slider>\n                <ag-slider ref=\"calloutStrokeWidthSlider\"></ag-slider>\n                <ag-slider ref=\"labelOffsetSlider\"></ag-slider>\n            </ag-group-component>\n        </div>`;\n__decorate$$([\n    (0,ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.RefSelector)('calloutGroup')\n], CalloutPanel.prototype, \"calloutGroup\", void 0);\n__decorate$$([\n    (0,ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.RefSelector)('calloutLengthSlider')\n], CalloutPanel.prototype, \"calloutLengthSlider\", void 0);\n__decorate$$([\n    (0,ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.RefSelector)('calloutStrokeWidthSlider')\n], CalloutPanel.prototype, \"calloutStrokeWidthSlider\", void 0);\n__decorate$$([\n    (0,ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.RefSelector)('labelOffsetSlider')\n], CalloutPanel.prototype, \"labelOffsetSlider\", void 0);\n__decorate$$([\n    (0,ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.Autowired)('chartTranslationService')\n], CalloutPanel.prototype, \"chartTranslationService\", void 0);\n__decorate$$([\n    ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.PostConstruct\n], CalloutPanel.prototype, \"init\", null);\n\nvar __decorate$_ = ( false) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nclass SeriesPanel extends ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.Component {\n    constructor({ chartController, chartOptionsService, seriesType, isExpandedOnInit = false }) {\n        super();\n        this.activePanels = [];\n        this.widgetFuncs = {\n            'lineWidth': () => this.initLineWidth(),\n            'strokeWidth': () => this.initStrokeWidth(),\n            'lineDash': () => this.initLineDash(),\n            'lineOpacity': () => this.initLineOpacity(),\n            'fillOpacity': () => this.initFillOpacity(),\n            'markers': () => this.initMarkers(),\n            'labels': () => this.initLabels(),\n            'shadow': () => this.initShadow(),\n            'tooltips': () => this.initTooltips(),\n            'bins': () => this.initBins(),\n        };\n        this.seriesWidgetMappings = {\n            'area': ['tooltips', 'lineWidth', 'lineDash', 'lineOpacity', 'fillOpacity', 'markers', 'labels', 'shadow'],\n            'bar': ['tooltips', 'strokeWidth', 'lineDash', 'lineOpacity', 'fillOpacity', 'labels', 'shadow'],\n            'column': ['tooltips', 'strokeWidth', 'lineDash', 'lineOpacity', 'fillOpacity', 'labels', 'shadow'],\n            'line': ['tooltips', 'lineWidth', 'lineDash', 'lineOpacity', 'markers', 'labels'],\n            'histogram': ['tooltips', 'bins', 'strokeWidth', 'lineDash', 'lineOpacity', 'fillOpacity', 'labels', 'shadow'],\n            'scatter': ['tooltips', 'markers', 'labels'],\n            'pie': ['tooltips', 'strokeWidth', 'lineOpacity', 'fillOpacity', 'labels', 'shadow'],\n        };\n        this.chartController = chartController;\n        this.chartOptionsService = chartOptionsService;\n        this.seriesType = seriesType || this.getChartSeriesType();\n        this.isExpandedOnInit = isExpandedOnInit;\n    }\n    init() {\n        const groupParams = {\n            cssIdentifier: 'charts-format-top-level',\n            direction: 'vertical'\n        };\n        this.setTemplate(SeriesPanel.TEMPLATE, { seriesGroup: groupParams });\n        this.seriesGroup\n            .setTitle(this.translate(\"series\"))\n            .toggleGroupExpand(this.isExpandedOnInit)\n            .hideEnabledCheckbox(true);\n        this.addManagedListener(this.chartController, ChartController.EVENT_CHART_SERIES_CHART_TYPE_CHANGED, this.refreshWidgets.bind(this));\n        this.refreshWidgets();\n    }\n    refreshWidgets() {\n        this.destroyActivePanels();\n        const chart = this.chartController.getChartProxy().getChart();\n        chart.waitForUpdate().then(() => {\n            if (this.chartController.isComboChart()) {\n                this.updateSeriesType();\n                this.initSeriesSelect();\n            }\n            this.seriesWidgetMappings[this.seriesType].forEach((w) => this.widgetFuncs[w]());\n        })\n            .catch(e => console.error(`AG Grid - chart rendering failed`, e));\n    }\n    initSeriesSelect() {\n        const seriesSelect = this.seriesGroup.createManagedBean(new ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.AgSelect());\n        seriesSelect\n            .setLabel(this.translate('seriesType'))\n            .setLabelAlignment(\"left\")\n            .setLabelWidth('flex')\n            .setInputWidth(100)\n            .addOptions(this.getSeriesSelectOptions())\n            .setValue(`${this.seriesType}`)\n            .onValueChange((newValue) => {\n            this.seriesType = newValue;\n            this.refreshWidgets();\n        });\n        this.seriesGroup.addItem(seriesSelect);\n        this.activePanels.push(seriesSelect);\n    }\n    initTooltips() {\n        const seriesTooltipsToggle = this.createBean(new ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.AgToggleButton());\n        seriesTooltipsToggle\n            .setLabel(this.translate(\"tooltips\"))\n            .setLabelAlignment(\"left\")\n            .setLabelWidth(\"flex\")\n            .setInputWidth(45)\n            .setValue(this.getSeriesOption(\"tooltip.enabled\") || false)\n            .onValueChange(newValue => this.setSeriesOption(\"tooltip.enabled\", newValue));\n        this.addWidget(seriesTooltipsToggle);\n    }\n    initStrokeWidth() {\n        const currentValue = this.getSeriesOption(\"strokeWidth\");\n        const seriesStrokeWidthSlider = this.createBean(new ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.AgSlider());\n        seriesStrokeWidthSlider\n            .setLabel(this.translate(\"strokeWidth\"))\n            .setMaxValue(getMaxValue(currentValue, 10))\n            .setTextFieldWidth(45)\n            .setValue(`${currentValue}`)\n            .onValueChange(newValue => this.setSeriesOption(\"strokeWidth\", newValue));\n        this.addWidget(seriesStrokeWidthSlider);\n    }\n    initLineWidth() {\n        const currentValue = this.getSeriesOption(\"strokeWidth\");\n        const seriesLineWidthSlider = this.createBean(new ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.AgSlider());\n        seriesLineWidthSlider\n            .setLabel(this.translate('lineWidth'))\n            .setMaxValue(getMaxValue(currentValue, 10))\n            .setTextFieldWidth(45)\n            .setValue(`${currentValue}`)\n            .onValueChange(newValue => this.setSeriesOption(\"strokeWidth\", newValue));\n        this.addWidget(seriesLineWidthSlider);\n    }\n    initLineDash() {\n        const lineDash = this.getSeriesOption(\"lineDash\");\n        const currentValue = lineDash ? lineDash[0] : 0;\n        const seriesLineDashSlider = this.createBean(new ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.AgSlider());\n        seriesLineDashSlider\n            .setLabel(this.translate('lineDash'))\n            .setMaxValue(getMaxValue(currentValue, 30))\n            .setTextFieldWidth(45)\n            .setValue(`${currentValue}`)\n            .onValueChange(newValue => this.setSeriesOption(\"lineDash\", [newValue]));\n        this.addWidget(seriesLineDashSlider);\n    }\n    initLineOpacity() {\n        const currentValue = this.getSeriesOption(\"strokeOpacity\");\n        const seriesLineOpacitySlider = this.createBean(new ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.AgSlider());\n        seriesLineOpacitySlider\n            .setLabel(this.translate(\"strokeOpacity\"))\n            .setStep(0.05)\n            .setMaxValue(getMaxValue(currentValue, 1))\n            .setTextFieldWidth(45)\n            .setValue(`${currentValue}`)\n            .onValueChange(newValue => this.setSeriesOption(\"strokeOpacity\", newValue));\n        this.addWidget(seriesLineOpacitySlider);\n    }\n    initFillOpacity() {\n        const currentValue = this.getSeriesOption(\"fillOpacity\");\n        const seriesFillOpacitySlider = this.createBean(new ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.AgSlider());\n        seriesFillOpacitySlider\n            .setLabel(this.translate(\"fillOpacity\"))\n            .setStep(0.05)\n            .setMaxValue(getMaxValue(currentValue, 1))\n            .setTextFieldWidth(45)\n            .setValue(`${currentValue}`)\n            .onValueChange(newValue => this.setSeriesOption(\"fillOpacity\", newValue));\n        this.addWidget(seriesFillOpacitySlider);\n    }\n    initLabels() {\n        const seriesOptionLabelProperty = this.seriesType === 'pie' ? 'calloutLabel' : 'label';\n        const labelName = this.seriesType === 'pie'\n            ? this.chartTranslationService.translate('calloutLabels')\n            : this.chartTranslationService.translate('labels');\n        const labelParams = initFontPanelParams({\n            labelName,\n            chartOptionsService: this.chartOptionsService,\n            getSelectedSeries: () => this.seriesType,\n            seriesOptionLabelProperty\n        });\n        const labelPanelComp = this.createBean(new FontPanel(labelParams));\n        if (this.seriesType === 'pie') {\n            const calloutPanelComp = this.createBean(new CalloutPanel(this.chartOptionsService, () => this.seriesType));\n            labelPanelComp.addCompToPanel(calloutPanelComp);\n            this.activePanels.push(calloutPanelComp);\n        }\n        this.addWidget(labelPanelComp);\n        if (this.seriesType === 'pie') {\n            const sectorParams = initFontPanelParams({\n                labelName: this.chartTranslationService.translate('sectorLabels'),\n                chartOptionsService: this.chartOptionsService,\n                getSelectedSeries: () => this.seriesType,\n                seriesOptionLabelProperty: 'sectorLabel'\n            });\n            const sectorPanelComp = this.createBean(new FontPanel(sectorParams));\n            const positionRatioComp = this.getSectorLabelPositionRatio();\n            sectorPanelComp.addCompToPanel(positionRatioComp);\n            this.addWidget(sectorPanelComp);\n        }\n    }\n    getSectorLabelPositionRatio() {\n        const expression = 'sectorLabel.positionRatio';\n        const currentValue = this.chartOptionsService.getSeriesOption(expression, this.seriesType);\n        const sectorLabelPositionRatioSlider = this.createBean(new ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.AgSlider());\n        return sectorLabelPositionRatioSlider\n            .setLabel(this.translate(\"positionRatio\"))\n            .setStep(0.05)\n            .setMaxValue(getMaxValue(currentValue, 1))\n            .setTextFieldWidth(45)\n            .setValue(`${currentValue}`)\n            .onValueChange(newValue => this.chartOptionsService.setSeriesOption(expression, newValue, this.seriesType));\n    }\n    initShadow() {\n        const shadowPanelComp = this.createBean(new ShadowPanel(this.chartOptionsService, () => this.seriesType));\n        this.addWidget(shadowPanelComp);\n    }\n    initMarkers() {\n        const markersPanelComp = this.createBean(new MarkersPanel(this.chartOptionsService, () => this.seriesType));\n        this.addWidget(markersPanelComp);\n    }\n    initBins() {\n        var _a;\n        const currentValue = ((_a = this.getSeriesOption(\"bins\")) !== null && _a !== void 0 ? _a : this.getSeriesOption(\"calculatedBins\")).length;\n        const seriesBinCountSlider = this.createBean(new ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.AgSlider());\n        seriesBinCountSlider\n            .setLabel(this.translate(\"histogramBinCount\"))\n            .setMinValue(0)\n            .setMaxValue(getMaxValue(currentValue, 20))\n            .setTextFieldWidth(45)\n            .setValue(`${currentValue}`)\n            .onValueChange(newValue => this.setSeriesOption(\"binCount\", newValue));\n        this.addWidget(seriesBinCountSlider);\n    }\n    addWidget(widget) {\n        this.seriesGroup.addItem(widget);\n        this.activePanels.push(widget);\n    }\n    getSeriesOption(expression) {\n        return this.chartOptionsService.getSeriesOption(expression, this.seriesType);\n    }\n    setSeriesOption(expression, newValue) {\n        this.chartOptionsService.setSeriesOption(expression, newValue, this.seriesType);\n    }\n    getChartSeriesType() {\n        if (this.chartController.getSeriesChartTypes().length === 0)\n            return 'column';\n        const ct = this.chartController.getSeriesChartTypes()[0].chartType;\n        if (ct === 'columnLineCombo')\n            return 'column';\n        if (ct === 'areaColumnCombo')\n            return 'area';\n        return getSeriesType(ct);\n    }\n    getSeriesSelectOptions() {\n        if (!this.seriesSelectOptions) {\n            // lazy init options as they are only required for combo charts\n            this.seriesSelectOptions = new Map([\n                ['area', { value: 'area', text: this.translate('area', 'Area') }],\n                ['bar', { value: 'bar', text: this.translate('bar', 'Bar') }],\n                ['column', { value: 'column', text: this.translate('column', 'Column') }],\n                ['line', { value: 'line', text: this.translate('line', 'Line') }],\n                ['scatter', { value: 'scatter', text: this.translate('scatter', 'Scatter') }],\n                ['histogram', { value: 'histogram', text: this.translate('histogram', 'Histogram') }],\n                ['pie', { value: 'pie', text: this.translate('pie', 'Pie') }],\n            ]);\n        }\n        const seriesSelectOptions = new Set();\n        this.chartController.getActiveSeriesChartTypes().forEach(s => {\n            const chartType = getSeriesType(s.chartType);\n            seriesSelectOptions.add(this.seriesSelectOptions.get(chartType));\n        });\n        return Array.from(seriesSelectOptions);\n    }\n    updateSeriesType() {\n        const activeChartTypes = this.chartController.getActiveSeriesChartTypes().map(s => getSeriesType(s.chartType));\n        const invalidSeriesType = !activeChartTypes.includes(this.seriesType);\n        if (invalidSeriesType && activeChartTypes.length > 0) {\n            this.seriesType = activeChartTypes[0]; // default to first active series type\n        }\n    }\n    translate(key, defaultText) {\n        return this.chartTranslationService.translate(key, defaultText);\n    }\n    destroyActivePanels() {\n        this.activePanels.forEach(panel => {\n            ag_grid_community__WEBPACK_IMPORTED_MODULE_0__._.removeFromParent(panel.getGui());\n            this.destroyBean(panel);\n        });\n    }\n    destroy() {\n        this.destroyActivePanels();\n        super.destroy();\n    }\n}\nSeriesPanel.TEMPLATE = `<div>\n            <ag-group-component ref=\"seriesGroup\">\n            </ag-group-component>\n        </div>`;\n__decorate$_([\n    (0,ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.RefSelector)('seriesGroup')\n], SeriesPanel.prototype, \"seriesGroup\", void 0);\n__decorate$_([\n    (0,ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.Autowired)('chartTranslationService')\n], SeriesPanel.prototype, \"chartTranslationService\", void 0);\n__decorate$_([\n    ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.PostConstruct\n], SeriesPanel.prototype, \"init\", null);\n\nvar __decorate$Z = ( false) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nfunction getMaxValue(currentValue, defaultMaxValue) {\n    return Math.max(currentValue, defaultMaxValue);\n}\nconst DefaultFormatPanelDef = {\n    groups: [\n        { type: 'chart' },\n        { type: 'legend' },\n        { type: 'series' },\n        { type: 'axis' },\n        { type: 'navigator' },\n    ]\n};\nclass FormatPanel extends ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.Component {\n    constructor(chartController, chartOptionsService) {\n        super(FormatPanel.TEMPLATE);\n        this.chartController = chartController;\n        this.chartOptionsService = chartOptionsService;\n        this.panels = [];\n        this.isGroupPanelShownInSeries = (group, seriesType) => {\n            const commonGroupPanels = ['chart', 'legend', 'series'];\n            if (commonGroupPanels.includes(group)) {\n                return true;\n            }\n            const cartesianOnlyGroupPanels = ['axis', 'navigator'];\n            const cartesianSeries = ['bar', 'column', 'line', 'area', 'scatter', 'histogram', 'cartesian'];\n            return !!(cartesianOnlyGroupPanels.includes(group) && cartesianSeries.includes(seriesType));\n        };\n    }\n    init() {\n        this.createPanels();\n        this.addManagedListener(this.chartController, ChartController.EVENT_CHART_UPDATED, () => this.createPanels(true));\n        this.addManagedListener(this.chartController, ChartController.EVENT_CHART_API_UPDATE, () => this.createPanels(false));\n    }\n    createPanels(reuse) {\n        var _a;\n        const chartType = this.chartController.getChartType();\n        const isGrouping = this.chartController.isGrouping();\n        const seriesType = getSeriesType(chartType);\n        if (reuse && chartType === this.chartType && isGrouping === this.isGrouping) {\n            // existing panels can be re-used\n            return;\n        }\n        this.destroyPanels();\n        (_a = this.getFormatPanelDef().groups) === null || _a === void 0 ? void 0 : _a.forEach((groupDef) => {\n            const group = groupDef.type;\n            // ensure the group should be displayed for the current series type\n            if (!this.isGroupPanelShownInSeries(group, seriesType)) {\n                return;\n            }\n            const opts = {\n                chartController: this.chartController,\n                chartOptionsService: this.chartOptionsService,\n                isExpandedOnInit: groupDef.isOpen,\n                seriesType\n            };\n            if (group === 'chart') {\n                this.addComponent(new ChartPanel(opts));\n            }\n            else if (group === 'legend') {\n                this.addComponent(new LegendPanel(opts));\n            }\n            else if (group === 'axis') {\n                this.addComponent(new AxisPanel(opts));\n            }\n            else if (group === 'series') {\n                this.addComponent(new SeriesPanel(opts));\n            }\n            else if (group === 'navigator') {\n                this.addComponent(new NavigatorPanel(opts));\n            }\n            else {\n                console.warn(`AG Grid: invalid charts format panel group name supplied: '${groupDef.type}'`);\n            }\n        });\n        this.chartType = chartType;\n        this.isGrouping = isGrouping;\n    }\n    getFormatPanelDef() {\n        var _a;\n        const userProvidedFormatPanelDef = (_a = this.gridOptionsService.get('chartToolPanelsDef')) === null || _a === void 0 ? void 0 : _a.formatPanel;\n        return userProvidedFormatPanelDef ? userProvidedFormatPanelDef : DefaultFormatPanelDef;\n    }\n    addComponent(component) {\n        this.createBean(component);\n        this.panels.push(component);\n        component.addCssClass('ag-chart-format-section');\n        this.getGui().appendChild(component.getGui());\n    }\n    destroyPanels() {\n        this.panels.forEach(panel => {\n            ag_grid_community__WEBPACK_IMPORTED_MODULE_0__._.removeFromParent(panel.getGui());\n            this.destroyBean(panel);\n        });\n    }\n    destroy() {\n        this.destroyPanels();\n        super.destroy();\n    }\n}\nFormatPanel.TEMPLATE = `<div class=\"ag-chart-format-wrapper\"></div>`;\n__decorate$Z([\n    ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.PostConstruct\n], FormatPanel.prototype, \"init\", null);\n\nvar __decorate$Y = ( false) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nclass MiniChart extends ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.Component {\n    constructor(container, tooltipName) {\n        super();\n        this.size = 58;\n        this.padding = 5;\n        this.root = new Group();\n        const scene = new Scene({ document: window.document, width: this.size, height: this.size });\n        scene.canvas.element.classList.add('ag-chart-mini-thumbnail-canvas');\n        scene.root = this.root;\n        scene.container = container;\n        this.scene = scene;\n        this.tooltipName = tooltipName;\n    }\n    init() {\n        this.scene.canvas.element.title = this.chartTranslationService.translate(this.tooltipName);\n        // necessary to force scene graph render as we are not using the standalone factory!\n        this.scene.render()\n            .catch((e) => console.error(`AG Grid - chart update failed`, e));\n    }\n}\n__decorate$Y([\n    (0,ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.Autowired)('chartTranslationService')\n], MiniChart.prototype, \"chartTranslationService\", void 0);\n__decorate$Y([\n    ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.PostConstruct\n], MiniChart.prototype, \"init\", null);\n\nvar __decorate$X = ( false) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nclass MiniChartWithAxes extends MiniChart {\n    constructor(container, tooltipName) {\n        super(container, tooltipName);\n        this.stroke = 'gray';\n        this.axisOvershoot = 3;\n    }\n    addAxes() {\n        const size = this.size;\n        const padding = this.padding;\n        const leftAxis = new Line();\n        leftAxis.x1 = padding;\n        leftAxis.y1 = padding;\n        leftAxis.x2 = padding;\n        leftAxis.y2 = size - padding + this.axisOvershoot;\n        leftAxis.stroke = this.stroke;\n        const bottomAxis = new Line();\n        bottomAxis.x1 = padding - this.axisOvershoot + 1;\n        bottomAxis.y1 = size - padding;\n        bottomAxis.x2 = size - padding + 1;\n        bottomAxis.y2 = size - padding;\n        bottomAxis.stroke = this.stroke;\n        const root = this.root;\n        root.append(leftAxis);\n        root.append(bottomAxis);\n    }\n}\n__decorate$X([\n    ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.PostConstruct\n], MiniChartWithAxes.prototype, \"addAxes\", null);\n\nfunction createColumnRects(params) {\n    const { stacked, size, padding, xScalePadding, xScaleDomain, yScaleDomain } = params;\n    const xScale = new BandScale$5();\n    xScale.domain = xScaleDomain;\n    xScale.range = [padding, size - padding];\n    xScale.paddingInner = xScalePadding;\n    xScale.paddingOuter = xScalePadding;\n    const yScale = new LinearScale$1();\n    yScale.domain = yScaleDomain;\n    yScale.range = [size - padding, padding];\n    const createBars = (series, xScale, yScale) => {\n        return series.map((datum, i) => {\n            const top = yScale.convert(datum);\n            const rect = new Rect();\n            rect.x = xScale.convert(i);\n            rect.y = top;\n            rect.width = xScale.bandwidth;\n            rect.height = yScale.convert(0) - top;\n            rect.strokeWidth = 1;\n            rect.crisp = true;\n            return rect;\n        });\n    };\n    if (stacked) {\n        return params.data.map((d) => createBars(d, xScale, yScale));\n    }\n    return createBars(params.data, xScale, yScale);\n}\nfunction createLinePaths(root, data, size, padding) {\n    const xScale = new LinearScale$1();\n    xScale.domain = [0, 4];\n    xScale.range = [padding, size - padding];\n    const yScale = new LinearScale$1();\n    yScale.domain = [0, 10];\n    yScale.range = [size - padding, padding];\n    const lines = data.map((series) => {\n        const line = new Path();\n        line.strokeWidth = 3;\n        line.lineCap = 'round';\n        line.fill = undefined;\n        series.forEach((datum, i) => {\n            line.path[i > 0 ? 'lineTo' : 'moveTo'](xScale.convert(i), yScale.convert(datum));\n        });\n        return line;\n    });\n    const linesGroup = new Group();\n    linesGroup.setClipRectInGroupCoordinateSpace(new BBox(padding, padding, size - padding * 2, size - padding * 2));\n    linesGroup.append(lines);\n    root.append(linesGroup);\n    return lines;\n}\n\nclass MiniColumn extends MiniChartWithAxes {\n    constructor(container, fills, strokes) {\n        super(container, \"groupedColumnTooltip\");\n        this.columnData = [2, 3, 4];\n        const { root, columnData, size, padding } = this;\n        this.columns = createColumnRects({\n            stacked: false,\n            root,\n            data: columnData,\n            size,\n            padding,\n            xScaleDomain: [0, 1, 2],\n            yScaleDomain: [0, 4],\n            xScalePadding: 0.3\n        });\n        root.append(this.columns);\n        this.updateColors(fills, strokes);\n    }\n    updateColors(fills, strokes) {\n        this.columns.forEach((column, i) => {\n            column.fill = fills[i];\n            column.stroke = strokes[i];\n        });\n    }\n}\nMiniColumn.chartType = 'groupedColumn';\n\nclass MiniStackedColumn extends MiniChartWithAxes {\n    constructor(container, fills, strokes, data = MiniStackedColumn.data, yScaleDomain = [0, 16], tooltipName = \"stackedColumnTooltip\") {\n        super(container, tooltipName);\n        const { root, size, padding } = this;\n        this.stackedColumns = createColumnRects({\n            stacked: true,\n            root,\n            data,\n            size,\n            padding,\n            xScaleDomain: [0, 1, 2],\n            yScaleDomain,\n            xScalePadding: 0.3,\n        });\n        root.append([].concat.apply([], this.stackedColumns));\n        this.updateColors(fills, strokes);\n    }\n    updateColors(fills, strokes) {\n        this.stackedColumns.forEach((series, i) => series.forEach(column => {\n            column.fill = fills[i];\n            column.stroke = strokes[i];\n        }));\n    }\n}\nMiniStackedColumn.chartType = 'stackedColumn';\nMiniStackedColumn.data = [\n    [8, 12, 16],\n    [6, 9, 12],\n    [2, 3, 4]\n];\n\nclass MiniNormalizedColumn extends MiniStackedColumn {\n    constructor(container, fills, strokes) {\n        super(container, fills, strokes, MiniNormalizedColumn.data, [0, 10], \"normalizedColumnTooltip\");\n    }\n}\nMiniNormalizedColumn.chartType = 'normalizedColumn';\nMiniNormalizedColumn.data = [\n    [10, 10, 10],\n    [6, 7, 8],\n    [2, 4, 6]\n];\n\nclass MiniBar extends MiniChartWithAxes {\n    constructor(container, fills, strokes) {\n        super(container, \"groupedBarTooltip\");\n        const padding = this.padding;\n        const size = this.size;\n        const data = [2, 3, 4];\n        const yScale = new BandScale$5();\n        yScale.domain = [0, 1, 2];\n        yScale.range = [padding, size - padding];\n        yScale.paddingInner = 0.3;\n        yScale.paddingOuter = 0.3;\n        const xScale = new LinearScale$1();\n        xScale.domain = [0, 4];\n        xScale.range = [size - padding, padding];\n        const bottom = xScale.convert(0);\n        const height = yScale.bandwidth;\n        this.bars = data.map((datum, i) => {\n            const rect = new Rect();\n            rect.x = padding;\n            rect.y = yScale.convert(i);\n            rect.width = bottom - xScale.convert(datum);\n            rect.height = height;\n            rect.strokeWidth = 1;\n            rect.crisp = true;\n            return rect;\n        });\n        this.updateColors(fills, strokes);\n        this.root.append(this.bars);\n    }\n    updateColors(fills, strokes) {\n        this.bars.forEach((bar, i) => {\n            bar.fill = fills[i];\n            bar.stroke = strokes[i];\n        });\n    }\n}\nMiniBar.chartType = 'groupedBar';\n\nclass MiniStackedBar extends MiniChartWithAxes {\n    constructor(container, fills, strokes, data = MiniStackedBar.data, xScaleDomain = [0, 16], tooltipName = \"stackedBarTooltip\") {\n        super(container, tooltipName);\n        const size = this.size;\n        const padding = this.padding;\n        const yScale = new BandScale$5();\n        yScale.domain = [0, 1, 2];\n        yScale.range = [padding, size - padding];\n        yScale.paddingInner = 0.3;\n        yScale.paddingOuter = 0.3;\n        const xScale = new LinearScale$1();\n        xScale.domain = xScaleDomain;\n        xScale.range = [size - padding, padding];\n        const bottom = xScale.convert(0);\n        const height = yScale.bandwidth;\n        this.bars = data.map(series => series.map((datum, i) => {\n            const rect = new Rect();\n            rect.x = padding;\n            rect.y = yScale.convert(i);\n            rect.width = bottom - xScale.convert(datum);\n            rect.height = height;\n            rect.strokeWidth = 1;\n            rect.crisp = true;\n            return rect;\n        }));\n        this.updateColors(fills, strokes);\n        this.root.append([].concat.apply([], this.bars));\n    }\n    updateColors(fills, strokes) {\n        this.bars.forEach((series, i) => series.forEach(bar => {\n            bar.fill = fills[i];\n            bar.stroke = strokes[i];\n        }));\n    }\n}\nMiniStackedBar.chartType = 'stackedBar';\nMiniStackedBar.data = [\n    [8, 12, 16],\n    [6, 9, 12],\n    [2, 3, 4]\n];\n\nclass MiniNormalizedBar extends MiniStackedBar {\n    constructor(container, fills, strokes) {\n        super(container, fills, strokes, MiniNormalizedBar.data, [0, 10], \"normalizedBarTooltip\");\n    }\n}\nMiniNormalizedBar.chartType = 'normalizedBar';\nMiniNormalizedBar.data = [\n    [10, 10, 10],\n    [6, 7, 8],\n    [2, 4, 6]\n];\n\nconst toRadians = toRadians$1;\nclass MiniDoughnut extends MiniChart {\n    constructor(container, fills, strokes, centerRadiusScaler = 0.6, tooltipName = \"doughnutTooltip\") {\n        super(container, tooltipName);\n        const radius = (this.size - this.padding * 2) / 2;\n        const center = radius + this.padding;\n        const angles = [\n            [toRadians(-90), toRadians(30)],\n            [toRadians(30), toRadians(120)],\n            [toRadians(120), toRadians(180)],\n            [toRadians(180), toRadians(210)],\n            [toRadians(210), toRadians(240)],\n            [toRadians(240), toRadians(270)]\n        ];\n        this.sectors = angles.map(([startAngle, endAngle]) => {\n            const sector = new Sector();\n            sector.centerX = center;\n            sector.centerY = center;\n            sector.innerRadius = radius * centerRadiusScaler;\n            sector.outerRadius = radius;\n            sector.startAngle = startAngle;\n            sector.endAngle = endAngle;\n            sector.stroke = undefined;\n            sector.strokeWidth = 1;\n            return sector;\n        });\n        this.updateColors(fills, strokes);\n        this.root.append(this.sectors);\n    }\n    updateColors(fills, strokes) {\n        this.sectors.forEach((sector, i) => {\n            sector.fill = fills[i % fills.length];\n            sector.stroke = strokes[i % strokes.length];\n        });\n    }\n}\nMiniDoughnut.chartType = 'doughnut';\n\nclass MiniPie extends MiniDoughnut {\n    constructor(container, fills, strokes) {\n        super(container, fills, strokes, 0, \"pieTooltip\");\n    }\n}\nMiniPie.chartType = 'pie';\n\nclass MiniLine extends MiniChartWithAxes {\n    constructor(container, fills, strokes) {\n        super(container, \"lineTooltip\");\n        this.data = [\n            [9, 7, 8, 5, 6],\n            [5, 6, 3, 4, 1],\n            [1, 3, 4, 8, 7]\n        ];\n        this.lines = createLinePaths(this.root, this.data, this.size, this.padding);\n        this.updateColors(fills, strokes);\n    }\n    updateColors(fills, strokes) {\n        this.lines.forEach((line, i) => {\n            line.stroke = fills[i];\n        });\n    }\n}\nMiniLine.chartType = 'line';\n\nclass MiniScatter extends MiniChartWithAxes {\n    constructor(container, fills, strokes) {\n        super(container, \"scatterTooltip\");\n        const size = this.size;\n        const padding = this.padding;\n        // [x, y] pairs\n        const data = [\n            [[0.3, 3], [1.1, 0.9], [2, 0.4], [3.4, 2.4]],\n            [[0, 0.3], [1, 2], [2.4, 1.4], [3, 0]]\n        ];\n        const xScale = new LinearScale$1();\n        xScale.domain = [-0.5, 4];\n        xScale.range = [padding * 2, size - padding];\n        const yScale = new LinearScale$1();\n        yScale.domain = [-0.5, 3.5];\n        yScale.range = [size - padding, padding];\n        const points = [];\n        data.forEach(series => {\n            series.forEach(([x, y]) => {\n                const arc = new Arc();\n                arc.strokeWidth = 1;\n                arc.centerX = xScale.convert(x);\n                arc.centerY = yScale.convert(y);\n                arc.radius = 2.5;\n                points.push(arc);\n            });\n        });\n        this.points = points;\n        this.updateColors(fills, strokes);\n        const pointsGroup = new Group();\n        pointsGroup.setClipRectInGroupCoordinateSpace(new BBox(padding, padding, size - padding * 2, size - padding * 2));\n        pointsGroup.append(this.points);\n        this.root.append(pointsGroup);\n    }\n    updateColors(fills, strokes) {\n        this.points.forEach((line, i) => {\n            line.stroke = strokes[i % strokes.length];\n            line.fill = fills[i % fills.length];\n        });\n    }\n}\nMiniScatter.chartType = 'scatter';\n\nclass MiniBubble extends MiniChartWithAxes {\n    constructor(container, fills, strokes) {\n        super(container, \"bubbleTooltip\");\n        const size = this.size;\n        const padding = this.padding;\n        // [x, y, radius] triples\n        const data = [\n            [[0.1, 0.3, 5], [0.5, 0.4, 7], [0.2, 0.8, 7]], [[0.8, 0.7, 5], [0.7, 0.3, 9]]\n        ];\n        const xScale = new LinearScale$1();\n        xScale.domain = [0, 1];\n        xScale.range = [padding * 2, size - padding];\n        const yScale = new LinearScale$1();\n        yScale.domain = [0, 1];\n        yScale.range = [size - padding, padding];\n        const points = [];\n        data.forEach(series => {\n            series.forEach(([x, y, radius]) => {\n                const arc = new Arc();\n                arc.strokeWidth = 1;\n                arc.centerX = xScale.convert(x);\n                arc.centerY = yScale.convert(y);\n                arc.radius = radius;\n                arc.fillOpacity = 0.7;\n                points.push(arc);\n            });\n        });\n        this.points = points;\n        this.updateColors(fills, strokes);\n        const pointsGroup = new Group();\n        pointsGroup.setClipRectInGroupCoordinateSpace(new BBox(padding, padding, size - padding * 2, size - padding * 2));\n        pointsGroup.append(this.points);\n        this.root.append(pointsGroup);\n    }\n    updateColors(fills, strokes) {\n        this.points.forEach((line, i) => {\n            line.stroke = strokes[i % strokes.length];\n            line.fill = fills[i % fills.length];\n        });\n    }\n}\nMiniBubble.chartType = 'bubble';\n\nclass MiniArea extends MiniChartWithAxes {\n    constructor(container, fills, strokes, data = MiniArea.data) {\n        super(container, \"groupedAreaTooltip\");\n        const size = this.size;\n        const padding = this.padding;\n        const xScale = new BandScale$5();\n        xScale.domain = [0, 1, 2];\n        xScale.paddingInner = 1;\n        xScale.paddingOuter = 0;\n        xScale.range = [padding + 0.5, size - padding - 0.5];\n        const yScale = new LinearScale$1();\n        yScale.domain = [0, 6];\n        yScale.range = [size - padding + 0.5, padding];\n        const xCount = data.length;\n        const last = xCount * 2 - 1;\n        const pathData = [];\n        const bottomY = yScale.convert(0);\n        data.forEach((datum, i) => {\n            const x = xScale.convert(i);\n            datum.forEach((yDatum, j) => {\n                const y = yScale.convert(yDatum);\n                const points = pathData[j] || (pathData[j] = []);\n                points[i] = {\n                    x,\n                    y\n                };\n                points[last - i] = {\n                    x,\n                    y: bottomY\n                };\n            });\n        });\n        this.areas = pathData.reverse().map(points => {\n            const area = new Path();\n            area.strokeWidth = 1;\n            area.fillOpacity = 0.7;\n            const path = area.path;\n            path.clear();\n            points.forEach((point, i) => path[i > 0 ? \"lineTo\" : \"moveTo\"](point.x, point.y));\n            path.closePath();\n            return area;\n        });\n        this.updateColors(fills, strokes);\n        this.root.append(this.areas);\n    }\n    updateColors(fills, strokes) {\n        this.areas.forEach((area, i) => {\n            area.fill = fills[i];\n            area.stroke = strokes[i];\n        });\n    }\n}\nMiniArea.chartType = 'area';\nMiniArea.data = [\n    [1, 3, 5],\n    [2, 6, 4],\n    [5, 3, 1]\n];\n\nclass MiniStackedArea extends MiniChartWithAxes {\n    constructor(container, fills, strokes, data = MiniStackedArea.data, tooltipName = \"stackedAreaTooltip\") {\n        super(container, tooltipName);\n        const size = this.size;\n        const padding = this.padding;\n        const xScale = new BandScale$5();\n        xScale.domain = [0, 1, 2];\n        xScale.paddingInner = 1;\n        xScale.paddingOuter = 0;\n        xScale.range = [padding + 0.5, size - padding - 0.5];\n        const yScale = new LinearScale$1();\n        yScale.domain = [0, 16];\n        yScale.range = [size - padding + 0.5, padding + 0.5];\n        const xCount = data.length;\n        const last = xCount * 2 - 1;\n        const pathData = [];\n        data.forEach((datum, i) => {\n            const x = xScale.convert(i);\n            let total = 0;\n            datum.forEach((yDatum, j) => {\n                const y = yScale.convert(total + yDatum);\n                const points = pathData[j] || (pathData[j] = []);\n                points[i] = {\n                    x,\n                    y\n                };\n                points[last - i] = {\n                    x,\n                    y: yScale.convert(total) // bottom y\n                };\n                total += yDatum;\n            });\n        });\n        this.areas = pathData.map(points => {\n            const area = new Path();\n            area.strokeWidth = 1;\n            const path = area.path;\n            path.clear();\n            points.forEach((point, i) => path[i > 0 ? \"lineTo\" : \"moveTo\"](point.x, point.y));\n            path.closePath();\n            return area;\n        });\n        this.updateColors(fills, strokes);\n        this.root.append(this.areas);\n    }\n    updateColors(fills, strokes) {\n        this.areas.forEach((area, i) => {\n            area.fill = fills[i];\n            area.stroke = strokes[i];\n        });\n    }\n}\nMiniStackedArea.chartType = 'stackedArea';\nMiniStackedArea.data = [\n    [2, 3, 2],\n    [3, 6, 5],\n    [6, 2, 2]\n];\n\nclass MiniNormalizedArea extends MiniStackedArea {\n    constructor(container, fills, strokes, data = MiniNormalizedArea.data) {\n        super(container, fills, strokes, data, \"normalizedAreaTooltip\");\n    }\n}\nMiniNormalizedArea.chartType = 'normalizedArea';\nMiniNormalizedArea.data = MiniStackedArea.data.map(stack => {\n    const sum = stack.reduce((p, c) => p + c, 0);\n    return stack.map(v => v / sum * 16);\n});\n\nclass MiniHistogram extends MiniChartWithAxes {\n    constructor(container, fills, strokes) {\n        super(container, \"histogramTooltip\");\n        const padding = this.padding;\n        const size = this.size;\n        // approx normal curve\n        const data = [2, 5, 11, 13, 10, 6, 1];\n        const xScale = new LinearScale$1();\n        xScale.domain = [0, data.length];\n        xScale.range = [padding, size - padding];\n        const yScale = new LinearScale$1();\n        yScale.domain = [0, data.reduce((a, b) => Math.max(a, b), 0)];\n        yScale.range = [size - padding, padding];\n        const bottom = yScale.convert(0);\n        this.bars = data.map((datum, i) => {\n            const top = yScale.convert(datum);\n            const left = xScale.convert(i);\n            const right = xScale.convert(i + 1);\n            const rect = new Rect();\n            rect.x = left;\n            rect.y = top;\n            rect.width = right - left;\n            rect.height = bottom - top;\n            rect.strokeWidth = 1;\n            rect.crisp = true;\n            return rect;\n        });\n        this.updateColors(fills, strokes);\n        this.root.append(this.bars);\n    }\n    updateColors([fill], [stroke]) {\n        this.bars.forEach(bar => {\n            bar.fill = fill;\n            bar.stroke = stroke;\n        });\n    }\n}\nMiniHistogram.chartType = 'histogram';\n\nclass MiniColumnLineCombo extends MiniChartWithAxes {\n    constructor(container, fills, strokes) {\n        super(container, \"columnLineComboTooltip\");\n        this.columnData = [3, 4];\n        this.lineData = [\n            [5, 4, 6, 5, 4]\n        ];\n        const { root, columnData, lineData, size, padding } = this;\n        this.columns = createColumnRects({\n            stacked: false,\n            root,\n            data: columnData,\n            size,\n            padding,\n            xScaleDomain: [0, 1],\n            yScaleDomain: [0, 4],\n            xScalePadding: 0.5\n        });\n        root.append(this.columns);\n        this.lines = createLinePaths(root, lineData, size, padding);\n        this.updateColors(fills, strokes);\n    }\n    updateColors(fills, strokes) {\n        this.columns.forEach((bar, i) => {\n            bar.fill = fills[i];\n            bar.stroke = strokes[i];\n        });\n        this.lines.forEach((line, i) => {\n            line.stroke = fills[i + 2];\n        });\n    }\n}\nMiniColumnLineCombo.chartType = 'columnLineCombo';\n\nclass MiniAreaColumnCombo extends MiniChartWithAxes {\n    constructor(container, fills, strokes) {\n        super(container, \"areaColumnComboTooltip\");\n        this.columnData = [3, 4.5];\n        this.areaData = [\n            [5, 4, 6, 5, 4],\n        ];\n        const { root, columnData, areaData, size, padding } = this;\n        this.columns = createColumnRects({\n            stacked: false,\n            root,\n            data: columnData,\n            size,\n            padding,\n            xScaleDomain: [0, 1],\n            yScaleDomain: [0, 6],\n            xScalePadding: 0.5,\n        });\n        // scale for area series\n        const xScale = new BandScale$5();\n        xScale.range = [padding, size - padding];\n        xScale.domain = [0, 1, 2, 3, 4];\n        xScale.paddingInner = 1;\n        xScale.paddingOuter = 0;\n        const yScale = new LinearScale$1();\n        yScale.range = [size - padding, padding];\n        yScale.domain = [0, 6];\n        const pathData = [];\n        const yZero = yScale.convert(0);\n        const firstX = xScale.convert(0);\n        areaData.forEach((series, i) => {\n            const points = pathData[i] || (pathData[i] = []);\n            series.forEach((data, j) => {\n                const yDatum = data;\n                const xDatum = j;\n                const x = xScale.convert(xDatum);\n                const y = yScale.convert(yDatum);\n                points[j] = { x, y };\n            });\n            const lastX = xScale.convert(series.length - 1);\n            pathData[i].push({\n                x: lastX,\n                y: yZero\n            }, {\n                x: firstX,\n                y: yZero\n            });\n        });\n        this.areas = pathData.map((points) => {\n            const area = new Path();\n            area.strokeWidth = 1;\n            area.fillOpacity = 0.8;\n            const path = area.path;\n            points.forEach((point, i) => path[i > 0 ? 'lineTo' : 'moveTo'](point.x, point.y));\n            return area;\n        });\n        root.append(this.areas);\n        root.append([].concat.apply([], this.columns));\n        this.updateColors(fills, strokes);\n    }\n    updateColors(fills, strokes) {\n        this.areas.forEach((area, i) => {\n            area.fill = fills[i];\n            area.stroke = strokes[i];\n        });\n        this.columns.forEach((bar, i) => {\n            bar.fill = fills[i + 1];\n            bar.stroke = strokes[i + 1];\n        });\n    }\n}\nMiniAreaColumnCombo.chartType = 'areaColumnCombo';\n\nclass MiniCustomCombo extends MiniChart {\n    constructor(container, fills, strokes) {\n        super(container, 'customComboTooltip');\n        this.columnData = [3, 4];\n        this.lineData = [[5, 4, 6, 5, 4]];\n        const { root, columnData, lineData, size, padding } = this;\n        this.columns = createColumnRects({\n            stacked: false,\n            root,\n            data: columnData,\n            size,\n            padding,\n            xScaleDomain: [0, 1],\n            yScaleDomain: [0, 4],\n            xScalePadding: 0.5,\n        });\n        root.append(this.columns);\n        this.lines = createLinePaths(root, lineData, size, padding);\n        const axisStroke = 'grey';\n        const axisOvershoot = 3;\n        const leftAxis = new Line();\n        leftAxis.x1 = padding;\n        leftAxis.y1 = padding;\n        leftAxis.x2 = padding;\n        leftAxis.y2 = size - padding + axisOvershoot;\n        leftAxis.stroke = axisStroke;\n        const bottomAxis = new Line();\n        bottomAxis.x1 = padding - axisOvershoot + 1;\n        bottomAxis.y1 = size - padding;\n        bottomAxis.x2 = size - padding + 1;\n        bottomAxis.y2 = size - padding;\n        bottomAxis.stroke = axisStroke;\n        const penIcon = new Path();\n        this.buildPenIconPath(penIcon);\n        penIcon.fill = 'whitesmoke';\n        penIcon.stroke = 'darkslategrey';\n        penIcon.strokeWidth = 1;\n        root.append([bottomAxis, leftAxis, penIcon]);\n        this.updateColors(fills, strokes);\n    }\n    updateColors(fills, strokes) {\n        this.columns.forEach((bar, i) => {\n            bar.fill = fills[i];\n            bar.stroke = strokes[i];\n        });\n        this.lines.forEach((line, i) => {\n            line.stroke = fills[i + 2];\n        });\n    }\n    buildPenIconPath(penIcon) {\n        const { path } = penIcon;\n        path.moveTo(25.76, 43.46);\n        path.lineTo(31.27, 48.53);\n        path.moveTo(49.86, 22);\n        path.lineTo(49.86, 22);\n        path.cubicCurveTo(49.01994659053345, 21.317514933510974, 47.89593834348529, 21.09645997825817, 46.86, 21.41);\n        path.lineTo(46.86, 21.41);\n        path.cubicCurveTo(45.55460035985361, 21.77260167850787, 44.38777081121966, 22.517979360321792, 43.51, 23.55);\n        path.lineTo(25.51, 43.8);\n        path.lineTo(25.43, 43.89);\n        path.lineTo(23.01, 51.89);\n        path.lineTo(22.83, 52.46);\n        path.lineTo(31.02, 48.86);\n        path.lineTo(49.02, 28.52);\n        path.lineTo(49.02, 28.52);\n        path.cubicCurveTo(49.940716461596224, 27.521914221246085, 50.54302631059587, 26.2720342455763, 50.75, 24.93);\n        path.lineTo(50.75, 24.93);\n        path.cubicCurveTo(50.95363374988308, 23.866379846512814, 50.62080640232334, 22.77066734274871, 49.86, 22.0);\n        path.closePath();\n        path.moveTo(41.76, 25.5);\n        path.lineTo(47.34, 30.5);\n        path.moveTo(40.74, 26.65);\n        path.lineTo(46.25, 31.71);\n    }\n}\nMiniCustomCombo.chartType = 'customCombo';\n\nvar __decorate$W = ( false) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nconst miniChartMapping = {\n    columnGroup: {\n        column: MiniColumn,\n        stackedColumn: MiniStackedColumn,\n        normalizedColumn: MiniNormalizedColumn\n    },\n    barGroup: {\n        bar: MiniBar,\n        stackedBar: MiniStackedBar,\n        normalizedBar: MiniNormalizedBar\n    },\n    pieGroup: {\n        pie: MiniPie,\n        doughnut: MiniDoughnut\n    },\n    lineGroup: {\n        line: MiniLine\n    },\n    scatterGroup: {\n        scatter: MiniScatter,\n        bubble: MiniBubble\n    },\n    areaGroup: {\n        area: MiniArea,\n        stackedArea: MiniStackedArea,\n        normalizedArea: MiniNormalizedArea\n    },\n    histogramGroup: {\n        histogram: MiniHistogram\n    },\n    combinationGroup: {\n        columnLineCombo: MiniColumnLineCombo,\n        areaColumnCombo: MiniAreaColumnCombo,\n        customCombo: MiniCustomCombo\n    }\n};\nclass MiniChartsContainer extends ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.Component {\n    constructor(chartController, fills, strokes, chartGroups = ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.DEFAULT_CHART_GROUPS) {\n        super(MiniChartsContainer.TEMPLATE);\n        this.wrappers = {};\n        this.chartController = chartController;\n        this.fills = fills;\n        this.strokes = strokes;\n        this.chartGroups = Object.assign({}, chartGroups);\n    }\n    init() {\n        // hide MiniCustomCombo if no custom combo exists\n        if (!this.chartController.customComboExists() && this.chartGroups.combinationGroup) {\n            this.chartGroups.combinationGroup = this.chartGroups.combinationGroup.filter(chartType => chartType !== 'customCombo');\n        }\n        const eGui = this.getGui();\n        Object.keys(this.chartGroups).forEach((group) => {\n            const chartGroupValues = this.chartGroups[group];\n            const groupComponent = this.createBean(new ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.AgGroupComponent({\n                title: this.chartTranslationService.translate(group),\n                suppressEnabledCheckbox: true,\n                enabled: true,\n                suppressOpenCloseIcons: true,\n                cssIdentifier: 'charts-settings',\n                direction: 'horizontal'\n            }));\n            chartGroupValues.forEach((chartType) => {\n                var _a;\n                const MiniClass = (_a = miniChartMapping[group]) === null || _a === void 0 ? void 0 : _a[chartType];\n                if (!MiniClass) {\n                    if (miniChartMapping[group]) {\n                        ag_grid_community__WEBPACK_IMPORTED_MODULE_0__._.doOnce(() => console.warn(`AG Grid - invalid chartGroupsDef config '${group}.${chartType}'`), `invalid_chartGroupsDef${chartType}_${group}`);\n                    }\n                    else {\n                        ag_grid_community__WEBPACK_IMPORTED_MODULE_0__._.doOnce(() => console.warn(`AG Grid - invalid chartGroupsDef config '${group}'`), `invalid_chartGroupsDef${group}`);\n                    }\n                    return;\n                }\n                const miniWrapper = document.createElement('div');\n                miniWrapper.classList.add('ag-chart-mini-thumbnail');\n                const miniClassChartType = MiniClass.chartType;\n                this.addManagedListener(miniWrapper, 'click', () => {\n                    this.chartController.setChartType(miniClassChartType);\n                    this.updateSelectedMiniChart();\n                });\n                this.wrappers[miniClassChartType] = miniWrapper;\n                this.createBean(new MiniClass(miniWrapper, this.fills, this.strokes));\n                groupComponent.addItem(miniWrapper);\n            });\n            eGui.appendChild(groupComponent.getGui());\n        });\n        this.updateSelectedMiniChart();\n    }\n    updateSelectedMiniChart() {\n        const selectedChartType = this.chartController.getChartType();\n        for (const miniChartType in this.wrappers) {\n            const miniChart = this.wrappers[miniChartType];\n            const selected = miniChartType === selectedChartType;\n            miniChart.classList.toggle('ag-selected', selected);\n        }\n    }\n}\nMiniChartsContainer.TEMPLATE = `<div class=\"ag-chart-settings-mini-wrapper\"></div>`;\n__decorate$W([\n    (0,ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.Autowired)('chartTranslationService')\n], MiniChartsContainer.prototype, \"chartTranslationService\", void 0);\n__decorate$W([\n    ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.PostConstruct\n], MiniChartsContainer.prototype, \"init\", null);\n\nvar __decorate$V = ( false) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nclass ChartSettingsPanel extends ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.Component {\n    constructor(chartController) {\n        super(ChartSettingsPanel.TEMPLATE);\n        this.miniChartsContainers = [];\n        this.cardItems = [];\n        this.activePaletteIndex = 0;\n        this.palettes = [];\n        this.themes = [];\n        this.chartController = chartController;\n    }\n    postConstruct() {\n        this.resetPalettes();\n        this.ePrevBtn.insertAdjacentElement('afterbegin', ag_grid_community__WEBPACK_IMPORTED_MODULE_0__._.createIconNoSpan('previous', this.gridOptionsService));\n        this.eNextBtn.insertAdjacentElement('afterbegin', ag_grid_community__WEBPACK_IMPORTED_MODULE_0__._.createIconNoSpan('next', this.gridOptionsService));\n        this.addManagedListener(this.ePrevBtn, 'click', () => this.setActivePalette(this.getPrev(), 'left'));\n        this.addManagedListener(this.eNextBtn, 'click', () => this.setActivePalette(this.getNext(), 'right'));\n        // change the selected chart when a combo chart is modified via the data panel, i.e. the custom combo should be selected\n        this.addManagedListener(this.chartController, ChartController.EVENT_CHART_TYPE_CHANGED, () => this.resetPalettes(true));\n        this.addManagedListener(this.chartController, ChartController.EVENT_CHART_API_UPDATE, () => this.resetPalettes(true));\n        this.scrollSelectedIntoView();\n    }\n    scrollSelectedIntoView() {\n        // the panel is not immediately visible due to the slide animation, so we add a\n        // setTimeout to wait until the panel animation is over and is able to scroll\n        setTimeout(() => {\n            const isMiniChartsContainerVisible = (miniChartsContainers) => {\n                return !miniChartsContainers.getGui().classList.contains('ag-hidden');\n            };\n            const currentMiniChartContainer = this.miniChartsContainers.find(isMiniChartsContainerVisible);\n            const currentChart = currentMiniChartContainer.getGui().querySelector('.ag-selected');\n            if (currentChart) {\n                const parent = currentChart.offsetParent;\n                if (parent) {\n                    this.eMiniChartsContainer.scrollTo(0, parent.offsetTop);\n                }\n            }\n        }, 250);\n    }\n    resetPalettes(forceReset) {\n        var _a, _b;\n        const palettes = this.chartController.getPalettes();\n        const chartGroups = (_b = (_a = this.gridOptionsService.get('chartToolPanelsDef')) === null || _a === void 0 ? void 0 : _a.settingsPanel) === null || _b === void 0 ? void 0 : _b.chartGroupsDef;\n        if ((ag_grid_community__WEBPACK_IMPORTED_MODULE_0__._.shallowCompare(palettes, this.palettes) && !forceReset) || this.isAnimating) {\n            return;\n        }\n        this.palettes = palettes;\n        this.themes = this.chartController.getThemes();\n        this.activePaletteIndex = this.themes.findIndex(name => name === this.chartController.getChartThemeName());\n        this.cardItems = [];\n        ag_grid_community__WEBPACK_IMPORTED_MODULE_0__._.clearElement(this.eCardSelector);\n        this.destroyMiniCharts();\n        this.palettes.forEach((palette, index) => {\n            const isActivePalette = this.activePaletteIndex === index;\n            const { fills, strokes } = palette;\n            const miniChartsContainer = this.createBean(new MiniChartsContainer(this.chartController, fills, strokes, chartGroups));\n            this.miniChartsContainers.push(miniChartsContainer);\n            this.eMiniChartsContainer.appendChild(miniChartsContainer.getGui());\n            this.addCardLink(index);\n            if (isActivePalette) {\n                miniChartsContainer.updateSelectedMiniChart();\n            }\n            else {\n                miniChartsContainer.setDisplayed(false);\n            }\n        });\n        ag_grid_community__WEBPACK_IMPORTED_MODULE_0__._.setDisplayed(this.eNavBar, this.palettes.length > 1);\n        ag_grid_community__WEBPACK_IMPORTED_MODULE_0__._.radioCssClass(this.cardItems[this.activePaletteIndex], 'ag-selected', 'ag-not-selected');\n    }\n    addCardLink(index) {\n        const link = document.createElement('div');\n        link.classList.add('ag-chart-settings-card-item');\n        this.addManagedListener(link, 'click', () => {\n            this.setActivePalette(index, index < this.activePaletteIndex ? 'left' : 'right');\n        });\n        this.eCardSelector.appendChild(link);\n        this.cardItems.push(link);\n    }\n    getPrev() {\n        let prev = this.activePaletteIndex - 1;\n        if (prev < 0) {\n            prev = this.palettes.length - 1;\n        }\n        return prev;\n    }\n    getNext() {\n        let next = this.activePaletteIndex + 1;\n        if (next >= this.palettes.length) {\n            next = 0;\n        }\n        return next;\n    }\n    setActivePalette(index, animationDirection) {\n        if (this.isAnimating || this.activePaletteIndex === index) {\n            return;\n        }\n        ag_grid_community__WEBPACK_IMPORTED_MODULE_0__._.radioCssClass(this.cardItems[index], 'ag-selected', 'ag-not-selected');\n        const currentPalette = this.miniChartsContainers[this.activePaletteIndex];\n        const currentGui = currentPalette.getGui();\n        const futurePalette = this.miniChartsContainers[index];\n        const nextGui = futurePalette.getGui();\n        currentPalette.updateSelectedMiniChart();\n        futurePalette.updateSelectedMiniChart();\n        const multiplier = animationDirection === 'left' ? -1 : 1;\n        const final = nextGui.style.left = `${(ag_grid_community__WEBPACK_IMPORTED_MODULE_0__._.getAbsoluteWidth(this.getGui()) * multiplier)}px`;\n        this.activePaletteIndex = index;\n        this.isAnimating = true;\n        const animatingClass = 'ag-animating';\n        futurePalette.setDisplayed(true);\n        currentPalette.addCssClass(animatingClass);\n        futurePalette.addCssClass(animatingClass);\n        this.chartController.setChartThemeName(this.themes[index]);\n        window.setTimeout(() => {\n            currentGui.style.left = `${-parseFloat(final)}px`;\n            nextGui.style.left = '0px';\n        }, 0);\n        window.setTimeout(() => {\n            this.isAnimating = false;\n            currentPalette.removeCssClass(animatingClass);\n            futurePalette.removeCssClass(animatingClass);\n            currentPalette.setDisplayed(false);\n        }, 300);\n    }\n    destroyMiniCharts() {\n        ag_grid_community__WEBPACK_IMPORTED_MODULE_0__._.clearElement(this.eMiniChartsContainer);\n        this.miniChartsContainers = this.destroyBeans(this.miniChartsContainers);\n    }\n    destroy() {\n        this.destroyMiniCharts();\n        super.destroy();\n    }\n}\nChartSettingsPanel.TEMPLATE = `<div class=\"ag-chart-settings-wrapper\">\n            <div ref=\"eMiniChartsContainer\" class=\"ag-chart-settings-mini-charts-container ag-scrollable-container\"></div>\n            <div ref=\"eNavBar\" class=\"ag-chart-settings-nav-bar\">\n                <div ref=\"ePrevBtn\" class=\"ag-chart-settings-prev\">\n                    <button type=\"button\" class=\"ag-button ag-chart-settings-prev-button\"></button>\n                </div>\n                <div ref=\"eCardSelector\" class=\"ag-chart-settings-card-selector\"></div>\n                <div ref=\"eNextBtn\" class=\"ag-chart-settings-next\">\n                    <button type=\"button\" class=\"ag-button ag-chart-settings-next-button\"></button>\n                </div>\n            </div>\n        </div>`;\n__decorate$V([\n    (0,ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.Autowired)('resizeObserverService')\n], ChartSettingsPanel.prototype, \"resizeObserverService\", void 0);\n__decorate$V([\n    (0,ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.RefSelector)('eMiniChartsContainer')\n], ChartSettingsPanel.prototype, \"eMiniChartsContainer\", void 0);\n__decorate$V([\n    (0,ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.RefSelector)('eNavBar')\n], ChartSettingsPanel.prototype, \"eNavBar\", void 0);\n__decorate$V([\n    (0,ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.RefSelector)('eCardSelector')\n], ChartSettingsPanel.prototype, \"eCardSelector\", void 0);\n__decorate$V([\n    (0,ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.RefSelector)('ePrevBtn')\n], ChartSettingsPanel.prototype, \"ePrevBtn\", void 0);\n__decorate$V([\n    (0,ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.RefSelector)('eNextBtn')\n], ChartSettingsPanel.prototype, \"eNextBtn\", void 0);\n__decorate$V([\n    ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.PostConstruct\n], ChartSettingsPanel.prototype, \"postConstruct\", null);\n\nvar __decorate$U = ( false) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nclass TabbedChartMenu extends ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.Component {\n    constructor(params) {\n        super();\n        this.tabs = [];\n        const { controller, panels, chartOptionsService } = params;\n        this.chartController = controller;\n        this.chartOptionsService = chartOptionsService;\n        this.panels = panels;\n    }\n    init() {\n        this.panels.forEach(panel => {\n            const panelType = panel.replace('chart', '').toLowerCase();\n            const { comp, tab } = this.createTab(panel, panelType, this.getPanelClass(panelType));\n            this.tabs.push(tab);\n            this.addDestroyFunc(() => this.destroyBean(comp));\n        });\n        this.tabbedLayout = new ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.TabbedLayout({\n            items: this.tabs,\n            cssClass: 'ag-chart-tabbed-menu',\n            keepScrollPosition: true\n        });\n        this.getContext().createBean(this.tabbedLayout);\n    }\n    createTab(name, title, TabPanelClass) {\n        const eWrapperDiv = document.createElement('div');\n        eWrapperDiv.classList.add('ag-chart-tab', `ag-chart-${title}`);\n        const comp = new TabPanelClass(this.chartController, this.chartOptionsService);\n        this.getContext().createBean(comp);\n        eWrapperDiv.appendChild(comp.getGui());\n        const titleEl = document.createElement('div');\n        const translatedTitle = this.chartTranslationService.translate(title);\n        titleEl.innerText = translatedTitle;\n        return {\n            comp,\n            tab: {\n                title: titleEl,\n                titleLabel: translatedTitle,\n                bodyPromise: ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.AgPromise.resolve(eWrapperDiv),\n                getScrollableContainer: () => {\n                    const scrollableContainer = eWrapperDiv.querySelector('.ag-scrollable-container');\n                    return (scrollableContainer || eWrapperDiv);\n                },\n                name\n            }\n        };\n    }\n    showTab(tab) {\n        const tabItem = this.tabs[tab];\n        this.tabbedLayout.showItem(tabItem);\n    }\n    getGui() {\n        return this.tabbedLayout && this.tabbedLayout.getGui();\n    }\n    destroy() {\n        if (this.parentComponent && this.parentComponent.isAlive()) {\n            this.destroyBean(this.parentComponent);\n        }\n        super.destroy();\n    }\n    getPanelClass(panelType) {\n        switch (panelType) {\n            case TabbedChartMenu.TAB_DATA:\n                return ChartDataPanel;\n            case TabbedChartMenu.TAB_FORMAT:\n                return FormatPanel;\n            default:\n                return ChartSettingsPanel;\n        }\n    }\n}\nTabbedChartMenu.TAB_DATA = 'data';\nTabbedChartMenu.TAB_FORMAT = 'format';\n__decorate$U([\n    (0,ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.Autowired)('chartTranslationService')\n], TabbedChartMenu.prototype, \"chartTranslationService\", void 0);\n__decorate$U([\n    ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.PostConstruct\n], TabbedChartMenu.prototype, \"init\", null);\n\nvar __decorate$T = ( false) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nclass ChartMenu extends ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.Component {\n    constructor(eChartContainer, eMenuPanelContainer, chartController, chartOptionsService) {\n        super(ChartMenu.TEMPLATE);\n        this.eChartContainer = eChartContainer;\n        this.eMenuPanelContainer = eMenuPanelContainer;\n        this.chartController = chartController;\n        this.chartOptionsService = chartOptionsService;\n        this.buttons = {\n            chartSettings: ['menu', () => this.showMenu(this.defaultPanel)],\n            chartData: ['menu', () => this.showMenu(\"chartData\")],\n            chartFormat: ['menu', () => this.showMenu(\"chartFormat\")],\n            chartLink: ['linked', e => this.toggleDetached(e)],\n            chartUnlink: ['unlinked', e => this.toggleDetached(e)],\n            chartDownload: ['save', () => this.saveChart()]\n        };\n        this.panels = [];\n        this.buttonListenersDestroyFuncs = [];\n        this.menuVisible = false;\n    }\n    postConstruct() {\n        this.createButtons();\n        this.addManagedListener(this.eventService, ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.Events.EVENT_CHART_CREATED, (e) => {\n            var _a;\n            if (e.chartId === this.chartController.getChartId()) {\n                const showDefaultToolPanel = Boolean((_a = this.gridOptionsService.get('chartToolPanelsDef')) === null || _a === void 0 ? void 0 : _a.defaultToolPanel);\n                if (showDefaultToolPanel) {\n                    this.showMenu(this.defaultPanel, false);\n                }\n            }\n        });\n        this.refreshMenuClasses();\n        if (!this.gridOptionsService.is('suppressChartToolPanelsButton') && this.panels.length > 0) {\n            this.getGui().classList.add('ag-chart-tool-panel-button-enable');\n            this.addManagedListener(this.eHideButton, 'click', this.toggleMenu.bind(this));\n        }\n        this.addManagedListener(this.chartController, ChartController.EVENT_CHART_API_UPDATE, this.createButtons.bind(this));\n    }\n    isVisible() {\n        return this.menuVisible;\n    }\n    getExtraPaddingDirections() {\n        const topItems = ['chartLink', 'chartUnlink', 'chartDownload'];\n        const rightItems = ['chartSettings', 'chartData', 'chartFormat'];\n        const result = [];\n        if (topItems.some(v => this.chartToolbarOptions.includes(v))) {\n            result.push('top');\n        }\n        if (rightItems.some(v => this.chartToolbarOptions.includes(v))) {\n            result.push(this.gridOptionsService.is('enableRtl') ? 'left' : 'right');\n        }\n        return result;\n    }\n    getToolbarOptions() {\n        var _a, _b, _c;\n        const useChartToolPanelCustomisation = Boolean(this.gridOptionsService.get('chartToolPanelsDef'));\n        if (useChartToolPanelCustomisation) {\n            const defaultChartToolbarOptions = [\n                this.chartController.isChartLinked() ? 'chartLink' : 'chartUnlink',\n                'chartDownload'\n            ];\n            const toolbarItemsFunc = this.gridOptionsService.getCallback('getChartToolbarItems');\n            const params = {\n                defaultItems: defaultChartToolbarOptions\n            };\n            let chartToolbarOptions = toolbarItemsFunc\n                ? toolbarItemsFunc(params).filter(option => {\n                    if (!ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.CHART_TOOLBAR_ALLOW_LIST.includes(option)) {\n                        const msg = ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.CHART_TOOL_PANEL_ALLOW_LIST.includes(option)\n                            ? `AG Grid: '${option}' is a Chart Tool Panel option and will be ignored since 'chartToolPanelsDef' is used. Please use 'chartToolPanelsDef.panels' grid option instead`\n                            : `AG Grid: '${option}' is not a valid Chart Toolbar Option`;\n                        console.warn(msg);\n                        return false;\n                    }\n                    return true;\n                })\n                : defaultChartToolbarOptions;\n            const panelsOverride = (_b = (_a = this.gridOptionsService.get('chartToolPanelsDef')) === null || _a === void 0 ? void 0 : _a.panels) === null || _b === void 0 ? void 0 : _b.map(panel => {\n                const menuOption = ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.CHART_TOOL_PANEL_MENU_OPTIONS[panel];\n                if (!menuOption) {\n                    console.warn(`AG Grid - invalid panel in chartToolPanelsDef.panels: '${panel}'`);\n                }\n                return menuOption;\n            }).filter(panel => Boolean(panel));\n            this.panels = panelsOverride\n                ? panelsOverride\n                : Object.values(ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.CHART_TOOL_PANEL_MENU_OPTIONS);\n            // pivot charts use the column tool panel instead of the data panel\n            if (this.chartController.isPivotChart()) {\n                this.panels = this.panels.filter(panel => panel !== 'chartData');\n            }\n            const defaultToolPanel = (_c = this.gridOptionsService.get('chartToolPanelsDef')) === null || _c === void 0 ? void 0 : _c.defaultToolPanel;\n            this.defaultPanel = (defaultToolPanel && ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.CHART_TOOL_PANEL_MENU_OPTIONS[defaultToolPanel]) || this.panels[0];\n            return this.panels.length > 0\n                // Only one panel is required to display menu icon in toolbar\n                ? [this.panels[0], ...chartToolbarOptions]\n                : chartToolbarOptions;\n        }\n        else { // To be deprecated in future. Toolbar options will be different to chart tool panels.\n            let tabOptions = [\n                'chartSettings',\n                'chartData',\n                'chartFormat',\n                this.chartController.isChartLinked() ? 'chartLink' : 'chartUnlink',\n                'chartDownload'\n            ];\n            const toolbarItemsFunc = this.gridOptionsService.getCallback('getChartToolbarItems');\n            if (toolbarItemsFunc) {\n                const isLegacyToolbar = this.gridOptionsService.is('suppressChartToolPanelsButton');\n                const params = {\n                    defaultItems: isLegacyToolbar ? tabOptions : ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.CHART_TOOLBAR_ALLOW_LIST\n                };\n                tabOptions = toolbarItemsFunc(params).filter(option => {\n                    if (!this.buttons[option]) {\n                        console.warn(`AG Grid: '${option}' is not a valid Chart Toolbar Option`);\n                        return false;\n                    }\n                    // If not legacy, remove chart tool panel options here,\n                    // and add them all in one go below\n                    else if (!isLegacyToolbar && ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.CHART_TOOL_PANEL_ALLOW_LIST.includes(option)) {\n                        const msg = `AG Grid: '${option}' is a Chart Tool Panel option and will be ignored. Please use 'chartToolPanelsDef.panels' grid option instead`;\n                        console.warn(msg);\n                        return false;\n                    }\n                    return true;\n                });\n                if (!isLegacyToolbar) {\n                    // Add all the chart tool panels, as `chartToolPanelsDef.panels`\n                    // should be used for configuration\n                    tabOptions = tabOptions.concat(ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.CHART_TOOL_PANEL_ALLOW_LIST);\n                }\n            }\n            // pivot charts use the column tool panel instead of the data panel\n            if (this.chartController.isPivotChart()) {\n                tabOptions = tabOptions.filter(option => option !== 'chartData');\n            }\n            const ignoreOptions = ['chartUnlink', 'chartLink', 'chartDownload'];\n            this.panels = tabOptions.filter(option => ignoreOptions.indexOf(option) === -1);\n            this.defaultPanel = this.panels[0];\n            return tabOptions.filter(value => ignoreOptions.indexOf(value) !== -1 ||\n                (this.panels.length && value === this.panels[0]));\n        }\n    }\n    toggleDetached(e) {\n        const target = e.target;\n        const active = target.classList.contains('ag-icon-linked');\n        target.classList.toggle('ag-icon-linked', !active);\n        target.classList.toggle('ag-icon-unlinked', active);\n        const tooltipKey = active ? 'chartUnlinkToolbarTooltip' : 'chartLinkToolbarTooltip';\n        const tooltipTitle = this.chartTranslationService.translate(tooltipKey);\n        if (tooltipTitle) {\n            target.title = tooltipTitle;\n        }\n        this.chartController.detachChartRange();\n    }\n    createButtons() {\n        this.buttonListenersDestroyFuncs.forEach(func => func());\n        this.buttonListenersDestroyFuncs = [];\n        this.chartToolbarOptions = this.getToolbarOptions();\n        const menuEl = this.eMenu;\n        ag_grid_community__WEBPACK_IMPORTED_MODULE_0__._.clearElement(menuEl);\n        this.chartToolbarOptions.forEach(button => {\n            const buttonConfig = this.buttons[button];\n            const [iconName, callback] = buttonConfig;\n            const buttonEl = ag_grid_community__WEBPACK_IMPORTED_MODULE_0__._.createIconNoSpan(iconName, this.gridOptionsService, undefined, true);\n            buttonEl.classList.add('ag-chart-menu-icon');\n            const tooltipTitle = this.chartTranslationService.translate(button + 'ToolbarTooltip');\n            if (tooltipTitle && buttonEl instanceof HTMLElement) {\n                buttonEl.title = tooltipTitle;\n            }\n            this.buttonListenersDestroyFuncs.push(this.addManagedListener(buttonEl, 'click', callback));\n            menuEl.appendChild(buttonEl);\n        });\n    }\n    saveChart() {\n        const event = { type: ChartMenu.EVENT_DOWNLOAD_CHART };\n        this.dispatchEvent(event);\n    }\n    createMenuPanel(defaultTab) {\n        const width = this.environment.chartMenuPanelWidth();\n        const menuPanel = this.menuPanel = this.createBean(new ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.AgPanel({\n            minWidth: width,\n            width,\n            height: '100%',\n            closable: true,\n            hideTitleBar: true,\n            cssIdentifier: 'chart-menu'\n        }));\n        menuPanel.setParentComponent(this);\n        this.eMenuPanelContainer.appendChild(menuPanel.getGui());\n        this.tabbedMenu = this.createBean(new TabbedChartMenu({\n            controller: this.chartController,\n            type: this.chartController.getChartType(),\n            panels: this.panels,\n            chartOptionsService: this.chartOptionsService\n        }));\n        this.addManagedListener(menuPanel, ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.Component.EVENT_DESTROYED, () => this.destroyBean(this.tabbedMenu));\n        return new ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.AgPromise((res) => {\n            window.setTimeout(() => {\n                menuPanel.setBodyComponent(this.tabbedMenu);\n                this.tabbedMenu.showTab(defaultTab);\n                res(menuPanel);\n                this.addManagedListener(this.eChartContainer, 'click', (event) => {\n                    if (this.getGui().contains(event.target)) {\n                        return;\n                    }\n                    if (this.menuVisible) {\n                        this.hideMenu();\n                    }\n                });\n            }, 100);\n        });\n    }\n    showContainer() {\n        if (!this.menuPanel) {\n            return;\n        }\n        this.menuVisible = true;\n        this.showParent(this.menuPanel.getWidth());\n        this.refreshMenuClasses();\n    }\n    toggleMenu() {\n        this.menuVisible ? this.hideMenu() : this.showMenu();\n    }\n    showMenu(\n    /**\n     * Menu panel to show. If empty, shows the existing menu, or creates the default menu if menu panel has not been created\n     */\n    panel, \n    /**\n     * Whether to animate the menu opening\n     */\n    animate = true) {\n        if (!animate) {\n            this.eMenuPanelContainer.classList.add('ag-no-transition');\n        }\n        if (this.menuPanel && !panel) {\n            this.showContainer();\n        }\n        else {\n            const menuPanel = panel || this.defaultPanel;\n            let tab = this.panels.indexOf(menuPanel);\n            if (tab < 0) {\n                console.warn(`AG Grid: '${panel}' is not a valid Chart Tool Panel name`);\n                tab = this.panels.indexOf(this.defaultPanel);\n            }\n            if (this.menuPanel) {\n                this.tabbedMenu.showTab(tab);\n                this.showContainer();\n            }\n            else {\n                this.createMenuPanel(tab).then(this.showContainer.bind(this));\n            }\n        }\n        if (!animate) {\n            // Wait for menu to render\n            setTimeout(() => {\n                if (!this.isAlive()) {\n                    return;\n                }\n                this.eMenuPanelContainer.classList.remove('ag-no-transition');\n            }, 500);\n        }\n    }\n    hideMenu() {\n        this.hideParent();\n        window.setTimeout(() => {\n            this.menuVisible = false;\n            this.refreshMenuClasses();\n        }, 500);\n    }\n    refreshMenuClasses() {\n        this.eChartContainer.classList.toggle('ag-chart-menu-visible', this.menuVisible);\n        this.eChartContainer.classList.toggle('ag-chart-menu-hidden', !this.menuVisible);\n        if (!this.gridOptionsService.is('suppressChartToolPanelsButton')) {\n            this.eHideButtonIcon.classList.toggle('ag-icon-contracted', this.menuVisible);\n            this.eHideButtonIcon.classList.toggle('ag-icon-expanded', !this.menuVisible);\n        }\n    }\n    showParent(width) {\n        this.eMenuPanelContainer.style.minWidth = `${width}px`;\n    }\n    hideParent() {\n        this.eMenuPanelContainer.style.minWidth = '0';\n    }\n    destroy() {\n        super.destroy();\n        if (this.menuPanel && this.menuPanel.isAlive()) {\n            this.destroyBean(this.menuPanel);\n        }\n        if (this.tabbedMenu && this.tabbedMenu.isAlive()) {\n            this.destroyBean(this.tabbedMenu);\n        }\n    }\n}\nChartMenu.EVENT_DOWNLOAD_CHART = \"downloadChart\";\nChartMenu.TEMPLATE = `<div>\n        <div class=\"ag-chart-menu\" ref=\"eMenu\"></div>\n        <button class=\"ag-button ag-chart-menu-close\" ref=\"eHideButton\">\n            <span class=\"ag-icon ag-icon-contracted\" ref=\"eHideButtonIcon\"></span>\n        </button>\n    </div>`;\n__decorate$T([\n    (0,ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.Autowired)('chartTranslationService')\n], ChartMenu.prototype, \"chartTranslationService\", void 0);\n__decorate$T([\n    (0,ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.RefSelector)(\"eMenu\")\n], ChartMenu.prototype, \"eMenu\", void 0);\n__decorate$T([\n    (0,ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.RefSelector)(\"eHideButton\")\n], ChartMenu.prototype, \"eHideButton\", void 0);\n__decorate$T([\n    (0,ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.RefSelector)(\"eHideButtonIcon\")\n], ChartMenu.prototype, \"eHideButtonIcon\", void 0);\n__decorate$T([\n    ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.PostConstruct\n], ChartMenu.prototype, \"postConstruct\", null);\n\nvar __decorate$S = ( false) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nclass TitleEdit extends ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.Component {\n    constructor(chartMenu) {\n        super(TitleEdit.TEMPLATE);\n        this.chartMenu = chartMenu;\n        this.destroyableChartListeners = [];\n        this.editing = false;\n    }\n    init() {\n        this.addManagedListener(this.getGui(), 'keydown', (e) => {\n            if (this.editing && e.key === 'Enter' && !e.shiftKey) {\n                this.handleEndEditing();\n                e.preventDefault();\n            }\n        });\n        this.addManagedListener(this.getGui(), 'input', () => {\n            if (this.editing) {\n                this.updateHeight();\n            }\n        });\n        this.addManagedListener(this.getGui(), 'blur', () => this.endEditing());\n    }\n    /* should be called when the containing component changes to a new chart proxy */\n    refreshTitle(chartController, chartOptionsService) {\n        this.chartController = chartController;\n        this.chartOptionsService = chartOptionsService;\n        for (const destroyFn of this.destroyableChartListeners) {\n            destroyFn();\n        }\n        this.destroyableChartListeners = [];\n        const chartProxy = this.chartController.getChartProxy();\n        const chart = chartProxy.getChart();\n        const canvas = chart.scene.canvas.element;\n        const destroyDbleClickListener = this.addManagedListener(canvas, 'dblclick', event => {\n            const { title } = chart;\n            if (title && title.node.containsPoint(event.offsetX, event.offsetY)) {\n                const bbox = title.node.computeBBox();\n                const xy = title.node.inverseTransformPoint(bbox.x, bbox.y);\n                this.startEditing(Object.assign(Object.assign({}, bbox), xy), canvas.width);\n            }\n        });\n        let wasInTitle = false;\n        const destroyMouseMoveListener = this.addManagedListener(canvas, 'mousemove', event => {\n            const { title } = chart;\n            const inTitle = !!(title && title.enabled && title.node.containsPoint(event.offsetX, event.offsetY));\n            if (wasInTitle !== inTitle) {\n                canvas.style.cursor = inTitle ? 'pointer' : '';\n            }\n            wasInTitle = inTitle;\n        });\n        this.destroyableChartListeners = [\n            destroyDbleClickListener,\n            destroyMouseMoveListener\n        ];\n    }\n    startEditing(titleBBox, canvasWidth) {\n        if (this.chartMenu && this.chartMenu.isVisible()) {\n            // currently, we ignore requests to edit the chart title while the chart menu is showing\n            // because the click to edit the chart will also close the chart menu, making the position\n            // of the title change.\n            return;\n        }\n        if (this.editing) {\n            return;\n        }\n        this.editing = true;\n        const minimumTargetInputWidth = 300;\n        const inputWidth = Math.max(Math.min(titleBBox.width + 20, canvasWidth), minimumTargetInputWidth);\n        const element = this.getGui();\n        element.classList.add('currently-editing');\n        const inputStyle = element.style;\n        // match style of input to title that we're editing\n        inputStyle.fontFamily = this.chartOptionsService.getChartOption('title.fontFamily');\n        inputStyle.fontWeight = this.chartOptionsService.getChartOption('title.fontWeight');\n        inputStyle.fontStyle = this.chartOptionsService.getChartOption('title.fontStyle');\n        inputStyle.fontSize = this.chartOptionsService.getChartOption('title.fontSize') + 'px';\n        inputStyle.color = this.chartOptionsService.getChartOption('title.color');\n        // populate the input with the title, unless the title is the placeholder:\n        const oldTitle = this.chartOptionsService.getChartOption('title.text');\n        const isTitlePlaceholder = oldTitle === this.chartTranslationService.translate('titlePlaceholder');\n        element.value = isTitlePlaceholder ? '' : oldTitle;\n        const oldTitleLines = oldTitle.split(/\\r?\\n/g).length;\n        inputStyle.left = Math.round(titleBBox.x + titleBBox.width / 2 - inputWidth / 2 - 1) + 'px';\n        inputStyle.top = Math.round(titleBBox.y + titleBBox.height / 2 - (oldTitleLines * this.getLineHeight()) / 2 - 2) + 'px';\n        inputStyle.width = Math.round(inputWidth) + 'px';\n        inputStyle.lineHeight = this.getLineHeight() + 'px';\n        this.updateHeight();\n        element.focus();\n    }\n    updateHeight() {\n        const element = this.getGui();\n        // The element should cover the title and provide enough space for the new one.\n        const oldTitleLines = this.chartOptionsService.getChartOption('title.text').split(/\\r?\\n/g).length;\n        const currentTitleLines = element.value.split(/\\r?\\n/g).length;\n        element.style.height = (Math.round(Math.max(oldTitleLines, currentTitleLines) * this.getLineHeight()) + 4) + 'px';\n    }\n    getLineHeight() {\n        const fixedLineHeight = this.chartOptionsService.getChartOption('title.lineHeight');\n        if (fixedLineHeight) {\n            return parseInt(fixedLineHeight);\n        }\n        return Math.round(parseInt(this.chartOptionsService.getChartOption('title.fontSize')) * 1.2);\n    }\n    handleEndEditing() {\n        // special handling to avoid flicker caused by delay when swapping old and new titles\n        // 1 - store current title color\n        const titleColor = this.chartOptionsService.getChartOption('title.color');\n        // 2 - hide title by making it transparent\n        const transparentColor = 'rgba(0, 0, 0, 0)';\n        this.chartOptionsService.setChartOption('title.color', transparentColor);\n        // 3 - trigger 'end editing' - this will update the chart with the new title\n        this.chartOptionsService.awaitChartOptionUpdate(() => this.endEditing());\n        // 4 - restore title color to its original value\n        this.chartOptionsService.awaitChartOptionUpdate(() => {\n            this.chartOptionsService.setChartOption('title.color', titleColor);\n        });\n    }\n    endEditing() {\n        if (!this.editing) {\n            return;\n        }\n        this.editing = false;\n        const value = this.getGui().value;\n        if (value && value.trim() !== '') {\n            this.chartOptionsService.setChartOption('title.text', value);\n            this.chartOptionsService.setChartOption('title.enabled', true);\n        }\n        else {\n            this.chartOptionsService.setChartOption('title.text', '');\n            this.chartOptionsService.setChartOption('title.enabled', false);\n        }\n        this.getGui().classList.remove('currently-editing');\n        // await chart updates so `chartTitleEdit` event consumers can read the new state correctly\n        this.chartOptionsService.awaitChartOptionUpdate(() => {\n            this.eventService.dispatchEvent({ type: 'chartTitleEdit' });\n        });\n    }\n}\nTitleEdit.TEMPLATE = `<textarea\n             class=\"ag-chart-title-edit\"\n             style=\"padding:0; border:none; border-radius: 0; min-height: 0; text-align: center; resize: none;\" />\n        `;\n__decorate$S([\n    (0,ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.Autowired)('chartTranslationService')\n], TitleEdit.prototype, \"chartTranslationService\", void 0);\n__decorate$S([\n    ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.PostConstruct\n], TitleEdit.prototype, \"init\", null);\n\nvar __decorate$R = ( false) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nclass ChartDatasource extends ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.BeanStub {\n    getData(params) {\n        if (params.crossFiltering) {\n            if (params.grouping) {\n                console.warn(\"AG Grid: crossing filtering with row grouping is not supported.\");\n                return { chartData: [], columnNames: {} };\n            }\n            if (!this.gridOptionsService.isRowModelType('clientSide')) {\n                console.warn(\"AG Grid: crossing filtering is only supported in the client side row model.\");\n                return { chartData: [], columnNames: {} };\n            }\n        }\n        const isServerSide = this.gridOptionsService.isRowModelType('serverSide');\n        if (isServerSide && params.pivoting) {\n            this.updatePivotKeysForSSRM();\n        }\n        const result = this.extractRowsFromGridRowModel(params);\n        result.chartData = this.aggregateRowsByDimension(params, result.chartData);\n        return result;\n    }\n    extractRowsFromGridRowModel(params) {\n        let extractedRowData = [];\n        const columnNames = {};\n        // maps used to keep track of expanded groups that need to be removed\n        const groupNodeIndexes = {};\n        const groupsToRemove = {};\n        // only used when cross filtering\n        let filteredNodes = {};\n        let allRowNodes = [];\n        let numRows;\n        if (params.crossFiltering) {\n            filteredNodes = this.getFilteredRowNodes();\n            allRowNodes = this.getAllRowNodes();\n            numRows = allRowNodes.length;\n        }\n        else {\n            // make sure enough rows in range to chart. if user filters and less rows, then end row will be\n            // the last displayed row, not where the range ends.\n            const modelLastRow = this.gridRowModel.getRowCount() - 1;\n            const rangeLastRow = params.endRow >= 0 ? Math.min(params.endRow, modelLastRow) : modelLastRow;\n            numRows = rangeLastRow - params.startRow + 1;\n        }\n        for (let i = 0; i < numRows; i++) {\n            const data = {};\n            const rowNode = params.crossFiltering ? allRowNodes[i] : this.gridRowModel.getRow(i + params.startRow);\n            // first get data for dimensions columns\n            params.dimensionCols.forEach(col => {\n                const colId = col.colId;\n                const column = this.columnModel.getGridColumn(colId);\n                if (column) {\n                    const valueObject = this.valueService.getValue(column, rowNode);\n                    // when grouping we also need to build up multi category labels for charts\n                    if (params.grouping) {\n                        const valueString = valueObject && valueObject.toString ? String(valueObject.toString()) : '';\n                        // traverse parents to extract group label path\n                        const labels = ChartDatasource.getGroupLabels(rowNode, valueString);\n                        data[colId] = {\n                            labels, toString: function () {\n                                return this.labels.filter((l) => !!l).reverse().join(' - ');\n                            }\n                        };\n                        // keep track of group node indexes, so they can be padded when other groups are expanded\n                        if (rowNode.group) {\n                            groupNodeIndexes[labels.toString()] = i;\n                        }\n                        // if node (group or leaf) has parents then it is expanded and should be removed\n                        const groupKey = labels.slice(1, labels.length).toString();\n                        if (groupKey) {\n                            groupsToRemove[groupKey] = groupNodeIndexes[groupKey];\n                        }\n                    }\n                    else {\n                        // leaf nodes can be directly added to dimension columns\n                        data[colId] = valueObject;\n                    }\n                }\n                else {\n                    // introduce a default category when no dimensions exist with a value based off row index (+1)\n                    data[ChartDataModel.DEFAULT_CATEGORY] = i + 1;\n                }\n            });\n            // then get data for value columns\n            params.valueCols.forEach(col => {\n                let columnNamesArr = [];\n                // pivot keys should be added first\n                const pivotKeys = col.getColDef().pivotKeys;\n                if (pivotKeys) {\n                    columnNamesArr = pivotKeys.slice();\n                }\n                // then add column header name to results\n                const headerName = col.getColDef().headerName;\n                if (headerName) {\n                    columnNamesArr.push(headerName);\n                }\n                // add array of column names to results\n                if (columnNamesArr.length > 0) {\n                    columnNames[col.getId()] = columnNamesArr;\n                }\n                const colId = col.getColId();\n                if (params.crossFiltering) {\n                    const filteredOutColId = colId + '-filtered-out';\n                    // add data value to value column\n                    const value = this.valueService.getValue(col, rowNode);\n                    const actualValue = value != null && typeof value.toNumber === 'function' ? value.toNumber() : value;\n                    if (filteredNodes[rowNode.id]) {\n                        data[colId] = actualValue;\n                        data[filteredOutColId] = params.aggFunc || params.isScatter ? undefined : 0;\n                    }\n                    else {\n                        data[colId] = params.aggFunc || params.isScatter ? undefined : 0;\n                        data[filteredOutColId] = actualValue;\n                    }\n                }\n                else {\n                    // add data value to value column\n                    let value = this.valueService.getValue(col, rowNode);\n                    // aggregated value\n                    if (value && value.hasOwnProperty('toString')) {\n                        value = parseFloat(value.toString());\n                    }\n                    data[colId] = value != null && typeof value.toNumber === 'function' ? value.toNumber() : value;\n                }\n            });\n            // row data from footer nodes should not be included in charts\n            if (rowNode.footer) {\n                // 'stamping' data as footer to avoid impacting previously calculated `groupIndexesToRemove` and will\n                // be removed from the results along with any expanded group nodes\n                data.footer = true;\n            }\n            // add data to results\n            extractedRowData.push(data);\n        }\n        if (params.grouping) {\n            const groupIndexesToRemove = ag_grid_community__WEBPACK_IMPORTED_MODULE_0__._.values(groupsToRemove);\n            const filterFunc = (data, index) => !data.footer && !ag_grid_community__WEBPACK_IMPORTED_MODULE_0__._.includes(groupIndexesToRemove, index);\n            extractedRowData = extractedRowData.filter(filterFunc);\n        }\n        return { chartData: extractedRowData, columnNames };\n    }\n    aggregateRowsByDimension(params, dataFromGrid) {\n        const dimensionCols = params.dimensionCols;\n        if (!params.aggFunc || dimensionCols.length === 0) {\n            return dataFromGrid;\n        }\n        const lastCol = ag_grid_community__WEBPACK_IMPORTED_MODULE_0__._.last(dimensionCols);\n        const lastColId = lastCol && lastCol.colId;\n        const map = {};\n        const dataAggregated = [];\n        dataFromGrid.forEach(data => {\n            let currentMap = map;\n            dimensionCols.forEach(col => {\n                const colId = col.colId;\n                const key = data[colId];\n                if (colId === lastColId) {\n                    let groupItem = currentMap[key];\n                    if (!groupItem) {\n                        groupItem = { __children: [] };\n                        dimensionCols.forEach(dimCol => {\n                            const dimColId = dimCol.colId;\n                            groupItem[dimColId] = data[dimColId];\n                        });\n                        currentMap[key] = groupItem;\n                        dataAggregated.push(groupItem);\n                    }\n                    groupItem.__children.push(data);\n                }\n                else {\n                    // map of maps\n                    if (!currentMap[key]) {\n                        currentMap[key] = {};\n                    }\n                    currentMap = currentMap[key];\n                }\n            });\n        });\n        if (ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.ModuleRegistry.assertRegistered(ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.ModuleNames.RowGroupingModule, 'Charting Aggregation', this.context.getGridId())) {\n            dataAggregated.forEach(groupItem => params.valueCols.forEach(col => {\n                if (params.crossFiltering) {\n                    params.valueCols.forEach(valueCol => {\n                        const colId = valueCol.getColId();\n                        // filtered data\n                        const dataToAgg = groupItem.__children\n                            .filter((child) => typeof child[colId] !== 'undefined')\n                            .map((child) => child[colId]);\n                        let aggResult = this.aggregationStage.aggregateValues(dataToAgg, params.aggFunc);\n                        groupItem[valueCol.getId()] = aggResult && typeof aggResult.value !== 'undefined' ? aggResult.value : aggResult;\n                        // filtered out data\n                        const filteredOutColId = `${colId}-filtered-out`;\n                        const dataToAggFiltered = groupItem.__children\n                            .filter((child) => typeof child[filteredOutColId] !== 'undefined')\n                            .map((child) => child[filteredOutColId]);\n                        let aggResultFiltered = this.aggregationStage.aggregateValues(dataToAggFiltered, params.aggFunc);\n                        groupItem[filteredOutColId] = aggResultFiltered && typeof aggResultFiltered.value !== 'undefined' ? aggResultFiltered.value : aggResultFiltered;\n                    });\n                }\n                else {\n                    const dataToAgg = groupItem.__children.map((child) => child[col.getId()]);\n                    let aggResult = 0;\n                    if (ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.ModuleRegistry.assertRegistered(ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.ModuleNames.RowGroupingModule, 'Charting Aggregation', this.context.getGridId())) {\n                        aggResult = this.aggregationStage.aggregateValues(dataToAgg, params.aggFunc);\n                    }\n                    groupItem[col.getId()] = aggResult && typeof aggResult.value !== 'undefined' ? aggResult.value : aggResult;\n                }\n            }));\n        }\n        return dataAggregated;\n    }\n    updatePivotKeysForSSRM() {\n        const secondaryColumns = this.columnModel.getSecondaryColumns();\n        if (!secondaryColumns) {\n            return;\n        }\n        // we don't know what the application will use for the pivot key separator (i.e. '_' or '|' ) as the\n        // secondary columns are provided to grid by the application via columnApi.setSecondaryColumns()\n        const pivotKeySeparator = this.extractPivotKeySeparator(secondaryColumns);\n        // `pivotKeys` is not used by the SSRM for pivoting, so it is safe to reuse this colDef property. This way\n        // the same logic can be used for CSRM and SSRM to extract legend names in extractRowsFromGridRowModel()\n        secondaryColumns.forEach(col => {\n            if (pivotKeySeparator === '') {\n                col.getColDef().pivotKeys = [];\n            }\n            else {\n                const keys = col.getColId().split(pivotKeySeparator);\n                col.getColDef().pivotKeys = keys.slice(0, keys.length - 1);\n            }\n        });\n    }\n    extractPivotKeySeparator(secondaryColumns) {\n        if (secondaryColumns.length === 0) {\n            return '';\n        }\n        const extractSeparator = (columnGroup, childId) => {\n            const groupId = columnGroup.getGroupId();\n            if (!columnGroup.getParent()) {\n                // removing groupId ('2000') from childId ('2000|Swimming') yields '|Swimming' so first char is separator\n                return childId.split(groupId)[1][0];\n            }\n            return extractSeparator(columnGroup.getParent(), groupId);\n        };\n        const firstSecondaryCol = secondaryColumns[0];\n        if (firstSecondaryCol.getParent() == null) {\n            return '';\n        }\n        return extractSeparator(firstSecondaryCol.getParent(), firstSecondaryCol.getColId());\n    }\n    static getGroupLabels(rowNode, initialLabel) {\n        const labels = [initialLabel];\n        while (rowNode && rowNode.level !== 0) {\n            rowNode = rowNode.parent;\n            if (rowNode) {\n                labels.push(rowNode.key);\n            }\n        }\n        return labels;\n    }\n    getFilteredRowNodes() {\n        const filteredNodes = {};\n        this.gridRowModel.forEachNodeAfterFilterAndSort((rowNode) => {\n            filteredNodes[rowNode.id] = rowNode;\n        });\n        return filteredNodes;\n    }\n    getAllRowNodes() {\n        let allRowNodes = [];\n        this.gridRowModel.forEachNode((rowNode) => {\n            allRowNodes.push(rowNode);\n        });\n        return this.sortRowNodes(allRowNodes);\n    }\n    sortRowNodes(rowNodes) {\n        const sortOptions = this.sortController.getSortOptions();\n        const noSort = !sortOptions || sortOptions.length == 0;\n        if (noSort)\n            return rowNodes;\n        return this.rowNodeSorter.doFullSort(rowNodes, sortOptions);\n    }\n}\n__decorate$R([\n    (0,ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.Autowired)('rowModel')\n], ChartDatasource.prototype, \"gridRowModel\", void 0);\n__decorate$R([\n    (0,ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.Autowired)('valueService')\n], ChartDatasource.prototype, \"valueService\", void 0);\n__decorate$R([\n    (0,ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.Autowired)('columnModel')\n], ChartDatasource.prototype, \"columnModel\", void 0);\n__decorate$R([\n    (0,ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.Autowired)('rowNodeSorter')\n], ChartDatasource.prototype, \"rowNodeSorter\", void 0);\n__decorate$R([\n    (0,ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.Autowired)('sortController')\n], ChartDatasource.prototype, \"sortController\", void 0);\n__decorate$R([\n    (0,ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.Optional)('aggregationStage')\n], ChartDatasource.prototype, \"aggregationStage\", void 0);\n\nvar __decorate$Q = ( false) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nlet ChartColumnService = class ChartColumnService extends ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.BeanStub {\n    getColumn(colId) {\n        return this.columnModel.getPrimaryColumn(colId);\n    }\n    getAllDisplayedColumns() {\n        return this.columnModel.getAllDisplayedColumns();\n    }\n    getColDisplayName(col) {\n        return this.columnModel.getDisplayNameForColumn(col, 'chart');\n    }\n    getRowGroupColumns() {\n        return this.columnModel.getRowGroupColumns();\n    }\n    getGroupDisplayColumns() {\n        return this.columnModel.getGroupDisplayColumns();\n    }\n    isPivotMode() {\n        return this.columnModel.isPivotMode();\n    }\n    isPivotActive() {\n        return this.columnModel.isPivotActive();\n    }\n    getChartColumns() {\n        const displayedCols = this.columnModel.getAllDisplayedColumns();\n        const dimensionCols = new Set();\n        const valueCols = new Set();\n        displayedCols.forEach(col => {\n            const colDef = col.getColDef();\n            const chartDataType = colDef.chartDataType;\n            if (chartDataType) {\n                // chart data type was specified explicitly\n                switch (chartDataType) {\n                    case 'category':\n                    case 'time':\n                        dimensionCols.add(col);\n                        return;\n                    case 'series':\n                        valueCols.add(col);\n                        return;\n                    case 'excluded':\n                        return;\n                    default:\n                        console.warn(`AG Grid: unexpected chartDataType value '${chartDataType}' supplied, instead use 'category', 'series' or 'excluded'`);\n                        break;\n                }\n            }\n            if (colDef.colId === 'ag-Grid-AutoColumn') {\n                dimensionCols.add(col);\n                return;\n            }\n            if (!col.isPrimary()) {\n                valueCols.add(col);\n                return;\n            }\n            // if 'chartDataType' is not provided then infer type based data contained in first row\n            (this.isNumberCol(col) ? valueCols : dimensionCols).add(col);\n        });\n        return { dimensionCols, valueCols };\n    }\n    isNumberCol(col) {\n        if (col.getColId() === 'ag-Grid-AutoColumn') {\n            return false;\n        }\n        const row = this.rowRenderer.getRowNode({ rowIndex: 0, rowPinned: null });\n        if (!row) {\n            return false;\n        }\n        let cellValue = this.valueService.getValue(col, row);\n        if (cellValue == null) {\n            cellValue = this.extractLeafData(row, col);\n        }\n        if (cellValue != null && typeof cellValue.toNumber === 'function') {\n            cellValue = cellValue.toNumber();\n        }\n        return typeof cellValue === 'number';\n    }\n    extractLeafData(row, col) {\n        if (!row.allLeafChildren) {\n            return null;\n        }\n        for (let i = 0; i < row.allLeafChildren.length; i++) {\n            const childRow = row.allLeafChildren[i];\n            const value = this.valueService.getValue(col, childRow);\n            if (value != null) {\n                return value;\n            }\n        }\n        return null;\n    }\n};\n__decorate$Q([\n    (0,ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.Autowired)('columnModel')\n], ChartColumnService.prototype, \"columnModel\", void 0);\n__decorate$Q([\n    (0,ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.Autowired)('valueService')\n], ChartColumnService.prototype, \"valueService\", void 0);\n__decorate$Q([\n    (0,ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.Autowired)('rowRenderer')\n], ChartColumnService.prototype, \"rowRenderer\", void 0);\nChartColumnService = __decorate$Q([\n    (0,ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.Bean)(\"chartColumnService\")\n], ChartColumnService);\n\nvar __decorate$P = ( false) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nclass ComboChartModel extends ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.BeanStub {\n    constructor(chartDataModel) {\n        var _a;\n        super();\n        // this control flag is used to only log warning for the initial user config\n        this.suppressComboChartWarnings = false;\n        this.chartDataModel = chartDataModel;\n        this.seriesChartTypes = (_a = chartDataModel.params.seriesChartTypes) !== null && _a !== void 0 ? _a : [];\n    }\n    init() {\n        this.initComboCharts();\n    }\n    update(seriesChartTypes) {\n        this.seriesChartTypes = seriesChartTypes !== null && seriesChartTypes !== void 0 ? seriesChartTypes : this.seriesChartTypes;\n        this.initComboCharts();\n        this.updateSeriesChartTypes();\n    }\n    initComboCharts() {\n        const seriesChartTypesExist = this.seriesChartTypes && this.seriesChartTypes.length > 0;\n        const customCombo = this.chartDataModel.chartType === 'customCombo' || seriesChartTypesExist;\n        if (customCombo) {\n            // it is not necessary to supply a chart type for combo charts when `seriesChartTypes` is supplied\n            this.chartDataModel.chartType = 'customCombo';\n            // cache supplied `seriesChartTypes` to allow switching between different chart types in the settings panel\n            this.savedCustomSeriesChartTypes = this.seriesChartTypes || [];\n        }\n    }\n    updateSeriesChartTypes() {\n        if (!this.chartDataModel.isComboChart()) {\n            return;\n        }\n        // ensure primary only chart types are not placed on secondary axis\n        this.seriesChartTypes = this.seriesChartTypes.map(seriesChartType => {\n            const primaryOnly = ['groupedColumn', 'stackedColumn', 'stackedArea'].includes(seriesChartType.chartType);\n            seriesChartType.secondaryAxis = primaryOnly ? false : seriesChartType.secondaryAxis;\n            return seriesChartType;\n        });\n        // note that when seriesChartTypes are supplied the chart type is also changed to 'customCombo'\n        if (this.chartDataModel.chartType === 'customCombo') {\n            this.updateSeriesChartTypesForCustomCombo();\n            return;\n        }\n        this.updateChartSeriesTypesForBuiltInCombos();\n    }\n    updateSeriesChartTypesForCustomCombo() {\n        const seriesChartTypesSupplied = this.seriesChartTypes && this.seriesChartTypes.length > 0;\n        if (!seriesChartTypesSupplied && !this.suppressComboChartWarnings) {\n            console.warn(`AG Grid: 'seriesChartTypes' are required when the 'customCombo' chart type is specified.`);\n        }\n        // ensure correct chartTypes are supplied\n        this.seriesChartTypes = this.seriesChartTypes.map(s => {\n            if (!ComboChartModel.SUPPORTED_COMBO_CHART_TYPES.includes(s.chartType)) {\n                console.warn(`AG Grid: invalid chartType '${s.chartType}' supplied in 'seriesChartTypes', converting to 'line' instead.`);\n                s.chartType = 'line';\n            }\n            return s;\n        });\n        const getSeriesChartType = (valueCol) => {\n            if (!this.savedCustomSeriesChartTypes || this.savedCustomSeriesChartTypes.length === 0) {\n                this.savedCustomSeriesChartTypes = this.seriesChartTypes;\n            }\n            const providedSeriesChartType = this.savedCustomSeriesChartTypes.find(s => s.colId === valueCol.colId);\n            if (!providedSeriesChartType) {\n                if (valueCol.selected && !this.suppressComboChartWarnings) {\n                    console.warn(`AG Grid: no 'seriesChartType' found for colId = '${valueCol.colId}', defaulting to 'line'.`);\n                }\n                return {\n                    colId: valueCol.colId,\n                    chartType: 'line',\n                    secondaryAxis: false\n                };\n            }\n            return providedSeriesChartType;\n        };\n        const updatedSeriesChartTypes = this.chartDataModel.valueColState.map(getSeriesChartType);\n        this.seriesChartTypes = updatedSeriesChartTypes;\n        // also cache custom `seriesChartTypes` to allow for switching between different chart types\n        this.savedCustomSeriesChartTypes = updatedSeriesChartTypes;\n        // turn off warnings as first combo chart attempt has completed\n        this.suppressComboChartWarnings = true;\n    }\n    updateChartSeriesTypesForBuiltInCombos() {\n        const { chartType, valueColState } = this.chartDataModel;\n        let primaryChartType = chartType === 'columnLineCombo' ? 'groupedColumn' : 'stackedArea';\n        let secondaryChartType = chartType === 'columnLineCombo' ? 'line' : 'groupedColumn';\n        const selectedCols = valueColState.filter(cs => cs.selected);\n        const lineIndex = Math.ceil(selectedCols.length / 2);\n        this.seriesChartTypes = selectedCols.map((valueCol, i) => {\n            const seriesType = (i >= lineIndex) ? secondaryChartType : primaryChartType;\n            return { colId: valueCol.colId, chartType: seriesType, secondaryAxis: false };\n        });\n    }\n}\nComboChartModel.SUPPORTED_COMBO_CHART_TYPES = ['line', 'groupedColumn', 'stackedColumn', 'area', 'stackedArea'];\n__decorate$P([\n    ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.PostConstruct\n], ComboChartModel.prototype, \"init\", null);\n\nvar __decorate$O = ( false) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nclass ChartDataModel extends ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.BeanStub {\n    constructor(params) {\n        super();\n        this.unlinked = false;\n        this.chartData = [];\n        this.valueColState = [];\n        this.dimensionColState = [];\n        this.columnNames = {};\n        this.crossFiltering = false;\n        this.grouping = false;\n        this.params = params;\n        this.chartId = params.chartId;\n        this.chartType = params.chartType;\n        this.pivotChart = params.pivotChart;\n        this.chartThemeName = params.chartThemeName;\n        this.aggFunc = params.aggFunc;\n        this.referenceCellRange = params.cellRange;\n        this.suppliedCellRange = params.cellRange;\n        this.suppressChartRanges = params.suppressChartRanges;\n        this.unlinked = !!params.unlinkChart;\n        this.crossFiltering = !!params.crossFiltering;\n    }\n    init() {\n        this.datasource = this.createManagedBean(new ChartDatasource());\n        this.chartColumnService = this.createManagedBean(new ChartColumnService());\n        this.comboChartModel = this.createManagedBean(new ComboChartModel(this));\n        this.updateCellRanges();\n        this.updateData();\n    }\n    updateModel(params) {\n        const { cellRange, chartType, pivotChart, chartThemeName, aggFunc, suppressChartRanges, unlinkChart, crossFiltering, seriesChartTypes } = params;\n        if (cellRange !== this.suppliedCellRange) {\n            this.dimensionCellRange = undefined;\n            this.valueCellRange = undefined;\n        }\n        this.chartType = chartType;\n        this.pivotChart = pivotChart;\n        this.chartThemeName = chartThemeName;\n        this.aggFunc = aggFunc;\n        this.referenceCellRange = cellRange;\n        this.suppliedCellRange = cellRange;\n        this.suppressChartRanges = suppressChartRanges;\n        this.unlinked = !!unlinkChart;\n        this.crossFiltering = !!crossFiltering;\n        this.updateSelectedDimension(cellRange === null || cellRange === void 0 ? void 0 : cellRange.columns);\n        this.updateCellRanges();\n        const shouldUpdateComboModel = this.isComboChart() || seriesChartTypes;\n        if (shouldUpdateComboModel) {\n            this.comboChartModel.update(seriesChartTypes);\n        }\n        if (!this.unlinked) {\n            this.updateData();\n        }\n    }\n    updateCellRanges(updatedColState) {\n        if (this.valueCellRange) {\n            this.referenceCellRange = this.valueCellRange;\n        }\n        const { dimensionCols, valueCols } = this.chartColumnService.getChartColumns();\n        const allColsFromRanges = this.getAllColumnsFromRanges();\n        if (updatedColState) {\n            this.updateColumnState(updatedColState);\n        }\n        this.setDimensionCellRange(dimensionCols, allColsFromRanges, updatedColState);\n        this.setValueCellRange(valueCols, allColsFromRanges, updatedColState);\n        if (!updatedColState) {\n            this.resetColumnState();\n            // dimension / category cell range could be out of sync after resetting column state when row grouping\n            this.syncDimensionCellRange();\n        }\n        this.comboChartModel.updateSeriesChartTypes();\n    }\n    updateData() {\n        const { startRow, endRow } = this.getRowIndexes();\n        if (this.pivotChart) {\n            this.resetColumnState();\n        }\n        this.grouping = this.isGrouping();\n        const params = {\n            aggFunc: this.aggFunc,\n            dimensionCols: [this.getSelectedDimension()],\n            grouping: this.grouping,\n            pivoting: this.isPivotActive(),\n            crossFiltering: this.crossFiltering,\n            valueCols: this.getSelectedValueCols(),\n            startRow,\n            endRow,\n            isScatter: ag_grid_community__WEBPACK_IMPORTED_MODULE_0__._.includes(['scatter', 'bubble'], this.chartType)\n        };\n        const { chartData, columnNames } = this.datasource.getData(params);\n        this.chartData = chartData;\n        this.columnNames = columnNames;\n    }\n    isGrouping() {\n        const usingTreeData = this.gridOptionsService.isTreeData();\n        const groupedCols = usingTreeData ? null : this.chartColumnService.getRowGroupColumns();\n        const isGroupActive = usingTreeData || (groupedCols && groupedCols.length > 0);\n        // charts only group when the selected category is a group column\n        const colId = this.getSelectedDimension().colId;\n        const displayedGroupCols = this.chartColumnService.getGroupDisplayColumns();\n        const groupDimensionSelected = displayedGroupCols.map(col => col.getColId()).some(id => id === colId);\n        return !!isGroupActive && groupDimensionSelected;\n    }\n    getSelectedValueCols() {\n        return this.valueColState.filter(cs => cs.selected).map(cs => cs.column);\n    }\n    getSelectedDimension() {\n        return this.dimensionColState.filter(cs => cs.selected)[0];\n    }\n    getColDisplayName(col) {\n        return this.chartColumnService.getColDisplayName(col);\n    }\n    isPivotMode() {\n        return this.chartColumnService.isPivotMode();\n    }\n    getChartDataType(colId) {\n        const column = this.chartColumnService.getColumn(colId);\n        return column ? column.getColDef().chartDataType : undefined;\n    }\n    isPivotActive() {\n        return this.chartColumnService.isPivotActive();\n    }\n    createCellRange(type, ...columns) {\n        return {\n            id: this.chartId,\n            startRow: this.referenceCellRange.startRow,\n            endRow: this.referenceCellRange.endRow,\n            columns,\n            startColumn: type === ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.CellRangeType.DIMENSION ? columns[0] : this.referenceCellRange.startColumn,\n            type\n        };\n    }\n    getAllColumnsFromRanges() {\n        if (this.pivotChart) {\n            return ag_grid_community__WEBPACK_IMPORTED_MODULE_0__._.convertToSet(this.chartColumnService.getAllDisplayedColumns());\n        }\n        const columns = this.dimensionCellRange || this.valueCellRange ? [] : this.referenceCellRange.columns;\n        if (this.dimensionCellRange) {\n            columns.push(...this.dimensionCellRange.columns);\n        }\n        if (this.valueCellRange) {\n            columns.push(...this.valueCellRange.columns);\n        }\n        return ag_grid_community__WEBPACK_IMPORTED_MODULE_0__._.convertToSet(columns);\n    }\n    getRowIndexes() {\n        let startRow = 0, endRow = 0;\n        const { rangeService, valueCellRange } = this;\n        if (rangeService && valueCellRange) {\n            startRow = rangeService.getRangeStartRow(valueCellRange).rowIndex;\n            // when the last row the cell range is a pinned 'bottom' row, the `endRow` index is set to -1 which results\n            // in the ChartDatasource processing all non pinned rows from the `startRow` index.\n            const endRowPosition = rangeService.getRangeEndRow(valueCellRange);\n            endRow = endRowPosition.rowPinned === 'bottom' ? -1 : endRowPosition.rowIndex;\n        }\n        return { startRow, endRow };\n    }\n    resetColumnState() {\n        const { dimensionCols, valueCols } = this.chartColumnService.getChartColumns();\n        const allCols = this.getAllColumnsFromRanges();\n        const isInitialising = this.valueColState.length < 1;\n        this.dimensionColState = [];\n        this.valueColState = [];\n        let hasSelectedDimension = false;\n        let order = 1;\n        const aggFuncDimension = this.suppliedCellRange.columns[0]; //TODO\n        dimensionCols.forEach(column => {\n            const isAutoGroupCol = column.getColId() === 'ag-Grid-AutoColumn';\n            let selected = false;\n            if (this.crossFiltering && this.aggFunc) {\n                if (aggFuncDimension.getColId() === column.getColId()) {\n                    selected = true;\n                }\n            }\n            else {\n                selected = isAutoGroupCol ? true : !hasSelectedDimension && allCols.has(column);\n            }\n            this.dimensionColState.push({\n                column,\n                colId: column.getColId(),\n                displayName: this.getColDisplayName(column),\n                selected,\n                order: order++\n            });\n            if (selected) {\n                hasSelectedDimension = true;\n            }\n        });\n        const defaultCategory = {\n            colId: ChartDataModel.DEFAULT_CATEGORY,\n            displayName: this.chartTranslationService.translate('defaultCategory'),\n            selected: !hasSelectedDimension,\n            order: 0\n        };\n        this.dimensionColState.unshift(defaultCategory);\n        const valueColumnsFromReferenceRange = this.referenceCellRange.columns.filter(c => valueCols.has(c));\n        valueCols.forEach(column => {\n            // first time the value cell range is set, preserve the column order from the supplied range\n            if (isInitialising && ag_grid_community__WEBPACK_IMPORTED_MODULE_0__._.includes(this.referenceCellRange.columns, column)) {\n                column = valueColumnsFromReferenceRange.shift();\n            }\n            this.valueColState.push({\n                column,\n                colId: column.getColId(),\n                displayName: this.getColDisplayName(column),\n                selected: allCols.has(column),\n                order: order++\n            });\n        });\n    }\n    updateColumnState(updatedCol) {\n        const idsMatch = (cs) => cs.colId === updatedCol.colId;\n        const { dimensionColState, valueColState } = this;\n        if (dimensionColState.filter(idsMatch).length > 0) {\n            // only one dimension should be selected\n            dimensionColState.forEach(cs => cs.selected = idsMatch(cs));\n        }\n        else {\n            // just update the selected value on the supplied value column\n            valueColState.filter(idsMatch).forEach(cs => cs.selected = updatedCol.selected);\n        }\n        const allColumns = [...dimensionColState, ...valueColState];\n        const orderedColIds = [];\n        // calculate new order\n        allColumns.forEach((col, i) => {\n            if (i === updatedCol.order) {\n                orderedColIds.push(updatedCol.colId);\n            }\n            if (col.colId !== updatedCol.colId) {\n                orderedColIds.push(col.colId);\n            }\n        });\n        // update col state with new order\n        allColumns.forEach(col => {\n            const order = orderedColIds.indexOf(col.colId);\n            col.order = order >= 0 ? orderedColIds.indexOf(col.colId) : allColumns.length - 1;\n        });\n        this.reorderColState();\n    }\n    reorderColState() {\n        const ascColStateOrder = (a, b) => a.order - b.order;\n        this.dimensionColState.sort(ascColStateOrder);\n        this.valueColState.sort(ascColStateOrder);\n    }\n    setDimensionCellRange(dimensionCols, colsInRange, updatedColState) {\n        this.dimensionCellRange = undefined;\n        if (!updatedColState && !this.dimensionColState.length) {\n            // use first dimension column in range by default\n            dimensionCols.forEach(col => {\n                if (this.dimensionCellRange || !colsInRange.has(col)) {\n                    return;\n                }\n                this.dimensionCellRange = this.createCellRange(ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.CellRangeType.DIMENSION, col);\n            });\n            return;\n        }\n        let selectedDimensionColState = updatedColState;\n        if (this.crossFiltering && this.aggFunc) {\n            const aggFuncDimension = this.suppliedCellRange.columns[0]; //TODO\n            selectedDimensionColState = this.dimensionColState.filter(cs => cs.colId === aggFuncDimension.getColId())[0];\n        }\n        else if (!selectedDimensionColState || !dimensionCols.has(selectedDimensionColState.column)) {\n            selectedDimensionColState = this.dimensionColState.filter(cs => cs.selected)[0];\n        }\n        if (selectedDimensionColState && selectedDimensionColState.colId !== ChartDataModel.DEFAULT_CATEGORY) {\n            this.dimensionCellRange = this.createCellRange(ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.CellRangeType.DIMENSION, selectedDimensionColState.column);\n        }\n    }\n    setValueCellRange(valueCols, colsInRange, updatedColState) {\n        this.valueCellRange = undefined;\n        const selectedValueCols = [];\n        valueCols.forEach(col => {\n            if (updatedColState && updatedColState.colId === col.getColId()) {\n                if (updatedColState.selected) {\n                    selectedValueCols.push(updatedColState.column);\n                }\n            }\n            else if (colsInRange.has(col)) {\n                selectedValueCols.push(col);\n            }\n        });\n        if (selectedValueCols.length > 0) {\n            let orderedColIds = [];\n            if (this.valueColState.length > 0) {\n                orderedColIds = this.valueColState.map(c => c.colId);\n            }\n            else {\n                colsInRange.forEach(c => orderedColIds.push(c.getColId()));\n            }\n            selectedValueCols.sort((a, b) => orderedColIds.indexOf(a.getColId()) - orderedColIds.indexOf(b.getColId()));\n            this.valueCellRange = this.createCellRange(ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.CellRangeType.VALUE, ...selectedValueCols);\n        }\n    }\n    updateSelectedDimension(columns) {\n        const colIdSet = new Set(columns.map((column) => column.getColId()));\n        // if no dimension found in supplied columns use the default category (always index = 0)\n        const foundColState = this.dimensionColState.find((colState) => colIdSet.has(colState.colId)) || this.dimensionColState[0];\n        this.dimensionColState = this.dimensionColState.map((colState) => (Object.assign(Object.assign({}, colState), { selected: colState.colId === foundColState.colId })));\n    }\n    syncDimensionCellRange() {\n        const selectedDimension = this.getSelectedDimension();\n        if (selectedDimension && selectedDimension.column) {\n            this.dimensionCellRange = this.createCellRange(ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.CellRangeType.DIMENSION, selectedDimension.column);\n        }\n    }\n    isComboChart() {\n        return ['columnLineCombo', 'areaColumnCombo', 'customCombo'].includes(this.chartType);\n    }\n}\nChartDataModel.DEFAULT_CATEGORY = 'AG-GRID-DEFAULT-CATEGORY';\n__decorate$O([\n    (0,ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.Autowired)('rangeService')\n], ChartDataModel.prototype, \"rangeService\", void 0);\n__decorate$O([\n    (0,ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.Autowired)('chartTranslationService')\n], ChartDataModel.prototype, \"chartTranslationService\", void 0);\n__decorate$O([\n    ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.PostConstruct\n], ChartDataModel.prototype, \"init\", null);\n\nfunction deproxy(chartOrProxy) {\n    if (chartOrProxy.chart != null) {\n        return chartOrProxy.chart;\n    }\n    return chartOrProxy;\n}\n\nclass ChartProxy {\n    constructor(chartProxyParams) {\n        this.chartProxyParams = chartProxyParams;\n        this.clearThemeOverrides = false;\n        this.chart = chartProxyParams.chartInstance;\n        this.chartType = chartProxyParams.chartType;\n        this.crossFiltering = chartProxyParams.crossFiltering;\n        this.crossFilterCallback = chartProxyParams.crossFilterCallback;\n        this.standaloneChartType = getSeriesType(this.chartType);\n        if (this.chart == null) {\n            this.chart = AgChart.create(this.getCommonChartOptions());\n        }\n        else {\n            // On chart change, reset formatting panel changes.\n            this.clearThemeOverrides = true;\n        }\n    }\n    getChart() {\n        return deproxy(this.chart);\n    }\n    getChartRef() {\n        return this.chart;\n    }\n    downloadChart(dimensions, fileName, fileFormat) {\n        const { chart } = this;\n        const rawChart = deproxy(chart);\n        const imageFileName = fileName || (rawChart.title ? rawChart.title.text : 'chart');\n        const { width, height } = dimensions || {};\n        AgChart.download(chart, { width, height, fileName: imageFileName, fileFormat });\n    }\n    getChartImageDataURL(type) {\n        return this.getChart().scene.getDataURL(type);\n    }\n    getChartOptions() {\n        return this.chart.getOptions();\n    }\n    getChartThemeOverrides() {\n        var _a;\n        const chartOptionsTheme = this.getChartOptions().theme;\n        return (_a = chartOptionsTheme.overrides) !== null && _a !== void 0 ? _a : {};\n    }\n    getChartPalette() {\n        return getChartTheme(this.getChartOptions().theme).palette;\n    }\n    setPaired(paired) {\n        // Special handling to make scatter charts operate in paired mode by default, where \n        // columns alternate between being X and Y (and size for bubble). In standard mode,\n        // the first column is used for X and every other column is treated as Y\n        // (or alternates between Y and size for bubble)\n        const seriesType = getSeriesType(this.chartProxyParams.chartType);\n        AgChart.updateDelta(this.chart, { theme: { overrides: { [seriesType]: { paired } } } });\n    }\n    isPaired() {\n        const seriesType = getSeriesType(this.chartProxyParams.chartType);\n        return ag_grid_community__WEBPACK_IMPORTED_MODULE_0__._.get(this.getChartThemeOverrides(), `${seriesType}.paired`, true);\n    }\n    lookupCustomChartTheme(themeName) {\n        return lookupCustomChartTheme(this.chartProxyParams, themeName);\n    }\n    transformData(data, categoryKey, categoryAxis) {\n        if (categoryAxis) {\n            // replace the values for the selected category with a complex object to allow for duplicated categories\n            return data.map((d, index) => {\n                const value = d[categoryKey];\n                const valueString = value && value.toString ? value.toString() : '';\n                const datum = Object.assign({}, d);\n                datum[categoryKey] = { id: index, value, toString: () => valueString };\n                return datum;\n            });\n        }\n        return data;\n    }\n    getCommonChartOptions(updatedOverrides) {\n        var _a, _b;\n        // Only apply active overrides if chart is initialised.\n        const existingOptions = this.clearThemeOverrides ? {} : (_b = (_a = this.chart) === null || _a === void 0 ? void 0 : _a.getOptions()) !== null && _b !== void 0 ? _b : {};\n        const formattingPanelOverrides = this.chart != null ?\n            { overrides: this.getActiveFormattingPanelOverrides() } : {};\n        this.clearThemeOverrides = false;\n        return Object.assign(Object.assign({}, existingOptions), { theme: Object.assign(Object.assign({}, createAgChartTheme(this.chartProxyParams, this)), (updatedOverrides ? { overrides: updatedOverrides } : formattingPanelOverrides)), container: this.chartProxyParams.parentElement, mode: 'integrated' });\n    }\n    getActiveFormattingPanelOverrides() {\n        var _a, _b;\n        if (this.clearThemeOverrides) {\n            return {};\n        }\n        const inUseTheme = (_a = this.chart) === null || _a === void 0 ? void 0 : _a.getOptions().theme;\n        return (_b = inUseTheme === null || inUseTheme === void 0 ? void 0 : inUseTheme.overrides) !== null && _b !== void 0 ? _b : {};\n    }\n    destroy({ keepChartInstance = false } = {}) {\n        if (keepChartInstance) {\n            return this.chart;\n        }\n        this.destroyChart();\n    }\n    destroyChart() {\n        if (this.chart) {\n            this.chart.destroy();\n            this.chart = undefined;\n        }\n    }\n}\n\nclass CartesianChartProxy extends ChartProxy {\n    constructor(params) {\n        super(params);\n        this.crossFilteringAllPoints = new Set();\n        this.crossFilteringSelectedPoints = [];\n    }\n    update(params) {\n        const axes = this.getAxes(params);\n        const options = Object.assign(Object.assign({}, this.getCommonChartOptions(params.updatedOverrides)), { data: this.getData(params, axes), axes, series: this.getSeries(params) });\n        AgChart.update(this.getChartRef(), options);\n    }\n    getData(params, axes) {\n        var _a;\n        const supportsCrossFiltering = ['area', 'line'].includes(this.standaloneChartType);\n        const xPosition = this.standaloneChartType === 'bar' ? 'left' : 'bottom';\n        const xAxisIsCategory = ((_a = axes.find(o => o.position === xPosition)) === null || _a === void 0 ? void 0 : _a.type) === 'category';\n        return this.crossFiltering && supportsCrossFiltering ?\n            this.getCrossFilterData(params) :\n            this.getDataTransformedData(params, xAxisIsCategory);\n    }\n    getDataTransformedData(params, isCategoryAxis) {\n        return this.transformData(params.data, params.category.id, isCategoryAxis);\n    }\n    getXAxisType(params) {\n        if (params.grouping) {\n            return 'groupedCategory';\n        }\n        else if (CartesianChartProxy.isTimeAxis(params)) {\n            return 'time';\n        }\n        return 'category';\n    }\n    static isTimeAxis(params) {\n        if (params.category && params.category.chartDataType) {\n            return params.category.chartDataType === 'time';\n        }\n        const testDatum = params.data[0];\n        return (testDatum && testDatum[params.category.id]) instanceof Date;\n    }\n    crossFilteringReset() {\n        this.crossFilteringSelectedPoints = [];\n        this.crossFilteringAllPoints.clear();\n    }\n    crossFilteringPointSelected(point) {\n        return this.crossFilteringSelectedPoints.length == 0 || this.crossFilteringSelectedPoints.includes(point);\n    }\n    crossFilteringDeselectedPoints() {\n        return this.crossFilteringSelectedPoints.length > 0 &&\n            this.crossFilteringAllPoints.size !== this.crossFilteringSelectedPoints.length;\n    }\n    extractLineAreaCrossFilterSeries(series, params) {\n        const getYKey = (yKey) => {\n            if (this.standaloneChartType === 'area') {\n                const lastSelectedChartId = params.getCrossFilteringContext().lastSelectedChartId;\n                return (lastSelectedChartId === params.chartId) ? yKey + '-total' : yKey;\n            }\n            return yKey + '-total';\n        };\n        return series.map(s => {\n            s.yKey = getYKey(s.yKey);\n            s.listeners = {\n                nodeClick: (e) => {\n                    const value = e.datum[s.xKey];\n                    const multiSelection = e.event.metaKey || e.event.ctrlKey;\n                    this.crossFilteringAddSelectedPoint(multiSelection, value);\n                    this.crossFilterCallback(e);\n                }\n            };\n            s.marker = {\n                formatter: (p) => {\n                    const category = p.datum[params.category.id];\n                    return {\n                        fill: p.highlighted ? 'yellow' : p.fill,\n                        size: p.highlighted ? 14 : this.crossFilteringPointSelected(category) ? 8 : 0,\n                    };\n                }\n            };\n            if (this.standaloneChartType === 'area') {\n                s.fillOpacity = this.crossFilteringDeselectedPoints() ? 0.3 : 1;\n            }\n            if (this.standaloneChartType === 'line') {\n                s.strokeOpacity = this.crossFilteringDeselectedPoints() ? 0.3 : 1;\n            }\n            return s;\n        });\n    }\n    getCrossFilterData(params) {\n        this.crossFilteringAllPoints.clear();\n        const colId = params.fields[0].colId;\n        const filteredOutColId = `${colId}-filtered-out`;\n        const lastSelectedChartId = params.getCrossFilteringContext().lastSelectedChartId;\n        return params.data.map(d => {\n            const category = d[params.category.id];\n            this.crossFilteringAllPoints.add(category);\n            const pointSelected = this.crossFilteringPointSelected(category);\n            if (this.standaloneChartType === 'area' && lastSelectedChartId === params.chartId) {\n                d[`${colId}-total`] = pointSelected ? d[colId] : d[colId] + d[filteredOutColId];\n            }\n            if (this.standaloneChartType === 'line') {\n                d[`${colId}-total`] = pointSelected ? d[colId] : d[colId] + d[filteredOutColId];\n            }\n            return d;\n        });\n    }\n    crossFilteringAddSelectedPoint(multiSelection, value) {\n        multiSelection ? this.crossFilteringSelectedPoints.push(value) : this.crossFilteringSelectedPoints = [value];\n    }\n}\n\n// deepMerge\nfunction emptyTarget(value) {\n    return Array.isArray(value) ? [] : {};\n}\nfunction cloneUnlessOtherwiseSpecified(value, options) {\n    return (options.clone !== false && options.isMergeableObject(value))\n        ? deepMerge(emptyTarget(value), value, options)\n        : value;\n}\nfunction defaultArrayMerge(target, source, options) {\n    return target.concat(source).map(function (element) {\n        return cloneUnlessOtherwiseSpecified(element, options);\n    });\n}\nfunction getMergeFunction(key, options) {\n    if (!options.customMerge) {\n        return deepMerge;\n    }\n    const customMerge = options.customMerge(key);\n    return typeof customMerge === 'function' ? customMerge : deepMerge;\n}\nfunction getEnumerableOwnPropertySymbols(target) {\n    // @ts-ignore\n    return Object.getOwnPropertySymbols\n        // @ts-ignore\n        ? Object.getOwnPropertySymbols(target).filter(function (symbol) {\n            return target.propertyIsEnumerable(symbol);\n        })\n        : [];\n}\nfunction getKeys(target) {\n    return Object.keys(target).concat(getEnumerableOwnPropertySymbols(target));\n}\nfunction propertyIsOnObject(object, property) {\n    try {\n        return property in object;\n    }\n    catch (_) {\n        return false;\n    }\n}\n// Protects from prototype poisoning and unexpected merging up the prototype chain.\nfunction propertyIsUnsafe(target, key) {\n    return propertyIsOnObject(target, key) // Properties are safe to merge if they don't exist in the target yet,\n        && !(Object.hasOwnProperty.call(target, key) // unsafe if they exist up the prototype chain,\n            && Object.propertyIsEnumerable.call(target, key)); // and also unsafe if they're nonenumerable.\n}\nfunction mergeObject(target = {}, source = {}, options) {\n    const destination = {};\n    if (options.isMergeableObject(target)) {\n        getKeys(target).forEach(function (key) {\n            destination[key] = cloneUnlessOtherwiseSpecified(target[key], options);\n        });\n    }\n    getKeys(source).forEach(function (key) {\n        if (propertyIsUnsafe(target, key)) {\n            return;\n        }\n        if (propertyIsOnObject(target, key) && options.isMergeableObject(source[key])) {\n            destination[key] = getMergeFunction(key, options)(target[key], source[key], options);\n        }\n        else {\n            destination[key] = cloneUnlessOtherwiseSpecified(source[key], options);\n        }\n    });\n    return destination;\n}\nfunction defaultIsMergeableObject(value) {\n    return isNonNullObject(value) && !isSpecial(value);\n}\nfunction isNonNullObject(value) {\n    return !!value && typeof value === 'object';\n}\nfunction isSpecial(value) {\n    const stringValue = Object.prototype.toString.call(value);\n    return stringValue === '[object RegExp]' || stringValue === '[object Date]';\n}\nfunction deepMerge(target, source, options) {\n    options = options || {};\n    options.arrayMerge = options.arrayMerge || defaultArrayMerge;\n    options.isMergeableObject = options.isMergeableObject || defaultIsMergeableObject;\n    // cloneUnlessOtherwiseSpecified is added to `options` so that custom arrayMerge()\n    // implementations can use it. The caller may not replace it.\n    options.cloneUnlessOtherwiseSpecified = cloneUnlessOtherwiseSpecified;\n    const sourceIsArray = Array.isArray(source);\n    const targetIsArray = Array.isArray(target);\n    const sourceAndTargetTypesMatch = sourceIsArray === targetIsArray;\n    if (!sourceAndTargetTypesMatch) {\n        return cloneUnlessOtherwiseSpecified(source, options);\n    }\n    else if (sourceIsArray) {\n        return options.arrayMerge(target, source, options);\n    }\n    else {\n        return mergeObject(target, source, options);\n    }\n}\n\nfunction hexToRGBA(hex, alpha) {\n    const r = parseInt(hex.slice(1, 3), 16);\n    const g = parseInt(hex.slice(3, 5), 16);\n    const b = parseInt(hex.slice(5, 7), 16);\n    return alpha ? `rgba(${r}, ${g}, ${b}, ${alpha})` : `rgba(${r}, ${g}, ${b})`;\n}\nfunction changeOpacity(fills, alpha) {\n    return fills.map(fill => {\n        const c = Color.fromString(fill);\n        return new Color(c.r, c.g, c.b, alpha).toHexString();\n    });\n}\n\nclass BarChartProxy extends CartesianChartProxy {\n    constructor(params) {\n        super(params);\n    }\n    getAxes(params) {\n        const isBar = this.standaloneChartType === 'bar';\n        const axes = [\n            {\n                type: this.getXAxisType(params),\n                position: isBar ? 'left' : 'bottom',\n            },\n            {\n                type: 'number',\n                position: isBar ? 'bottom' : 'left',\n            },\n        ];\n        // Add a default label formatter to show '%' for normalized charts if none is provided\n        if (this.isNormalised()) {\n            const numberAxis = axes[1];\n            numberAxis.label = Object.assign(Object.assign({}, numberAxis.label), { formatter: (params) => Math.round(params.value) + '%' });\n        }\n        return axes;\n    }\n    getSeries(params) {\n        const groupedCharts = ['groupedColumn', 'groupedBar'];\n        const isGrouped = !this.crossFiltering && ag_grid_community__WEBPACK_IMPORTED_MODULE_0__._.includes(groupedCharts, this.chartType);\n        const series = params.fields.map(f => ({\n            type: this.standaloneChartType,\n            grouped: isGrouped,\n            normalizedTo: this.isNormalised() ? 100 : undefined,\n            xKey: params.category.id,\n            xName: params.category.name,\n            yKey: f.colId,\n            yName: f.displayName\n        }));\n        return this.crossFiltering ? this.extractCrossFilterSeries(series) : series;\n    }\n    extractCrossFilterSeries(series) {\n        const palette = this.getChartPalette();\n        const updatePrimarySeries = (seriesOptions, index) => {\n            return Object.assign(Object.assign({}, seriesOptions), { highlightStyle: { item: { fill: undefined } }, fill: palette === null || palette === void 0 ? void 0 : palette.fills[index], stroke: palette === null || palette === void 0 ? void 0 : palette.strokes[index], listeners: {\n                    nodeClick: this.crossFilterCallback\n                } });\n        };\n        const updateFilteredOutSeries = (seriesOptions) => {\n            const yKey = seriesOptions.yKey + '-filtered-out';\n            return Object.assign(Object.assign({}, deepMerge({}, seriesOptions)), { yKey, fill: hexToRGBA(seriesOptions.fill, '0.3'), stroke: hexToRGBA(seriesOptions.stroke, '0.3'), hideInLegend: [yKey] });\n        };\n        const allSeries = [];\n        for (let i = 0; i < series.length; i++) {\n            // update primary series\n            const primarySeries = updatePrimarySeries(series[i], i);\n            allSeries.push(primarySeries);\n            // add 'filtered-out' series\n            allSeries.push(updateFilteredOutSeries(primarySeries));\n        }\n        return allSeries;\n    }\n    isNormalised() {\n        const normalisedCharts = ['normalizedColumn', 'normalizedBar'];\n        return !this.crossFiltering && ag_grid_community__WEBPACK_IMPORTED_MODULE_0__._.includes(normalisedCharts, this.chartType);\n    }\n}\n\nclass AreaChartProxy extends CartesianChartProxy {\n    constructor(params) {\n        super(params);\n    }\n    getAxes(params) {\n        const axes = [\n            {\n                type: this.getXAxisType(params),\n                position: 'bottom',\n            },\n            {\n                type: 'number',\n                position: 'left',\n            },\n        ];\n        // Add a default label formatter to show '%' for normalized charts if none is provided\n        if (this.isNormalised()) {\n            const numberAxis = axes[1];\n            numberAxis.label = Object.assign(Object.assign({}, numberAxis.label), { formatter: (params) => Math.round(params.value) + '%' });\n        }\n        return axes;\n    }\n    getSeries(params) {\n        const series = params.fields.map(f => ({\n            type: this.standaloneChartType,\n            xKey: params.category.id,\n            xName: params.category.name,\n            yKey: f.colId,\n            yName: f.displayName,\n            normalizedTo: this.chartType === 'normalizedArea' ? 100 : undefined,\n            stacked: ['normalizedArea', 'stackedArea'].includes(this.chartType)\n        }));\n        return this.crossFiltering ? this.extractLineAreaCrossFilterSeries(series, params) : series;\n    }\n    isNormalised() {\n        return !this.crossFiltering && this.chartType === 'normalizedArea';\n    }\n}\n\nclass LineChartProxy extends CartesianChartProxy {\n    constructor(params) {\n        super(params);\n    }\n    getAxes(params) {\n        return [\n            {\n                type: this.getXAxisType(params),\n                position: 'bottom'\n            },\n            {\n                type: 'number',\n                position: 'left'\n            },\n        ];\n    }\n    getSeries(params) {\n        const series = params.fields.map(f => ({\n            type: this.standaloneChartType,\n            xKey: params.category.id,\n            xName: params.category.name,\n            yKey: f.colId,\n            yName: f.displayName\n        }));\n        return this.crossFiltering ? this.extractLineAreaCrossFilterSeries(series, params) : series;\n    }\n}\n\nclass PieChartProxy extends ChartProxy {\n    constructor(params) {\n        super(params);\n    }\n    update(params) {\n        const { data, category } = params;\n        const options = Object.assign(Object.assign({}, this.getCommonChartOptions(params.updatedOverrides)), { data: this.crossFiltering ? this.getCrossFilterData(params) : this.transformData(data, category.id), series: this.getSeries(params) });\n        AgChart.update(this.getChartRef(), options);\n    }\n    getSeries(params) {\n        const numFields = params.fields.length;\n        const offset = {\n            currentOffset: 0,\n            offsetAmount: numFields > 1 ? 20 : 40\n        };\n        const series = this.getFields(params).map((f) => {\n            var _a;\n            // options shared by 'pie' and 'doughnut' charts\n            const options = {\n                type: this.standaloneChartType,\n                angleKey: f.colId,\n                angleName: f.displayName,\n                sectorLabelKey: f.colId,\n                calloutLabelKey: params.category.id,\n                calloutLabelName: params.category.name,\n            };\n            if (this.chartType === 'doughnut') {\n                const { outerRadiusOffset, innerRadiusOffset } = PieChartProxy.calculateOffsets(offset);\n                const title = f.displayName ? {\n                    title: { text: f.displayName, showInLegend: numFields > 1 },\n                } : undefined;\n                // augment shared options with 'doughnut' specific options\n                return Object.assign(Object.assign(Object.assign(Object.assign({}, options), { outerRadiusOffset,\n                    innerRadiusOffset }), title), { calloutLine: {\n                        colors: (_a = this.getChartPalette()) === null || _a === void 0 ? void 0 : _a.strokes,\n                    } });\n            }\n            return options;\n        });\n        return this.crossFiltering ? this.extractCrossFilterSeries(series) : series;\n    }\n    getCrossFilterData(params) {\n        const colId = params.fields[0].colId;\n        const filteredOutColId = `${colId}-filtered-out`;\n        return params.data.map(d => {\n            const total = d[colId] + d[filteredOutColId];\n            d[`${colId}-total`] = total;\n            d[filteredOutColId] = 1; // normalise to 1\n            d[colId] = d[colId] / total; // fraction of 1\n            return d;\n        });\n    }\n    extractCrossFilterSeries(series) {\n        const palette = this.getChartPalette();\n        const primaryOptions = (seriesOptions) => {\n            return Object.assign(Object.assign({}, seriesOptions), { calloutLabel: { enabled: false }, highlightStyle: { item: { fill: undefined } }, radiusKey: seriesOptions.angleKey, angleKey: seriesOptions.angleKey + '-total', radiusMin: 0, radiusMax: 1, listeners: {\n                    nodeClick: this.crossFilterCallback,\n                } });\n        };\n        const filteredOutOptions = (seriesOptions, angleKey) => {\n            var _a, _b;\n            return Object.assign(Object.assign({}, deepMerge({}, primaryOpts)), { radiusKey: angleKey + '-filtered-out', fills: changeOpacity((_a = seriesOptions.fills) !== null && _a !== void 0 ? _a : palette.fills, 0.3), strokes: changeOpacity((_b = seriesOptions.strokes) !== null && _b !== void 0 ? _b : palette.strokes, 0.3), showInLegend: false });\n        };\n        // currently, only single 'doughnut' cross-filter series are supported\n        const primarySeries = series[0];\n        // update primary series\n        const angleKey = primarySeries.angleKey;\n        const primaryOpts = primaryOptions(primarySeries);\n        return [\n            filteredOutOptions(primarySeries, angleKey),\n            primaryOpts,\n        ];\n    }\n    static calculateOffsets(offset) {\n        const outerRadiusOffset = offset.currentOffset;\n        offset.currentOffset -= offset.offsetAmount;\n        const innerRadiusOffset = offset.currentOffset;\n        offset.currentOffset -= offset.offsetAmount;\n        return { outerRadiusOffset, innerRadiusOffset };\n    }\n    getFields(params) {\n        return this.chartType === 'pie' ? params.fields.slice(0, 1) : params.fields;\n    }\n    crossFilteringReset() {\n        // not required in pie charts\n    }\n}\n\nclass ScatterChartProxy extends CartesianChartProxy {\n    constructor(params) {\n        super(params);\n    }\n    getAxes(_params) {\n        return [\n            {\n                type: 'number',\n                position: 'bottom',\n            },\n            {\n                type: 'number',\n                position: 'left',\n            },\n        ];\n    }\n    getSeries(params) {\n        const paired = this.isPaired();\n        const seriesDefinitions = this.getSeriesDefinitions(params.fields, paired);\n        const labelFieldDefinition = params.category.id === ChartDataModel.DEFAULT_CATEGORY ? undefined : params.category;\n        const series = seriesDefinitions.map(seriesDefinition => ({\n            type: this.standaloneChartType,\n            xKey: seriesDefinition.xField.colId,\n            xName: seriesDefinition.xField.displayName,\n            yKey: seriesDefinition.yField.colId,\n            yName: seriesDefinition.yField.displayName,\n            title: `${seriesDefinition.yField.displayName} vs ${seriesDefinition.xField.displayName}`,\n            sizeKey: seriesDefinition.sizeField ? seriesDefinition.sizeField.colId : undefined,\n            sizeName: seriesDefinition.sizeField ? seriesDefinition.sizeField.displayName : undefined,\n            labelKey: labelFieldDefinition ? labelFieldDefinition.id : seriesDefinition.yField.colId,\n            labelName: labelFieldDefinition ? labelFieldDefinition.name : undefined,\n        }));\n        return this.crossFiltering ? this.extractCrossFilterSeries(series, params) : series;\n    }\n    extractCrossFilterSeries(series, params) {\n        const { data } = params;\n        const palette = this.getChartPalette();\n        const filteredOutKey = (key) => `${key}-filtered-out`;\n        const calcMarkerDomain = (data, sizeKey) => {\n            var _a;\n            const markerDomain = [Infinity, -Infinity];\n            if (sizeKey != null) {\n                for (const datum of data) {\n                    const value = (_a = datum[sizeKey]) !== null && _a !== void 0 ? _a : datum[filteredOutKey(sizeKey)];\n                    if (value < markerDomain[0]) {\n                        markerDomain[0] = value;\n                    }\n                    if (value > markerDomain[1]) {\n                        markerDomain[1] = value;\n                    }\n                }\n            }\n            if (markerDomain[0] <= markerDomain[1]) {\n                return markerDomain;\n            }\n            return undefined;\n        };\n        const updatePrimarySeries = (series, idx) => {\n            const { sizeKey } = series;\n            const fill = palette === null || palette === void 0 ? void 0 : palette.fills[idx];\n            const stroke = palette === null || palette === void 0 ? void 0 : palette.strokes[idx];\n            let markerDomain = calcMarkerDomain(data, sizeKey);\n            const marker = Object.assign(Object.assign({}, series.marker), { fill,\n                stroke, domain: markerDomain });\n            return Object.assign(Object.assign({}, series), { marker, highlightStyle: { item: { fill: 'yellow' } }, listeners: Object.assign(Object.assign({}, series.listeners), { nodeClick: this.crossFilterCallback }) });\n        };\n        const updateFilteredOutSeries = (series) => {\n            let { sizeKey, yKey, xKey } = series;\n            if (sizeKey != null) {\n                sizeKey = filteredOutKey(sizeKey);\n            }\n            return Object.assign(Object.assign({}, series), { yKey: filteredOutKey(yKey), xKey: filteredOutKey(xKey), marker: Object.assign(Object.assign({}, series.marker), { fillOpacity: 0.3, strokeOpacity: 0.3 }), sizeKey, showInLegend: false, listeners: Object.assign(Object.assign({}, series.listeners), { nodeClick: (e) => {\n                        const value = e.datum[filteredOutKey(xKey)];\n                        // Need to remove the `-filtered-out` suffixes from the event so that\n                        // upstream processing maps the event correctly onto grid column ids.\n                        const filterableEvent = Object.assign(Object.assign({}, e), { xKey, datum: Object.assign(Object.assign({}, e.datum), { [xKey]: value }) });\n                        this.crossFilterCallback(filterableEvent);\n                    } }) });\n        };\n        const updatedSeries = series.map(updatePrimarySeries);\n        return [\n            ...updatedSeries,\n            ...updatedSeries.map(updateFilteredOutSeries),\n        ];\n    }\n    getSeriesDefinitions(fields, paired) {\n        if (fields.length < 2) {\n            return [];\n        }\n        const isBubbleChart = this.chartType === 'bubble';\n        if (paired) {\n            if (isBubbleChart) {\n                return fields.map((currentXField, i) => i % 3 === 0 ? ({\n                    xField: currentXField,\n                    yField: fields[i + 1],\n                    sizeField: fields[i + 2],\n                }) : null).filter(x => x && x.yField && x.sizeField);\n            }\n            return fields.map((currentXField, i) => i % 2 === 0 ? ({\n                xField: currentXField,\n                yField: fields[i + 1],\n            }) : null).filter(x => x && x.yField);\n        }\n        const xField = fields[0];\n        if (isBubbleChart) {\n            return fields\n                .map((yField, i) => i % 2 === 1 ? ({\n                xField,\n                yField,\n                sizeField: fields[i + 1],\n            }) : null)\n                .filter(x => x && x.sizeField);\n        }\n        return fields.filter((value, i) => i > 0).map(yField => ({ xField, yField }));\n    }\n}\n\nclass HistogramChartProxy extends CartesianChartProxy {\n    constructor(params) {\n        super(params);\n    }\n    getSeries(params) {\n        const firstField = params.fields[0]; // multiple series are not supported!\n        return [\n            {\n                type: this.standaloneChartType,\n                xKey: firstField.colId,\n                xName: firstField.displayName,\n                yName: this.chartProxyParams.translate(\"histogramFrequency\"),\n                areaPlot: false, // only constant width is supported via integrated charts\n            }\n        ];\n    }\n    getAxes(_params) {\n        return [\n            {\n                type: 'number',\n                position: 'bottom',\n            },\n            {\n                type: 'number',\n                position: 'left',\n            },\n        ];\n    }\n}\n\nclass ChartOptionsService extends ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.BeanStub {\n    constructor(chartController) {\n        super();\n        this.chartController = chartController;\n    }\n    getChartOption(expression) {\n        // TODO: We shouldn't be reading the chart implementation directly, but right now\n        // it isn't possible to either get option defaults OR retrieve themed options.\n        return ag_grid_community__WEBPACK_IMPORTED_MODULE_0__._.get(this.getChart(), expression, undefined);\n    }\n    setChartOption(expression, value, isSilent) {\n        const chartSeriesTypes = this.chartController.getChartSeriesTypes();\n        if (this.chartController.isComboChart()) {\n            chartSeriesTypes.push('cartesian');\n        }\n        let chartOptions = {};\n        // we need to update chart options on each series type for combo charts\n        chartSeriesTypes.forEach(seriesType => {\n            chartOptions = deepMerge(chartOptions, this.createChartOptions({\n                seriesType,\n                expression,\n                value\n            }));\n        });\n        this.updateChart(chartOptions);\n        if (!isSilent) {\n            this.raiseChartOptionsChangedEvent();\n        }\n    }\n    awaitChartOptionUpdate(func) {\n        const chart = this.chartController.getChartProxy().getChart();\n        chart.waitForUpdate().then(() => func())\n            .catch((e) => console.error(`AG Grid - chart update failed`, e));\n    }\n    getAxisProperty(expression) {\n        var _a;\n        return ag_grid_community__WEBPACK_IMPORTED_MODULE_0__._.get((_a = this.getChart().axes) === null || _a === void 0 ? void 0 : _a[0], expression, undefined);\n    }\n    setAxisProperty(expression, value) {\n        var _a;\n        // update axis options\n        const chart = this.getChart();\n        let chartOptions = {};\n        (_a = chart.axes) === null || _a === void 0 ? void 0 : _a.forEach((axis) => {\n            chartOptions = deepMerge(chartOptions, this.getUpdateAxisOptions(axis, expression, value));\n        });\n        this.updateChart(chartOptions);\n        this.raiseChartOptionsChangedEvent();\n    }\n    getLabelRotation(axisType) {\n        const axis = this.getAxis(axisType);\n        return ag_grid_community__WEBPACK_IMPORTED_MODULE_0__._.get(axis, 'label.rotation', undefined);\n    }\n    setLabelRotation(axisType, value) {\n        const chartAxis = this.getAxis(axisType);\n        if (chartAxis) {\n            const chartOptions = this.getUpdateAxisOptions(chartAxis, 'label.rotation', value);\n            this.updateChart(chartOptions);\n            this.raiseChartOptionsChangedEvent();\n        }\n    }\n    getSeriesOption(expression, seriesType) {\n        const series = this.getChart().series.find((s) => ChartOptionsService.isMatchingSeries(seriesType, s));\n        return ag_grid_community__WEBPACK_IMPORTED_MODULE_0__._.get(series, expression, undefined);\n    }\n    setSeriesOption(expression, value, seriesType) {\n        const chartOptions = this.createChartOptions({\n            seriesType,\n            expression: `series.${expression}`,\n            value\n        });\n        this.updateChart(chartOptions);\n        this.raiseChartOptionsChangedEvent();\n    }\n    getPairedMode() {\n        return this.chartController.getChartProxy().isPaired();\n    }\n    setPairedMode(paired) {\n        this.chartController.getChartProxy().setPaired(paired);\n    }\n    getAxis(axisType) {\n        const chart = this.getChart();\n        if (!chart.axes || chart.axes.length < 1) {\n            return undefined;\n        }\n        if (axisType === 'xAxis') {\n            return (chart.axes && chart.axes[0].direction === 'x') ? chart.axes[0] : chart.axes[1];\n        }\n        return (chart.axes && chart.axes[1].direction === 'y') ? chart.axes[1] : chart.axes[0];\n    }\n    getUpdateAxisOptions(chartAxis, expression, value) {\n        const seriesType = getSeriesType(this.getChartType());\n        const validAxisTypes = ['number', 'category', 'time', 'groupedCategory'];\n        if (!validAxisTypes.includes(chartAxis.type)) {\n            return {};\n        }\n        return this.createChartOptions({\n            seriesType,\n            expression: `axes.${chartAxis.type}.${expression}`,\n            value\n        });\n    }\n    getChartType() {\n        return this.chartController.getChartType();\n    }\n    getChart() {\n        return this.chartController.getChartProxy().getChart();\n    }\n    updateChart(chartOptions) {\n        const chartRef = this.chartController.getChartProxy().getChartRef();\n        AgChart.updateDelta(chartRef, chartOptions);\n    }\n    createChartOptions({ seriesType, expression, value }) {\n        const overrides = {};\n        const chartOptions = {\n            theme: {\n                overrides\n            }\n        };\n        ag_grid_community__WEBPACK_IMPORTED_MODULE_0__._.set(overrides, `${seriesType}.${expression}`, value);\n        return chartOptions;\n    }\n    raiseChartOptionsChangedEvent() {\n        const chartModel = this.chartController.getChartModel();\n        const event = {\n            type: ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.Events.EVENT_CHART_OPTIONS_CHANGED,\n            chartId: chartModel.chartId,\n            chartType: chartModel.chartType,\n            chartThemeName: this.chartController.getChartThemeName(),\n            chartOptions: chartModel.chartOptions\n        };\n        this.eventService.dispatchEvent(event);\n    }\n    static isMatchingSeries(seriesType, series) {\n        return VALID_SERIES_TYPES.includes(seriesType) && series.type === seriesType;\n    }\n    destroy() {\n        super.destroy();\n    }\n}\n\nclass ComboChartProxy extends CartesianChartProxy {\n    constructor(params) {\n        super(params);\n    }\n    getAxes(params) {\n        const fields = params ? params.fields : [];\n        const fieldsMap = new Map(fields.map(f => [f.colId, f]));\n        const { primaryYKeys, secondaryYKeys } = this.getYKeys(fields, params.seriesChartTypes);\n        const axes = [\n            {\n                type: this.getXAxisType(params),\n                position: 'bottom',\n                gridStyle: [{ stroke: undefined }],\n            },\n        ];\n        if (primaryYKeys.length > 0) {\n            axes.push({\n                type: 'number',\n                keys: primaryYKeys,\n                position: 'left',\n            });\n        }\n        if (secondaryYKeys.length > 0) {\n            secondaryYKeys.forEach((secondaryYKey, i) => {\n                const field = fieldsMap.get(secondaryYKey);\n                const secondaryAxisIsVisible = field && field.colId === secondaryYKey;\n                if (!secondaryAxisIsVisible) {\n                    return;\n                }\n                const secondaryAxisOptions = {\n                    type: 'number',\n                    keys: [secondaryYKey],\n                    position: 'right',\n                };\n                const primaryYAxis = primaryYKeys.some(primaryYKey => !!fieldsMap.get(primaryYKey));\n                const lastSecondaryAxis = i === secondaryYKeys.length - 1;\n                if (!primaryYAxis && lastSecondaryAxis) ;\n                else {\n                    secondaryAxisOptions.gridStyle = [{ stroke: undefined }];\n                }\n                axes.push(secondaryAxisOptions);\n            });\n        }\n        return axes;\n    }\n    getSeries(params) {\n        const { fields, category, seriesChartTypes } = params;\n        return fields.map(field => {\n            const seriesChartType = seriesChartTypes.find(s => s.colId === field.colId);\n            if (seriesChartType) {\n                const chartType = seriesChartType.chartType;\n                const grouped = ['groupedColumn', 'groupedBar'].includes(chartType);\n                const groupedOpts = grouped ? { grouped: true } : {};\n                return Object.assign({ type: getSeriesType(chartType), xKey: category.id, yKey: field.colId, yName: field.displayName, stacked: ['stackedArea', 'stackedColumn'].includes(chartType) }, groupedOpts);\n            }\n        });\n    }\n    getYKeys(fields, seriesChartTypes) {\n        const primaryYKeys = [];\n        const secondaryYKeys = [];\n        fields.forEach(field => {\n            const colId = field.colId;\n            const seriesChartType = seriesChartTypes.find(s => s.colId === colId);\n            if (seriesChartType) {\n                seriesChartType.secondaryAxis ? secondaryYKeys.push(colId) : primaryYKeys.push(colId);\n            }\n        });\n        return { primaryYKeys, secondaryYKeys };\n    }\n}\n\nvar __decorate$N = ( false) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nclass GridChartComp extends ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.Component {\n    constructor(params) {\n        super(GridChartComp.TEMPLATE);\n        this.params = params;\n    }\n    init() {\n        const availableChartThemes = this.gridOptionsService.get('chartThemes') || DEFAULT_THEMES;\n        if (availableChartThemes.length < 1) {\n            throw new Error('Cannot create chart: no chart themes are available to be used.');\n        }\n        let { chartThemeName } = this.params;\n        if (!ag_grid_community__WEBPACK_IMPORTED_MODULE_0__._.includes(availableChartThemes, chartThemeName)) {\n            chartThemeName = availableChartThemes[0];\n        }\n        const modelParams = {\n            chartId: this.params.chartId,\n            pivotChart: this.params.pivotChart,\n            chartType: this.params.chartType,\n            chartThemeName: chartThemeName,\n            aggFunc: this.params.aggFunc,\n            cellRange: this.params.cellRange,\n            suppressChartRanges: this.params.suppressChartRanges,\n            unlinkChart: this.params.unlinkChart,\n            crossFiltering: this.params.crossFiltering,\n            seriesChartTypes: this.params.seriesChartTypes,\n        };\n        const isRtl = this.gridOptionsService.is('enableRtl');\n        this.addCssClass(isRtl ? 'ag-rtl' : 'ag-ltr');\n        // only the chart controller interacts with the chart model\n        const model = this.createBean(new ChartDataModel(modelParams));\n        this.chartController = this.createManagedBean(new ChartController(model));\n        this.validateCustomThemes();\n        // create chart before dialog to ensure dialog is correct size\n        this.createChart();\n        if (this.params.insideDialog) {\n            this.addDialog();\n        }\n        this.addMenu();\n        this.addTitleEditComp();\n        this.addManagedListener(this.getGui(), 'focusin', this.setActiveChartCellRange.bind(this));\n        this.addManagedListener(this.chartController, ChartController.EVENT_CHART_MODEL_UPDATE, this.update.bind(this));\n        if (this.chartMenu) {\n            // chart menu may not exist, i.e. cross filtering\n            this.addManagedListener(this.chartMenu, ChartMenu.EVENT_DOWNLOAD_CHART, () => this.downloadChart());\n        }\n        this.update();\n        this.raiseChartCreatedEvent();\n    }\n    validateCustomThemes() {\n        const suppliedThemes = this.getChartThemes();\n        const customChartThemes = this.gridOptionsService.get('customChartThemes');\n        if (customChartThemes) {\n            ag_grid_community__WEBPACK_IMPORTED_MODULE_0__._.getAllKeysInObjects([customChartThemes]).forEach(customThemeName => {\n                if (!ag_grid_community__WEBPACK_IMPORTED_MODULE_0__._.includes(suppliedThemes, customThemeName)) {\n                    console.warn(\"AG Grid: a custom chart theme with the name '\" + customThemeName + \"' has been \" +\n                        \"supplied but not added to the 'chartThemes' list\");\n                }\n            });\n        }\n    }\n    createChart() {\n        // if chart already exists, destroy it and remove it from DOM\n        let chartInstance = undefined;\n        if (this.chartProxy) {\n            chartInstance = this.chartProxy.destroy({ keepChartInstance: true });\n        }\n        const crossFilterCallback = (event, reset) => {\n            const ctx = this.params.crossFilteringContext;\n            ctx.lastSelectedChartId = reset ? '' : this.chartController.getChartId();\n            if (reset) {\n                this.params.crossFilteringResetCallback();\n            }\n            this.crossFilterService.filter(event, reset);\n        };\n        const chartType = this.chartController.getChartType();\n        const chartProxyParams = {\n            chartType,\n            chartInstance,\n            getChartThemeName: this.getChartThemeName.bind(this),\n            getChartThemes: this.getChartThemes.bind(this),\n            customChartThemes: this.gridOptionsService.get('customChartThemes'),\n            getGridOptionsChartThemeOverrides: () => this.getGridOptionsChartThemeOverrides(),\n            getExtraPaddingDirections: () => { var _a, _b; return (_b = (_a = this.chartMenu) === null || _a === void 0 ? void 0 : _a.getExtraPaddingDirections()) !== null && _b !== void 0 ? _b : []; },\n            apiChartThemeOverrides: this.params.chartThemeOverrides,\n            crossFiltering: this.params.crossFiltering,\n            crossFilterCallback,\n            parentElement: this.eChart,\n            grouping: this.chartController.isGrouping(),\n            chartThemeToRestore: this.params.chartThemeName,\n            chartOptionsToRestore: this.params.chartOptionsToRestore,\n            chartPaletteToRestore: this.params.chartPaletteToRestore,\n            seriesChartTypes: this.chartController.getSeriesChartTypes(),\n            translate: (toTranslate, defaultText) => this.chartTranslationService.translate(toTranslate, defaultText),\n        };\n        // ensure 'restoring' options are not reused when switching chart types\n        this.params.chartOptionsToRestore = undefined;\n        // set local state used to detect when chart changes\n        this.chartType = chartType;\n        this.chartThemeName = this.chartController.getChartThemeName();\n        this.chartProxy = GridChartComp.createChartProxy(chartProxyParams);\n        if (!this.chartProxy) {\n            console.warn('AG Grid: invalid chart type supplied: ', chartProxyParams.chartType);\n            return;\n        }\n        const canvas = this.eChart.querySelector('canvas');\n        if (canvas) {\n            canvas.classList.add('ag-charts-canvas');\n        }\n        this.chartController.setChartProxy(this.chartProxy);\n        this.chartOptionsService = this.createBean(new ChartOptionsService(this.chartController));\n        this.titleEdit && this.titleEdit.refreshTitle(this.chartController, this.chartOptionsService);\n    }\n    getChartThemeName() {\n        return this.chartController.getChartThemeName();\n    }\n    getChartThemes() {\n        return this.chartController.getThemes();\n    }\n    getGridOptionsChartThemeOverrides() {\n        return this.gridOptionsService.get('chartThemeOverrides');\n    }\n    static createChartProxy(chartProxyParams) {\n        switch (chartProxyParams.chartType) {\n            case 'column':\n            case 'bar':\n            case 'groupedColumn':\n            case 'stackedColumn':\n            case 'normalizedColumn':\n            case 'groupedBar':\n            case 'stackedBar':\n            case 'normalizedBar':\n                return new BarChartProxy(chartProxyParams);\n            case 'pie':\n            case 'doughnut':\n                return new PieChartProxy(chartProxyParams);\n            case 'area':\n            case 'stackedArea':\n            case 'normalizedArea':\n                return new AreaChartProxy(chartProxyParams);\n            case 'line':\n                return new LineChartProxy(chartProxyParams);\n            case 'scatter':\n            case 'bubble':\n                return new ScatterChartProxy(chartProxyParams);\n            case 'histogram':\n                return new HistogramChartProxy(chartProxyParams);\n            case 'columnLineCombo':\n            case 'areaColumnCombo':\n            case 'customCombo':\n                return new ComboChartProxy(chartProxyParams);\n            default:\n                throw `AG Grid: Unable to create chart as an invalid chartType = '${chartProxyParams.chartType}' was supplied.`;\n        }\n    }\n    addDialog() {\n        const title = this.chartTranslationService.translate(this.params.pivotChart ? 'pivotChartTitle' : 'rangeChartTitle');\n        const { width, height } = this.getBestDialogSize();\n        this.chartDialog = new ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.AgDialog({\n            resizable: true,\n            movable: true,\n            maximizable: true,\n            title,\n            width,\n            height,\n            component: this,\n            centered: true,\n            closable: true\n        });\n        this.getContext().createBean(this.chartDialog);\n        this.chartDialog.addEventListener(ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.AgDialog.EVENT_DESTROYED, () => this.destroy());\n    }\n    getBestDialogSize() {\n        const popupParent = this.popupService.getPopupParent();\n        const maxWidth = ag_grid_community__WEBPACK_IMPORTED_MODULE_0__._.getAbsoluteWidth(popupParent) * 0.75;\n        const maxHeight = ag_grid_community__WEBPACK_IMPORTED_MODULE_0__._.getAbsoluteHeight(popupParent) * 0.75;\n        const ratio = 0.553;\n        const chart = this.chartProxy.getChart();\n        let width = this.params.insideDialog ? 850 : chart.width;\n        let height = this.params.insideDialog ? 470 : chart.height;\n        if (width > maxWidth || height > maxHeight) {\n            width = Math.min(width, maxWidth);\n            height = Math.round(width * ratio);\n            if (height > maxHeight) {\n                height = maxHeight;\n                width = Math.min(width, Math.round(height / ratio));\n            }\n        }\n        return { width, height };\n    }\n    addMenu() {\n        if (!this.params.crossFiltering) {\n            this.chartMenu = this.createBean(new ChartMenu(this.eChartContainer, this.eMenuContainer, this.chartController, this.chartOptionsService));\n            this.eChartContainer.appendChild(this.chartMenu.getGui());\n        }\n    }\n    addTitleEditComp() {\n        this.titleEdit = this.createBean(new TitleEdit(this.chartMenu));\n        this.eTitleEditContainer.appendChild(this.titleEdit.getGui());\n        if (this.chartProxy) {\n            this.titleEdit.refreshTitle(this.chartController, this.chartOptionsService);\n        }\n    }\n    update(params) {\n        // update chart model for api.updateChart()\n        if (params === null || params === void 0 ? void 0 : params.chartId) {\n            const validUpdate = this.chartController.update(params);\n            if (!validUpdate) {\n                return; // warning already logged!\n            }\n        }\n        const chartTypeChanged = this.chartTypeChanged(params);\n        // recreate chart if chart type has changed\n        if (chartTypeChanged)\n            this.createChart();\n        // update chart options if chart type hasn't changed or if overrides are supplied\n        this.updateChart(params === null || params === void 0 ? void 0 : params.chartThemeOverrides);\n        if (params === null || params === void 0 ? void 0 : params.chartId) {\n            this.chartProxy.getChart().waitForUpdate().then(() => {\n                this.chartController.raiseChartApiUpdateEvent();\n            });\n        }\n    }\n    updateChart(updatedOverrides) {\n        const { chartProxy } = this;\n        const selectedCols = this.chartController.getSelectedValueColState();\n        const fields = selectedCols.map(c => ({ colId: c.colId, displayName: c.displayName }));\n        const data = this.chartController.getChartData();\n        const chartEmpty = this.handleEmptyChart(data, fields);\n        if (chartEmpty) {\n            return;\n        }\n        let chartUpdateParams = this.chartController.getChartUpdateParams(updatedOverrides);\n        chartProxy.update(chartUpdateParams);\n        this.chartProxy.getChart().waitForUpdate().then(() => {\n            this.chartController.raiseChartUpdatedEvent();\n        });\n        this.titleEdit.refreshTitle(this.chartController, this.chartOptionsService);\n    }\n    chartTypeChanged(updateParams) {\n        const [currentType, updatedChartType] = [this.chartController.getChartType(), updateParams === null || updateParams === void 0 ? void 0 : updateParams.chartType];\n        return this.chartType !== currentType || (!!updatedChartType && this.chartType !== updatedChartType);\n    }\n    getChartModel() {\n        return this.chartController.getChartModel();\n    }\n    getChartImageDataURL(fileFormat) {\n        return this.chartProxy.getChartImageDataURL(fileFormat);\n    }\n    handleEmptyChart(data, fields) {\n        const pivotModeDisabled = this.chartController.isPivotChart() && !this.chartController.isPivotMode();\n        let minFieldsRequired = 1;\n        if (this.chartController.isActiveXYChart()) {\n            minFieldsRequired = this.chartController.getChartType() === 'bubble' ? 3 : 2;\n        }\n        const isEmptyChart = fields.length < minFieldsRequired || data.length === 0;\n        if (this.eChart) {\n            const isEmpty = pivotModeDisabled || isEmptyChart;\n            ag_grid_community__WEBPACK_IMPORTED_MODULE_0__._.setDisplayed(this.eChart, !isEmpty);\n            ag_grid_community__WEBPACK_IMPORTED_MODULE_0__._.setDisplayed(this.eEmpty, isEmpty);\n        }\n        if (pivotModeDisabled) {\n            this.eEmpty.innerText = this.chartTranslationService.translate('pivotChartRequiresPivotMode');\n            return true;\n        }\n        if (isEmptyChart) {\n            this.eEmpty.innerText = this.chartTranslationService.translate('noDataToChart');\n            return true;\n        }\n        return false;\n    }\n    downloadChart(dimensions, fileName, fileFormat) {\n        this.chartProxy.downloadChart(dimensions, fileName, fileFormat);\n    }\n    openChartToolPanel(panel) {\n        const menuPanel = panel ? ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.CHART_TOOL_PANEL_MENU_OPTIONS[panel] : panel;\n        this.chartMenu.showMenu(menuPanel);\n    }\n    closeChartToolPanel() {\n        this.chartMenu.hideMenu();\n    }\n    getChartId() {\n        return this.chartController.getChartId();\n    }\n    getUnderlyingChart() {\n        return this.chartProxy.getChartRef();\n    }\n    crossFilteringReset() {\n        this.chartProxy.crossFilteringReset();\n    }\n    setActiveChartCellRange(focusEvent) {\n        if (this.getGui().contains(focusEvent.relatedTarget)) {\n            return;\n        }\n        this.chartController.setChartRange(true);\n        this.gridApi.focusService.clearFocusedCell();\n    }\n    raiseChartCreatedEvent() {\n        const event = {\n            type: ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.Events.EVENT_CHART_CREATED,\n            chartId: this.chartController.getChartId()\n        };\n        this.chartProxy.getChart().waitForUpdate().then(() => {\n            this.eventService.dispatchEvent(event);\n        });\n    }\n    raiseChartDestroyedEvent() {\n        const event = {\n            type: ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.Events.EVENT_CHART_DESTROYED,\n            chartId: this.chartController.getChartId(),\n        };\n        this.eventService.dispatchEvent(event);\n    }\n    destroy() {\n        super.destroy();\n        if (this.chartProxy) {\n            this.chartProxy.destroy();\n        }\n        this.destroyBean(this.chartMenu);\n        this.destroyBean(this.titleEdit);\n        // don't want to invoke destroy() on the Dialog (prevents destroy loop)\n        if (this.chartDialog && this.chartDialog.isAlive()) {\n            this.destroyBean(this.chartDialog);\n        }\n        // if the user is providing containers for the charts, we need to clean up, otherwise the old chart\n        // data will still be visible although the chart is no longer bound to the grid\n        const eGui = this.getGui();\n        ag_grid_community__WEBPACK_IMPORTED_MODULE_0__._.clearElement(eGui);\n        // remove from parent, so if user provided container, we detach from the provided dom element\n        ag_grid_community__WEBPACK_IMPORTED_MODULE_0__._.removeFromParent(eGui);\n        this.raiseChartDestroyedEvent();\n    }\n}\nGridChartComp.TEMPLATE = `<div class=\"ag-chart\" tabindex=\"-1\">\n            <div ref=\"eChartContainer\" tabindex=\"-1\" class=\"ag-chart-components-wrapper\">\n                <div ref=\"eChart\" class=\"ag-chart-canvas-wrapper\"></div>\n                <div ref=\"eEmpty\" class=\"ag-chart-empty-text ag-unselectable\"></div>\n            </div>\n            <div ref=\"eTitleEditContainer\"></div>\n            <div ref=\"eMenuContainer\" class=\"ag-chart-docked-container\"></div>\n        </div>`;\n__decorate$N([\n    (0,ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.RefSelector)('eChart')\n], GridChartComp.prototype, \"eChart\", void 0);\n__decorate$N([\n    (0,ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.RefSelector)('eChartContainer')\n], GridChartComp.prototype, \"eChartContainer\", void 0);\n__decorate$N([\n    (0,ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.RefSelector)('eMenuContainer')\n], GridChartComp.prototype, \"eMenuContainer\", void 0);\n__decorate$N([\n    (0,ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.RefSelector)('eEmpty')\n], GridChartComp.prototype, \"eEmpty\", void 0);\n__decorate$N([\n    (0,ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.RefSelector)('eTitleEditContainer')\n], GridChartComp.prototype, \"eTitleEditContainer\", void 0);\n__decorate$N([\n    (0,ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.Autowired)('chartCrossFilterService')\n], GridChartComp.prototype, \"crossFilterService\", void 0);\n__decorate$N([\n    (0,ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.Autowired)('chartTranslationService')\n], GridChartComp.prototype, \"chartTranslationService\", void 0);\n__decorate$N([\n    (0,ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.Autowired)('gridApi')\n], GridChartComp.prototype, \"gridApi\", void 0);\n__decorate$N([\n    (0,ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.Autowired)('popupService')\n], GridChartComp.prototype, \"popupService\", void 0);\n__decorate$N([\n    ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.PostConstruct\n], GridChartComp.prototype, \"init\", null);\n\n// DO NOT UPDATE MANUALLY: Generated from script during build time\nconst VERSION$a = '30.0.2';\n\nvar __rest$1 = ( false) || function (s, e) {\n    var t = {};\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\n        t[p] = s[p];\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\n                t[p[i]] = s[p[i]];\n        }\n    return t;\n};\nfunction upgradeChartModel(model) {\n    model.version;\n    if (model.version == null) {\n        // Try to guess the version so we can apply the right subset of migrations.\n        model.version = heuristicVersionDetection(model);\n    }\n    model = migrateIfBefore('23.0.0', model, migrateV23);\n    model = migrateIfBefore('24.0.0', model, migrateV24);\n    model = migrateIfBefore('25.1.0', model, migrateV25_1);\n    model = migrateIfBefore('26.0.0', model, migrateV26);\n    model = migrateIfBefore('26.1.0', model, migrateV26_1);\n    // Switch from iChartOptions to iAgChartOptions....\n    model = migrateIfBefore('26.2.0', model, migrateV26_2);\n    model = migrateIfBefore('28.0.0', model, migrateV28);\n    model = migrateIfBefore('28.2.0', model, migrateV28_2);\n    model = migrateIfBefore('29.0.0', model, migrateV29);\n    model = migrateIfBefore('29.1.0', model, migrateV29_1);\n    model = migrateIfBefore('29.2.0', model, migrateV29_2);\n    model = migrateIfBefore('30.0.0', model, migrateV30);\n    model = cleanup(model);\n    // Bump version to latest.\n    model = migrateIfBefore(VERSION$a, model, (m) => m);\n    return model;\n}\nfunction migrateV23(model) {\n    // https://github.com/ag-grid/ag-grid/commit/76c6744ff2b732d298d1ade73c122188854b5bac\n    model = jsonRename('chartOptions.legend.item.marker.type', 'shape', model);\n    model = jsonRename('chartOptions.seriesDefaults.marker.type', 'shape', model);\n    // https://github.com/ag-grid/ag-grid/commit/7bdf2cfd666acda758a818733a9f9cb35ac1d7a7\n    model = jsonRename('chartOptions.legend.padding', 'spacing', model);\n    return model;\n}\nfunction migrateV24(model) {\n    var _a;\n    // https://github.com/ag-grid/ag-grid/commit/f4e854e3dc459400fa00e6da2873cb8e9cfff6fe#\n    model = jsonDelete('chartOptions.seriesDefaults.marker.minSize', model);\n    const _b = model, { chartType, chartPalette } = _b, // Migrate.\n    _c = _b.chartOptions, // Migrate.\n    { xAxis, yAxis } = _c, chartOptions = __rest$1(_c, [\"xAxis\", \"yAxis\"]), chartModel = __rest$1(_b, [\"chartType\", \"chartPalette\", \"chartOptions\"]);\n    const axesTypes = getLegacyAxisType(chartType);\n    const axes = axesTypes === null || axesTypes === void 0 ? void 0 : axesTypes.map((type, i) => (Object.assign({ type }, (i === 0 ? xAxis : yAxis))));\n    return Object.assign({ chartType, chartThemeName: (_a = LEGACY_PALETTES[chartPalette]) !== null && _a !== void 0 ? _a : 'ag-default', chartOptions: Object.assign(Object.assign({}, chartOptions), { axes,\n            xAxis,\n            yAxis }) }, chartModel);\n}\nfunction migrateV25_1(model) {\n    // https://github.com/ag-grid/ag-grid/commit/61943f9fecbfb5ac1b9a1fd93788f9fdd8687181\n    model = jsonRename('chartOptions.seriesDefaults.label.minRequiredAngle', 'minAngle', model);\n    return model;\n}\nfunction migrateV26(model) {\n    // https://github.com/ag-grid/ag-grid/commit/df2445d88e64cb4e831d6163104a0fa60ccde3b5\n    const highlightOptUpdate = (_a) => {\n        var { dimOpacity } = _a, opts = __rest$1(_a, [\"dimOpacity\"]);\n        return (Object.assign(Object.assign({}, opts), (dimOpacity != null ? { series: { dimOpacity } } : {})));\n    };\n    model = jsonMutate('chartOptions.seriesDefaults.highlightStyle', model, highlightOptUpdate);\n    // https://github.com/ag-grid/ag-grid/commit/f4e854e3dc459400fa00e6da2873cb8e9cfff6fe#\n    model = jsonDelete('chart', model);\n    model = jsonDelete('chartOptions.seriesDefaults.tooltipClass', model);\n    model = jsonDelete('chartOptions.seriesDefaults.tooltipTracking', model);\n    // Cleanup label.rotation === 0, which was treated as 'use the default' on reload prior to 26.\n    model = jsonDeleteDefault('chartOptions.axes[].label.rotation', 0, model);\n    model = jsonDeleteDefault('chartOptions.axes[].label.rotation', 335, model);\n    return model;\n}\nfunction migrateV26_1(model) {\n    // https://github.com/ag-grid/ag-grid/commit/df2445d88e64cb4e831d6163104a0fa60ccde3b5\n    const highlightOptUpdate = (_a) => {\n        var { item, series } = _a, opts = __rest$1(_a, [\"item\", \"series\"]);\n        return (Object.assign({ item: Object.assign(Object.assign({}, opts), item) }, (series ? { series } : {})));\n    };\n    model = jsonMutate('chartOptions.seriesDefaults.highlightStyle', model, highlightOptUpdate);\n    model = jsonMutate('chartOptions.series[].highlightStyle', model, highlightOptUpdate);\n    return model;\n}\nfunction migrateV26_2(model) {\n    // https://github.com/ag-grid/ag-grid/commit/8b2e223cb1a687cb6c1d70b9f75f52fa29d00341\n    model = jsonMove('chartOptions.seriesDefaults.fill.opacity', 'chartOptions.seriesDefaults.fillOpacity', model);\n    model = jsonMove('chartOptions.seriesDefaults.stroke.opacity', 'chartOptions.seriesDefaults.strokeOpacity', model);\n    model = jsonMove('chartOptions.seriesDefaults.stroke.width', 'chartOptions.seriesDefaults.strokeWidth', model);\n    model = jsonDelete('chartOptions.seriesDefaults.fill', model);\n    model = jsonDelete('chartOptions.seriesDefaults.stroke', model);\n    model = jsonDelete('chartOptions.seriesDefaults.callout.colors', model);\n    model = jsonDelete('chartOptions.xAxis', model);\n    model = jsonDelete('chartOptions.yAxis', model);\n    const _a = model, { chartType } = _a, _b = _a.chartOptions, { axes, series, seriesDefaults } = _b, otherChartOptions = __rest$1(_b, [\"axes\", \"series\", \"seriesDefaults\"]), otherModelProps = __rest$1(_a, [\"chartType\", \"chartOptions\"]);\n    // At 26.2.0 combination charts weren't supported, so we can safely assume a single series type.\n    // We can't rely on the `series.type` field as it was incorrect (in v25.0.0 line chart has an\n    // `area` series).\n    const seriesTypes = [getSeriesType(chartType)];\n    const chartTypeMixin = {};\n    if (!seriesTypes.includes('pie')) {\n        const minimalAxis = { top: {}, bottom: {}, left: {}, right: {} };\n        const updatedAxes = axes\n            .map((_a) => {\n            var { type } = _a, axisProps = __rest$1(_a, [\"type\"]);\n            return ({\n                [type]: Object.assign(Object.assign({}, minimalAxis), axisProps),\n            });\n        })\n            .reduce(merge, {});\n        ALL_AXIS_TYPES.filter((v) => updatedAxes[v] == null).forEach((v) => {\n            updatedAxes[v] = Object.assign({}, minimalAxis);\n        });\n        chartTypeMixin.axes = updatedAxes;\n    }\n    const updatedChartOptions = seriesTypes\n        .map((t) => ({\n        [t]: Object.assign(Object.assign(Object.assign({}, chartTypeMixin), { series: seriesDefaults }), otherChartOptions),\n    }))\n        .reduce(merge, {});\n    model = Object.assign(Object.assign({}, otherModelProps), { chartType, chartOptions: updatedChartOptions });\n    return model;\n}\nfunction migrateV28(model) {\n    model = jsonDelete('chartOptions.*.title.padding', model);\n    model = jsonDelete('chartOptions.*.subtitle.padding', model);\n    model = jsonDelete('chartOptions.*.axes.*.title.padding', model);\n    model = jsonBackfill('chartOptions.*.axes.*.title.enabled', false, model);\n    return model;\n}\nfunction migrateV28_2(model) {\n    model = jsonRename('chartOptions.pie.series.callout', 'calloutLine', model);\n    model = jsonRename('chartOptions.pie.series.label', 'calloutLabel', model);\n    model = jsonRename('chartOptions.pie.series.labelKey', 'sectorLabelKey', model);\n    model = jsonRename('chartOptions.pie.series.labelName', 'sectorLabelName', model);\n    // series.yKeys => yKey ?\n    // series.yNames => yName ?\n    return model;\n}\nfunction migrateV29(model) {\n    model = jsonMoveIfMissing('chartOptions.scatter.series.fill', 'chartOptions.scatter.series.marker.fill', model);\n    model = jsonMoveIfMissing('chartOptions.scatter.series.fillOpacity', 'chartOptions.scatter.series.marker.fillOpacity', model);\n    model = jsonMoveIfMissing('chartOptions.scatter.series.stroke', 'chartOptions.scatter.series.marker.stroke', model);\n    model = jsonMoveIfMissing('chartOptions.scatter.series.strokeOpacity', 'chartOptions.scatter.series.marker.strokeOpacity', model);\n    model = jsonMoveIfMissing('chartOptions.scatter.series.strokeWidth', 'chartOptions.scatter.series.marker.strokeWidth', model);\n    model = jsonMove('chartOptions.scatter.series.paired', 'chartOptions.scatter.paired', model);\n    return model;\n}\nfunction migrateV29_1(model) {\n    model = jsonDelete('chartOptions.axes[].tick.count', model);\n    return model;\n}\nfunction migrateV29_2(model) {\n    // https://github.com/ag-grid/ag-grid/commit/ce11956492e42e845932edb4e05d7b0b21db5c61\n    const tooltipOptUpdate = (_a) => {\n        var _b, _c, _d, _e;\n        var { tracking } = _a, opts = __rest$1(_a, [\"tracking\"]);\n        const output = Object.assign({}, opts);\n        if (tracking === false) {\n            (_b = output.position) !== null && _b !== void 0 ? _b : (output.position = { type: 'pointer' });\n            (_c = output.range) !== null && _c !== void 0 ? _c : (output.range = 'nearest');\n        }\n        else if (tracking === true) {\n            (_d = output.position) !== null && _d !== void 0 ? _d : (output.position = { type: 'node' });\n            (_e = output.range) !== null && _e !== void 0 ? _e : (output.range = 'nearest');\n        }\n        return output;\n    };\n    model = jsonMutate('chartOptions.*.tooltip', model, tooltipOptUpdate);\n    return model;\n}\nfunction migrateV30(model) {\n    // Repeated from migrateV28_2() as they were applied retrospectively for the v30 release.\n    model = jsonRename('chartOptions.pie.series.labelKey', 'sectorLabelKey', model);\n    model = jsonRename('chartOptions.pie.series.labelName', 'sectorLabelName', model);\n    // Late-applied migrations for deprecations in the 29.x.y range.\n    model = migrateV29_1(model);\n    model = migrateV29_2(model);\n    // Actual v30 changes.\n    model = jsonDelete('chartOptions.*.series.flipXY', model);\n    model = jsonAdd('chartOptions.common.legend.enabled', true, model);\n    model = jsonBackfill('chartOptions.common.legend.position', 'right', model);\n    return model;\n}\nfunction cleanup(model) {\n    // Remove fixed width/height - this has never been supported via UI configuration.\n    model = jsonDelete('chartOptions.*.width', model);\n    model = jsonDelete('chartOptions.*.height', model);\n    model = jsonBackfill('chartOptions.*.axes.category.label.autoRotate', true, model);\n    return model;\n}\nfunction heuristicVersionDetection(model) {\n    var _a, _b;\n    const modelAny = model;\n    if (model.version != null) {\n        return model.version;\n    }\n    const hasKey = (obj, ...keys) => {\n        return Object.keys(obj || {}).some((k) => keys.includes(k));\n    };\n    const chartOptions = modelAny.chartOptions;\n    const seriesOptions = hasKey(chartOptions, 'seriesDefaults')\n        ? chartOptions === null || chartOptions === void 0 ? void 0 : chartOptions.seriesDefaults\n        : chartOptions === null || chartOptions === void 0 ? void 0 : chartOptions[Object.keys(chartOptions)[0]];\n    const hints = {\n        '27.0.0': hasKey(modelAny, 'seriesChartTypes'),\n        '26.2.0': !hasKey(chartOptions, 'seriesDefaults'),\n        '26.1.0': hasKey(seriesOptions === null || seriesOptions === void 0 ? void 0 : seriesOptions.highlightStyle, 'item'),\n        '26.0.0': hasKey(seriesOptions === null || seriesOptions === void 0 ? void 0 : seriesOptions.highlightStyle, 'series'),\n        // '26.0.0': modelAny.chart === undefined,\n        '25.1.0': hasKey(seriesOptions === null || seriesOptions === void 0 ? void 0 : seriesOptions.label, 'minAngle'),\n        '25.0.0': hasKey(modelAny, 'modelType', 'aggFunc', 'unlinkChart', 'suppressChartRanges') ||\n            hasKey(seriesOptions, 'lineDash', 'lineDashOffset'),\n        '24.0.0': hasKey(modelAny, 'chartThemeName', 'chart') || hasKey(chartOptions, 'series'),\n        '23.2.0': hasKey(chartOptions, 'navigator'),\n        '23.0.0': hasKey((_b = (_a = chartOptions === null || chartOptions === void 0 ? void 0 : chartOptions.legend) === null || _a === void 0 ? void 0 : _a.item) === null || _b === void 0 ? void 0 : _b.marker, 'shape'),\n        '22.1.0': hasKey(modelAny, 'chartPalette', 'chartType'),\n    };\n    // Default to 27.1.0, the last version before we added `version`.\n    const defaultVersion = '27.1.0';\n    const matchingHints = Object.entries(hints).filter(([_, match]) => match);\n    const [heuristicVersion = defaultVersion] = matchingHints[0];\n    return heuristicVersion;\n}\nfunction migrateIfBefore(maxVersion, model, migration) {\n    if (versionNumber(maxVersion) > versionNumber(model.version)) {\n        const result = migration(model);\n        result.version = maxVersion;\n        return result;\n    }\n    return model;\n}\nfunction versionParts(version) {\n    const split = typeof version === 'string' ? version.split('.').map((v) => Number(v)) : [];\n    if (split.length !== 3 || split.some((v) => isNaN(v))) {\n        throw new Error('AG Grid - Illegal version string: ' + version);\n    }\n    return {\n        major: split[0],\n        minor: split[1],\n        patch: split[2],\n    };\n}\nfunction versionNumber(version) {\n    const { major, minor, patch } = versionParts(version);\n    // Return a number of the form MMmmPP.\n    return major * 10000 + minor * 100 + patch;\n}\nfunction jsonDeleteDefault(path, defaultValue, json) {\n    return jsonMutateProperty(path, true, json, (parent, prop) => {\n        if (parent[prop] === defaultValue) {\n            delete parent[prop];\n        }\n    });\n}\nfunction jsonBackfill(path, defaultValue, json) {\n    return jsonMutateProperty(path, false, json, (parent, prop) => {\n        if (parent[prop] == null) {\n            parent[prop] = defaultValue;\n        }\n    });\n}\nfunction jsonAdd(path, value, json) {\n    var _a;\n    if (typeof path === 'string') {\n        path = path.split('.');\n    }\n    const nextPath = path[0];\n    if (path.length > 1) {\n        json[nextPath] = jsonAdd(path.slice(1), value, (_a = json[nextPath]) !== null && _a !== void 0 ? _a : {});\n    }\n    const hasProperty = Object.keys(json).includes(nextPath);\n    if (!hasProperty) {\n        json[nextPath] = value;\n    }\n    return json;\n}\nfunction jsonMove(from, to, json) {\n    let valueToMove = undefined;\n    let valueFound = false;\n    json = jsonMutateProperty(from, true, json, (parent, prop) => {\n        valueFound = true;\n        valueToMove = parent[prop];\n        delete parent[prop];\n    });\n    if (!valueFound) {\n        return json;\n    }\n    return jsonMutateProperty(to, false, json, (parent, prop) => {\n        parent[prop] = valueToMove;\n    });\n}\nfunction jsonMoveIfMissing(from, to, json) {\n    let valueToMove = undefined;\n    let valueFound = false;\n    json = jsonMutateProperty(from, true, json, (parent, prop) => {\n        valueFound = true;\n        valueToMove = parent[prop];\n        delete parent[prop];\n    });\n    if (!valueFound) {\n        return json;\n    }\n    return jsonMutateProperty(to, false, json, (parent, prop) => {\n        if (parent[prop] === undefined) {\n            parent[prop] = valueToMove;\n        }\n    });\n}\nfunction jsonRename(path, renameTo, json) {\n    return jsonMutateProperty(path, true, json, (parent, prop) => {\n        parent[renameTo] = parent[prop];\n        delete parent[prop];\n    });\n}\nfunction jsonDelete(path, json) {\n    return jsonMutateProperty(path, true, json, (parent, prop) => delete parent[prop]);\n}\nfunction jsonMutateProperty(path, skipMissing, json, mutator) {\n    const pathElements = path instanceof Array ? path : path.split('.');\n    const parentPathElements = pathElements.slice(0, pathElements.length - 1);\n    const targetName = pathElements[pathElements.length - 1];\n    return jsonMutate(parentPathElements, json, (parent) => {\n        const hasProperty = Object.keys(parent).includes(targetName);\n        if (skipMissing && !hasProperty) {\n            return parent;\n        }\n        const result = Object.assign({}, parent);\n        mutator(result, targetName);\n        return result;\n    });\n}\nfunction jsonMutate(path, json, mutator) {\n    const pathElements = path instanceof Array ? path : path.split('.');\n    // Clone to avoid mutating original input.\n    json = Object.assign({}, json);\n    if (pathElements.length === 0) {\n        return mutator(json);\n    }\n    else if (pathElements[0].startsWith('{')) {\n        const pathOptions = pathElements[0].substring(1, pathElements[0].lastIndexOf('}')).split(',');\n        for (const pathOption of pathOptions) {\n            if (json[pathOption] != null) {\n                json[pathOption] = jsonMutate(pathElements.slice(1), json[pathOption], mutator);\n            }\n        }\n    }\n    else if (pathElements[0].endsWith('[]')) {\n        const arrayName = pathElements[0].substring(0, path[0].indexOf('['));\n        if (json[arrayName] instanceof Array) {\n            json[arrayName] = json[arrayName].map((v) => jsonMutate(pathElements.slice(1), v, mutator));\n        }\n    }\n    else if (pathElements[0] === '*') {\n        for (const jsonProp in json) {\n            json[jsonProp] = jsonMutate(pathElements.slice(1), json[jsonProp], mutator);\n        }\n    }\n    else if (json[pathElements[0]] != null) {\n        json[pathElements[0]] = jsonMutate(pathElements.slice(1), json[pathElements[0]], mutator);\n    }\n    return json;\n}\nconst merge = (r, n) => (Object.assign(Object.assign({}, r), n));\n// Precise legacy palette fills/strokes can be found here for future reference:\n// https://github.com/ag-grid/ag-grid/blob/b22.1.0/grid-enterprise-modules/charts/src/charts/chart/palettes.ts\nconst LEGACY_PALETTES = {\n    borneo: 'ag-default',\n    material: 'ag-material',\n    pastel: 'ag-pastel',\n    bright: 'ag-vivid',\n    flat: 'ag-solar',\n};\n\nvar __decorate$M = ( false) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nlet ChartService = class ChartService extends ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.BeanStub {\n    constructor() {\n        super(...arguments);\n        // we destroy all charts bound to this grid when grid is destroyed. activeCharts contains all charts, including\n        // those in developer provided containers.\n        this.activeCharts = new Set();\n        this.activeChartComps = new Set();\n        // this shared (singleton) context is used by cross filtering in line and area charts\n        this.crossFilteringContext = {\n            lastSelectedChartId: '',\n        };\n    }\n    updateChart(params) {\n        if (this.activeChartComps.size === 0) {\n            console.warn(`AG Grid - No active charts to update.`);\n            return;\n        }\n        const chartComp = [...this.activeChartComps].find(chartComp => chartComp.getChartId() === params.chartId);\n        if (!chartComp) {\n            console.warn(`AG Grid - Unable to update chart. No active chart found with ID: ${params.chartId}.`);\n            return;\n        }\n        chartComp.update(params);\n    }\n    getChartModels() {\n        const models = [];\n        const versionedModel = (c) => {\n            return Object.assign(Object.assign({}, c), { version: VERSION$a });\n        };\n        this.activeChartComps.forEach(c => models.push(versionedModel(c.getChartModel())));\n        return models;\n    }\n    getChartRef(chartId) {\n        let chartRef;\n        this.activeCharts.forEach(cr => {\n            if (cr.chartId === chartId) {\n                chartRef = cr;\n            }\n        });\n        return chartRef;\n    }\n    getChartComp(chartId) {\n        let chartComp;\n        this.activeChartComps.forEach(comp => {\n            if (comp.getChartId() === chartId) {\n                chartComp = comp;\n            }\n        });\n        return chartComp;\n    }\n    getChartImageDataURL(params) {\n        let url;\n        this.activeChartComps.forEach(c => {\n            if (c.getChartId() === params.chartId) {\n                url = c.getChartImageDataURL(params.fileFormat);\n            }\n        });\n        return url;\n    }\n    downloadChart(params) {\n        const chartComp = Array.from(this.activeChartComps).find(c => c.getChartId() === params.chartId);\n        chartComp === null || chartComp === void 0 ? void 0 : chartComp.downloadChart(params.dimensions, params.fileName, params.fileFormat);\n    }\n    openChartToolPanel(params) {\n        const chartComp = Array.from(this.activeChartComps).find(c => c.getChartId() === params.chartId);\n        chartComp === null || chartComp === void 0 ? void 0 : chartComp.openChartToolPanel(params.panel);\n    }\n    closeChartToolPanel(chartId) {\n        const chartComp = Array.from(this.activeChartComps).find(c => c.getChartId() === chartId);\n        chartComp === null || chartComp === void 0 ? void 0 : chartComp.closeChartToolPanel();\n    }\n    createChartFromCurrentRange(chartType = 'groupedColumn') {\n        const selectedRange = this.getSelectedRange();\n        return this.createChart(selectedRange, chartType);\n    }\n    restoreChart(model, chartContainer) {\n        if (!model) {\n            console.warn(\"AG Grid - unable to restore chart as no chart model is provided\");\n            return;\n        }\n        if (model.version !== VERSION$a) {\n            model = upgradeChartModel(model);\n        }\n        const params = {\n            cellRange: model.cellRange,\n            chartType: model.chartType,\n            chartThemeName: model.chartThemeName,\n            chartContainer: chartContainer,\n            suppressChartRanges: model.suppressChartRanges,\n            aggFunc: model.aggFunc,\n            unlinkChart: model.unlinkChart,\n            seriesChartTypes: model.seriesChartTypes\n        };\n        const getCellRange = (cellRangeParams) => {\n            return this.rangeService\n                ? this.rangeService.createCellRangeFromCellRangeParams(cellRangeParams)\n                : undefined;\n        };\n        if (model.modelType === 'pivot') {\n            // if required enter pivot mode\n            if (!this.columnModel.isPivotMode()) {\n                this.columnModel.setPivotMode(true, \"pivotChart\");\n            }\n            // pivot chart range contains all visible column without a row range to include all rows\n            const columns = this.columnModel.getAllDisplayedColumns().map(col => col.getColId());\n            const chartAllRangeParams = {\n                rowStartIndex: null,\n                rowStartPinned: undefined,\n                rowEndIndex: null,\n                rowEndPinned: undefined,\n                columns\n            };\n            const cellRange = getCellRange(chartAllRangeParams);\n            if (!cellRange) {\n                console.warn(\"AG Grid - unable to create chart as there are no columns in the grid.\");\n                return;\n            }\n            return this.createChart(cellRange, params.chartType, params.chartThemeName, true, true, params.chartContainer, undefined, undefined, params.unlinkChart, false, model.chartOptions);\n        }\n        const cellRange = getCellRange(params.cellRange);\n        if (!cellRange) {\n            console.warn(\"AG Grid - unable to create chart as no range is selected\");\n            return;\n        }\n        return this.createChart(cellRange, params.chartType, params.chartThemeName, false, params.suppressChartRanges, params.chartContainer, params.aggFunc, undefined, params.unlinkChart, false, model.chartOptions, model.chartPalette, params.seriesChartTypes);\n    }\n    createRangeChart(params) {\n        var _a;\n        const cellRange = (_a = this.rangeService) === null || _a === void 0 ? void 0 : _a.createCellRangeFromCellRangeParams(params.cellRange);\n        if (!cellRange) {\n            console.warn(\"AG Grid - unable to create chart as no range is selected\");\n            return;\n        }\n        return this.createChart(cellRange, params.chartType, params.chartThemeName, false, params.suppressChartRanges, params.chartContainer, params.aggFunc, params.chartThemeOverrides, params.unlinkChart, undefined, undefined, undefined, params.seriesChartTypes);\n    }\n    createPivotChart(params) {\n        // if required enter pivot mode\n        if (!this.columnModel.isPivotMode()) {\n            this.columnModel.setPivotMode(true, \"pivotChart\");\n        }\n        // pivot chart range contains all visible column without a row range to include all rows\n        const chartAllRangeParams = {\n            rowStartIndex: null,\n            rowStartPinned: undefined,\n            rowEndIndex: null,\n            rowEndPinned: undefined,\n            columns: this.columnModel.getAllDisplayedColumns().map(col => col.getColId())\n        };\n        const cellRange = this.rangeService\n            ? this.rangeService.createCellRangeFromCellRangeParams(chartAllRangeParams)\n            : undefined;\n        if (!cellRange) {\n            console.warn(\"AG Grid - unable to create chart as there are no columns in the grid.\");\n            return;\n        }\n        return this.createChart(cellRange, params.chartType, params.chartThemeName, true, true, params.chartContainer, undefined, params.chartThemeOverrides, params.unlinkChart);\n    }\n    createCrossFilterChart(params) {\n        var _a;\n        const cellRange = (_a = this.rangeService) === null || _a === void 0 ? void 0 : _a.createCellRangeFromCellRangeParams(params.cellRange);\n        if (!cellRange) {\n            console.warn(\"AG Grid - unable to create chart as no range is selected\");\n            return;\n        }\n        const crossFiltering = true;\n        const suppressChartRangesSupplied = typeof params.suppressChartRanges !== 'undefined' && params.suppressChartRanges !== null;\n        const suppressChartRanges = suppressChartRangesSupplied ? params.suppressChartRanges : true;\n        return this.createChart(cellRange, params.chartType, params.chartThemeName, false, suppressChartRanges, params.chartContainer, params.aggFunc, params.chartThemeOverrides, params.unlinkChart, crossFiltering);\n    }\n    createChart(cellRange, chartType, chartThemeName, pivotChart = false, suppressChartRanges = false, container, aggFunc, chartThemeOverrides, unlinkChart = false, crossFiltering = false, chartOptionsToRestore, chartPaletteToRestore, seriesChartTypes) {\n        const createChartContainerFunc = this.gridOptionsService.getCallback('createChartContainer');\n        const params = {\n            chartId: this.generateId(),\n            pivotChart,\n            cellRange,\n            chartType,\n            chartThemeName,\n            insideDialog: !(container || createChartContainerFunc),\n            suppressChartRanges,\n            aggFunc,\n            chartThemeOverrides,\n            unlinkChart,\n            crossFiltering,\n            crossFilteringContext: this.crossFilteringContext,\n            chartOptionsToRestore,\n            chartPaletteToRestore,\n            seriesChartTypes,\n            crossFilteringResetCallback: () => this.activeChartComps.forEach(c => c.crossFilteringReset())\n        };\n        const chartComp = new GridChartComp(params);\n        this.context.createBean(chartComp);\n        const chartRef = this.createChartRef(chartComp);\n        if (container) {\n            // if container exists, means developer initiated chart create via API, so place in provided container\n            container.appendChild(chartComp.getGui());\n            // if the chart container was placed outside an element that\n            // has the grid's theme, we manually add the current theme to\n            // make sure all styles for the chartMenu are rendered correctly\n            const theme = this.environment.getTheme();\n            if (theme.el && !theme.el.contains(container)) {\n                container.classList.add(theme.theme);\n            }\n        }\n        else if (createChartContainerFunc) {\n            // otherwise, user created chart via grid UI, check if developer provides containers (e.g. if the application\n            // is using its own dialogs rather than the grid provided dialogs)\n            createChartContainerFunc(chartRef);\n        }\n        else {\n            // add listener to remove from active charts list when charts are destroyed, e.g. closing chart dialog\n            chartComp.addEventListener(GridChartComp.EVENT_DESTROYED, () => {\n                this.activeChartComps.delete(chartComp);\n                this.activeCharts.delete(chartRef);\n            });\n        }\n        return chartRef;\n    }\n    createChartRef(chartComp) {\n        const chartRef = {\n            destroyChart: () => {\n                if (this.activeCharts.has(chartRef)) {\n                    this.context.destroyBean(chartComp);\n                    this.activeChartComps.delete(chartComp);\n                    this.activeCharts.delete(chartRef);\n                }\n            },\n            chartElement: chartComp.getGui(),\n            chart: chartComp.getUnderlyingChart(),\n            chartId: chartComp.getChartModel().chartId\n        };\n        this.activeCharts.add(chartRef);\n        this.activeChartComps.add(chartComp);\n        return chartRef;\n    }\n    getSelectedRange() {\n        const ranges = this.rangeService.getCellRanges();\n        return ranges.length > 0 ? ranges[0] : {};\n    }\n    generateId() {\n        return `id-${Math.random().toString(36).substring(2, 18)}`;\n    }\n    destroyAllActiveCharts() {\n        this.activeCharts.forEach(chart => chart.destroyChart());\n    }\n};\nChartService.CHARTS_VERSION = VERSION$b;\n__decorate$M([\n    (0,ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.Optional)('rangeService')\n], ChartService.prototype, \"rangeService\", void 0);\n__decorate$M([\n    (0,ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.Autowired)('columnModel')\n], ChartService.prototype, \"columnModel\", void 0);\n__decorate$M([\n    ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.PreDestroy\n], ChartService.prototype, \"destroyAllActiveCharts\", null);\nChartService = __decorate$M([\n    (0,ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.Bean)('chartService')\n], ChartService);\n\nvar __decorate$L = ( false) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nvar ChartTranslationService_1;\nlet ChartTranslationService = ChartTranslationService_1 = class ChartTranslationService extends ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.BeanStub {\n    translate(toTranslate, defaultText) {\n        const translate = this.localeService.getLocaleTextFunc();\n        const defaultTranslation = ChartTranslationService_1.DEFAULT_TRANSLATIONS[toTranslate] || defaultText;\n        return translate(toTranslate, defaultTranslation);\n    }\n};\nChartTranslationService.DEFAULT_TRANSLATIONS = {\n    pivotChartTitle: 'Pivot Chart',\n    rangeChartTitle: 'Range Chart',\n    settings: 'Settings',\n    data: 'Data',\n    format: 'Format',\n    categories: 'Categories',\n    defaultCategory: '(None)',\n    series: 'Series',\n    xyValues: 'X Y Values',\n    paired: 'Paired Mode',\n    axis: 'Axis',\n    navigator: 'Navigator',\n    color: 'Color',\n    thickness: 'Thickness',\n    xType: 'X Type',\n    automatic: 'Automatic',\n    category: 'Category',\n    number: 'Number',\n    time: 'Time',\n    autoRotate: 'Auto Rotate',\n    xRotation: 'X Rotation',\n    yRotation: 'Y Rotation',\n    ticks: 'Ticks',\n    width: 'Width',\n    height: 'Height',\n    length: 'Length',\n    padding: 'Padding',\n    spacing: 'Spacing',\n    chart: 'Chart',\n    title: 'Title',\n    titlePlaceholder: 'Chart title - double click to edit',\n    background: 'Background',\n    font: 'Font',\n    top: 'Top',\n    right: 'Right',\n    bottom: 'Bottom',\n    left: 'Left',\n    labels: 'Labels',\n    calloutLabels: 'Callout Labels',\n    sectorLabels: 'Sector Labels',\n    positionRatio: 'Position Ratio',\n    size: 'Size',\n    shape: 'Shape',\n    minSize: 'Minimum Size',\n    maxSize: 'Maximum Size',\n    legend: 'Legend',\n    position: 'Position',\n    markerSize: 'Marker Size',\n    markerStroke: 'Marker Stroke',\n    markerPadding: 'Marker Padding',\n    itemSpacing: 'Item Spacing',\n    itemPaddingX: 'Item Padding X',\n    itemPaddingY: 'Item Padding Y',\n    layoutHorizontalSpacing: 'Horizontal Spacing',\n    layoutVerticalSpacing: 'Vertical Spacing',\n    strokeWidth: 'Stroke Width',\n    offset: 'Offset',\n    offsets: 'Offsets',\n    tooltips: 'Tooltips',\n    callout: 'Callout',\n    markers: 'Markers',\n    shadow: 'Shadow',\n    blur: 'Blur',\n    xOffset: 'X Offset',\n    yOffset: 'Y Offset',\n    lineWidth: 'Line Width',\n    lineDash: 'Line Dash',\n    normal: 'Normal',\n    bold: 'Bold',\n    italic: 'Italic',\n    boldItalic: 'Bold Italic',\n    predefined: 'Predefined',\n    fillOpacity: 'Fill Opacity',\n    strokeOpacity: 'Line Opacity',\n    histogramBinCount: 'Bin count',\n    columnGroup: 'Column',\n    barGroup: 'Bar',\n    pieGroup: 'Pie',\n    lineGroup: 'Line',\n    scatterGroup: 'X Y (Scatter)',\n    areaGroup: 'Area',\n    histogramGroup: 'Histogram',\n    combinationGroup: 'Combination',\n    groupedColumnTooltip: 'Grouped',\n    stackedColumnTooltip: 'Stacked',\n    normalizedColumnTooltip: '100% Stacked',\n    groupedBarTooltip: 'Grouped',\n    stackedBarTooltip: 'Stacked',\n    normalizedBarTooltip: '100% Stacked',\n    pieTooltip: 'Pie',\n    doughnutTooltip: 'Doughnut',\n    lineTooltip: 'Line',\n    groupedAreaTooltip: 'Area',\n    stackedAreaTooltip: 'Stacked',\n    normalizedAreaTooltip: '100% Stacked',\n    scatterTooltip: 'Scatter',\n    bubbleTooltip: 'Bubble',\n    histogramTooltip: 'Histogram',\n    columnLineComboTooltip: 'Column & Line',\n    areaColumnComboTooltip: 'Area & Column',\n    customComboTooltip: 'Custom Combination',\n    noDataToChart: 'No data available to be charted.',\n    pivotChartRequiresPivotMode: 'Pivot Chart requires Pivot Mode enabled.',\n    chartSettingsToolbarTooltip: 'Menu',\n    chartLinkToolbarTooltip: 'Linked to Grid',\n    chartUnlinkToolbarTooltip: 'Unlinked from Grid',\n    chartDownloadToolbarTooltip: 'Download Chart',\n    histogramFrequency: \"Frequency\",\n    seriesChartType: 'Series Chart Type',\n    seriesType: 'Series Type',\n    secondaryAxis: 'Secondary Axis',\n};\nChartTranslationService = ChartTranslationService_1 = __decorate$L([\n    (0,ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.Bean)(\"chartTranslationService\")\n], ChartTranslationService);\n\nvar __decorate$K = ( false) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nvar ChartCrossFilterService_1;\nlet ChartCrossFilterService = ChartCrossFilterService_1 = class ChartCrossFilterService extends ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.BeanStub {\n    filter(event, reset = false) {\n        const filterModel = this.gridApi.getFilterModel();\n        // filters should be reset when user clicks on canvas background\n        if (reset) {\n            this.resetFilters(filterModel);\n            return;\n        }\n        let colId = ChartCrossFilterService_1.extractFilterColId(event);\n        if (this.isValidColumnFilter(colId)) {\n            // update filters based on current chart selections\n            this.updateFilters(filterModel, event, colId);\n        }\n        else {\n            console.warn(\"AG Grid: cross filtering requires a 'agSetColumnFilter' or 'agMultiColumnFilter' \" +\n                \"to be defined on the column with id: '\" + colId + \"'\");\n        }\n    }\n    resetFilters(filterModel) {\n        const filtersExist = Object.keys(filterModel).length > 0;\n        if (filtersExist) {\n            // only reset filters / charts when necessary to prevent undesirable flickering effect\n            this.gridApi.setFilterModel(null);\n            this.gridApi.onFilterChanged();\n        }\n    }\n    updateFilters(filterModel, event, colId) {\n        let dataKey = ChartCrossFilterService_1.extractFilterColId(event);\n        let rawValue = event.datum[dataKey];\n        if (rawValue === undefined) {\n            return;\n        }\n        let selectedValue = rawValue.toString();\n        if (event.event.metaKey || event.event.ctrlKey) {\n            const existingGridValues = this.getCurrentGridValuesForCategory(colId);\n            const valueAlreadyExists = ag_grid_community__WEBPACK_IMPORTED_MODULE_0__._.includes(existingGridValues, selectedValue);\n            let updatedValues;\n            if (valueAlreadyExists) {\n                updatedValues = existingGridValues.filter((v) => v !== selectedValue);\n            }\n            else {\n                updatedValues = existingGridValues;\n                updatedValues.push(selectedValue);\n            }\n            filterModel[colId] = this.getUpdatedFilterModel(colId, updatedValues);\n        }\n        else {\n            const updatedValues = [selectedValue];\n            filterModel = { [colId]: this.getUpdatedFilterModel(colId, updatedValues) };\n        }\n        this.gridApi.setFilterModel(filterModel);\n    }\n    getUpdatedFilterModel(colId, updatedValues) {\n        let columnFilterType = this.getColumnFilterType(colId);\n        if (columnFilterType === 'agMultiColumnFilter') {\n            return { filterType: 'multi', filterModels: [null, { filterType: 'set', values: updatedValues }] };\n        }\n        return { filterType: 'set', values: updatedValues };\n    }\n    getCurrentGridValuesForCategory(colId) {\n        let filteredValues = [];\n        const column = this.getColumnById(colId);\n        this.gridApi.forEachNodeAfterFilter((rowNode) => {\n            if (column && !rowNode.group) {\n                const value = this.valueService.getValue(column, rowNode) + '';\n                if (!filteredValues.includes(value)) {\n                    filteredValues.push(value);\n                }\n            }\n        });\n        return filteredValues;\n    }\n    static extractFilterColId(event) {\n        return event.xKey || event.calloutLabelKey;\n    }\n    isValidColumnFilter(colId) {\n        if (colId.indexOf('-filtered-out')) {\n            colId = colId.replace('-filtered-out', '');\n        }\n        let filterType = this.getColumnFilterType(colId);\n        if (typeof filterType === 'boolean') {\n            return filterType;\n        }\n        return ag_grid_community__WEBPACK_IMPORTED_MODULE_0__._.includes(['agSetColumnFilter', 'agMultiColumnFilter'], filterType);\n    }\n    getColumnFilterType(colId) {\n        let gridColumn = this.getColumnById(colId);\n        if (gridColumn) {\n            const colDef = gridColumn.getColDef();\n            return colDef.filter;\n        }\n    }\n    getColumnById(colId) {\n        return this.columnModel.getGridColumn(colId);\n    }\n};\n__decorate$K([\n    (0,ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.Autowired)('gridApi')\n], ChartCrossFilterService.prototype, \"gridApi\", void 0);\n__decorate$K([\n    (0,ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.Autowired)('columnModel')\n], ChartCrossFilterService.prototype, \"columnModel\", void 0);\n__decorate$K([\n    (0,ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.Autowired)('valueService')\n], ChartCrossFilterService.prototype, \"valueService\", void 0);\nChartCrossFilterService = ChartCrossFilterService_1 = __decorate$K([\n    (0,ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.Bean)(\"chartCrossFilterService\")\n], ChartCrossFilterService);\n\nvar __decorate$J = ( false) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nlet RangeService = class RangeService extends ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.BeanStub {\n    constructor() {\n        super(...arguments);\n        this.cellRanges = [];\n        this.bodyScrollListener = this.onBodyScroll.bind(this);\n        this.dragging = false;\n        this.intersectionRange = false; // When dragging ends, the current range will be used to intersect all other ranges\n    }\n    init() {\n        this.addManagedListener(this.eventService, ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.Events.EVENT_NEW_COLUMNS_LOADED, () => this.onColumnsChanged());\n        this.addManagedListener(this.eventService, ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.Events.EVENT_COLUMN_VISIBLE, this.onColumnsChanged.bind(this));\n        this.addManagedListener(this.eventService, ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.Events.EVENT_COLUMN_VALUE_CHANGED, this.onColumnsChanged.bind(this));\n        this.addManagedListener(this.eventService, ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.Events.EVENT_COLUMN_PIVOT_MODE_CHANGED, () => this.removeAllCellRanges());\n        this.addManagedListener(this.eventService, ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.Events.EVENT_COLUMN_ROW_GROUP_CHANGED, () => this.removeAllCellRanges());\n        this.addManagedListener(this.eventService, ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.Events.EVENT_COLUMN_PIVOT_CHANGED, () => this.removeAllCellRanges());\n        this.addManagedListener(this.eventService, ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.Events.EVENT_COLUMN_GROUP_OPENED, this.refreshLastRangeStart.bind(this));\n        this.addManagedListener(this.eventService, ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.Events.EVENT_COLUMN_MOVED, this.refreshLastRangeStart.bind(this));\n        this.addManagedListener(this.eventService, ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.Events.EVENT_COLUMN_PINNED, this.refreshLastRangeStart.bind(this));\n        this.ctrlsService.whenReady(() => {\n            const gridBodyCtrl = this.ctrlsService.getGridBodyCtrl();\n            this.autoScrollService = new ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.AutoScrollService({\n                scrollContainer: gridBodyCtrl.getBodyViewportElement(),\n                scrollAxis: 'xy',\n                getVerticalPosition: () => gridBodyCtrl.getScrollFeature().getVScrollPosition().top,\n                setVerticalPosition: (position) => gridBodyCtrl.getScrollFeature().setVerticalScrollPosition(position),\n                getHorizontalPosition: () => gridBodyCtrl.getScrollFeature().getHScrollPosition().left,\n                setHorizontalPosition: (position) => gridBodyCtrl.getScrollFeature().setHorizontalScrollPosition(position),\n                shouldSkipVerticalScroll: () => !this.gridOptionsService.isDomLayout('normal'),\n                shouldSkipHorizontalScroll: () => !gridBodyCtrl.getScrollFeature().isHorizontalScrollShowing()\n            });\n        });\n    }\n    // Called for both columns loaded & column visibility events\n    onColumnsChanged() {\n        // first move start column in last cell range (i.e. series chart range)\n        this.refreshLastRangeStart();\n        const allColumns = this.columnModel.getAllDisplayedColumns();\n        // check that the columns in each range still exist and are visible\n        this.cellRanges.forEach(cellRange => {\n            const beforeCols = cellRange.columns;\n            // remove hidden or removed cols from cell range\n            cellRange.columns = cellRange.columns.filter(col => col.isVisible() && allColumns.indexOf(col) !== -1);\n            const colsInRangeChanged = !ag_grid_community__WEBPACK_IMPORTED_MODULE_0__._.areEqual(beforeCols, cellRange.columns);\n            if (colsInRangeChanged) {\n                // notify users and other parts of grid (i.e. status panel) that range has changed\n                this.dispatchChangedEvent(false, true, cellRange.id);\n            }\n        });\n        // Remove empty cell ranges\n        const countBefore = this.cellRanges.length;\n        this.cellRanges = this.cellRanges.filter((range) => range.columns.length > 0);\n        if (countBefore > this.cellRanges.length) {\n            this.dispatchChangedEvent(false, true);\n        }\n    }\n    refreshLastRangeStart() {\n        const lastRange = ag_grid_community__WEBPACK_IMPORTED_MODULE_0__._.last(this.cellRanges);\n        if (!lastRange) {\n            return;\n        }\n        this.refreshRangeStart(lastRange);\n    }\n    isContiguousRange(cellRange) {\n        const rangeColumns = cellRange.columns;\n        if (!rangeColumns.length) {\n            return false;\n        }\n        const allColumns = this.columnModel.getAllDisplayedColumns();\n        const allPositions = rangeColumns.map(c => allColumns.indexOf(c)).sort((a, b) => a - b);\n        return ag_grid_community__WEBPACK_IMPORTED_MODULE_0__._.last(allPositions) - allPositions[0] + 1 === rangeColumns.length;\n    }\n    getRangeStartRow(cellRange) {\n        if (cellRange.startRow && cellRange.endRow) {\n            return this.rowPositionUtils.before(cellRange.startRow, cellRange.endRow) ?\n                cellRange.startRow : cellRange.endRow;\n        }\n        const rowPinned = this.pinnedRowModel.getPinnedTopRowCount() > 0 ? 'top' : null;\n        return { rowIndex: 0, rowPinned };\n    }\n    getRangeEndRow(cellRange) {\n        if (cellRange.startRow && cellRange.endRow) {\n            return this.rowPositionUtils.before(cellRange.startRow, cellRange.endRow) ?\n                cellRange.endRow : cellRange.startRow;\n        }\n        const pinnedBottomRowCount = this.pinnedRowModel.getPinnedBottomRowCount();\n        const pinnedBottom = pinnedBottomRowCount > 0;\n        if (pinnedBottom) {\n            return {\n                rowIndex: pinnedBottomRowCount - 1,\n                rowPinned: 'bottom'\n            };\n        }\n        return {\n            rowIndex: this.rowModel.getRowCount() - 1,\n            rowPinned: null\n        };\n    }\n    setRangeToCell(cell, appendRange = false) {\n        if (!this.gridOptionsService.isEnableRangeSelection()) {\n            return;\n        }\n        const columns = this.calculateColumnsBetween(cell.column, cell.column);\n        if (!columns) {\n            return;\n        }\n        const suppressMultiRangeSelections = this.gridOptionsService.is('suppressMultiRangeSelection');\n        // if not appending, then clear previous range selections\n        if (suppressMultiRangeSelections || !appendRange || ag_grid_community__WEBPACK_IMPORTED_MODULE_0__._.missing(this.cellRanges)) {\n            this.removeAllCellRanges(true);\n        }\n        const rowForCell = {\n            rowIndex: cell.rowIndex,\n            rowPinned: cell.rowPinned\n        };\n        const cellRange = {\n            startRow: rowForCell,\n            endRow: rowForCell,\n            columns,\n            startColumn: cell.column\n        };\n        this.cellRanges.push(cellRange);\n        this.setNewestRangeStartCell(cell);\n        this.onDragStop();\n        this.dispatchChangedEvent(true, true);\n    }\n    extendLatestRangeToCell(cellPosition) {\n        if (this.isEmpty() || !this.newestRangeStartCell) {\n            return;\n        }\n        const cellRange = ag_grid_community__WEBPACK_IMPORTED_MODULE_0__._.last(this.cellRanges);\n        this.updateRangeEnd(cellRange, cellPosition);\n    }\n    updateRangeEnd(cellRange, cellPosition, silent = false) {\n        const endColumn = cellPosition.column;\n        const colsToAdd = this.calculateColumnsBetween(cellRange.startColumn, endColumn);\n        if (!colsToAdd || this.isLastCellOfRange(cellRange, cellPosition)) {\n            return;\n        }\n        cellRange.columns = colsToAdd;\n        cellRange.endRow = { rowIndex: cellPosition.rowIndex, rowPinned: cellPosition.rowPinned };\n        if (!silent) {\n            this.dispatchChangedEvent(true, true, cellRange.id);\n        }\n    }\n    refreshRangeStart(cellRange) {\n        const { startColumn, columns } = cellRange;\n        const moveColInCellRange = (colToMove, moveToFront) => {\n            const otherCols = cellRange.columns.filter(col => col !== colToMove);\n            if (colToMove) {\n                cellRange.startColumn = colToMove;\n                cellRange.columns = moveToFront ? [colToMove, ...otherCols] : [...otherCols, colToMove];\n            }\n            else {\n                cellRange.columns = otherCols;\n            }\n        };\n        const { left, right } = this.getRangeEdgeColumns(cellRange);\n        const shouldMoveLeftCol = startColumn === columns[0] && startColumn !== left;\n        if (shouldMoveLeftCol) {\n            moveColInCellRange(left, true);\n            return;\n        }\n        const shouldMoveRightCol = startColumn === ag_grid_community__WEBPACK_IMPORTED_MODULE_0__._.last(columns) && startColumn === right;\n        if (shouldMoveRightCol) {\n            moveColInCellRange(right, false);\n            return;\n        }\n    }\n    getRangeEdgeColumns(cellRange) {\n        const allColumns = this.columnModel.getAllDisplayedColumns();\n        const allIndices = cellRange.columns\n            .map(c => allColumns.indexOf(c))\n            .filter(i => i > -1)\n            .sort((a, b) => a - b);\n        return {\n            left: allColumns[allIndices[0]],\n            right: allColumns[ag_grid_community__WEBPACK_IMPORTED_MODULE_0__._.last(allIndices)]\n        };\n    }\n    // returns true if successful, false if not successful\n    extendLatestRangeInDirection(event) {\n        if (this.isEmpty() || !this.newestRangeStartCell) {\n            return;\n        }\n        const key = event.key;\n        const ctrlKey = event.ctrlKey || event.metaKey;\n        const lastRange = ag_grid_community__WEBPACK_IMPORTED_MODULE_0__._.last(this.cellRanges);\n        const startCell = this.newestRangeStartCell;\n        const firstCol = lastRange.columns[0];\n        const lastCol = ag_grid_community__WEBPACK_IMPORTED_MODULE_0__._.last(lastRange.columns);\n        // find the cell that is at the furthest away corner from the starting cell\n        const endCellIndex = lastRange.endRow.rowIndex;\n        const endCellFloating = lastRange.endRow.rowPinned;\n        const endCellColumn = startCell.column === firstCol ? lastCol : firstCol;\n        const endCell = { column: endCellColumn, rowIndex: endCellIndex, rowPinned: endCellFloating };\n        const newEndCell = this.cellNavigationService.getNextCellToFocus(key, endCell, ctrlKey);\n        // if user is at end of grid, so no cell to extend to, we return false\n        if (!newEndCell) {\n            return;\n        }\n        this.setCellRange({\n            rowStartIndex: startCell.rowIndex,\n            rowStartPinned: startCell.rowPinned,\n            rowEndIndex: newEndCell.rowIndex,\n            rowEndPinned: newEndCell.rowPinned,\n            columnStart: startCell.column,\n            columnEnd: newEndCell.column\n        });\n        return newEndCell;\n    }\n    setCellRange(params) {\n        if (!this.gridOptionsService.isEnableRangeSelection()) {\n            return;\n        }\n        this.removeAllCellRanges(true);\n        this.addCellRange(params);\n    }\n    setCellRanges(cellRanges) {\n        if (ag_grid_community__WEBPACK_IMPORTED_MODULE_0__._.shallowCompare(this.cellRanges, cellRanges)) {\n            return;\n        }\n        this.removeAllCellRanges(true);\n        cellRanges.forEach(newRange => {\n            if (newRange.columns && newRange.startRow) {\n                this.setNewestRangeStartCell({\n                    rowIndex: newRange.startRow.rowIndex,\n                    rowPinned: newRange.startRow.rowPinned,\n                    column: newRange.columns[0]\n                });\n            }\n            this.cellRanges.push(newRange);\n        });\n        this.dispatchChangedEvent(false, true);\n    }\n    setNewestRangeStartCell(position) {\n        this.newestRangeStartCell = position;\n    }\n    clearCellRangeCellValues(params) {\n        let { cellRanges } = params;\n        const { cellEventSource = 'rangeService', dispatchWrapperEvents, wrapperEventSource = 'deleteKey' } = params;\n        if (dispatchWrapperEvents) {\n            const startEvent = {\n                type: ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.Events.EVENT_RANGE_DELETE_START,\n                source: wrapperEventSource\n            };\n            this.eventService.dispatchEvent(startEvent);\n        }\n        if (!cellRanges) {\n            cellRanges = this.cellRanges;\n        }\n        cellRanges.forEach(cellRange => {\n            this.forEachRowInRange(cellRange, rowPosition => {\n                const rowNode = this.rowPositionUtils.getRowNode(rowPosition);\n                if (!rowNode) {\n                    return;\n                }\n                for (let i = 0; i < cellRange.columns.length; i++) {\n                    const column = this.columnModel.getGridColumn(cellRange.columns[i]);\n                    if (!column || !column.isCellEditable(rowNode)) {\n                        return;\n                    }\n                    rowNode.setDataValue(column, null, cellEventSource);\n                }\n            });\n        });\n        if (dispatchWrapperEvents) {\n            const endEvent = {\n                type: ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.Events.EVENT_RANGE_DELETE_END,\n                source: wrapperEventSource\n            };\n            this.eventService.dispatchEvent(endEvent);\n        }\n    }\n    createCellRangeFromCellRangeParams(params) {\n        let columns;\n        let startsOnTheRight = false;\n        if (params.columns) {\n            columns = params.columns.map(c => this.columnModel.getColumnWithValidation(c)).filter(c => c);\n        }\n        else {\n            const columnStart = this.columnModel.getColumnWithValidation(params.columnStart);\n            const columnEnd = this.columnModel.getColumnWithValidation(params.columnEnd);\n            if (!columnStart || !columnEnd) {\n                return;\n            }\n            columns = this.calculateColumnsBetween(columnStart, columnEnd);\n            if (columns && columns.length) {\n                startsOnTheRight = columns[0] !== columnStart;\n            }\n        }\n        if (!columns) {\n            return;\n        }\n        const startRow = params.rowStartIndex != null ? {\n            rowIndex: params.rowStartIndex,\n            rowPinned: params.rowStartPinned || null\n        } : undefined;\n        const endRow = params.rowEndIndex != null ? {\n            rowIndex: params.rowEndIndex,\n            rowPinned: params.rowEndPinned || null\n        } : undefined;\n        return {\n            startRow,\n            endRow,\n            columns,\n            startColumn: startsOnTheRight ? ag_grid_community__WEBPACK_IMPORTED_MODULE_0__._.last(columns) : columns[0]\n        };\n    }\n    addCellRange(params) {\n        if (!this.gridOptionsService.isEnableRangeSelection()) {\n            return;\n        }\n        const newRange = this.createCellRangeFromCellRangeParams(params);\n        if (newRange) {\n            if (newRange.startRow) {\n                this.setNewestRangeStartCell({\n                    rowIndex: newRange.startRow.rowIndex,\n                    rowPinned: newRange.startRow.rowPinned,\n                    column: newRange.startColumn\n                });\n            }\n            this.cellRanges.push(newRange);\n            this.dispatchChangedEvent(false, true, newRange.id);\n        }\n    }\n    getCellRanges() {\n        return this.cellRanges;\n    }\n    isEmpty() {\n        return this.cellRanges.length === 0;\n    }\n    isMoreThanOneCell() {\n        const len = this.cellRanges.length;\n        if (len === 0) {\n            return false;\n        }\n        if (len > 1) {\n            return true; // Assumes a cell range must contain at least one cell\n        }\n        // only one range, return true if range has more than one\n        const range = this.cellRanges[0];\n        const startRow = this.getRangeStartRow(range);\n        const endRow = this.getRangeEndRow(range);\n        return startRow.rowPinned !== endRow.rowPinned ||\n            startRow.rowIndex !== endRow.rowIndex ||\n            range.columns.length !== 1;\n    }\n    areAllRangesAbleToMerge() {\n        const rowToColumnMap = new Map();\n        const len = this.cellRanges.length;\n        if (len <= 1)\n            return true;\n        this.cellRanges.forEach(range => {\n            this.forEachRowInRange(range, row => {\n                const rowName = `${row.rowPinned || 'normal'}_${row.rowIndex}`;\n                const columns = rowToColumnMap.get(rowName);\n                const currentRangeColIds = range.columns.map(col => col.getId());\n                if (columns) {\n                    const filteredColumns = currentRangeColIds.filter(col => columns.indexOf(col) === -1);\n                    columns.push(...filteredColumns);\n                }\n                else {\n                    rowToColumnMap.set(rowName, currentRangeColIds);\n                }\n            });\n        });\n        let columnsString;\n        for (const val of rowToColumnMap.values()) {\n            const currentValString = val.sort().join();\n            if (columnsString === undefined) {\n                columnsString = currentValString;\n                continue;\n            }\n            if (columnsString !== currentValString) {\n                return false;\n            }\n        }\n        return true;\n    }\n    forEachRowInRange(cellRange, callback) {\n        const topRow = this.getRangeStartRow(cellRange);\n        const bottomRow = this.getRangeEndRow(cellRange);\n        let currentRow = topRow;\n        while (currentRow) {\n            callback(currentRow);\n            if (this.rowPositionUtils.sameRow(currentRow, bottomRow)) {\n                break;\n            }\n            currentRow = this.cellNavigationService.getRowBelow(currentRow);\n        }\n    }\n    removeAllCellRanges(silent) {\n        if (this.isEmpty()) {\n            return;\n        }\n        this.onDragStop();\n        this.cellRanges.length = 0;\n        if (!silent) {\n            this.dispatchChangedEvent(false, true);\n        }\n    }\n    // as the user is dragging outside of the panel, the div starts to scroll, which in turn\n    // means we are selection more (or less) cells, but the mouse isn't moving, so we recalculate\n    // the selection my mimicking a new mouse event\n    onBodyScroll() {\n        if (this.dragging && this.lastMouseEvent) {\n            this.onDragging(this.lastMouseEvent);\n        }\n    }\n    isCellInAnyRange(cell) {\n        return this.getCellRangeCount(cell) > 0;\n    }\n    isCellInSpecificRange(cell, range) {\n        const columnInRange = range.columns !== null && ag_grid_community__WEBPACK_IMPORTED_MODULE_0__._.includes(range.columns, cell.column);\n        const rowInRange = this.isRowInRange(cell.rowIndex, cell.rowPinned, range);\n        return columnInRange && rowInRange;\n    }\n    isLastCellOfRange(cellRange, cell) {\n        const { startRow, endRow } = cellRange;\n        const lastRow = this.rowPositionUtils.before(startRow, endRow) ? endRow : startRow;\n        const isLastRow = cell.rowIndex === lastRow.rowIndex && cell.rowPinned === lastRow.rowPinned;\n        const rangeFirstIndexColumn = cellRange.columns[0];\n        const rangeLastIndexColumn = ag_grid_community__WEBPACK_IMPORTED_MODULE_0__._.last(cellRange.columns);\n        const lastRangeColumn = cellRange.startColumn === rangeFirstIndexColumn ? rangeLastIndexColumn : rangeFirstIndexColumn;\n        const isLastColumn = cell.column === lastRangeColumn;\n        return isLastColumn && isLastRow;\n    }\n    isBottomRightCell(cellRange, cell) {\n        const allColumns = this.columnModel.getAllDisplayedColumns();\n        const allPositions = cellRange.columns.map(c => allColumns.indexOf(c)).sort((a, b) => a - b);\n        const { startRow, endRow } = cellRange;\n        const lastRow = this.rowPositionUtils.before(startRow, endRow) ? endRow : startRow;\n        const isRightColumn = allColumns.indexOf(cell.column) === ag_grid_community__WEBPACK_IMPORTED_MODULE_0__._.last(allPositions);\n        const isLastRow = cell.rowIndex === lastRow.rowIndex && ag_grid_community__WEBPACK_IMPORTED_MODULE_0__._.makeNull(cell.rowPinned) === ag_grid_community__WEBPACK_IMPORTED_MODULE_0__._.makeNull(lastRow.rowPinned);\n        return isRightColumn && isLastRow;\n    }\n    // returns the number of ranges this cell is in\n    getCellRangeCount(cell) {\n        if (this.isEmpty()) {\n            return 0;\n        }\n        return this.cellRanges.filter(cellRange => this.isCellInSpecificRange(cell, cellRange)).length;\n    }\n    isRowInRange(rowIndex, floating, cellRange) {\n        const firstRow = this.getRangeStartRow(cellRange);\n        const lastRow = this.getRangeEndRow(cellRange);\n        const thisRow = { rowIndex, rowPinned: floating || null };\n        // compare rowPinned with == instead of === because it can be `null` or `undefined`\n        const equalsFirstRow = thisRow.rowIndex === firstRow.rowIndex && thisRow.rowPinned == firstRow.rowPinned;\n        const equalsLastRow = thisRow.rowIndex === lastRow.rowIndex && thisRow.rowPinned == lastRow.rowPinned;\n        if (equalsFirstRow || equalsLastRow) {\n            return true;\n        }\n        const afterFirstRow = !this.rowPositionUtils.before(thisRow, firstRow);\n        const beforeLastRow = this.rowPositionUtils.before(thisRow, lastRow);\n        return afterFirstRow && beforeLastRow;\n    }\n    getDraggingRange() {\n        return this.draggingRange;\n    }\n    onDragStart(mouseEvent) {\n        if (!this.gridOptionsService.isEnableRangeSelection()) {\n            return;\n        }\n        const { ctrlKey, metaKey, shiftKey } = mouseEvent;\n        // ctrlKey for windows, metaKey for Apple\n        const isMultiKey = ctrlKey || metaKey;\n        const allowMulti = !this.gridOptionsService.is('suppressMultiRangeSelection');\n        const isMultiSelect = allowMulti ? isMultiKey : false;\n        const extendRange = shiftKey && ag_grid_community__WEBPACK_IMPORTED_MODULE_0__._.existsAndNotEmpty(this.cellRanges);\n        if (!isMultiSelect && (!extendRange || ag_grid_community__WEBPACK_IMPORTED_MODULE_0__._.exists(ag_grid_community__WEBPACK_IMPORTED_MODULE_0__._.last(this.cellRanges).type))) {\n            this.removeAllCellRanges(true);\n        }\n        // The browser changes the Event target of cached events when working with the ShadowDOM\n        // so we need to retrieve the initial DragStartTarget.\n        const startTarget = this.dragService.getStartTarget();\n        if (startTarget) {\n            this.updateValuesOnMove(startTarget);\n        }\n        if (!this.lastCellHovered) {\n            return;\n        }\n        this.dragging = true;\n        this.lastMouseEvent = mouseEvent;\n        this.intersectionRange = isMultiSelect && this.getCellRangeCount(this.lastCellHovered) > 1;\n        if (!extendRange) {\n            this.setNewestRangeStartCell(this.lastCellHovered);\n        }\n        // if we didn't clear the ranges, then dragging means the user clicked, and when the\n        // user clicks it means a range of one cell was created. we need to extend this range\n        // rather than creating another range. otherwise we end up with two distinct ranges\n        // from a drag operation (one from click, and one from drag).\n        if (this.cellRanges.length > 0) {\n            this.draggingRange = ag_grid_community__WEBPACK_IMPORTED_MODULE_0__._.last(this.cellRanges);\n        }\n        else {\n            const mouseRowPosition = {\n                rowIndex: this.lastCellHovered.rowIndex,\n                rowPinned: this.lastCellHovered.rowPinned\n            };\n            this.draggingRange = {\n                startRow: mouseRowPosition,\n                endRow: mouseRowPosition,\n                columns: [this.lastCellHovered.column],\n                startColumn: this.newestRangeStartCell.column\n            };\n            this.cellRanges.push(this.draggingRange);\n        }\n        this.ctrlsService.getGridBodyCtrl().addScrollEventListener(this.bodyScrollListener);\n        this.dispatchChangedEvent(true, false, this.draggingRange.id);\n    }\n    intersectLastRange(fromMouseClick) {\n        // when ranges are created due to a mouse click without drag (happens in cellMouseListener)\n        // this method will be called with `fromMouseClick=true`.\n        if (fromMouseClick && this.dragging) {\n            return;\n        }\n        if (this.gridOptionsService.is('suppressMultiRangeSelection')) {\n            return;\n        }\n        if (this.isEmpty()) {\n            return;\n        }\n        const lastRange = ag_grid_community__WEBPACK_IMPORTED_MODULE_0__._.last(this.cellRanges);\n        const intersectionStartRow = this.getRangeStartRow(lastRange);\n        const intersectionEndRow = this.getRangeEndRow(lastRange);\n        const newRanges = [];\n        this.cellRanges.slice(0, -1).forEach((range) => {\n            const startRow = this.getRangeStartRow(range);\n            const endRow = this.getRangeEndRow(range);\n            const cols = range.columns;\n            const intersectCols = cols.filter((col) => lastRange.columns.indexOf(col) === -1);\n            if (intersectCols.length === cols.length) {\n                // No overlapping columns, retain previous range\n                newRanges.push(range);\n                return;\n            }\n            if (this.rowPositionUtils.before(intersectionEndRow, startRow) || this.rowPositionUtils.before(endRow, intersectionStartRow)) {\n                // No overlapping rows, retain previous range\n                newRanges.push(range);\n                return;\n            }\n            const rangeCountBefore = newRanges.length;\n            // Top\n            if (this.rowPositionUtils.before(startRow, intersectionStartRow)) {\n                const top = {\n                    columns: [...cols],\n                    startColumn: lastRange.startColumn,\n                    startRow: Object.assign({}, startRow),\n                    endRow: this.cellNavigationService.getRowAbove(intersectionStartRow),\n                };\n                newRanges.push(top);\n            }\n            // Left & Right (not contiguous with columns)\n            if (intersectCols.length > 0) {\n                const middle = {\n                    columns: intersectCols,\n                    startColumn: ag_grid_community__WEBPACK_IMPORTED_MODULE_0__._.includes(intersectCols, lastRange.startColumn) ? lastRange.startColumn : intersectCols[0],\n                    startRow: this.rowPositionUtils.rowMax([Object.assign({}, intersectionStartRow), Object.assign({}, startRow)]),\n                    endRow: this.rowPositionUtils.rowMin([Object.assign({}, intersectionEndRow), Object.assign({}, endRow)]),\n                };\n                newRanges.push(middle);\n            }\n            // Bottom\n            if (this.rowPositionUtils.before(intersectionEndRow, endRow)) {\n                newRanges.push({\n                    columns: [...cols],\n                    startColumn: lastRange.startColumn,\n                    startRow: this.cellNavigationService.getRowBelow(intersectionEndRow),\n                    endRow: Object.assign({}, endRow),\n                });\n            }\n            if ((newRanges.length - rangeCountBefore) === 1) {\n                // Only one range result from the intersection.\n                // Copy the source range's id, since essentially we just reduced it's size\n                newRanges[newRanges.length - 1].id = range.id;\n            }\n        });\n        this.cellRanges = newRanges;\n        // when this is called because of a clickEvent and the ranges were changed\n        // we need to force a dragEnd event to update the UI.\n        if (fromMouseClick) {\n            this.dispatchChangedEvent(false, true);\n        }\n    }\n    updateValuesOnMove(eventTarget) {\n        const cellCtrl = ag_grid_community__WEBPACK_IMPORTED_MODULE_0__._.getCtrlForEventTarget(this.gridOptionsService, eventTarget, ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.CellCtrl.DOM_DATA_KEY_CELL_CTRL);\n        const cell = cellCtrl === null || cellCtrl === void 0 ? void 0 : cellCtrl.getCellPosition();\n        this.cellHasChanged = false;\n        if (!cell || (this.lastCellHovered && this.cellPositionUtils.equals(cell, this.lastCellHovered))) {\n            return;\n        }\n        if (this.lastCellHovered) {\n            this.cellHasChanged = true;\n        }\n        this.lastCellHovered = cell;\n    }\n    onDragging(mouseEvent) {\n        if (!this.dragging || !mouseEvent) {\n            return;\n        }\n        this.updateValuesOnMove(mouseEvent.target);\n        this.lastMouseEvent = mouseEvent;\n        const cellPosition = this.lastCellHovered;\n        const isMouseAndStartInPinned = (position) => cellPosition && cellPosition.rowPinned === position && this.newestRangeStartCell.rowPinned === position;\n        const skipVerticalScroll = isMouseAndStartInPinned('top') || isMouseAndStartInPinned('bottom');\n        this.autoScrollService.check(mouseEvent, skipVerticalScroll);\n        if (!this.cellHasChanged) {\n            return;\n        }\n        const columns = this.calculateColumnsBetween(this.newestRangeStartCell.column, cellPosition.column);\n        if (!columns) {\n            return;\n        }\n        this.draggingRange.endRow = {\n            rowIndex: cellPosition.rowIndex,\n            rowPinned: cellPosition.rowPinned\n        };\n        this.draggingRange.columns = columns;\n        this.dispatchChangedEvent(false, false, this.draggingRange.id);\n    }\n    onDragStop() {\n        if (!this.dragging) {\n            return;\n        }\n        const { id } = this.draggingRange;\n        this.autoScrollService.ensureCleared();\n        this.ctrlsService.getGridBodyCtrl().removeScrollEventListener(this.bodyScrollListener);\n        this.lastMouseEvent = null;\n        this.dragging = false;\n        this.draggingRange = undefined;\n        this.lastCellHovered = undefined;\n        if (this.intersectionRange) {\n            this.intersectionRange = false;\n            this.intersectLastRange();\n        }\n        this.dispatchChangedEvent(false, true, id);\n    }\n    dispatchChangedEvent(started, finished, id) {\n        const event = {\n            type: ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.Events.EVENT_RANGE_SELECTION_CHANGED,\n            started,\n            finished,\n            id,\n        };\n        this.eventService.dispatchEvent(event);\n    }\n    calculateColumnsBetween(columnFrom, columnTo) {\n        const allColumns = this.columnModel.getAllDisplayedColumns();\n        const isSameColumn = columnFrom === columnTo;\n        const fromIndex = allColumns.indexOf(columnFrom);\n        if (fromIndex < 0) {\n            console.warn(`AG Grid: column ${columnFrom.getId()} is not visible`);\n            return;\n        }\n        const toIndex = isSameColumn ? fromIndex : allColumns.indexOf(columnTo);\n        if (toIndex < 0) {\n            console.warn(`AG Grid: column ${columnTo.getId()} is not visible`);\n            return;\n        }\n        if (isSameColumn) {\n            return [columnFrom];\n        }\n        const firstIndex = Math.min(fromIndex, toIndex);\n        const lastIndex = firstIndex === fromIndex ? toIndex : fromIndex;\n        const columns = [];\n        for (let i = firstIndex; i <= lastIndex; i++) {\n            columns.push(allColumns[i]);\n        }\n        return columns;\n    }\n};\n__decorate$J([\n    (0,ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.Autowired)('rowModel')\n], RangeService.prototype, \"rowModel\", void 0);\n__decorate$J([\n    (0,ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.Autowired)('dragService')\n], RangeService.prototype, \"dragService\", void 0);\n__decorate$J([\n    (0,ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.Autowired)('columnModel')\n], RangeService.prototype, \"columnModel\", void 0);\n__decorate$J([\n    (0,ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.Autowired)('cellNavigationService')\n], RangeService.prototype, \"cellNavigationService\", void 0);\n__decorate$J([\n    (0,ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.Autowired)(\"pinnedRowModel\")\n], RangeService.prototype, \"pinnedRowModel\", void 0);\n__decorate$J([\n    (0,ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.Autowired)('rowPositionUtils')\n], RangeService.prototype, \"rowPositionUtils\", void 0);\n__decorate$J([\n    (0,ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.Autowired)('cellPositionUtils')\n], RangeService.prototype, \"cellPositionUtils\", void 0);\n__decorate$J([\n    (0,ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.Autowired)('ctrlsService')\n], RangeService.prototype, \"ctrlsService\", void 0);\n__decorate$J([\n    ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.PostConstruct\n], RangeService.prototype, \"init\", null);\nRangeService = __decorate$J([\n    (0,ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.Bean)('rangeService')\n], RangeService);\n\nvar __decorate$I = ( false) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nclass AbstractSelectionHandle extends ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.Component {\n    constructor() {\n        super(...arguments);\n        this.changedCalculatedValues = false;\n        this.dragging = false;\n        this.shouldDestroyOnEndDragging = false;\n    }\n    init() {\n        this.dragService.addDragSource({\n            dragStartPixels: 0,\n            eElement: this.getGui(),\n            onDragStart: this.onDragStart.bind(this),\n            onDragging: (e) => {\n                this.dragging = true;\n                this.rangeService.autoScrollService.check(e);\n                if (this.changedCalculatedValues) {\n                    this.onDrag(e);\n                    this.changedCalculatedValues = false;\n                }\n            },\n            onDragStop: (e) => {\n                this.dragging = false;\n                this.onDragEnd(e);\n                this.clearValues();\n                this.rangeService.autoScrollService.ensureCleared();\n                // TODO: this causes a bug where if there are multiple grids in the same page, all of them will\n                // be affected by a drag on any. Move it to the root element.\n                document.body.classList.remove(this.getDraggingCssClass());\n                if (this.shouldDestroyOnEndDragging) {\n                    this.destroy();\n                }\n            }\n        });\n        this.addManagedListener(this.getGui(), 'mousedown', this.preventRangeExtension.bind(this));\n    }\n    isDragging() {\n        return this.dragging;\n    }\n    getCellCtrl() {\n        return this.cellCtrl;\n    }\n    setCellCtrl(cellComp) {\n        this.cellCtrl = cellComp;\n    }\n    getCellRange() {\n        return this.cellRange;\n    }\n    setCellRange(range) {\n        this.cellRange = range;\n    }\n    getRangeStartRow() {\n        return this.rangeStartRow;\n    }\n    setRangeStartRow(row) {\n        this.rangeStartRow = row;\n    }\n    getRangeEndRow() {\n        return this.rangeEndRow;\n    }\n    setRangeEndRow(row) {\n        this.rangeEndRow = row;\n    }\n    getLastCellHovered() {\n        return this.lastCellHovered;\n    }\n    preventRangeExtension(e) {\n        e.stopPropagation();\n    }\n    onDragStart(e) {\n        this.cellHoverListener = this.addManagedListener(this.ctrlsService.getGridCtrl().getGui(), 'mousemove', this.updateValuesOnMove.bind(this));\n        document.body.classList.add(this.getDraggingCssClass());\n    }\n    getDraggingCssClass() {\n        return `ag-dragging-${this.type === ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.SelectionHandleType.FILL ? 'fill' : 'range'}-handle`;\n    }\n    updateValuesOnMove(e) {\n        const cell = this.mouseEventService.getCellPositionForEvent(e);\n        if (!cell || (this.lastCellHovered && this.cellPositionUtils.equals(cell, this.lastCellHovered))) {\n            return;\n        }\n        this.lastCellHovered = cell;\n        this.changedCalculatedValues = true;\n    }\n    getType() {\n        return this.type;\n    }\n    refresh(cellCtrl) {\n        const oldCellComp = this.getCellCtrl();\n        const eGui = this.getGui();\n        const cellRange = ag_grid_community__WEBPACK_IMPORTED_MODULE_0__._.last(this.rangeService.getCellRanges());\n        const start = cellRange.startRow;\n        const end = cellRange.endRow;\n        if (start && end) {\n            const isBefore = this.rowPositionUtils.before(end, start);\n            if (isBefore) {\n                this.setRangeStartRow(end);\n                this.setRangeEndRow(start);\n            }\n            else {\n                this.setRangeStartRow(start);\n                this.setRangeEndRow(end);\n            }\n        }\n        if (oldCellComp !== cellCtrl || !ag_grid_community__WEBPACK_IMPORTED_MODULE_0__._.isVisible(eGui)) {\n            this.setCellCtrl(cellCtrl);\n            const eParentOfValue = cellCtrl.getComp().getParentOfValue();\n            if (eParentOfValue) {\n                eParentOfValue.appendChild(eGui);\n            }\n        }\n        this.setCellRange(cellRange);\n    }\n    clearValues() {\n        this.lastCellHovered = undefined;\n        this.removeListeners();\n    }\n    removeListeners() {\n        if (this.cellHoverListener) {\n            this.cellHoverListener();\n            this.cellHoverListener = undefined;\n        }\n    }\n    destroy() {\n        if (!this.shouldDestroyOnEndDragging && this.isDragging()) {\n            ag_grid_community__WEBPACK_IMPORTED_MODULE_0__._.setDisplayed(this.getGui(), false);\n            this.shouldDestroyOnEndDragging = true;\n            return;\n        }\n        this.shouldDestroyOnEndDragging = false;\n        super.destroy();\n        this.removeListeners();\n        const eGui = this.getGui();\n        if (eGui.parentElement) {\n            eGui.parentElement.removeChild(eGui);\n        }\n    }\n}\n__decorate$I([\n    (0,ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.Autowired)(\"rowRenderer\")\n], AbstractSelectionHandle.prototype, \"rowRenderer\", void 0);\n__decorate$I([\n    (0,ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.Autowired)(\"dragService\")\n], AbstractSelectionHandle.prototype, \"dragService\", void 0);\n__decorate$I([\n    (0,ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.Autowired)(\"rangeService\")\n], AbstractSelectionHandle.prototype, \"rangeService\", void 0);\n__decorate$I([\n    (0,ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.Autowired)(\"mouseEventService\")\n], AbstractSelectionHandle.prototype, \"mouseEventService\", void 0);\n__decorate$I([\n    (0,ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.Autowired)(\"columnModel\")\n], AbstractSelectionHandle.prototype, \"columnModel\", void 0);\n__decorate$I([\n    (0,ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.Autowired)(\"cellNavigationService\")\n], AbstractSelectionHandle.prototype, \"cellNavigationService\", void 0);\n__decorate$I([\n    (0,ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.Autowired)(\"navigationService\")\n], AbstractSelectionHandle.prototype, \"navigationService\", void 0);\n__decorate$I([\n    (0,ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.Autowired)('rowPositionUtils')\n], AbstractSelectionHandle.prototype, \"rowPositionUtils\", void 0);\n__decorate$I([\n    (0,ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.Autowired)('cellPositionUtils')\n], AbstractSelectionHandle.prototype, \"cellPositionUtils\", void 0);\n__decorate$I([\n    (0,ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.Autowired)('ctrlsService')\n], AbstractSelectionHandle.prototype, \"ctrlsService\", void 0);\n__decorate$I([\n    ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.PostConstruct\n], AbstractSelectionHandle.prototype, \"init\", null);\n\nfunction findLineByLeastSquares(values) {\n    const len = values.length;\n    let maxDecimals = 0;\n    if (len <= 1) {\n        return values;\n    }\n    for (let i = 0; i < values.length; i++) {\n        const value = values[i];\n        const splitExponent = value.toString().split('e-');\n        if (splitExponent.length > 1) {\n            maxDecimals = Math.max(maxDecimals, parseInt(splitExponent[1], 10));\n            continue;\n        }\n        if (Math.floor(value) === value) {\n            continue;\n        }\n        maxDecimals = Math.max(maxDecimals, value.toString().split('.')[1].length);\n    }\n    let sum_x = 0;\n    let sum_y = 0;\n    let sum_xy = 0;\n    let sum_xx = 0;\n    let y = 0;\n    for (let x = 0; x < len; x++) {\n        y = values[x];\n        sum_x += x;\n        sum_y += y;\n        sum_xx += x * x;\n        sum_xy += x * y;\n    }\n    const m = (len * sum_xy - sum_x * sum_y) / (len * sum_xx - sum_x * sum_x);\n    const b = (sum_y / len) - (m * sum_x) / len;\n    const result = [];\n    for (let x = 0; x <= len; x++) {\n        result.push(parseFloat((x * m + b).toFixed(maxDecimals)));\n    }\n    return result;\n}\n\nvar __decorate$H = ( false) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nclass FillHandle extends AbstractSelectionHandle {\n    constructor() {\n        super(FillHandle.TEMPLATE);\n        this.markedCells = [];\n        this.cellValues = [];\n        this.isUp = false;\n        this.isLeft = false;\n        this.isReduce = false;\n        this.type = ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.SelectionHandleType.FILL;\n    }\n    updateValuesOnMove(e) {\n        super.updateValuesOnMove(e);\n        if (!this.initialXY) {\n            this.initialXY = this.mouseEventService.getNormalisedPosition(e);\n        }\n        const { x, y } = this.initialXY;\n        const { x: newX, y: newY } = this.mouseEventService.getNormalisedPosition(e);\n        const diffX = Math.abs(x - newX);\n        const diffY = Math.abs(y - newY);\n        const allowedDirection = this.getFillHandleDirection();\n        let direction;\n        if (allowedDirection === 'xy') {\n            direction = diffX > diffY ? 'x' : 'y';\n        }\n        else {\n            direction = allowedDirection;\n        }\n        if (direction !== this.dragAxis) {\n            this.dragAxis = direction;\n            this.changedCalculatedValues = true;\n        }\n    }\n    onDrag(e) {\n        if (!this.initialPosition) {\n            const cellCtrl = this.getCellCtrl();\n            if (!cellCtrl) {\n                return;\n            }\n            this.initialPosition = cellCtrl.getCellPosition();\n        }\n        const lastCellHovered = this.getLastCellHovered();\n        if (lastCellHovered) {\n            this.markPathFrom(this.initialPosition, lastCellHovered);\n        }\n    }\n    onDragEnd(e) {\n        this.initialXY = null;\n        if (!this.markedCells.length) {\n            return;\n        }\n        const isX = this.dragAxis === 'x';\n        const initialRange = this.getCellRange();\n        const colLen = initialRange.columns.length;\n        const rangeStartRow = this.getRangeStartRow();\n        const rangeEndRow = this.getRangeEndRow();\n        let finalRange;\n        if (!this.isUp && !this.isLeft) {\n            finalRange = this.rangeService.createCellRangeFromCellRangeParams({\n                rowStartIndex: rangeStartRow.rowIndex,\n                rowStartPinned: rangeStartRow.rowPinned,\n                columnStart: initialRange.columns[0],\n                rowEndIndex: isX ? rangeEndRow.rowIndex : this.lastCellMarked.rowIndex,\n                rowEndPinned: isX ? rangeEndRow.rowPinned : this.lastCellMarked.rowPinned,\n                columnEnd: isX ? this.lastCellMarked.column : initialRange.columns[colLen - 1]\n            });\n        }\n        else {\n            const startRow = isX ? rangeStartRow : this.lastCellMarked;\n            finalRange = this.rangeService.createCellRangeFromCellRangeParams({\n                rowStartIndex: startRow.rowIndex,\n                rowStartPinned: startRow.rowPinned,\n                columnStart: isX ? this.lastCellMarked.column : initialRange.columns[0],\n                rowEndIndex: rangeEndRow.rowIndex,\n                rowEndPinned: rangeEndRow.rowPinned,\n                columnEnd: initialRange.columns[colLen - 1]\n            });\n        }\n        if (finalRange) {\n            // raising fill events for undo / redo\n            this.raiseFillStartEvent();\n            this.handleValueChanged(initialRange, finalRange, e);\n            this.rangeService.setCellRanges([finalRange]);\n            this.raiseFillEndEvent(initialRange, finalRange);\n        }\n    }\n    getFillHandleDirection() {\n        const direction = this.gridOptionsService.get('fillHandleDirection');\n        if (!direction) {\n            return 'xy';\n        }\n        if (direction !== 'x' && direction !== 'y' && direction !== 'xy') {\n            ag_grid_community__WEBPACK_IMPORTED_MODULE_0__._.doOnce(() => console.warn(`AG Grid: valid values for fillHandleDirection are 'x', 'y' and 'xy'. Default to 'xy'.`), 'warn invalid fill direction');\n            return 'xy';\n        }\n        return direction;\n    }\n    raiseFillStartEvent() {\n        const fillStartEvent = {\n            type: ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.Events.EVENT_FILL_START\n        };\n        this.eventService.dispatchEvent(fillStartEvent);\n    }\n    raiseFillEndEvent(initialRange, finalRange) {\n        const fillEndEvent = {\n            type: ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.Events.EVENT_FILL_END,\n            initialRange: initialRange,\n            finalRange: finalRange\n        };\n        this.eventService.dispatchEvent(fillEndEvent);\n    }\n    handleValueChanged(initialRange, finalRange, e) {\n        const initialRangeEndRow = this.rangeService.getRangeEndRow(initialRange);\n        const initialRangeStartRow = this.rangeService.getRangeStartRow(initialRange);\n        const finalRangeEndRow = this.rangeService.getRangeEndRow(finalRange);\n        const finalRangeStartRow = this.rangeService.getRangeStartRow(finalRange);\n        const isVertical = this.dragAxis === 'y';\n        // if the range is being reduced in size, all we need to do is\n        // clear the cells that are no longer part of the range\n        if (this.isReduce && !this.gridOptionsService.is('suppressClearOnFillReduction')) {\n            const columns = isVertical\n                ? initialRange.columns\n                : initialRange.columns.filter(col => finalRange.columns.indexOf(col) < 0);\n            const startRow = isVertical ? this.cellNavigationService.getRowBelow(finalRangeEndRow) : finalRangeStartRow;\n            if (startRow) {\n                this.clearCellsInRange(startRow, initialRangeEndRow, columns);\n            }\n            return;\n        }\n        let withinInitialRange = true;\n        const values = [];\n        const initialValues = [];\n        let idx = 0;\n        const resetValues = () => {\n            values.length = 0;\n            initialValues.length = 0;\n            idx = 0;\n        };\n        const iterateAcrossCells = (column, columns) => {\n            let currentRow = this.isUp ? initialRangeEndRow : initialRangeStartRow;\n            let finished = false;\n            if (isVertical) {\n                withinInitialRange = true;\n                resetValues();\n            }\n            while (!finished && currentRow) {\n                const rowNode = this.rowPositionUtils.getRowNode(currentRow);\n                if (!rowNode) {\n                    break;\n                }\n                if (isVertical && column) {\n                    fillValues(values, column, rowNode, () => {\n                        return !this.rowPositionUtils.sameRow(currentRow, this.isUp ? initialRangeStartRow : initialRangeEndRow);\n                    });\n                }\n                else if (columns) {\n                    withinInitialRange = true;\n                    resetValues();\n                    columns.forEach(col => fillValues(values, col, rowNode, () => col !== (this.isLeft ? initialRange.columns[0] : ag_grid_community__WEBPACK_IMPORTED_MODULE_0__._.last(initialRange.columns))));\n                }\n                finished = this.rowPositionUtils.sameRow(currentRow, this.isUp ? finalRangeStartRow : finalRangeEndRow);\n                currentRow = this.isUp\n                    ? this.cellNavigationService.getRowAbove(currentRow)\n                    : this.cellNavigationService.getRowBelow(currentRow);\n            }\n        };\n        const fillValues = (currentValues, col, rowNode, updateInitialSet) => {\n            var _a, _b;\n            let currentValue;\n            let skipValue = false;\n            if (withinInitialRange) {\n                currentValue = this.valueService.getValue(col, rowNode);\n                initialValues.push(currentValue);\n                withinInitialRange = updateInitialSet();\n            }\n            else {\n                const { value, fromUserFunction, sourceCol, sourceRowNode } = this.processValues(e, currentValues, initialValues, col, rowNode, idx++);\n                currentValue = value;\n                if (col.isCellEditable(rowNode)) {\n                    const cellValue = this.valueService.getValue(col, rowNode);\n                    if (!fromUserFunction) {\n                        if ((_a = sourceCol === null || sourceCol === void 0 ? void 0 : sourceCol.getColDef()) === null || _a === void 0 ? void 0 : _a.useValueFormatterForExport) {\n                            currentValue = (_b = this.valueFormatterService.formatValue(sourceCol, sourceRowNode, currentValue)) !== null && _b !== void 0 ? _b : currentValue;\n                        }\n                        if (col.getColDef().useValueParserForImport) {\n                            currentValue = this.valueParserService.parseValue(col, rowNode, \n                            // if no sourceCol, then currentValue is a number\n                            sourceCol ? currentValue : ag_grid_community__WEBPACK_IMPORTED_MODULE_0__._.toStringOrNull(currentValue), cellValue);\n                        }\n                    }\n                    if (!fromUserFunction || cellValue !== currentValue) {\n                        rowNode.setDataValue(col, currentValue, 'rangeService');\n                    }\n                    else {\n                        skipValue = true;\n                    }\n                }\n            }\n            if (!skipValue) {\n                currentValues.push({\n                    value: currentValue,\n                    column: col,\n                    rowNode\n                });\n            }\n        };\n        if (isVertical) {\n            initialRange.columns.forEach(col => {\n                iterateAcrossCells(col);\n            });\n        }\n        else {\n            const columns = this.isLeft ? [...finalRange.columns].reverse() : finalRange.columns;\n            iterateAcrossCells(undefined, columns);\n        }\n    }\n    clearCellsInRange(startRow, endRow, columns) {\n        const cellRange = {\n            startRow,\n            endRow,\n            columns,\n            startColumn: columns[0]\n        };\n        this.rangeService.clearCellRangeCellValues({ cellRanges: [cellRange] });\n    }\n    processValues(event, values, initialValues, col, rowNode, idx) {\n        const userFillOperation = this.gridOptionsService.getCallback('fillOperation');\n        const isVertical = this.dragAxis === 'y';\n        let direction;\n        if (isVertical) {\n            direction = this.isUp ? 'up' : 'down';\n        }\n        else {\n            direction = this.isLeft ? 'left' : 'right';\n        }\n        if (userFillOperation) {\n            const params = {\n                event,\n                values: values.map(({ value }) => value),\n                initialValues,\n                currentIndex: idx,\n                currentCellValue: this.valueService.getValue(col, rowNode),\n                direction,\n                column: col,\n                rowNode: rowNode\n            };\n            const userResult = userFillOperation(params);\n            if (userResult !== false) {\n                return { value: userResult, fromUserFunction: true };\n            }\n        }\n        const allNumbers = !values.some(({ value }) => {\n            const asFloat = parseFloat(value);\n            return isNaN(asFloat) || asFloat.toString() !== value.toString();\n        });\n        // values should be copied in order if the alt key is pressed\n        // or if the values contain strings and numbers\n        // However, if we only have one initial value selected, and that\n        // value is a number and we are also pressing alt, then we should\n        // increment or decrement the value by 1 based on direction.\n        if (event.altKey || !allNumbers) {\n            if (allNumbers && initialValues.length === 1) {\n                const multiplier = (this.isUp || this.isLeft) ? -1 : 1;\n                return { value: parseFloat(ag_grid_community__WEBPACK_IMPORTED_MODULE_0__._.last(values).value) + 1 * multiplier, fromUserFunction: false };\n            }\n            const { value, column: sourceCol, rowNode: sourceRowNode } = values[idx % values.length];\n            return { value, fromUserFunction: false, sourceCol, sourceRowNode };\n        }\n        return { value: ag_grid_community__WEBPACK_IMPORTED_MODULE_0__._.last(findLineByLeastSquares(values.map(({ value }) => Number(value)))), fromUserFunction: false };\n    }\n    clearValues() {\n        this.clearMarkedPath();\n        this.clearCellValues();\n        this.lastCellMarked = undefined;\n        super.clearValues();\n    }\n    clearMarkedPath() {\n        this.markedCells.forEach(cell => {\n            if (!cell.isAlive()) {\n                return;\n            }\n            const comp = cell.getComp();\n            comp.addOrRemoveCssClass('ag-selection-fill-top', false);\n            comp.addOrRemoveCssClass('ag-selection-fill-right', false);\n            comp.addOrRemoveCssClass('ag-selection-fill-bottom', false);\n            comp.addOrRemoveCssClass('ag-selection-fill-left', false);\n        });\n        this.markedCells.length = 0;\n        this.isUp = false;\n        this.isLeft = false;\n        this.isReduce = false;\n    }\n    clearCellValues() {\n        this.cellValues.length = 0;\n    }\n    markPathFrom(initialPosition, currentPosition) {\n        this.clearMarkedPath();\n        this.clearCellValues();\n        if (this.dragAxis === 'y') {\n            if (this.rowPositionUtils.sameRow(currentPosition, initialPosition)) {\n                return;\n            }\n            const isBefore = this.rowPositionUtils.before(currentPosition, initialPosition);\n            const rangeStartRow = this.getRangeStartRow();\n            const rangeEndRow = this.getRangeEndRow();\n            if (isBefore && ((currentPosition.rowPinned == rangeStartRow.rowPinned &&\n                currentPosition.rowIndex >= rangeStartRow.rowIndex) ||\n                (rangeStartRow.rowPinned != rangeEndRow.rowPinned &&\n                    currentPosition.rowPinned == rangeEndRow.rowPinned &&\n                    currentPosition.rowIndex <= rangeEndRow.rowIndex))) {\n                this.reduceVertical(initialPosition, currentPosition);\n                this.isReduce = true;\n            }\n            else {\n                this.extendVertical(initialPosition, currentPosition, isBefore);\n                this.isReduce = false;\n            }\n        }\n        else {\n            const initialColumn = initialPosition.column;\n            const currentColumn = currentPosition.column;\n            if (initialColumn === currentColumn) {\n                return;\n            }\n            const displayedColumns = this.columnModel.getAllDisplayedColumns();\n            const initialIndex = displayedColumns.indexOf(initialColumn);\n            const currentIndex = displayedColumns.indexOf(currentColumn);\n            if (currentIndex <= initialIndex && currentIndex >= displayedColumns.indexOf(this.getCellRange().columns[0])) {\n                this.reduceHorizontal(initialPosition, currentPosition);\n                this.isReduce = true;\n            }\n            else {\n                this.extendHorizontal(initialPosition, currentPosition, currentIndex < initialIndex);\n                this.isReduce = false;\n            }\n        }\n        this.lastCellMarked = currentPosition;\n    }\n    extendVertical(initialPosition, endPosition, isMovingUp) {\n        const { navigationService, rangeService } = this;\n        let row = initialPosition;\n        do {\n            const cellRange = this.getCellRange();\n            const colLen = cellRange.columns.length;\n            for (let i = 0; i < colLen; i++) {\n                const column = cellRange.columns[i];\n                const rowPos = { rowIndex: row.rowIndex, rowPinned: row.rowPinned };\n                const cellPos = Object.assign(Object.assign({}, rowPos), { column });\n                const cellInRange = rangeService.isCellInSpecificRange(cellPos, cellRange);\n                const isInitialRow = this.rowPositionUtils.sameRow(row, initialPosition);\n                if (isMovingUp) {\n                    this.isUp = true;\n                }\n                if (!isInitialRow) {\n                    const cell = navigationService.getCellByPosition(cellPos);\n                    if (cell) {\n                        this.markedCells.push(cell);\n                        const cellCtrl = cell.getComp();\n                        if (!cellInRange) {\n                            cellCtrl.addOrRemoveCssClass('ag-selection-fill-left', i === 0);\n                            cellCtrl.addOrRemoveCssClass('ag-selection-fill-right', i === colLen - 1);\n                        }\n                        cellCtrl.addOrRemoveCssClass(isMovingUp ? 'ag-selection-fill-top' : 'ag-selection-fill-bottom', this.rowPositionUtils.sameRow(row, endPosition));\n                    }\n                }\n            }\n            if (this.rowPositionUtils.sameRow(row, endPosition)) {\n                break;\n            }\n        } while (\n        // tslint:disable-next-line\n        row = isMovingUp\n            ? this.cellNavigationService.getRowAbove(row)\n            : this.cellNavigationService.getRowBelow(row));\n    }\n    reduceVertical(initialPosition, endPosition) {\n        let row = initialPosition;\n        do {\n            const cellRange = this.getCellRange();\n            const colLen = cellRange.columns.length;\n            const isLastRow = this.rowPositionUtils.sameRow(row, endPosition);\n            for (let i = 0; i < colLen; i++) {\n                const rowPos = { rowIndex: row.rowIndex, rowPinned: row.rowPinned };\n                const celPos = Object.assign(Object.assign({}, rowPos), { column: cellRange.columns[i] });\n                const cell = this.navigationService.getCellByPosition(celPos);\n                if (cell) {\n                    this.markedCells.push(cell);\n                    const cellComp = cell.getComp();\n                    cellComp.addOrRemoveCssClass('ag-selection-fill-bottom', this.rowPositionUtils.sameRow(row, endPosition));\n                }\n            }\n            if (isLastRow) {\n                break;\n            }\n            // tslint:disable-next-line\n        } while (row = this.cellNavigationService.getRowAbove(row));\n    }\n    extendHorizontal(initialPosition, endPosition, isMovingLeft) {\n        const allCols = this.columnModel.getAllDisplayedColumns();\n        const startCol = allCols.indexOf(isMovingLeft ? endPosition.column : initialPosition.column);\n        const endCol = allCols.indexOf(isMovingLeft ? this.getCellRange().columns[0] : endPosition.column);\n        const offset = isMovingLeft ? 0 : 1;\n        const colsToMark = allCols.slice(startCol + offset, endCol + offset);\n        const rangeStartRow = this.getRangeStartRow();\n        const rangeEndRow = this.getRangeEndRow();\n        colsToMark.forEach(column => {\n            let row = rangeStartRow;\n            let isLastRow = false;\n            do {\n                isLastRow = this.rowPositionUtils.sameRow(row, rangeEndRow);\n                const cell = this.navigationService.getCellByPosition({\n                    rowIndex: row.rowIndex,\n                    rowPinned: row.rowPinned,\n                    column: column\n                });\n                if (cell) {\n                    this.markedCells.push(cell);\n                    const cellComp = cell.getComp();\n                    cellComp.addOrRemoveCssClass('ag-selection-fill-top', this.rowPositionUtils.sameRow(row, rangeStartRow));\n                    cellComp.addOrRemoveCssClass('ag-selection-fill-bottom', this.rowPositionUtils.sameRow(row, rangeEndRow));\n                    if (isMovingLeft) {\n                        this.isLeft = true;\n                        cellComp.addOrRemoveCssClass('ag-selection-fill-left', column === colsToMark[0]);\n                    }\n                    else {\n                        cellComp.addOrRemoveCssClass('ag-selection-fill-right', column === ag_grid_community__WEBPACK_IMPORTED_MODULE_0__._.last(colsToMark));\n                    }\n                }\n                row = this.cellNavigationService.getRowBelow(row);\n            } while (!isLastRow);\n        });\n    }\n    reduceHorizontal(initialPosition, endPosition) {\n        const allCols = this.columnModel.getAllDisplayedColumns();\n        const startCol = allCols.indexOf(endPosition.column);\n        const endCol = allCols.indexOf(initialPosition.column);\n        const colsToMark = allCols.slice(startCol, endCol);\n        const rangeStartRow = this.getRangeStartRow();\n        const rangeEndRow = this.getRangeEndRow();\n        colsToMark.forEach(column => {\n            let row = rangeStartRow;\n            let isLastRow = false;\n            do {\n                isLastRow = this.rowPositionUtils.sameRow(row, rangeEndRow);\n                const cell = this.navigationService.getCellByPosition({\n                    rowIndex: row.rowIndex,\n                    rowPinned: row.rowPinned,\n                    column: column\n                });\n                if (cell) {\n                    this.markedCells.push(cell);\n                    const cellComp = cell.getComp();\n                    cellComp.addOrRemoveCssClass('ag-selection-fill-right', column === colsToMark[0]);\n                }\n                row = this.cellNavigationService.getRowBelow(row);\n            } while (!isLastRow);\n        });\n    }\n    refresh(cellCtrl) {\n        const cellRange = this.rangeService.getCellRanges()[0];\n        const isColumnRange = !cellRange.startRow || !cellRange.endRow;\n        if (isColumnRange) {\n            this.destroy();\n            return;\n        }\n        super.refresh(cellCtrl);\n    }\n}\nFillHandle.TEMPLATE = `<div class=\"ag-fill-handle\"></div>`;\n__decorate$H([\n    (0,ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.Autowired)('valueService')\n], FillHandle.prototype, \"valueService\", void 0);\n__decorate$H([\n    (0,ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.Autowired)('valueParserService')\n], FillHandle.prototype, \"valueParserService\", void 0);\n__decorate$H([\n    (0,ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.Autowired)('valueFormatterService')\n], FillHandle.prototype, \"valueFormatterService\", void 0);\n\nclass RangeHandle extends AbstractSelectionHandle {\n    constructor() {\n        super(RangeHandle.TEMPLATE);\n        this.type = ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.SelectionHandleType.RANGE;\n        this.rangeFixed = false;\n    }\n    onDrag(e) {\n        const lastCellHovered = this.getLastCellHovered();\n        if (!lastCellHovered) {\n            return;\n        }\n        const cellRanges = this.rangeService.getCellRanges();\n        const lastRange = ag_grid_community__WEBPACK_IMPORTED_MODULE_0__._.last(cellRanges);\n        if (!this.rangeFixed) {\n            this.fixRangeStartEnd(lastRange);\n            this.rangeFixed = true;\n        }\n        this.endPosition = {\n            rowIndex: lastCellHovered.rowIndex,\n            rowPinned: lastCellHovered.rowPinned,\n            column: lastCellHovered.column\n        };\n        // check if the cell ranges are for a chart\n        if (cellRanges.length === 2 && cellRanges[0].type === ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.CellRangeType.DIMENSION && lastRange.type === ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.CellRangeType.VALUE) {\n            const rowChanged = !this.rowPositionUtils.sameRow(this.endPosition, this.rangeService.getRangeEndRow(lastRange));\n            if (rowChanged) {\n                // ensure the dimension range is kept in sync with the value range (which has the handle)\n                this.rangeService.updateRangeEnd(cellRanges[0], Object.assign(Object.assign({}, this.endPosition), { column: cellRanges[0].columns[0] }), true);\n            }\n        }\n        this.rangeService.extendLatestRangeToCell(this.endPosition);\n    }\n    onDragEnd(e) {\n        const cellRange = ag_grid_community__WEBPACK_IMPORTED_MODULE_0__._.last(this.rangeService.getCellRanges());\n        this.fixRangeStartEnd(cellRange);\n        this.rangeFixed = false;\n    }\n    fixRangeStartEnd(cellRange) {\n        const startRow = this.rangeService.getRangeStartRow(cellRange);\n        const endRow = this.rangeService.getRangeEndRow(cellRange);\n        const column = cellRange.columns[0];\n        cellRange.startRow = startRow;\n        cellRange.endRow = endRow;\n        cellRange.startColumn = column;\n    }\n}\nRangeHandle.TEMPLATE = `<div class=\"ag-range-handle\"></div>`;\n\nvar __decorate$G = ( false) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nlet SelectionHandleFactory = class SelectionHandleFactory extends ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.BeanStub {\n    createSelectionHandle(type) {\n        return this.createBean(type === ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.SelectionHandleType.RANGE ? new RangeHandle() : new FillHandle());\n    }\n};\nSelectionHandleFactory = __decorate$G([\n    (0,ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.Bean)('selectionHandleFactory')\n], SelectionHandleFactory);\n\n// DO NOT UPDATE MANUALLY: Generated from script during build time\nconst VERSION$9 = '30.0.2';\n\nconst RangeSelectionModule = {\n    version: VERSION$9,\n    moduleName: ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.ModuleNames.RangeSelectionModule,\n    beans: [RangeService, SelectionHandleFactory],\n    agStackComponents: [\n        { componentName: 'AgFillHandle', componentClass: FillHandle },\n        { componentName: 'AgRangeHandle', componentClass: RangeHandle }\n    ],\n    dependantModules: [\n        EnterpriseCoreModule\n    ]\n};\n\nvar __decorate$F = ( false) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nclass AgColorPanel extends ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.Component {\n    constructor(config) {\n        super(AgColorPanel.TEMPLATE);\n        this.H = 1; // in the [0, 1] range\n        this.S = 1; // in the [0, 1] range\n        this.B = 1; // in the [0, 1] range\n        this.A = 1; // in the [0, 1] range\n        this.isSpectrumDragging = false;\n        this.isSpectrumHueDragging = false;\n        this.isSpectrumAlphaDragging = false;\n        this.colorChanged = false;\n        this.picker = config.picker;\n    }\n    postConstruct() {\n        const eGui = this.getGui();\n        this.initRecentColors();\n        this.addManagedListener(this.spectrumVal, 'mousedown', this.onSpectrumDraggerDown.bind(this));\n        this.addManagedListener(eGui, 'mousemove', this.onSpectrumDraggerMove.bind(this));\n        this.addManagedListener(this.spectrumHue, 'mousedown', this.onSpectrumHueDown.bind(this));\n        this.addManagedListener(eGui, 'mousemove', this.onSpectrumHueMove.bind(this));\n        this.addManagedListener(this.spectrumAlpha, 'mousedown', this.onSpectrumAlphaDown.bind(this));\n        this.addManagedListener(eGui, 'mousemove', this.onSpectrumAlphaMove.bind(this));\n        // Listening to `mouseup` on the document on purpose. The user might release the mouse button\n        // outside the UI control. When the mouse returns back to the control's area, the dragging\n        // of the thumb is not expected and seen as a bug.\n        this.addManagedListener(document, 'mouseup', this.onMouseUp.bind(this));\n        this.addManagedListener(this.recentColors, 'click', this.onRecentColorClick.bind(this));\n    }\n    refreshSpectrumRect() {\n        return this.spectrumValRect = this.spectrumVal.getBoundingClientRect();\n    }\n    refreshHueRect() {\n        return this.spectrumHueRect = this.spectrumHue.getBoundingClientRect();\n    }\n    refreshAlphaRect() {\n        return this.spectrumAlphaRect = this.spectrumAlpha.getBoundingClientRect();\n    }\n    onSpectrumDraggerDown(e) {\n        this.refreshSpectrumRect();\n        this.isSpectrumDragging = true;\n        this.moveDragger(e);\n    }\n    onSpectrumDraggerMove(e) {\n        if (this.isSpectrumDragging) {\n            this.moveDragger(e);\n        }\n    }\n    onSpectrumHueDown(e) {\n        this.refreshHueRect();\n        this.isSpectrumHueDragging = true;\n        this.moveHueSlider(e);\n    }\n    onSpectrumHueMove(e) {\n        if (this.isSpectrumHueDragging) {\n            this.moveHueSlider(e);\n        }\n    }\n    onSpectrumAlphaDown(e) {\n        this.refreshAlphaRect();\n        this.isSpectrumAlphaDragging = true;\n        this.moveAlphaSlider(e);\n    }\n    onSpectrumAlphaMove(e) {\n        if (this.isSpectrumAlphaDragging) {\n            this.moveAlphaSlider(e);\n        }\n    }\n    onMouseUp() {\n        this.isSpectrumDragging = false;\n        this.isSpectrumHueDragging = false;\n        this.isSpectrumAlphaDragging = false;\n    }\n    moveDragger(e) {\n        const valRect = this.spectrumValRect;\n        if (valRect) {\n            let x = e.clientX - valRect.left;\n            let y = e.clientY - valRect.top;\n            x = Math.max(x, 0);\n            x = Math.min(x, valRect.width);\n            y = Math.max(y, 0);\n            y = Math.min(y, valRect.height);\n            this.setSpectrumValue(x / valRect.width, 1 - y / valRect.height);\n        }\n    }\n    moveHueSlider(e) {\n        const hueRect = this.spectrumHueRect;\n        if (hueRect) {\n            const slider = this.spectrumHueSlider;\n            const sliderRect = slider.getBoundingClientRect();\n            let x = e.clientX - hueRect.left;\n            x = Math.max(x, 0);\n            x = Math.min(x, hueRect.width);\n            this.H = 1 - x / hueRect.width;\n            slider.style.left = (x + sliderRect.width / 2) + 'px';\n            this.update();\n        }\n    }\n    moveAlphaSlider(e) {\n        const alphaRect = this.spectrumAlphaRect;\n        if (alphaRect) {\n            const slider = this.spectrumAlphaSlider;\n            const sliderRect = slider.getBoundingClientRect();\n            let x = e.clientX - alphaRect.left;\n            x = Math.max(x, 0);\n            x = Math.min(x, alphaRect.width);\n            this.A = x / alphaRect.width;\n            slider.style.left = (x + sliderRect.width / 2) + 'px';\n            this.update();\n        }\n    }\n    update() {\n        const color = Color.fromHSB(this.H * 360, this.S, this.B, this.A);\n        const spectrumColor = Color.fromHSB(this.H * 360, 1, 1);\n        const rgbaColor = color.toRgbaString();\n        // the recent color list needs to know color has actually changed\n        const colorPicker = this.picker;\n        const existingColor = Color.fromString(colorPicker.getValue());\n        if (existingColor.toRgbaString() !== rgbaColor) {\n            this.colorChanged = true;\n        }\n        colorPicker.setValue(rgbaColor);\n        this.spectrumColor.style.backgroundColor = spectrumColor.toRgbaString();\n        this.spectrumDragger.style.backgroundColor = rgbaColor;\n    }\n    /**\n     * @param saturation In the [0, 1] interval.\n     * @param brightness In the [0, 1] interval.\n     */\n    setSpectrumValue(saturation, brightness) {\n        const valRect = this.spectrumValRect || this.refreshSpectrumRect();\n        if (valRect) {\n            const dragger = this.spectrumDragger;\n            const draggerRect = dragger.getBoundingClientRect();\n            saturation = Math.max(0, saturation);\n            saturation = Math.min(1, saturation);\n            brightness = Math.max(0, brightness);\n            brightness = Math.min(1, brightness);\n            this.S = saturation;\n            this.B = brightness;\n            dragger.style.left = (saturation * valRect.width - draggerRect.width / 2) + 'px';\n            dragger.style.top = ((1 - brightness) * valRect.height - draggerRect.height / 2) + 'px';\n            this.update();\n        }\n    }\n    initRecentColors() {\n        const recentColors = AgColorPanel.recentColors;\n        const innerHtml = recentColors.map((color, index) => {\n            return `<div class=\"ag-recent-color\" id=${index} style=\"background-color: ${color}; width: 15px; height: 15px;\" recent-color=\"${color}\"></div>`;\n        });\n        this.recentColors.innerHTML = innerHtml.join('');\n    }\n    setValue(val) {\n        const color = Color.fromString(val);\n        const [h, s, b] = color.toHSB();\n        this.H = (isNaN(h) ? 0 : h) / 360;\n        this.A = color.a;\n        const spectrumHueRect = this.spectrumHueRect || this.refreshHueRect();\n        const spectrumAlphaRect = this.spectrumAlphaRect || this.refreshAlphaRect();\n        this.spectrumHueSlider.style.left = `${((this.H - 1) * -spectrumHueRect.width)}px`;\n        this.spectrumAlphaSlider.style.left = `${(this.A * spectrumAlphaRect.width)}px`;\n        this.setSpectrumValue(s, b);\n    }\n    onRecentColorClick(e) {\n        const target = e.target;\n        if (!ag_grid_community__WEBPACK_IMPORTED_MODULE_0__._.exists(target.id)) {\n            return;\n        }\n        const id = parseInt(target.id, 10);\n        this.setValue(AgColorPanel.recentColors[id]);\n        this.destroy();\n    }\n    addRecentColor() {\n        const color = Color.fromHSB(this.H * 360, this.S, this.B, this.A);\n        const rgbaColor = color.toRgbaString();\n        let recentColors = AgColorPanel.recentColors;\n        if (!this.colorChanged || recentColors[0] === rgbaColor) {\n            return;\n        }\n        // remove duplicate color\n        recentColors = recentColors.filter(currentColor => currentColor != rgbaColor);\n        // add color to head\n        recentColors = [rgbaColor].concat(recentColors);\n        // ensure we don't exceed max number of recent colors\n        if (recentColors.length > AgColorPanel.maxRecentColors) {\n            recentColors = recentColors.slice(0, AgColorPanel.maxRecentColors);\n        }\n        AgColorPanel.recentColors = recentColors;\n    }\n    destroy() {\n        this.addRecentColor();\n        super.destroy();\n    }\n}\nAgColorPanel.maxRecentColors = 8;\nAgColorPanel.recentColors = [];\nAgColorPanel.TEMPLATE = `<div class=\"ag-color-panel\">\n            <div ref=\"spectrumColor\" class=\"ag-spectrum-color\">\n                <div class=\"ag-spectrum-sat ag-spectrum-fill\">\n                    <div ref=\"spectrumVal\" class=\"ag-spectrum-val ag-spectrum-fill\">\n                        <div ref=\"spectrumDragger\" class=\"ag-spectrum-dragger\"></div>\n                    </div>\n                </div>\n            </div>\n            <div class=\"ag-spectrum-tools\">\n                <div ref=\"spectrumHue\" class=\"ag-spectrum-hue ag-spectrum-tool\">\n                    <div class=\"ag-spectrum-hue-background\"></div>\n                    <div ref=\"spectrumHueSlider\" class=\"ag-spectrum-slider\"></div>\n                </div>\n                <div ref=\"spectrumAlpha\" class=\"ag-spectrum-alpha ag-spectrum-tool\">\n                    <div class=\"ag-spectrum-alpha-background\"></div>\n                    <div ref=\"spectrumAlphaSlider\" class=\"ag-spectrum-slider\"></div>\n                </div>\n                <div ref=\"recentColors\" class=\"ag-recent-colors\"></div>\n            </div>\n        </div>`;\n__decorate$F([\n    (0,ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.RefSelector)('spectrumColor')\n], AgColorPanel.prototype, \"spectrumColor\", void 0);\n__decorate$F([\n    (0,ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.RefSelector)('spectrumVal')\n], AgColorPanel.prototype, \"spectrumVal\", void 0);\n__decorate$F([\n    (0,ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.RefSelector)('spectrumDragger')\n], AgColorPanel.prototype, \"spectrumDragger\", void 0);\n__decorate$F([\n    (0,ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.RefSelector)('spectrumHue')\n], AgColorPanel.prototype, \"spectrumHue\", void 0);\n__decorate$F([\n    (0,ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.RefSelector)('spectrumHueSlider')\n], AgColorPanel.prototype, \"spectrumHueSlider\", void 0);\n__decorate$F([\n    (0,ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.RefSelector)('spectrumAlpha')\n], AgColorPanel.prototype, \"spectrumAlpha\", void 0);\n__decorate$F([\n    (0,ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.RefSelector)('spectrumAlphaSlider')\n], AgColorPanel.prototype, \"spectrumAlphaSlider\", void 0);\n__decorate$F([\n    (0,ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.RefSelector)('recentColors')\n], AgColorPanel.prototype, \"recentColors\", void 0);\n__decorate$F([\n    ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.PostConstruct\n], AgColorPanel.prototype, \"postConstruct\", null);\n\nclass AgColorPicker extends ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.AgPickerField {\n    constructor(config) {\n        super(config, 'ag-color-picker', 'colorPicker');\n        if (config && config.color) {\n            this.value = config.color;\n        }\n    }\n    postConstruct() {\n        super.postConstruct();\n        if (this.value) {\n            this.setValue(this.value);\n        }\n    }\n    showPicker() {\n        const eGuiRect = this.getGui().getBoundingClientRect();\n        const colorDialog = this.createBean(new ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.AgDialog({\n            closable: false,\n            modal: true,\n            hideTitleBar: true,\n            minWidth: 190,\n            width: 190,\n            height: 250,\n            x: eGuiRect.right - 190,\n            y: eGuiRect.top - 250\n        }));\n        this.isPickerDisplayed = true;\n        colorDialog.addCssClass('ag-color-dialog');\n        ag_grid_community__WEBPACK_IMPORTED_MODULE_0__._.setAriaExpanded(this.eWrapper, true);\n        const colorPanel = this.createBean(new AgColorPanel({ picker: this }));\n        colorPanel.addDestroyFunc(() => {\n            if (colorDialog.isAlive()) {\n                this.destroyBean(colorDialog);\n            }\n        });\n        colorDialog.setParentComponent(this);\n        colorDialog.setBodyComponent(colorPanel);\n        colorPanel.setValue(this.getValue());\n        colorDialog.addDestroyFunc(() => {\n            // here we check if the picker was already being\n            // destroyed to avoid a stack overflow\n            if (!this.isDestroyingPicker) {\n                this.isDestroyingPicker = true;\n                if (colorPanel.isAlive()) {\n                    this.destroyBean(colorPanel);\n                }\n            }\n            else {\n                this.isDestroyingPicker = false;\n            }\n            if (this.isAlive()) {\n                ag_grid_community__WEBPACK_IMPORTED_MODULE_0__._.setAriaExpanded(this.eWrapper, false);\n                this.getFocusableElement().focus();\n            }\n            this.isPickerDisplayed = false;\n        });\n        return colorDialog;\n    }\n    setValue(color) {\n        if (this.value === color) {\n            return this;\n        }\n        this.eDisplayField.style.backgroundColor = color;\n        return super.setValue(color);\n    }\n    getValue() {\n        return this.value;\n    }\n}\n\nconst VERSION_CHECKING_FIRST_GRID_MAJOR_VERSION = 28;\nconst VERSION_CHECKING_FIRST_CHARTS_MAJOR_VERSION = 6;\nfunction isValidVersion(version) {\n    return version && version.match(/\\d+\\.\\d+\\.\\d+/);\n}\nfunction isValidMajorVersion({ gridMajorVersion, chartsMajorVersion }) {\n    const gridMajor = parseInt(gridMajorVersion, 10);\n    const chartsMajor = parseInt(chartsMajorVersion, 10);\n    const gridMajorDifference = gridMajor - VERSION_CHECKING_FIRST_GRID_MAJOR_VERSION;\n    const chartsMajorDifference = chartsMajor - VERSION_CHECKING_FIRST_CHARTS_MAJOR_VERSION;\n    const isFirstOrAfterVersion = gridMajorDifference >= 0;\n    return gridMajorDifference === chartsMajorDifference && isFirstOrAfterVersion;\n}\nfunction gridChartVersion(gridVersion) {\n    if (!gridVersion || !isValidVersion(gridVersion)) {\n        return undefined;\n    }\n    const [gridMajor, gridMinor] = gridVersion.split('.') || [];\n    const gridMajorMinor = `${gridMajor}.${gridMinor}.x`;\n    const gridMajorNumber = parseInt(gridMajor, 10);\n    const chartsMajor = (gridMajorNumber - VERSION_CHECKING_FIRST_GRID_MAJOR_VERSION) + VERSION_CHECKING_FIRST_CHARTS_MAJOR_VERSION;\n    if (chartsMajor < 0) {\n        return undefined;\n    }\n    const chartsMinor = gridMinor;\n    const chartsMajorMinor = `${chartsMajor}.${chartsMinor}.x`;\n    return {\n        gridMajorMinor,\n        chartsMajorMinor\n    };\n}\nfunction validGridChartsVersionErrorMessage({ type, gridVersion, chartsVersion }) {\n    const invalidMessage = 'AG Grid: AG Grid version is incompatible. Please see https://www.ag-grid.com/javascript-data-grid/modules/ for more information.';\n    if (!gridVersion) {\n        return invalidMessage;\n    }\n    const version = gridChartVersion(gridVersion);\n    if (!version) {\n        return invalidMessage;\n    }\n    const { gridMajorMinor, chartsMajorMinor } = version;\n    if (type === 'incompatible') {\n        return `AG Grid version ${gridVersion} and AG Charts version ${chartsVersion} is not supported. AG Grid version ${gridMajorMinor} should be used with AG Chart ${chartsMajorMinor}. Please see https://www.ag-grid.com/javascript-data-grid/modules/ for more information.`;\n    }\n    else if (type === 'invalidCharts') {\n        return `AG Grid version ${gridMajorMinor} should be used with AG Chart ${chartsMajorMinor}. Please see https://www.ag-grid.com/javascript-data-grid/modules/ for more information.`;\n    }\n    return invalidMessage;\n}\nfunction validGridChartsVersion({ gridVersion, chartsVersion }) {\n    if (!isValidVersion(chartsVersion)) {\n        return {\n            isValid: false,\n            message: validGridChartsVersionErrorMessage({ type: 'invalidCharts', gridVersion, chartsVersion })\n        };\n    }\n    if (!isValidVersion(gridVersion)) {\n        return {\n            isValid: false,\n            message: validGridChartsVersionErrorMessage({ type: 'invalidGrid', gridVersion, chartsVersion })\n        };\n    }\n    const [gridMajor, gridMinor] = gridVersion.split('.') || [];\n    const [chartsMajor, chartsMinor] = chartsVersion.split('.') || [];\n    const isValidMajor = isValidMajorVersion({\n        gridMajorVersion: gridMajor,\n        chartsMajorVersion: chartsMajor\n    });\n    if (isValidMajor && gridMinor === chartsMinor) {\n        return {\n            isValid: true\n        };\n    }\n    else if (!isValidMajor || gridMinor !== chartsMinor) {\n        return {\n            isValid: false,\n            message: validGridChartsVersionErrorMessage({ type: 'incompatible', gridVersion, chartsVersion })\n        };\n    }\n    return {\n        isValid: false,\n        message: validGridChartsVersionErrorMessage({ type: 'invalid', gridVersion, chartsVersion })\n    };\n}\n\nconst GridChartsModule = {\n    version: VERSION$a,\n    validate: () => {\n        return validGridChartsVersion({\n            gridVersion: VERSION$a,\n            chartsVersion: ChartService.CHARTS_VERSION\n        });\n    },\n    moduleName: ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.ModuleNames.GridChartsModule,\n    beans: [\n        ChartService, ChartTranslationService, ChartCrossFilterService\n    ],\n    agStackComponents: [\n        { componentName: 'AgColorPicker', componentClass: AgColorPicker },\n        { componentName: 'AgAngleSelect', componentClass: AgAngleSelect },\n    ],\n    dependantModules: [\n        RangeSelectionModule,\n        EnterpriseCoreModule\n    ]\n};\n\n/**\n * Internal Use Only: Used to ensure this file is treated as a module until we can use moduleDetection flag in Ts v4.7\n */\nconst __FORCE_MODULE_DETECTION_AG_GRID_CORE_EXT = 0;\n\nconst agCharts = {\n    time,\n    AgChart\n};\n\nvar __decorate$E = ( false) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nclass DetailCellRendererCtrl extends ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.BeanStub {\n    constructor() {\n        super(...arguments);\n        this.loadRowDataVersion = 0;\n        this.needRefresh = false;\n    }\n    init(comp, params) {\n        this.params = params;\n        this.comp = comp;\n        const doNothingBecauseInsidePinnedSection = params.pinned != null;\n        if (doNothingBecauseInsidePinnedSection) {\n            return;\n        }\n        this.setAutoHeightClasses();\n        this.setupRefreshStrategy();\n        this.addThemeToDetailGrid();\n        this.createDetailGrid();\n        this.loadRowData();\n        this.addManagedListener(params.node.parent, ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.RowNode.EVENT_DATA_CHANGED, () => {\n            this.needRefresh = true;\n        });\n        this.addManagedListener(this.eventService, ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.Events.EVENT_FULL_WIDTH_ROW_FOCUSED, this.onFullWidthRowFocused.bind(this));\n    }\n    onFullWidthRowFocused(e) {\n        const params = this.params;\n        const row = { rowIndex: params.node.rowIndex, rowPinned: params.node.rowPinned };\n        const eventRow = { rowIndex: e.rowIndex, rowPinned: e.rowPinned };\n        const isSameRow = this.rowPositionUtils.sameRow(row, eventRow);\n        if (!isSameRow) {\n            return;\n        }\n        this.focusService.focusInto(this.comp.getGui(), e.fromBelow);\n    }\n    setAutoHeightClasses() {\n        const autoHeight = this.gridOptionsService.is('detailRowAutoHeight');\n        const parentClass = autoHeight ? 'ag-details-row-auto-height' : 'ag-details-row-fixed-height';\n        const detailClass = autoHeight ? 'ag-details-grid-auto-height' : 'ag-details-grid-fixed-height';\n        this.comp.addOrRemoveCssClass(parentClass, true);\n        this.comp.addOrRemoveDetailGridCssClass(detailClass, true);\n    }\n    setupRefreshStrategy() {\n        const providedStrategy = this.params.refreshStrategy;\n        const validSelection = providedStrategy == 'everything' || providedStrategy == 'nothing' || providedStrategy == 'rows';\n        if (validSelection) {\n            this.refreshStrategy = providedStrategy;\n            return;\n        }\n        if (providedStrategy != null) {\n            console.warn(\"AG Grid: invalid cellRendererParams.refreshStrategy = '\" + providedStrategy +\n                \"' supplied, defaulting to refreshStrategy = 'rows'.\");\n        }\n        this.refreshStrategy = 'rows';\n    }\n    addThemeToDetailGrid() {\n        // this is needed by environment service of the child grid, the class needs to be on\n        // the grid div itself - the browser's CSS on the other hand just inherits from the parent grid theme.\n        const { theme } = this.environment.getTheme();\n        if (theme) {\n            this.comp.addOrRemoveDetailGridCssClass(theme, true);\n        }\n    }\n    createDetailGrid() {\n        if (ag_grid_community__WEBPACK_IMPORTED_MODULE_0__._.missing(this.params.detailGridOptions)) {\n            console.warn('AG Grid: could not find detail grid options for master detail, ' +\n                'please set gridOptions.detailCellRendererParams.detailGridOptions');\n            return;\n        }\n        const autoHeight = this.gridOptionsService.is('detailRowAutoHeight');\n        // we clone the detail grid options, as otherwise it would be shared\n        // across many instances, and that would be a problem because we set\n        // api and columnApi into gridOptions\n        const gridOptions = Object.assign({}, this.params.detailGridOptions);\n        if (autoHeight) {\n            gridOptions.domLayout = 'autoHeight';\n        }\n        this.comp.setDetailGrid(gridOptions);\n    }\n    registerDetailWithMaster(api, columnApi) {\n        const rowId = this.params.node.id;\n        const masterGridApi = this.params.api;\n        const gridInfo = {\n            id: rowId,\n            api: api,\n            columnApi: columnApi\n        };\n        const rowNode = this.params.node;\n        // register with api\n        masterGridApi.addDetailGridInfo(rowId, gridInfo);\n        // register with node\n        rowNode.detailGridInfo = gridInfo;\n        this.addDestroyFunc(() => {\n            // the gridInfo can be stale if a refresh happens and\n            // a new row is created before the old one is destroyed.\n            if (rowNode.detailGridInfo !== gridInfo) {\n                return;\n            }\n            masterGridApi.removeDetailGridInfo(rowId); // unregister from api\n            rowNode.detailGridInfo = null; // unregister from node\n        });\n    }\n    loadRowData() {\n        // in case a refresh happens before the last refresh completes (as we depend on async\n        // application logic) we keep track on what the latest call was.\n        this.loadRowDataVersion++;\n        const versionThisCall = this.loadRowDataVersion;\n        const userFunc = this.params.getDetailRowData;\n        if (!userFunc) {\n            console.warn('AG Grid: could not find getDetailRowData for master / detail, ' +\n                'please set gridOptions.detailCellRendererParams.getDetailRowData');\n            return;\n        }\n        const successCallback = (rowData) => {\n            const mostRecentCall = this.loadRowDataVersion === versionThisCall;\n            if (mostRecentCall) {\n                this.comp.setRowData(rowData);\n            }\n        };\n        const funcParams = {\n            node: this.params.node,\n            // we take data from node, rather than params.data\n            // as the data could have been updated with new instance\n            data: this.params.node.data,\n            successCallback: successCallback,\n            context: this.gridOptionsService.context\n        };\n        userFunc(funcParams);\n    }\n    refresh() {\n        const GET_GRID_TO_REFRESH = false;\n        const GET_GRID_TO_DO_NOTHING = true;\n        // if we return true, it means we pretend to the grid\n        // that we have refreshed, so refresh will never happen.\n        const doNotRefresh = !this.needRefresh || this.refreshStrategy === 'nothing';\n        if (doNotRefresh) {\n            // we do nothing in this refresh method, and also tell the grid to do nothing\n            return GET_GRID_TO_DO_NOTHING;\n        }\n        // reset flag, so don't refresh again until more data changes.\n        this.needRefresh = false;\n        if (this.refreshStrategy === 'everything') {\n            // we want full refresh, so tell the grid to destroy and recreate this cell\n            return GET_GRID_TO_REFRESH;\n        }\n        else {\n            // do the refresh here, and tell the grid to do nothing\n            this.loadRowData();\n            return GET_GRID_TO_DO_NOTHING;\n        }\n    }\n}\n__decorate$E([\n    (0,ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.Autowired)('rowPositionUtils')\n], DetailCellRendererCtrl.prototype, \"rowPositionUtils\", void 0);\n__decorate$E([\n    (0,ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.Autowired)('focusService')\n], DetailCellRendererCtrl.prototype, \"focusService\", void 0);\n\nvar __decorate$D = ( false) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nclass DetailCellRenderer extends ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.Component {\n    init(params) {\n        this.params = params;\n        this.selectAndSetTemplate();\n        const compProxy = {\n            addOrRemoveCssClass: (cssClassName, on) => this.addOrRemoveCssClass(cssClassName, on),\n            addOrRemoveDetailGridCssClass: (cssClassName, on) => this.eDetailGrid.classList.toggle(cssClassName, on),\n            setDetailGrid: gridOptions => this.setDetailGrid(gridOptions),\n            setRowData: rowData => this.setRowData(rowData),\n            getGui: () => this.eDetailGrid\n        };\n        this.ctrl = this.createManagedBean(new DetailCellRendererCtrl());\n        this.ctrl.init(compProxy, params);\n    }\n    refresh() {\n        return this.ctrl && this.ctrl.refresh();\n    }\n    // this is a user component, and IComponent has \"public destroy()\" as part of the interface.\n    // so we need to override destroy() just to make the method public.\n    destroy() {\n        super.destroy();\n    }\n    selectAndSetTemplate() {\n        if (this.params.pinned) {\n            this.setTemplate('<div class=\"ag-details-row\"></div>');\n            return;\n        }\n        const setDefaultTemplate = () => {\n            this.setTemplate(DetailCellRenderer.TEMPLATE);\n        };\n        if (ag_grid_community__WEBPACK_IMPORTED_MODULE_0__._.missing(this.params.template)) {\n            // use default template\n            setDefaultTemplate();\n        }\n        else {\n            // use user provided template\n            if (typeof this.params.template === 'string') {\n                this.setTemplate(this.params.template);\n            }\n            else if (typeof this.params.template === 'function') {\n                const templateFunc = this.params.template;\n                const template = templateFunc(this.params);\n                this.setTemplate(template);\n            }\n            else {\n                console.warn('AG Grid: detailCellRendererParams.template should be function or string');\n                setDefaultTemplate();\n            }\n        }\n        if (this.eDetailGrid == null) {\n            console.warn('AG Grid: reference to eDetailGrid was missing from the details template. ' +\n                'Please add ref=\"eDetailGrid\" to the template.');\n        }\n    }\n    setDetailGrid(gridOptions) {\n        if (!this.eDetailGrid) {\n            return;\n        }\n        // AG-1715\n        // this is only needed when suppressReactUi=true, once we remove the old way\n        // of doing react, and Master / Details is all native React, then we\n        // can remove this code.\n        const agGridReact = this.context.getBean('agGridReact');\n        const agGridReactCloned = agGridReact ? ag_grid_community__WEBPACK_IMPORTED_MODULE_0__._.cloneObject(agGridReact) : undefined;\n        // when we create detail grid, the detail grid needs frameworkComponentWrapper so that\n        // it created child components correctly, ie  Angular detail grid can have Angular cell renderer.\n        // this is only used by Angular and Vue, as React uses native React AG Grid detail grids\n        const frameworkComponentWrapper = this.context.getBean('frameworkComponentWrapper');\n        const frameworkOverrides = this.getFrameworkOverrides();\n        // tslint:disable-next-line\n        new ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.Grid(this.eDetailGrid, gridOptions, {\n            frameworkOverrides,\n            providedBeanInstances: {\n                agGridReact: agGridReactCloned,\n                frameworkComponentWrapper: frameworkComponentWrapper\n            }\n        });\n        this.detailApi = gridOptions.api;\n        this.ctrl.registerDetailWithMaster(gridOptions.api, gridOptions.columnApi);\n        this.addDestroyFunc(() => {\n            if (gridOptions.api) {\n                gridOptions.api.destroy();\n            }\n        });\n    }\n    setRowData(rowData) {\n        // ensure detail grid api still exists (grid may be destroyed when async call tries to set data)\n        this.detailApi && this.detailApi.setRowData(rowData);\n    }\n}\nDetailCellRenderer.TEMPLATE = `<div class=\"ag-details-row\" role=\"gridcell\">\n            <div ref=\"eDetailGrid\" class=\"ag-details-grid\" role=\"presentation\"></div>\n        </div>`;\n__decorate$D([\n    (0,ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.RefSelector)('eDetailGrid')\n], DetailCellRenderer.prototype, \"eDetailGrid\", void 0);\n\n// DO NOT UPDATE MANUALLY: Generated from script during build time\nconst VERSION$8 = '30.0.2';\n\nconst MasterDetailModule = {\n    version: VERSION$8,\n    moduleName: ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.ModuleNames.MasterDetailModule,\n    beans: [],\n    userComponents: [\n        { componentName: 'agDetailCellRenderer', componentClass: DetailCellRenderer }\n    ],\n    controllers: [\n        { controllerName: 'detailCellRenderer', controllerClass: DetailCellRendererCtrl }\n    ],\n    dependantModules: [\n        EnterpriseCoreModule\n    ]\n};\n\nvar __decorate$C = ( false) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nlet EnterpriseMenuFactory = class EnterpriseMenuFactory extends ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.BeanStub {\n    hideActiveMenu() {\n        this.destroyBean(this.activeMenu);\n    }\n    showMenuAfterMouseEvent(column, mouseEvent, defaultTab) {\n        this.showMenu(column, (menu) => {\n            const ePopup = menu.getGui();\n            this.popupService.positionPopupUnderMouseEvent({\n                type: 'columnMenu',\n                column,\n                mouseEvent,\n                ePopup\n            });\n            if (defaultTab) {\n                menu.showTab(defaultTab);\n            }\n        }, 'columnMenu', defaultTab, undefined, mouseEvent.target);\n    }\n    showMenuAfterButtonClick(column, eventSource, containerType, defaultTab, restrictToTabs) {\n        let multiplier = -1;\n        let alignSide = 'left';\n        if (this.gridOptionsService.is('enableRtl')) {\n            multiplier = 1;\n            alignSide = 'right';\n        }\n        this.showMenu(column, (menu) => {\n            const ePopup = menu.getGui();\n            this.popupService.positionPopupByComponent({\n                type: containerType,\n                column,\n                eventSource,\n                ePopup,\n                alignSide,\n                nudgeX: 9 * multiplier,\n                nudgeY: -23,\n                position: 'under',\n                keepWithinBounds: true,\n            });\n            if (defaultTab) {\n                menu.showTab(defaultTab);\n            }\n        }, containerType, defaultTab, restrictToTabs, eventSource);\n    }\n    showMenu(column, positionCallback, containerType, defaultTab, restrictToTabs, eventSource) {\n        const { menu, eMenuGui, currentHeaderPosition, currentColumnIndex, anchorToElement } = this.getMenuParams(column, restrictToTabs, eventSource);\n        const closedFuncs = [];\n        closedFuncs.push(this.getClosedCallback(column, menu, currentHeaderPosition, currentColumnIndex, eventSource));\n        const translate = this.localeService.getLocaleTextFunc();\n        // need to show filter before positioning, as only after filter\n        // is visible can we find out what the width of it is\n        this.popupService.addPopup({\n            modal: true,\n            eChild: eMenuGui,\n            closeOnEsc: true,\n            closedCallback: (e) => {\n                closedFuncs.forEach(f => f(e));\n            },\n            afterGuiAttached: params => menu.afterGuiAttached(Object.assign({}, { container: containerType }, params)),\n            // if defaultTab is not present, positionCallback will be called\n            // after `showTabBasedOnPreviousSelection` is called.\n            positionCallback: !!defaultTab ? () => positionCallback(menu) : undefined,\n            ariaLabel: translate('ariaLabelColumnMenu', 'Column Menu')\n        });\n        if (!defaultTab) {\n            menu.showTabBasedOnPreviousSelection();\n            // reposition the menu because the method above could load\n            // an element that is bigger than enterpriseMenu header.\n            positionCallback(menu);\n        }\n        // if user starts showing / hiding columns, or otherwise move the underlying column\n        // for this menu, we want to stop tracking the menu with the column position. otherwise\n        // the menu would move as the user is using the columns tab inside the menu.\n        const stopAnchoringPromise = this.popupService.setPopupPositionRelatedToElement(eMenuGui, anchorToElement);\n        if (stopAnchoringPromise) {\n            this.addStopAnchoring(stopAnchoringPromise, column, closedFuncs);\n        }\n        menu.addEventListener(EnterpriseMenu.EVENT_TAB_SELECTED, (event) => {\n            this.lastSelectedTab = event.key;\n        });\n        column.setMenuVisible(true, 'contextMenu');\n        this.activeMenu = menu;\n        menu.addEventListener(ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.BeanStub.EVENT_DESTROYED, () => {\n            if (this.activeMenu === menu) {\n                this.activeMenu = null;\n            }\n        });\n    }\n    addStopAnchoring(stopAnchoringPromise, column, closedFuncsArr) {\n        stopAnchoringPromise.then((stopAnchoringFunc) => {\n            column.addEventListener('leftChanged', stopAnchoringFunc);\n            column.addEventListener('visibleChanged', stopAnchoringFunc);\n            closedFuncsArr.push(() => {\n                column.removeEventListener('leftChanged', stopAnchoringFunc);\n                column.removeEventListener('visibleChanged', stopAnchoringFunc);\n            });\n        });\n    }\n    getClosedCallback(column, menu, headerPosition, columnIndex, eventSource) {\n        return (e) => {\n            this.destroyBean(menu);\n            column.setMenuVisible(false, 'contextMenu');\n            const isKeyboardEvent = e instanceof KeyboardEvent;\n            if (!isKeyboardEvent || !eventSource) {\n                return;\n            }\n            if (ag_grid_community__WEBPACK_IMPORTED_MODULE_0__._.isVisible(eventSource)) {\n                const focusableEl = this.focusService.findTabbableParent(eventSource);\n                if (focusableEl) {\n                    if (column) {\n                        this.headerNavigationService.scrollToColumn(column);\n                    }\n                    focusableEl.focus();\n                }\n            }\n            // if the focusEl is no longer in the DOM, we try to focus\n            // the header that is closest to the previous header position\n            else if (headerPosition && columnIndex !== -1) {\n                const allColumns = this.columnModel.getAllDisplayedColumns();\n                const columnToFocus = allColumns[columnIndex] || ag_grid_community__WEBPACK_IMPORTED_MODULE_0__._.last(allColumns);\n                if (columnToFocus) {\n                    this.focusService.focusHeaderPosition({\n                        headerPosition: {\n                            headerRowIndex: headerPosition.headerRowIndex,\n                            column: columnToFocus\n                        }\n                    });\n                }\n            }\n        };\n    }\n    getMenuParams(column, restrictToTabs, eventSource) {\n        const menu = this.createBean(new EnterpriseMenu(column, this.lastSelectedTab, restrictToTabs));\n        return {\n            menu,\n            eMenuGui: menu.getGui(),\n            currentHeaderPosition: this.focusService.getFocusedHeader(),\n            currentColumnIndex: this.columnModel.getAllDisplayedColumns().indexOf(column),\n            anchorToElement: eventSource || this.ctrlsService.getGridBodyCtrl().getGui()\n        };\n    }\n    isMenuEnabled(column) {\n        return column.getMenuTabs(EnterpriseMenu.TABS_DEFAULT).length > 0;\n    }\n};\n__decorate$C([\n    (0,ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.Autowired)('popupService')\n], EnterpriseMenuFactory.prototype, \"popupService\", void 0);\n__decorate$C([\n    (0,ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.Autowired)('focusService')\n], EnterpriseMenuFactory.prototype, \"focusService\", void 0);\n__decorate$C([\n    (0,ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.Autowired)('headerNavigationService')\n], EnterpriseMenuFactory.prototype, \"headerNavigationService\", void 0);\n__decorate$C([\n    (0,ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.Autowired)('ctrlsService')\n], EnterpriseMenuFactory.prototype, \"ctrlsService\", void 0);\n__decorate$C([\n    (0,ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.Autowired)('columnModel')\n], EnterpriseMenuFactory.prototype, \"columnModel\", void 0);\nEnterpriseMenuFactory = __decorate$C([\n    (0,ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.Bean)('menuFactory')\n], EnterpriseMenuFactory);\nclass EnterpriseMenu extends ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.BeanStub {\n    constructor(column, initialSelection, restrictTo) {\n        super();\n        this.tabFactories = {};\n        this.includeChecks = {};\n        this.column = column;\n        this.initialSelection = initialSelection;\n        this.tabFactories[EnterpriseMenu.TAB_GENERAL] = this.createMainPanel.bind(this);\n        this.tabFactories[EnterpriseMenu.TAB_FILTER] = this.createFilterPanel.bind(this);\n        this.tabFactories[EnterpriseMenu.TAB_COLUMNS] = this.createColumnsPanel.bind(this);\n        this.includeChecks[EnterpriseMenu.TAB_GENERAL] = () => true;\n        this.includeChecks[EnterpriseMenu.TAB_FILTER] = () => this.filterManager.isFilterAllowed(column);\n        this.includeChecks[EnterpriseMenu.TAB_COLUMNS] = () => true;\n        this.restrictTo = restrictTo;\n    }\n    init() {\n        const tabs = this.getTabsToCreate().map(name => this.createTab(name));\n        this.tabbedLayout = new ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.TabbedLayout({\n            items: tabs,\n            cssClass: 'ag-menu',\n            onActiveItemClicked: this.onHidePopup.bind(this),\n            onItemClicked: this.onTabItemClicked.bind(this)\n        });\n        this.createBean(this.tabbedLayout);\n        if (this.mainMenuList) {\n            this.mainMenuList.setParentComponent(this.tabbedLayout);\n        }\n        this.addDestroyFunc(() => this.destroyBean(this.tabbedLayout));\n    }\n    getTabsToCreate() {\n        if (this.restrictTo) {\n            return this.restrictTo;\n        }\n        return this.column.getMenuTabs(EnterpriseMenu.TABS_DEFAULT)\n            .filter(tabName => this.isValidMenuTabItem(tabName))\n            .filter(tabName => this.isNotSuppressed(tabName))\n            .filter(tabName => this.isModuleLoaded(tabName));\n    }\n    isModuleLoaded(menuTabName) {\n        if (menuTabName === EnterpriseMenu.TAB_COLUMNS) {\n            return ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.ModuleRegistry.isRegistered(ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.ModuleNames.ColumnsToolPanelModule, this.context.getGridId());\n        }\n        return true;\n    }\n    isValidMenuTabItem(menuTabName) {\n        let isValid = true;\n        let itemsToConsider = EnterpriseMenu.TABS_DEFAULT;\n        if (this.restrictTo != null) {\n            isValid = this.restrictTo.indexOf(menuTabName) > -1;\n            itemsToConsider = this.restrictTo;\n        }\n        isValid = isValid && EnterpriseMenu.TABS_DEFAULT.indexOf(menuTabName) > -1;\n        if (!isValid) {\n            console.warn(`AG Grid: Trying to render an invalid menu item '${menuTabName}'. Check that your 'menuTabs' contains one of [${itemsToConsider}]`);\n        }\n        return isValid;\n    }\n    isNotSuppressed(menuTabName) {\n        return this.includeChecks[menuTabName]();\n    }\n    createTab(name) {\n        return this.tabFactories[name]();\n    }\n    showTabBasedOnPreviousSelection() {\n        // show the tab the user was on last time they had a menu open\n        this.showTab(this.initialSelection);\n    }\n    showTab(toShow) {\n        if (this.tabItemColumns && toShow === EnterpriseMenu.TAB_COLUMNS) {\n            this.tabbedLayout.showItem(this.tabItemColumns);\n        }\n        else if (this.tabItemFilter && toShow === EnterpriseMenu.TAB_FILTER) {\n            this.tabbedLayout.showItem(this.tabItemFilter);\n        }\n        else if (this.tabItemGeneral && toShow === EnterpriseMenu.TAB_GENERAL) {\n            this.tabbedLayout.showItem(this.tabItemGeneral);\n        }\n        else {\n            this.tabbedLayout.showFirstItem();\n        }\n    }\n    onTabItemClicked(event) {\n        let key = null;\n        switch (event.item) {\n            case this.tabItemColumns:\n                key = EnterpriseMenu.TAB_COLUMNS;\n                break;\n            case this.tabItemFilter:\n                key = EnterpriseMenu.TAB_FILTER;\n                break;\n            case this.tabItemGeneral:\n                key = EnterpriseMenu.TAB_GENERAL;\n                break;\n        }\n        if (key) {\n            this.activateTab(key);\n        }\n    }\n    activateTab(tab) {\n        const ev = {\n            type: EnterpriseMenu.EVENT_TAB_SELECTED,\n            key: tab\n        };\n        this.dispatchEvent(ev);\n    }\n    getMenuItems() {\n        const defaultMenuOptions = this.getDefaultMenuOptions();\n        let result;\n        const userFunc = this.gridOptionsService.getCallback('getMainMenuItems');\n        if (userFunc) {\n            result = userFunc({\n                column: this.column,\n                defaultItems: defaultMenuOptions\n            });\n        }\n        else {\n            result = defaultMenuOptions;\n        }\n        // GUI looks weird when two separators are side by side. this can happen accidentally\n        // if we remove items from the menu then two separators can edit up adjacent.\n        ag_grid_community__WEBPACK_IMPORTED_MODULE_0__._.removeRepeatsFromArray(result, EnterpriseMenu.MENU_ITEM_SEPARATOR);\n        return result;\n    }\n    getDefaultMenuOptions() {\n        const result = [];\n        const allowPinning = !this.column.getColDef().lockPinned;\n        const rowGroupCount = this.columnModel.getRowGroupColumns().length;\n        const doingGrouping = rowGroupCount > 0;\n        const groupedByThisColumn = this.columnModel.getRowGroupColumns().indexOf(this.column) >= 0;\n        const allowValue = this.column.isAllowValue();\n        const allowRowGroup = this.column.isAllowRowGroup();\n        const isPrimary = this.column.isPrimary();\n        const pivotModeOn = this.columnModel.isPivotMode();\n        const isInMemoryRowModel = this.rowModel.getType() === 'clientSide';\n        const usingTreeData = this.gridOptionsService.isTreeData();\n        const allowValueAgg = \n        // if primary, then only allow aggValue if grouping and it's a value columns\n        (isPrimary && doingGrouping && allowValue)\n            // secondary columns can always have aggValue, as it means it's a pivot value column\n            || !isPrimary;\n        if (allowPinning) {\n            result.push('pinSubMenu');\n        }\n        if (allowValueAgg) {\n            result.push('valueAggSubMenu');\n        }\n        if (allowPinning || allowValueAgg) {\n            result.push(EnterpriseMenu.MENU_ITEM_SEPARATOR);\n        }\n        result.push('autoSizeThis');\n        result.push('autoSizeAll');\n        result.push(EnterpriseMenu.MENU_ITEM_SEPARATOR);\n        if (allowRowGroup && this.column.isPrimary()) {\n            if (groupedByThisColumn) {\n                result.push('rowUnGroup');\n            }\n            else {\n                result.push('rowGroup');\n            }\n        }\n        result.push(EnterpriseMenu.MENU_ITEM_SEPARATOR);\n        result.push('resetColumns');\n        // only add grouping expand/collapse if grouping in the InMemoryRowModel\n        // if pivoting, we only have expandable groups if grouping by 2 or more columns\n        // as the lowest level group is not expandable while pivoting.\n        // if not pivoting, then any active row group can be expanded.\n        const allowExpandAndContract = isInMemoryRowModel && (usingTreeData || rowGroupCount > (pivotModeOn ? 1 : 0));\n        if (allowExpandAndContract) {\n            result.push('expandAll');\n            result.push('contractAll');\n        }\n        return result;\n    }\n    createMainPanel() {\n        this.mainMenuList = this.createManagedBean(new ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.AgMenuList());\n        const menuItems = this.getMenuItems();\n        const menuItemsMapped = this.menuItemMapper.mapWithStockItems(menuItems, this.column);\n        this.mainMenuList.addMenuItems(menuItemsMapped);\n        this.mainMenuList.addEventListener(ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.AgMenuItemComponent.EVENT_MENU_ITEM_SELECTED, this.onHidePopup.bind(this));\n        this.tabItemGeneral = {\n            title: ag_grid_community__WEBPACK_IMPORTED_MODULE_0__._.createIconNoSpan('menu', this.gridOptionsService, this.column),\n            titleLabel: EnterpriseMenu.TAB_GENERAL.replace('MenuTab', ''),\n            bodyPromise: ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.AgPromise.resolve(this.mainMenuList.getGui()),\n            name: EnterpriseMenu.TAB_GENERAL\n        };\n        return this.tabItemGeneral;\n    }\n    onHidePopup(event) {\n        let keyboardEvent;\n        if (event && event.event && event.event instanceof KeyboardEvent) {\n            keyboardEvent = event.event;\n        }\n        this.hidePopupFunc(keyboardEvent && { keyboardEvent: keyboardEvent });\n        // this method only gets called when the menu was closed by selection an option\n        // in this case we highlight the cell that was previously highlighted\n        const focusedCell = this.focusService.getFocusedCell();\n        const eDocument = this.gridOptionsService.getDocument();\n        if (eDocument.activeElement === eDocument.body && focusedCell) {\n            const { rowIndex, rowPinned, column } = focusedCell;\n            this.focusService.setFocusedCell({ rowIndex, column, rowPinned, forceBrowserFocus: true, preventScrollOnBrowserFocus: true });\n        }\n    }\n    createFilterPanel() {\n        const filterWrapper = this.filterManager.getOrCreateFilterWrapper(this.column, 'COLUMN_MENU');\n        if (!filterWrapper) {\n            throw new Error('AG Grid - Unable to instantiate filter');\n        }\n        const afterFilterAttachedCallback = (params) => {\n            if (!(filterWrapper === null || filterWrapper === void 0 ? void 0 : filterWrapper.filterPromise)) {\n                return;\n            }\n            // slightly odd block this - this promise will always have been resolved by the time it gets here, so won't be\n            // async (_unless_ in react or similar, but if so why not encountered before now?).\n            // I'd suggest a future improvement would be to remove/replace this promise as this block just wont work if it is\n            // async and is confusing if you don't have this context\n            filterWrapper.filterPromise.then(filter => {\n                if (filter && filter.afterGuiAttached) {\n                    filter.afterGuiAttached(params);\n                }\n            });\n        };\n        // see comment above\n        const afterDetachedCallback = () => { var _a; return (_a = filterWrapper === null || filterWrapper === void 0 ? void 0 : filterWrapper.filterPromise) === null || _a === void 0 ? void 0 : _a.then(filter => { var _a; return (_a = filter === null || filter === void 0 ? void 0 : filter.afterGuiDetached) === null || _a === void 0 ? void 0 : _a.call(filter); }); };\n        this.tabItemFilter = {\n            title: ag_grid_community__WEBPACK_IMPORTED_MODULE_0__._.createIconNoSpan('filter', this.gridOptionsService, this.column),\n            titleLabel: EnterpriseMenu.TAB_FILTER.replace('MenuTab', ''),\n            bodyPromise: filterWrapper === null || filterWrapper === void 0 ? void 0 : filterWrapper.guiPromise,\n            afterAttachedCallback: afterFilterAttachedCallback,\n            afterDetachedCallback,\n            name: EnterpriseMenu.TAB_FILTER\n        };\n        return this.tabItemFilter;\n    }\n    createColumnsPanel() {\n        const eWrapperDiv = document.createElement('div');\n        eWrapperDiv.classList.add('ag-menu-column-select-wrapper');\n        const columnSelectPanel = this.createManagedBean(new PrimaryColsPanel());\n        let columnsMenuParams = this.column.getColDef().columnsMenuParams;\n        if (!columnsMenuParams) {\n            columnsMenuParams = {};\n        }\n        const { contractColumnSelection, suppressColumnExpandAll, suppressColumnFilter, suppressColumnSelectAll, suppressSyncLayoutWithGrid, columnLayout } = columnsMenuParams;\n        columnSelectPanel.init(false, {\n            suppressColumnMove: false,\n            suppressValues: false,\n            suppressPivots: false,\n            suppressRowGroups: false,\n            suppressPivotMode: false,\n            contractColumnSelection: !!contractColumnSelection,\n            suppressColumnExpandAll: !!suppressColumnExpandAll,\n            suppressColumnFilter: !!suppressColumnFilter,\n            suppressColumnSelectAll: !!suppressColumnSelectAll,\n            suppressSyncLayoutWithGrid: !!columnLayout || !!suppressSyncLayoutWithGrid,\n            api: this.gridApi,\n            columnApi: this.columnApi,\n            context: this.gridOptionsService.context\n        }, 'columnMenu');\n        if (columnLayout) {\n            columnSelectPanel.setColumnLayout(columnLayout);\n        }\n        const columnSelectPanelGui = columnSelectPanel.getGui();\n        columnSelectPanelGui.classList.add('ag-menu-column-select');\n        eWrapperDiv.appendChild(columnSelectPanelGui);\n        this.tabItemColumns = {\n            title: ag_grid_community__WEBPACK_IMPORTED_MODULE_0__._.createIconNoSpan('columns', this.gridOptionsService, this.column),\n            titleLabel: EnterpriseMenu.TAB_COLUMNS.replace('MenuTab', ''),\n            bodyPromise: ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.AgPromise.resolve(eWrapperDiv),\n            name: EnterpriseMenu.TAB_COLUMNS\n        };\n        return this.tabItemColumns;\n    }\n    afterGuiAttached(params) {\n        const { container, hidePopup } = params;\n        this.tabbedLayout.setAfterAttachedParams({ container, hidePopup });\n        if (hidePopup) {\n            this.hidePopupFunc = hidePopup;\n            this.addDestroyFunc(hidePopup);\n        }\n    }\n    getGui() {\n        return this.tabbedLayout.getGui();\n    }\n}\nEnterpriseMenu.EVENT_TAB_SELECTED = 'tabSelected';\nEnterpriseMenu.TAB_FILTER = 'filterMenuTab';\nEnterpriseMenu.TAB_GENERAL = 'generalMenuTab';\nEnterpriseMenu.TAB_COLUMNS = 'columnsMenuTab';\nEnterpriseMenu.TABS_DEFAULT = [EnterpriseMenu.TAB_GENERAL, EnterpriseMenu.TAB_FILTER, EnterpriseMenu.TAB_COLUMNS];\nEnterpriseMenu.MENU_ITEM_SEPARATOR = 'separator';\n__decorate$C([\n    (0,ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.Autowired)('columnModel')\n], EnterpriseMenu.prototype, \"columnModel\", void 0);\n__decorate$C([\n    (0,ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.Autowired)('filterManager')\n], EnterpriseMenu.prototype, \"filterManager\", void 0);\n__decorate$C([\n    (0,ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.Autowired)('gridApi')\n], EnterpriseMenu.prototype, \"gridApi\", void 0);\n__decorate$C([\n    (0,ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.Autowired)('columnApi')\n], EnterpriseMenu.prototype, \"columnApi\", void 0);\n__decorate$C([\n    (0,ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.Autowired)('menuItemMapper')\n], EnterpriseMenu.prototype, \"menuItemMapper\", void 0);\n__decorate$C([\n    (0,ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.Autowired)('rowModel')\n], EnterpriseMenu.prototype, \"rowModel\", void 0);\n__decorate$C([\n    (0,ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.Autowired)('focusService')\n], EnterpriseMenu.prototype, \"focusService\", void 0);\n__decorate$C([\n    ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.PostConstruct\n], EnterpriseMenu.prototype, \"init\", null);\n\nvar __decorate$B = ( false) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nconst CSS_MENU = 'ag-menu';\nconst CSS_CONTEXT_MENU_OPEN = 'ag-context-menu-open';\nlet ContextMenuFactory = class ContextMenuFactory extends ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.BeanStub {\n    hideActiveMenu() {\n        this.destroyBean(this.activeMenu);\n    }\n    getMenuItems(node, column, value) {\n        const defaultMenuOptions = [];\n        if (ag_grid_community__WEBPACK_IMPORTED_MODULE_0__._.exists(node) && ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.ModuleRegistry.isRegistered(ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.ModuleNames.ClipboardModule, this.context.getGridId())) {\n            if (column) {\n                // only makes sense if column exists, could have originated from a row\n                if (!this.gridOptionsService.is('suppressCutToClipboard')) {\n                    defaultMenuOptions.push('cut');\n                }\n                defaultMenuOptions.push('copy', 'copyWithHeaders', 'copyWithGroupHeaders', 'paste', 'separator');\n            }\n        }\n        if (this.gridOptionsService.is('enableCharts') && ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.ModuleRegistry.isRegistered(ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.ModuleNames.GridChartsModule, this.context.getGridId())) {\n            if (this.columnModel.isPivotMode()) {\n                defaultMenuOptions.push('pivotChart');\n            }\n            if (this.rangeService && !this.rangeService.isEmpty()) {\n                defaultMenuOptions.push('chartRange');\n            }\n        }\n        if (ag_grid_community__WEBPACK_IMPORTED_MODULE_0__._.exists(node)) {\n            // if user clicks a cell\n            const csvModuleMissing = !ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.ModuleRegistry.isRegistered(ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.ModuleNames.CsvExportModule, this.context.getGridId());\n            const excelModuleMissing = !ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.ModuleRegistry.isRegistered(ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.ModuleNames.ExcelExportModule, this.context.getGridId());\n            const suppressExcel = this.gridOptionsService.is('suppressExcelExport') || excelModuleMissing;\n            const suppressCsv = this.gridOptionsService.is('suppressCsvExport') || csvModuleMissing;\n            const onIPad = ag_grid_community__WEBPACK_IMPORTED_MODULE_0__._.isIOSUserAgent();\n            const anyExport = !onIPad && (!suppressExcel || !suppressCsv);\n            if (anyExport) {\n                defaultMenuOptions.push('export');\n            }\n        }\n        const userFunc = this.gridOptionsService.getCallback('getContextMenuItems');\n        if (userFunc) {\n            const params = {\n                node: node,\n                column: column,\n                value: value,\n                defaultItems: defaultMenuOptions.length ? defaultMenuOptions : undefined,\n            };\n            return userFunc(params);\n        }\n        return defaultMenuOptions;\n    }\n    onContextMenu(mouseEvent, touchEvent, rowNode, column, value, anchorToElement) {\n        // to allow us to debug in chrome, we ignore the event if ctrl is pressed.\n        // not everyone wants this, so first 'if' below allows to turn this hack off.\n        if (!this.gridOptionsService.is('allowContextMenuWithControlKey')) {\n            // then do the check\n            if (mouseEvent && (mouseEvent.ctrlKey || mouseEvent.metaKey)) {\n                return;\n            }\n        }\n        // need to do this regardless of context menu showing or not, so doing\n        // before the isSuppressContextMenu() check\n        if (mouseEvent) {\n            this.blockMiddleClickScrollsIfNeeded(mouseEvent);\n        }\n        if (this.gridOptionsService.is('suppressContextMenu')) {\n            return;\n        }\n        const eventOrTouch = mouseEvent ? mouseEvent : touchEvent.touches[0];\n        if (this.showMenu(rowNode, column, value, eventOrTouch, anchorToElement)) {\n            const event = mouseEvent ? mouseEvent : touchEvent;\n            event.preventDefault();\n        }\n    }\n    blockMiddleClickScrollsIfNeeded(mouseEvent) {\n        // if we don't do this, then middle click will never result in a 'click' event, as 'mousedown'\n        // will be consumed by the browser to mean 'scroll' (as you can scroll with the middle mouse\n        // button in the browser). so this property allows the user to receive middle button clicks if\n        // they want.\n        const { gridOptionsService } = this;\n        const { which } = mouseEvent;\n        if (gridOptionsService.is('suppressMiddleClickScrolls') && which === 2) {\n            mouseEvent.preventDefault();\n        }\n    }\n    showMenu(node, column, value, mouseEvent, anchorToElement) {\n        const menuItems = this.getMenuItems(node, column, value);\n        const eGridBodyGui = this.ctrlsService.getGridBodyCtrl().getGui();\n        if (menuItems === undefined || ag_grid_community__WEBPACK_IMPORTED_MODULE_0__._.missingOrEmpty(menuItems)) {\n            return false;\n        }\n        const menu = new ContextMenu(menuItems);\n        this.createBean(menu);\n        const eMenuGui = menu.getGui();\n        const positionParams = {\n            column: column,\n            rowNode: node,\n            type: 'contextMenu',\n            mouseEvent: mouseEvent,\n            ePopup: eMenuGui,\n            // move one pixel away so that accidentally double clicking\n            // won't show the browser's contextmenu\n            nudgeY: 1\n        };\n        const translate = this.localeService.getLocaleTextFunc();\n        const addPopupRes = this.popupService.addPopup({\n            modal: true,\n            eChild: eMenuGui,\n            closeOnEsc: true,\n            closedCallback: () => {\n                eGridBodyGui.classList.remove(CSS_CONTEXT_MENU_OPEN);\n                this.destroyBean(menu);\n            },\n            click: mouseEvent,\n            positionCallback: () => {\n                const isRtl = this.gridOptionsService.is('enableRtl');\n                this.popupService.positionPopupUnderMouseEvent(Object.assign(Object.assign({}, positionParams), { nudgeX: isRtl ? (eMenuGui.offsetWidth + 1) * -1 : 1 }));\n            },\n            // so when browser is scrolled down, or grid is scrolled, context menu stays with cell\n            anchorToElement: anchorToElement,\n            ariaLabel: translate('ariaLabelContextMenu', 'Context Menu')\n        });\n        if (addPopupRes) {\n            eGridBodyGui.classList.add(CSS_CONTEXT_MENU_OPEN);\n            menu.afterGuiAttached({ container: 'contextMenu', hidePopup: addPopupRes.hideFunc });\n        }\n        // there should never be an active menu at this point, however it was found\n        // that you could right click a second time just 1 or 2 pixels from the first\n        // click, and another menu would pop up. so somehow the logic for closing the\n        // first menu (clicking outside should close it) was glitchy somehow. an easy\n        // way to avoid this is just remove the old context menu here if it exists.\n        if (this.activeMenu) {\n            this.hideActiveMenu();\n        }\n        this.activeMenu = menu;\n        menu.addEventListener(ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.BeanStub.EVENT_DESTROYED, () => {\n            if (this.activeMenu === menu) {\n                this.activeMenu = null;\n            }\n        });\n        // hide the popup if something gets selected\n        if (addPopupRes) {\n            menu.addEventListener(ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.AgMenuItemComponent.EVENT_MENU_ITEM_SELECTED, addPopupRes.hideFunc);\n        }\n        return true;\n    }\n};\n__decorate$B([\n    (0,ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.Autowired)('popupService')\n], ContextMenuFactory.prototype, \"popupService\", void 0);\n__decorate$B([\n    (0,ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.Optional)('rangeService')\n], ContextMenuFactory.prototype, \"rangeService\", void 0);\n__decorate$B([\n    (0,ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.Autowired)('ctrlsService')\n], ContextMenuFactory.prototype, \"ctrlsService\", void 0);\n__decorate$B([\n    (0,ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.Autowired)('columnModel')\n], ContextMenuFactory.prototype, \"columnModel\", void 0);\nContextMenuFactory = __decorate$B([\n    (0,ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.Bean)('contextMenuFactory')\n], ContextMenuFactory);\nclass ContextMenu extends ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.Component {\n    constructor(menuItems) {\n        super(/* html */ `<div class=\"${CSS_MENU}\" role=\"presentation\"></div>`);\n        this.menuList = null;\n        this.focusedCell = null;\n        this.menuItems = menuItems;\n    }\n    addMenuItems() {\n        const menuList = this.createManagedBean(new ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.AgMenuList());\n        const menuItemsMapped = this.menuItemMapper.mapWithStockItems(this.menuItems, null);\n        menuList.addMenuItems(menuItemsMapped);\n        this.appendChild(menuList);\n        this.menuList = menuList;\n        menuList.addEventListener(ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.AgMenuItemComponent.EVENT_MENU_ITEM_SELECTED, (e) => this.dispatchEvent(e));\n    }\n    afterGuiAttached(params) {\n        if (params.hidePopup) {\n            this.addDestroyFunc(params.hidePopup);\n        }\n        this.focusedCell = this.focusService.getFocusedCell();\n        if (this.menuList) {\n            this.focusService.focusInto(this.menuList.getGui());\n        }\n    }\n    restoreFocusedCell() {\n        const currentFocusedCell = this.focusService.getFocusedCell();\n        if (currentFocusedCell && this.focusedCell && this.cellPositionUtils.equals(currentFocusedCell, this.focusedCell)) {\n            const { rowIndex, rowPinned, column } = this.focusedCell;\n            const doc = this.gridOptionsService.getDocument();\n            if (doc.activeElement === doc.body) {\n                this.focusService.setFocusedCell({ rowIndex, column, rowPinned, forceBrowserFocus: true });\n            }\n        }\n    }\n    destroy() {\n        this.restoreFocusedCell();\n        super.destroy();\n    }\n}\n__decorate$B([\n    (0,ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.Autowired)('menuItemMapper')\n], ContextMenu.prototype, \"menuItemMapper\", void 0);\n__decorate$B([\n    (0,ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.Autowired)('focusService')\n], ContextMenu.prototype, \"focusService\", void 0);\n__decorate$B([\n    (0,ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.Autowired)('cellPositionUtils')\n], ContextMenu.prototype, \"cellPositionUtils\", void 0);\n__decorate$B([\n    ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.PostConstruct\n], ContextMenu.prototype, \"addMenuItems\", null);\n\nvar __decorate$A = ( false) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nlet MenuItemMapper = class MenuItemMapper extends ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.BeanStub {\n    mapWithStockItems(originalList, column) {\n        if (!originalList) {\n            return [];\n        }\n        const resultList = [];\n        originalList.forEach(menuItemOrString => {\n            let result;\n            if (typeof menuItemOrString === 'string') {\n                result = this.getStockMenuItem(menuItemOrString, column);\n            }\n            else {\n                // Spread to prevent leaking mapped subMenus back into the original menuItem\n                result = Object.assign({}, menuItemOrString);\n            }\n            // if no mapping, can happen when module is not loaded but user tries to use module anyway\n            if (!result) {\n                return;\n            }\n            const resultDef = result;\n            const { subMenu } = resultDef;\n            if (subMenu && subMenu instanceof Array) {\n                resultDef.subMenu = this.mapWithStockItems(subMenu, column);\n            }\n            if (result != null) {\n                resultList.push(result);\n            }\n        });\n        return resultList;\n    }\n    getStockMenuItem(key, column) {\n        var _a;\n        const localeTextFunc = this.localeService.getLocaleTextFunc();\n        const skipHeaderOnAutoSize = this.gridOptionsService.is('skipHeaderOnAutoSize');\n        switch (key) {\n            case 'pinSubMenu':\n                return {\n                    name: localeTextFunc('pinColumn', 'Pin Column'),\n                    icon: ag_grid_community__WEBPACK_IMPORTED_MODULE_0__._.createIconNoSpan('menuPin', this.gridOptionsService, null),\n                    subMenu: ['clearPinned', 'pinLeft', 'pinRight']\n                };\n            case 'pinLeft':\n                return {\n                    name: localeTextFunc('pinLeft', 'Pin Left'),\n                    action: () => this.columnModel.setColumnPinned(column, 'left', \"contextMenu\"),\n                    checked: !!column && column.isPinnedLeft()\n                };\n            case 'pinRight':\n                return {\n                    name: localeTextFunc('pinRight', 'Pin Right'),\n                    action: () => this.columnModel.setColumnPinned(column, 'right', \"contextMenu\"),\n                    checked: !!column && column.isPinnedRight()\n                };\n            case 'clearPinned':\n                return {\n                    name: localeTextFunc('noPin', 'No Pin'),\n                    action: () => this.columnModel.setColumnPinned(column, null, \"contextMenu\"),\n                    checked: !!column && !column.isPinned()\n                };\n            case 'valueAggSubMenu':\n                if (ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.ModuleRegistry.assertRegistered(ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.ModuleNames.RowGroupingModule, 'Aggregation from Menu', this.context.getGridId())) {\n                    if (!(column === null || column === void 0 ? void 0 : column.isPrimary()) && !(column === null || column === void 0 ? void 0 : column.getColDef().pivotValueColumn)) {\n                        return null;\n                    }\n                    return {\n                        name: localeTextFunc('valueAggregation', 'Value Aggregation'),\n                        icon: ag_grid_community__WEBPACK_IMPORTED_MODULE_0__._.createIconNoSpan('menuValue', this.gridOptionsService, null),\n                        subMenu: this.createAggregationSubMenu(column)\n                    };\n                }\n                else {\n                    return null;\n                }\n            case 'autoSizeThis':\n                return {\n                    name: localeTextFunc('autosizeThiscolumn', 'Autosize This Column'),\n                    action: () => this.columnModel.autoSizeColumn(column, skipHeaderOnAutoSize, \"contextMenu\")\n                };\n            case 'autoSizeAll':\n                return {\n                    name: localeTextFunc('autosizeAllColumns', 'Autosize All Columns'),\n                    action: () => this.columnModel.autoSizeAllColumns(skipHeaderOnAutoSize, \"contextMenu\")\n                };\n            case 'rowGroup':\n                return {\n                    name: localeTextFunc('groupBy', 'Group by') + ' ' + ag_grid_community__WEBPACK_IMPORTED_MODULE_0__._.escapeString(this.columnModel.getDisplayNameForColumn(column, 'header')),\n                    disabled: (column === null || column === void 0 ? void 0 : column.isRowGroupActive()) || !(column === null || column === void 0 ? void 0 : column.getColDef().enableRowGroup),\n                    action: () => this.columnModel.addRowGroupColumn(column, \"contextMenu\"),\n                    icon: ag_grid_community__WEBPACK_IMPORTED_MODULE_0__._.createIconNoSpan('menuAddRowGroup', this.gridOptionsService, null)\n                };\n            case 'rowUnGroup':\n                return {\n                    name: localeTextFunc('ungroupBy', 'Un-Group by') + ' ' + ag_grid_community__WEBPACK_IMPORTED_MODULE_0__._.escapeString(this.columnModel.getDisplayNameForColumn(column, 'header')),\n                    disabled: !(column === null || column === void 0 ? void 0 : column.isRowGroupActive()) || !(column === null || column === void 0 ? void 0 : column.getColDef().enableRowGroup),\n                    action: () => this.columnModel.removeRowGroupColumn(column, \"contextMenu\"),\n                    icon: ag_grid_community__WEBPACK_IMPORTED_MODULE_0__._.createIconNoSpan('menuRemoveRowGroup', this.gridOptionsService, null)\n                };\n            case 'resetColumns':\n                return {\n                    name: localeTextFunc('resetColumns', 'Reset Columns'),\n                    action: () => this.columnModel.resetColumnState(\"contextMenu\")\n                };\n            case 'expandAll':\n                return {\n                    name: localeTextFunc('expandAll', 'Expand All Row Groups'),\n                    action: () => this.gridApi.expandAll()\n                };\n            case 'contractAll':\n                return {\n                    name: localeTextFunc('collapseAll', 'Collapse All Row Groups'),\n                    action: () => this.gridApi.collapseAll()\n                };\n            case 'copy':\n                if (ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.ModuleRegistry.assertRegistered(ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.ModuleNames.ClipboardModule, 'Copy from Menu', this.context.getGridId())) {\n                    return {\n                        name: localeTextFunc('copy', 'Copy'),\n                        shortcut: localeTextFunc('ctrlC', 'Ctrl+C'),\n                        icon: ag_grid_community__WEBPACK_IMPORTED_MODULE_0__._.createIconNoSpan('clipboardCopy', this.gridOptionsService, null),\n                        action: () => this.clipboardService.copyToClipboard()\n                    };\n                }\n                else {\n                    return null;\n                }\n            case 'copyWithHeaders':\n                if (ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.ModuleRegistry.assertRegistered(ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.ModuleNames.ClipboardModule, 'Copy with Headers from Menu', this.context.getGridId())) {\n                    return {\n                        name: localeTextFunc('copyWithHeaders', 'Copy with Headers'),\n                        // shortcut: localeTextFunc('ctrlC','Ctrl+C'),\n                        icon: ag_grid_community__WEBPACK_IMPORTED_MODULE_0__._.createIconNoSpan('clipboardCopy', this.gridOptionsService, null),\n                        action: () => this.clipboardService.copyToClipboard({ includeHeaders: true })\n                    };\n                }\n                else {\n                    return null;\n                }\n            case 'copyWithGroupHeaders':\n                if (ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.ModuleRegistry.assertRegistered(ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.ModuleNames.ClipboardModule, 'Copy with Group Headers from Menu', this.context.getGridId())) {\n                    return {\n                        name: localeTextFunc('copyWithGroupHeaders', 'Copy with Group Headers'),\n                        // shortcut: localeTextFunc('ctrlC','Ctrl+C'),\n                        icon: ag_grid_community__WEBPACK_IMPORTED_MODULE_0__._.createIconNoSpan('clipboardCopy', this.gridOptionsService, null),\n                        action: () => this.clipboardService.copyToClipboard({ includeHeaders: true, includeGroupHeaders: true })\n                    };\n                }\n                else {\n                    return null;\n                }\n            case 'cut':\n                if (ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.ModuleRegistry.assertRegistered(ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.ModuleNames.ClipboardModule, 'Cut from Menu', this.context.getGridId())) {\n                    const focusedCell = this.focusService.getFocusedCell();\n                    const rowNode = focusedCell ? this.rowPositionUtils.getRowNode(focusedCell) : null;\n                    const isEditable = rowNode ? focusedCell === null || focusedCell === void 0 ? void 0 : focusedCell.column.isCellEditable(rowNode) : false;\n                    return {\n                        name: localeTextFunc('cut', 'Cut'),\n                        shortcut: localeTextFunc('ctrlX', 'Ctrl+X'),\n                        icon: ag_grid_community__WEBPACK_IMPORTED_MODULE_0__._.createIconNoSpan('clipboardCut', this.gridOptionsService, null),\n                        disabled: !isEditable || this.gridOptionsService.is('suppressCutToClipboard'),\n                        action: () => this.clipboardService.cutToClipboard(undefined, 'contextMenu')\n                    };\n                }\n                else {\n                    return null;\n                }\n            case 'paste':\n                if (ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.ModuleRegistry.assertRegistered(ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.ModuleNames.ClipboardModule, 'Paste from Clipboard', this.context.getGridId())) {\n                    return {\n                        name: localeTextFunc('paste', 'Paste'),\n                        shortcut: localeTextFunc('ctrlV', 'Ctrl+V'),\n                        disabled: true,\n                        icon: ag_grid_community__WEBPACK_IMPORTED_MODULE_0__._.createIconNoSpan('clipboardPaste', this.gridOptionsService, null),\n                        action: () => this.clipboardService.pasteFromClipboard()\n                    };\n                }\n                else {\n                    return null;\n                }\n            case 'export':\n                const exportSubMenuItems = [];\n                const csvModuleLoaded = ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.ModuleRegistry.isRegistered(ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.ModuleNames.CsvExportModule, this.context.getGridId());\n                const excelModuleLoaded = ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.ModuleRegistry.isRegistered(ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.ModuleNames.ExcelExportModule, this.context.getGridId());\n                if (!this.gridOptionsService.is('suppressCsvExport') && csvModuleLoaded) {\n                    exportSubMenuItems.push('csvExport');\n                }\n                if (!this.gridOptionsService.is('suppressExcelExport') && excelModuleLoaded) {\n                    exportSubMenuItems.push('excelExport');\n                }\n                return {\n                    name: localeTextFunc('export', 'Export'),\n                    subMenu: exportSubMenuItems,\n                    icon: ag_grid_community__WEBPACK_IMPORTED_MODULE_0__._.createIconNoSpan('save', this.gridOptionsService, null),\n                };\n            case 'csvExport':\n                return {\n                    name: localeTextFunc('csvExport', 'CSV Export'),\n                    icon: ag_grid_community__WEBPACK_IMPORTED_MODULE_0__._.createIconNoSpan('csvExport', this.gridOptionsService, null),\n                    action: () => this.gridApi.exportDataAsCsv({})\n                };\n            case 'excelExport':\n                return {\n                    name: localeTextFunc('excelExport', 'Excel Export'),\n                    icon: ag_grid_community__WEBPACK_IMPORTED_MODULE_0__._.createIconNoSpan('excelExport', this.gridOptionsService, null),\n                    action: () => this.gridApi.exportDataAsExcel()\n                };\n            case 'separator':\n                return 'separator';\n            case 'pivotChart':\n            case 'chartRange':\n                return (_a = this.chartMenuItemMapper.getChartItems(key)) !== null && _a !== void 0 ? _a : null;\n            default: {\n                console.warn(`AG Grid: unknown menu item type ${key}`);\n                return null;\n            }\n        }\n    }\n    createAggregationSubMenu(column) {\n        const localeTextFunc = this.localeService.getLocaleTextFunc();\n        let columnToUse;\n        if (column.isPrimary()) {\n            columnToUse = column;\n        }\n        else {\n            const pivotValueColumn = column.getColDef().pivotValueColumn;\n            columnToUse = ag_grid_community__WEBPACK_IMPORTED_MODULE_0__._.exists(pivotValueColumn) ? pivotValueColumn : undefined;\n        }\n        const result = [];\n        if (columnToUse) {\n            const columnIsAlreadyAggValue = columnToUse.isValueActive();\n            const funcNames = this.aggFuncService.getFuncNames(columnToUse);\n            result.push({\n                name: localeTextFunc('noAggregation', 'None'),\n                action: () => {\n                    this.columnModel.removeValueColumn(columnToUse, \"contextMenu\");\n                    this.columnModel.setColumnAggFunc(columnToUse, undefined, \"contextMenu\");\n                },\n                checked: !columnIsAlreadyAggValue\n            });\n            funcNames.forEach(funcName => {\n                result.push({\n                    name: localeTextFunc(funcName, ag_grid_community__WEBPACK_IMPORTED_MODULE_0__._.capitalise(funcName)),\n                    action: () => {\n                        this.columnModel.setColumnAggFunc(columnToUse, funcName, \"contextMenu\");\n                        this.columnModel.addValueColumn(columnToUse, \"contextMenu\");\n                    },\n                    checked: columnIsAlreadyAggValue && columnToUse.getAggFunc() === funcName\n                });\n            });\n        }\n        return result;\n    }\n};\n__decorate$A([\n    (0,ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.Autowired)('columnModel')\n], MenuItemMapper.prototype, \"columnModel\", void 0);\n__decorate$A([\n    (0,ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.Autowired)('gridApi')\n], MenuItemMapper.prototype, \"gridApi\", void 0);\n__decorate$A([\n    (0,ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.Optional)('clipboardService')\n], MenuItemMapper.prototype, \"clipboardService\", void 0);\n__decorate$A([\n    (0,ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.Optional)('aggFuncService')\n], MenuItemMapper.prototype, \"aggFuncService\", void 0);\n__decorate$A([\n    (0,ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.Autowired)('focusService')\n], MenuItemMapper.prototype, \"focusService\", void 0);\n__decorate$A([\n    (0,ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.Autowired)('rowPositionUtils')\n], MenuItemMapper.prototype, \"rowPositionUtils\", void 0);\n__decorate$A([\n    (0,ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.Autowired)('chartMenuItemMapper')\n], MenuItemMapper.prototype, \"chartMenuItemMapper\", void 0);\nMenuItemMapper = __decorate$A([\n    (0,ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.Bean)('menuItemMapper')\n], MenuItemMapper);\n\n// DO NOT UPDATE MANUALLY: Generated from script during build time\nconst VERSION$7 = '30.0.2';\n\nvar __decorate$z = ( false) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nvar ChartMenuItemMapper_1;\nlet ChartMenuItemMapper = ChartMenuItemMapper_1 = class ChartMenuItemMapper extends ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.BeanStub {\n    getChartItems(key) {\n        var _a, _b;\n        if (!this.chartService) {\n            ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.ModuleRegistry.assertRegistered(ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.ModuleNames.GridChartsModule, `the Context Menu key \"${key}\"`, this.context.getGridId());\n            return undefined;\n        }\n        const builder = key === 'pivotChart'\n            ? new PivotMenuItemMapper(this.gridOptionsService, this.chartService, this.localeService)\n            : new RangeMenuItemMapper(this.gridOptionsService, this.chartService, this.localeService);\n        let topLevelMenuItem = builder.getMenuItem();\n        const chartGroupsDef = (_b = (_a = this.gridOptionsService.get('chartToolPanelsDef')) === null || _a === void 0 ? void 0 : _a.settingsPanel) === null || _b === void 0 ? void 0 : _b.chartGroupsDef;\n        if (chartGroupsDef) {\n            // Apply filtering and ordering if chartGroupsDef provided\n            topLevelMenuItem = ChartMenuItemMapper_1.filterAndOrderChartMenu(topLevelMenuItem, chartGroupsDef, builder.getConfigLookup());\n        }\n        return this.cleanInternals(topLevelMenuItem);\n    }\n    // Remove our internal _key properties so this does not leak out of the class on the menu items.\n    cleanInternals(menuItem) {\n        if (!menuItem) {\n            return menuItem;\n        }\n        const removeKey = (m) => {\n            var _a;\n            m === null || m === void 0 ? true : delete m._key;\n            (_a = m === null || m === void 0 ? void 0 : m.subMenu) === null || _a === void 0 ? void 0 : _a.forEach(s => removeKey(s));\n            return m;\n        };\n        return removeKey(menuItem);\n    }\n    static buildLookup(menuItem) {\n        let itemLookup = {};\n        const addItem = (item) => {\n            itemLookup[item._key] = item;\n            if (item.subMenu) {\n                item.subMenu.forEach(s => addItem(s));\n            }\n        };\n        addItem(menuItem);\n        return itemLookup;\n    }\n    /**\n     * Make the MenuItem match the charts provided and their ordering on the ChartGroupsDef config object as provided by the user.\n     */\n    static filterAndOrderChartMenu(topLevelMenuItem, chartGroupsDef, configLookup) {\n        var _a;\n        const menuItemLookup = this.buildLookup(topLevelMenuItem);\n        let orderedAndFiltered = Object.assign(Object.assign({}, topLevelMenuItem), { subMenu: [] });\n        Object.entries(chartGroupsDef).forEach(([group, chartTypes]) => {\n            var _a, _b;\n            const chartConfigGroup = configLookup[group];\n            if (chartConfigGroup == undefined) {\n                ag_grid_community__WEBPACK_IMPORTED_MODULE_0__._.doOnce(() => console.warn(`AG Grid - invalid chartGroupsDef config '${group}'`), `invalid_chartGroupsDef${group}`);\n                return undefined;\n            }\n            const menuItem = menuItemLookup[chartConfigGroup._key];\n            if (menuItem) {\n                if (menuItem.subMenu) {\n                    const subMenus = chartTypes.map(chartType => {\n                        const itemKey = chartConfigGroup[chartType];\n                        if (itemKey == undefined) {\n                            ag_grid_community__WEBPACK_IMPORTED_MODULE_0__._.doOnce(() => console.warn(`AG Grid - invalid chartGroupsDef config '${group}.${chartType}'`), `invalid_chartGroupsDef${chartType}_${group}`);\n                            return undefined;\n                        }\n                        return menuItemLookup[itemKey];\n                    }).filter(s => s !== undefined);\n                    if (subMenus.length > 0) {\n                        menuItem.subMenu = subMenus;\n                        (_a = orderedAndFiltered.subMenu) === null || _a === void 0 ? void 0 : _a.push(menuItem);\n                    }\n                }\n                else {\n                    // Handles line case which is not actually a sub subMenu\n                    (_b = orderedAndFiltered.subMenu) === null || _b === void 0 ? void 0 : _b.push(menuItem);\n                }\n            }\n        });\n        if (((_a = orderedAndFiltered.subMenu) === null || _a === void 0 ? void 0 : _a.length) == 0) {\n            return undefined;\n        }\n        return orderedAndFiltered;\n    }\n};\n__decorate$z([\n    (0,ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.Optional)('chartService')\n], ChartMenuItemMapper.prototype, \"chartService\", void 0);\nChartMenuItemMapper = ChartMenuItemMapper_1 = __decorate$z([\n    (0,ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.Bean)('chartMenuItemMapper')\n], ChartMenuItemMapper);\nclass PivotMenuItemMapper {\n    constructor(gridOptionsService, chartService, localeService) {\n        this.gridOptionsService = gridOptionsService;\n        this.chartService = chartService;\n        this.localeService = localeService;\n    }\n    getMenuItem() {\n        const localeTextFunc = this.localeService.getLocaleTextFunc();\n        const getMenuItem = (localeKey, defaultText, chartType, key) => {\n            return {\n                name: localeTextFunc(localeKey, defaultText),\n                action: () => this.chartService.createPivotChart({ chartType }),\n                _key: key\n            };\n        };\n        return {\n            name: localeTextFunc('pivotChart', 'Pivot Chart'),\n            _key: 'pivotChart',\n            subMenu: [\n                {\n                    _key: 'pivotColumnChart',\n                    name: localeTextFunc('columnChart', 'Column'),\n                    subMenu: [\n                        getMenuItem('groupedColumn', 'Grouped&lrm;', 'groupedColumn', 'pivotGroupedColumn'),\n                        getMenuItem('stackedColumn', 'Stacked&lrm;', 'stackedColumn', 'pivotStackedColumn'),\n                        getMenuItem('normalizedColumn', '100% Stacked&lrm;', 'normalizedColumn', 'pivotNormalizedColumn')\n                    ]\n                },\n                {\n                    _key: 'pivotBarChart',\n                    name: localeTextFunc('barChart', 'Bar'),\n                    subMenu: [\n                        getMenuItem('groupedBar', 'Grouped&lrm;', 'groupedBar', 'pivotGroupedBar'),\n                        getMenuItem('stackedBar', 'Stacked&lrm;', 'stackedBar', 'pivotStackedBar'),\n                        getMenuItem('normalizedBar', '100% Stacked&lrm;', 'normalizedBar', 'pivotNormalizedBar')\n                    ]\n                },\n                {\n                    _key: 'pivotPieChart',\n                    name: localeTextFunc('pieChart', 'Pie'),\n                    subMenu: [\n                        getMenuItem('pie', 'Pie&lrm;', 'pie', 'pivotPie'),\n                        getMenuItem('doughnut', 'Doughnut&lrm;', 'doughnut', 'pivotDoughnut')\n                    ]\n                },\n                getMenuItem('line', 'Line&lrm;', 'line', 'pivotLineChart'),\n                {\n                    _key: 'pivotXYChart',\n                    name: localeTextFunc('xyChart', 'X Y (Scatter)'),\n                    subMenu: [\n                        getMenuItem('scatter', 'Scatter&lrm;', 'scatter', 'pivotScatter'),\n                        getMenuItem('bubble', 'Bubble&lrm;', 'bubble', 'pivotBubble')\n                    ]\n                },\n                {\n                    _key: 'pivotAreaChart',\n                    name: localeTextFunc('areaChart', 'Area'),\n                    subMenu: [\n                        getMenuItem('area', 'Area&lrm;', 'area', 'pivotArea'),\n                        getMenuItem('stackedArea', 'Stacked&lrm;', 'stackedArea', 'pivotStackedArea'),\n                        getMenuItem('normalizedArea', '100% Stacked&lrm;', 'normalizedArea', 'pivotNormalizedArea')\n                    ]\n                },\n                getMenuItem('histogramChart', 'Histogram&lrm;', 'histogram', 'pivotHistogramChart'),\n                {\n                    _key: 'pivotCombinationChart',\n                    name: localeTextFunc('combinationChart', 'Combination'),\n                    subMenu: [\n                        getMenuItem('columnLineCombo', 'Column & Line&lrm;', 'columnLineCombo', 'pivotColumnLineCombo'),\n                        getMenuItem('AreaColumnCombo', 'Area & Column&lrm;', 'areaColumnCombo', 'pivotAreaColumnCombo')\n                    ]\n                }\n            ],\n            icon: ag_grid_community__WEBPACK_IMPORTED_MODULE_0__._.createIconNoSpan('chart', this.gridOptionsService, undefined),\n        };\n    }\n    getConfigLookup() {\n        return {\n            columnGroup: {\n                _key: 'pivotColumnChart',\n                column: 'pivotGroupedColumn',\n                stackedColumn: 'pivotStackedColumn',\n                normalizedColumn: 'pivotNormalizedColumn',\n            },\n            barGroup: {\n                _key: 'pivotBarChart',\n                bar: 'pivotGroupedBar',\n                stackedBar: 'pivotStackedBar',\n                normalizedBar: 'pivotNormalizedBar',\n            },\n            pieGroup: {\n                _key: 'pivotPieChart',\n                pie: 'pivotPie',\n                doughnut: 'pivotDoughnut',\n            },\n            lineGroup: {\n                _key: 'pivotLineChart',\n                line: 'pivotLineChart',\n            },\n            scatterGroup: {\n                _key: 'pivotXYChart',\n                bubble: 'pivotBubble',\n                scatter: 'pivotScatter',\n            },\n            areaGroup: {\n                _key: 'pivotAreaChart',\n                area: 'pivotArea',\n                stackedArea: 'pivotStackedArea',\n                normalizedArea: 'pivotNormalizedArea',\n            },\n            histogramGroup: {\n                _key: 'pivotHistogramChart',\n                histogram: 'pivotHistogramChart',\n            },\n            combinationGroup: {\n                _key: 'pivotCombinationChart',\n                columnLineCombo: 'pivotColumnLineCombo',\n                areaColumnCombo: 'pivotAreaColumnCombo',\n                customCombo: '' // Not currently supported but needs a value to separate from a missing value\n            }\n        };\n    }\n}\nclass RangeMenuItemMapper {\n    constructor(gridOptionsService, chartService, localeService) {\n        this.gridOptionsService = gridOptionsService;\n        this.chartService = chartService;\n        this.localeService = localeService;\n    }\n    getMenuItem() {\n        const localeTextFunc = this.localeService.getLocaleTextFunc();\n        const getMenuItem = (localeKey, defaultText, chartType, key) => {\n            return {\n                name: localeTextFunc(localeKey, defaultText),\n                action: () => this.chartService.createChartFromCurrentRange(chartType),\n                _key: key\n            };\n        };\n        return {\n            name: localeTextFunc('chartRange', 'Chart Range'),\n            _key: 'chartRange',\n            subMenu: [\n                {\n                    name: localeTextFunc('columnChart', 'Column'),\n                    subMenu: [\n                        getMenuItem('groupedColumn', 'Grouped&lrm;', 'groupedColumn', 'rangeGroupedColumn'),\n                        getMenuItem('stackedColumn', 'Stacked&lrm;', 'stackedColumn', 'rangeStackedColumn'),\n                        getMenuItem('normalizedColumn', '100% Stacked&lrm;', 'normalizedColumn', 'rangeNormalizedColumn')\n                    ],\n                    _key: 'rangeColumnChart'\n                },\n                {\n                    name: localeTextFunc('barChart', 'Bar'),\n                    subMenu: [\n                        getMenuItem('groupedBar', 'Grouped&lrm;', 'groupedBar', 'rangeGroupedBar'),\n                        getMenuItem('stackedBar', 'Stacked&lrm;', 'stackedBar', 'rangeStackedBar'),\n                        getMenuItem('normalizedBar', '100% Stacked&lrm;', 'normalizedBar', 'rangeNormalizedBar')\n                    ],\n                    _key: 'rangeBarChart'\n                },\n                {\n                    name: localeTextFunc('pieChart', 'Pie'),\n                    subMenu: [\n                        getMenuItem('pie', 'Pie&lrm;', 'pie', 'rangePie'),\n                        getMenuItem('doughnut', 'Doughnut&lrm;', 'doughnut', 'rangeDoughnut')\n                    ],\n                    _key: 'rangePieChart'\n                },\n                getMenuItem('line', 'Line&lrm;', 'line', 'rangeLineChart'),\n                {\n                    name: localeTextFunc('xyChart', 'X Y (Scatter)'),\n                    subMenu: [\n                        getMenuItem('scatter', 'Scatter&lrm;', 'scatter', 'rangeScatter'),\n                        getMenuItem('bubble', 'Bubble&lrm;', 'bubble', 'rangeBubble')\n                    ],\n                    _key: 'rangeXYChart'\n                },\n                {\n                    name: localeTextFunc('areaChart', 'Area'),\n                    subMenu: [\n                        getMenuItem('area', 'Area&lrm;', 'area', 'rangeArea'),\n                        getMenuItem('stackedArea', 'Stacked&lrm;', 'stackedArea', 'rangeStackedArea'),\n                        getMenuItem('normalizedArea', '100% Stacked&lrm;', 'normalizedArea', 'rangeNormalizedArea')\n                    ],\n                    _key: 'rangeAreaChart'\n                },\n                getMenuItem('histogramChart', 'Histogram&lrm;', 'histogram', 'rangeHistogramChart'),\n                {\n                    name: localeTextFunc('combinationChart', 'Combination'),\n                    subMenu: [\n                        getMenuItem('columnLineCombo', 'Column & Line&lrm;', 'columnLineCombo', 'rangeColumnLineCombo'),\n                        getMenuItem('AreaColumnCombo', 'Area & Column&lrm;', 'areaColumnCombo', 'rangeAreaColumnCombo')\n                    ],\n                    _key: 'rangeCombinationChart'\n                }\n            ],\n            icon: ag_grid_community__WEBPACK_IMPORTED_MODULE_0__._.createIconNoSpan('chart', this.gridOptionsService, undefined),\n        };\n    }\n    getConfigLookup() {\n        return {\n            columnGroup: {\n                _key: 'rangeColumnChart',\n                column: 'rangeGroupedColumn',\n                stackedColumn: 'rangeStackedColumn',\n                normalizedColumn: 'rangeNormalizedColumn',\n            },\n            barGroup: {\n                _key: 'rangeBarChart',\n                bar: 'rangeGroupedBar',\n                stackedBar: 'rangeStackedBar',\n                normalizedBar: 'rangeNormalizedBar',\n            },\n            pieGroup: {\n                _key: 'rangePieChart',\n                pie: 'rangePie',\n                doughnut: 'rangeDoughnut',\n            },\n            lineGroup: {\n                _key: 'rangeLineChart',\n                line: 'rangeLineChart',\n            },\n            scatterGroup: {\n                _key: 'rangeXYChart',\n                bubble: 'rangeBubble',\n                scatter: 'rangeScatter',\n            },\n            areaGroup: {\n                _key: 'rangeAreaChart',\n                area: 'rangeArea',\n                stackedArea: 'rangeStackedArea',\n                normalizedArea: 'rangeNormalizedArea',\n            },\n            histogramGroup: {\n                _key: 'rangeHistogramChart',\n                histogram: 'rangeHistogramChart',\n            },\n            combinationGroup: {\n                _key: 'rangeCombinationChart',\n                columnLineCombo: 'rangeColumnLineCombo',\n                areaColumnCombo: 'rangeAreaColumnCombo',\n                customCombo: '' // Not currently supported but needs a value to separate from a missing value\n            }\n        };\n    }\n}\n\nconst MenuModule = {\n    version: VERSION$7,\n    moduleName: ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.ModuleNames.MenuModule,\n    beans: [EnterpriseMenuFactory, ContextMenuFactory, MenuItemMapper, ChartMenuItemMapper],\n    dependantModules: [\n        EnterpriseCoreModule\n    ]\n};\n\nvar __decorate$y = ( false) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nclass MultiFilter extends ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.TabGuardComp {\n    constructor() {\n        super(/* html */ `<div class=\"ag-multi-filter ag-menu-list-compact\"></div>`);\n        this.filterDefs = [];\n        this.filters = [];\n        this.guiDestroyFuncs = [];\n        this.activeFilterIndices = [];\n        this.lastActivatedMenuItem = null;\n        this.afterFiltersReadyFuncs = [];\n    }\n    postConstruct() {\n        this.initialiseTabGuard({\n            onFocusIn: e => this.onFocusIn(e)\n        });\n    }\n    static getFilterDefs(params) {\n        const { filters } = params;\n        return filters && filters.length > 0 ?\n            filters :\n            [{ filter: 'agTextColumnFilter' }, { filter: 'agSetColumnFilter' }];\n    }\n    init(params) {\n        this.params = params;\n        this.filterDefs = MultiFilter.getFilterDefs(params);\n        const { column, filterChangedCallback } = params;\n        this.column = column;\n        this.filterChangedCallback = filterChangedCallback;\n        const filterPromises = [];\n        this.filterDefs.forEach((filterDef, index) => {\n            const filterPromise = this.createFilter(filterDef, index);\n            if (filterPromise != null) {\n                filterPromises.push(filterPromise);\n            }\n        });\n        // we have to refresh the GUI here to ensure that Angular components are not rendered in odd places\n        return ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.AgPromise\n            .all(filterPromises)\n            .then(filters => {\n            this.filters = filters;\n            this.refreshGui('columnMenu');\n            this.afterFiltersReadyFuncs.forEach(f => f());\n            this.afterFiltersReadyFuncs.length = 0;\n        });\n    }\n    refreshGui(container) {\n        if (container === this.lastOpenedInContainer) {\n            return;\n        }\n        this.removeAllChildrenExceptTabGuards();\n        this.destroyChildren();\n        this.filters.forEach((filter, index) => {\n            if (index > 0) {\n                this.appendChild(ag_grid_community__WEBPACK_IMPORTED_MODULE_0__._.loadTemplate(/* html */ `<div class=\"ag-filter-separator\"></div>`));\n            }\n            const filterDef = this.filterDefs[index];\n            const filterTitle = this.getFilterTitle(filter, filterDef);\n            let filterGui;\n            if (filterDef.display === 'subMenu' && container !== 'toolPanel') {\n                // prevent sub-menu being used in tool panel\n                const menuItem = this.insertFilterMenu(filter, filterTitle);\n                filterGui = menuItem.getGui();\n            }\n            else if (filterDef.display === 'subMenu' || filterDef.display === 'accordion') {\n                // sub-menus should appear as groups in the tool panel\n                const group = this.insertFilterGroup(filter, filterTitle);\n                filterGui = group.getGui();\n            }\n            else {\n                // display inline\n                filterGui = filter.getGui();\n            }\n            this.appendChild(filterGui);\n        });\n        this.lastOpenedInContainer = container;\n    }\n    getFilterTitle(filter, filterDef) {\n        if (filterDef.title != null) {\n            return filterDef.title;\n        }\n        const filterWithoutType = filter;\n        return typeof filterWithoutType.getFilterTitle === 'function' ? filterWithoutType.getFilterTitle() : 'Filter';\n    }\n    destroyChildren() {\n        this.guiDestroyFuncs.forEach(func => func());\n        this.guiDestroyFuncs.length = 0;\n    }\n    insertFilterMenu(filter, name) {\n        const menuItem = this.createBean(new ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.AgMenuItemComponent({\n            name,\n            subMenu: filter,\n            cssClasses: ['ag-multi-filter-menu-item'],\n            isCompact: true,\n            isAnotherSubMenuOpen: () => false,\n        }));\n        menuItem.setParentComponent(this);\n        this.guiDestroyFuncs.push(() => this.destroyBean(menuItem));\n        this.addManagedListener(menuItem, ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.AgMenuItemComponent.EVENT_MENU_ITEM_ACTIVATED, (event) => {\n            if (this.lastActivatedMenuItem && this.lastActivatedMenuItem !== event.menuItem) {\n                this.lastActivatedMenuItem.deactivate();\n            }\n            this.lastActivatedMenuItem = event.menuItem;\n        });\n        menuItem.addGuiEventListener('focusin', () => menuItem.activate());\n        menuItem.addGuiEventListener('focusout', () => {\n            if (!menuItem.isSubMenuOpen()) {\n                menuItem.deactivate();\n            }\n        });\n        return menuItem;\n    }\n    insertFilterGroup(filter, title) {\n        const group = this.createBean(new ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.AgGroupComponent({\n            title,\n            cssIdentifier: 'multi-filter',\n        }));\n        this.guiDestroyFuncs.push(() => this.destroyBean(group));\n        group.addItem(filter.getGui());\n        group.toggleGroupExpand(false);\n        if (filter.afterGuiAttached) {\n            group.addManagedListener(group, ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.AgGroupComponent.EVENT_EXPANDED, () => filter.afterGuiAttached({\n                container: this.lastOpenedInContainer,\n                suppressFocus: true\n            }));\n        }\n        return group;\n    }\n    isFilterActive() {\n        return this.filters.some(filter => filter.isFilterActive());\n    }\n    getLastActiveFilterIndex() {\n        return this.activeFilterIndices.length > 0 ? this.activeFilterIndices[this.activeFilterIndices.length - 1] : null;\n    }\n    doesFilterPass(params, filterToSkip) {\n        let rowPasses = true;\n        this.filters.forEach(filter => {\n            if (!rowPasses || filter === filterToSkip || !filter.isFilterActive()) {\n                return;\n            }\n            rowPasses = filter.doesFilterPass(params);\n        });\n        return rowPasses;\n    }\n    getFilterType() {\n        return 'multi';\n    }\n    getModelFromUi() {\n        const model = {\n            filterType: this.getFilterType(),\n            filterModels: this.filters.map(filter => {\n                const providedFilter = filter;\n                if (typeof providedFilter.getModelFromUi === 'function') {\n                    return providedFilter.getModelFromUi();\n                }\n                return null;\n            })\n        };\n        return model;\n    }\n    getModel() {\n        if (!this.isFilterActive()) {\n            return null;\n        }\n        const model = {\n            filterType: this.getFilterType(),\n            filterModels: this.filters.map(filter => {\n                if (filter.isFilterActive()) {\n                    return filter.getModel();\n                }\n                return null;\n            })\n        };\n        return model;\n    }\n    setModel(model) {\n        const setFilterModel = (filter, filterModel) => {\n            return new ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.AgPromise(resolve => {\n                const promise = filter.setModel(filterModel);\n                promise ? promise.then(() => resolve()) : resolve();\n            });\n        };\n        let promises = [];\n        if (model == null) {\n            promises = this.filters.map((filter, index) => {\n                const res = setFilterModel(filter, null).then(() => {\n                    this.updateActiveList(index);\n                });\n                return res;\n            });\n        }\n        else {\n            this.filters.forEach((filter, index) => {\n                const filterModel = model.filterModels.length > index ? model.filterModels[index] : null;\n                const res = setFilterModel(filter, filterModel).then(() => {\n                    this.updateActiveList(index);\n                });\n                promises.push(res);\n            });\n        }\n        return ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.AgPromise.all(promises).then(() => { });\n    }\n    applyModel(source = 'api') {\n        let result = false;\n        this.filters.forEach((filter) => {\n            if (filter instanceof ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.ProvidedFilter) {\n                result = filter.applyModel(source) || result;\n            }\n        });\n        return result;\n    }\n    getChildFilterInstance(index) {\n        return this.filters[index];\n    }\n    afterGuiAttached(params) {\n        if (params) {\n            this.refreshGui(params.container);\n        }\n        const { filters } = this.params;\n        const suppressFocus = filters && filters.some(filter => filter.display && filter.display !== 'inline');\n        this.executeFunctionIfExists('afterGuiAttached', Object.assign(Object.assign({}, params || {}), { suppressFocus }));\n        const eDocument = this.gridOptionsService.getDocument();\n        const activeEl = eDocument.activeElement;\n        // if suppress focus is true, we might run into two scenarios:\n        // 1 - we are loading the filter for the first time and the component isn't ready,\n        //     which means the document will have focus.\n        // 2 - The focus will be somewhere inside the component due to auto focus\n        // In both cases we need to force the focus somewhere valid but outside the filter.\n        if (suppressFocus && (activeEl === eDocument.body || this.getGui().contains(activeEl))) {\n            // reset focus to the top of the container, and blur\n            this.forceFocusOutOfContainer(true);\n        }\n    }\n    afterGuiDetached() {\n        this.executeFunctionIfExists('afterGuiDetached');\n    }\n    onAnyFilterChanged() {\n        this.executeFunctionIfExists('onAnyFilterChanged');\n    }\n    onNewRowsLoaded() {\n        this.executeFunctionIfExists('onNewRowsLoaded');\n    }\n    destroy() {\n        this.filters.forEach(filter => {\n            filter.setModel(null);\n            this.destroyBean(filter);\n        });\n        this.filters.length = 0;\n        this.destroyChildren();\n        super.destroy();\n    }\n    executeFunctionIfExists(name, ...params) {\n        // The first filter is always the \"dominant\" one. By iterating in reverse order we ensure the first filter\n        // always gets the last say\n        ag_grid_community__WEBPACK_IMPORTED_MODULE_0__._.forEachReverse(this.filters, filter => {\n            const func = filter[name];\n            if (typeof func === 'function') {\n                func.apply(filter, params);\n            }\n        });\n    }\n    createFilter(filterDef, index) {\n        const { filterModifiedCallback, doesRowPassOtherFilter } = this.params;\n        let filterInstance;\n        const filterParams = Object.assign(Object.assign({}, this.filterManager.createFilterParams(this.column, this.column.getColDef())), { filterModifiedCallback, filterChangedCallback: additionalEventAttributes => {\n                this.executeWhenAllFiltersReady(() => this.filterChanged(index, additionalEventAttributes));\n            }, doesRowPassOtherFilter: (node) => doesRowPassOtherFilter(node) && this.doesFilterPass({ node, data: node.data }, filterInstance) });\n        const compDetails = this.userComponentFactory.getFilterDetails(filterDef, filterParams, 'agTextColumnFilter');\n        if (!compDetails) {\n            return null;\n        }\n        const filterPromise = compDetails.newAgStackInstance();\n        if (filterPromise) {\n            filterPromise.then(filter => filterInstance = filter);\n        }\n        return filterPromise;\n    }\n    executeWhenAllFiltersReady(action) {\n        if (this.filters && this.filters.length > 0) {\n            action();\n        }\n        else {\n            this.afterFiltersReadyFuncs.push(action);\n        }\n    }\n    updateActiveList(index) {\n        const changedFilter = this.filters[index];\n        ag_grid_community__WEBPACK_IMPORTED_MODULE_0__._.removeFromArray(this.activeFilterIndices, index);\n        if (changedFilter.isFilterActive()) {\n            this.activeFilterIndices.push(index);\n        }\n    }\n    filterChanged(index, additionalEventAttributes) {\n        this.updateActiveList(index);\n        this.filterChangedCallback(additionalEventAttributes);\n        const changedFilter = this.filters[index];\n        this.filters.forEach(filter => {\n            if (filter === changedFilter) {\n                return;\n            }\n            if (typeof filter.onAnyFilterChanged === 'function') {\n                filter.onAnyFilterChanged();\n            }\n        });\n    }\n    onFocusIn(e) {\n        if (this.lastActivatedMenuItem != null && !this.lastActivatedMenuItem.getGui().contains(e.target)) {\n            this.lastActivatedMenuItem.deactivate();\n            this.lastActivatedMenuItem = null;\n        }\n        return true;\n    }\n    getModelAsString(model) {\n        var _a, _b, _c, _d;\n        if (!this.filters || !((_a = model === null || model === void 0 ? void 0 : model.filterModels) === null || _a === void 0 ? void 0 : _a.length)) {\n            return '';\n        }\n        const lastActiveIndex = (_b = this.getLastActiveFilterIndex()) !== null && _b !== void 0 ? _b : 0;\n        const activeFilter = this.filters[lastActiveIndex];\n        return (_d = (_c = activeFilter.getModelAsString) === null || _c === void 0 ? void 0 : _c.call(activeFilter, model.filterModels[lastActiveIndex])) !== null && _d !== void 0 ? _d : '';\n    }\n}\n__decorate$y([\n    (0,ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.Autowired)('filterManager')\n], MultiFilter.prototype, \"filterManager\", void 0);\n__decorate$y([\n    (0,ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.Autowired)('userComponentFactory')\n], MultiFilter.prototype, \"userComponentFactory\", void 0);\n__decorate$y([\n    ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.PostConstruct\n], MultiFilter.prototype, \"postConstruct\", null);\n\nvar __decorate$x = ( false) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nclass MultiFloatingFilterComp extends ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.Component {\n    constructor() {\n        super(/* html */ `<div class=\"ag-multi-floating-filter ag-floating-filter-input\"></div>`);\n        this.floatingFilters = [];\n    }\n    init(params) {\n        this.params = params;\n        const filterParams = params.filterParams;\n        const floatingFilterPromises = [];\n        MultiFilter.getFilterDefs(filterParams).forEach((filterDef, index) => {\n            const floatingFilterParams = Object.assign(Object.assign({}, params), { \n                // set the parent filter instance for each floating filter to the relevant child filter instance\n                parentFilterInstance: (callback) => {\n                    this.parentMultiFilterInstance((parent) => {\n                        const child = parent.getChildFilterInstance(index);\n                        if (child == null) {\n                            return;\n                        }\n                        callback(child);\n                    });\n                } });\n            ag_grid_community__WEBPACK_IMPORTED_MODULE_0__._.mergeDeep(floatingFilterParams.filterParams, filterDef.filterParams);\n            const floatingFilterPromise = this.createFloatingFilter(filterDef, floatingFilterParams);\n            if (floatingFilterPromise != null) {\n                floatingFilterPromises.push(floatingFilterPromise);\n            }\n        });\n        return ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.AgPromise.all(floatingFilterPromises).then(floatingFilters => {\n            floatingFilters.forEach((floatingFilter, index) => {\n                this.floatingFilters.push(floatingFilter);\n                const gui = floatingFilter.getGui();\n                this.appendChild(gui);\n                if (index > 0) {\n                    ag_grid_community__WEBPACK_IMPORTED_MODULE_0__._.setDisplayed(gui, false);\n                }\n            });\n        });\n    }\n    onParentModelChanged(model, event) {\n        // We don't want to update the floating filter if the floating filter caused the change,\n        // because the UI is already in sync. if we didn't do this, the UI would behave strangely\n        // as it would be updating as the user is typing\n        if (event && event.afterFloatingFilter) {\n            return;\n        }\n        this.parentMultiFilterInstance((parent) => {\n            if (model == null) {\n                this.floatingFilters.forEach((filter, i) => {\n                    filter.onParentModelChanged(null, event);\n                    ag_grid_community__WEBPACK_IMPORTED_MODULE_0__._.setDisplayed(filter.getGui(), i === 0);\n                });\n            }\n            else {\n                const lastActiveFloatingFilterIndex = parent.getLastActiveFilterIndex();\n                this.floatingFilters.forEach((filter, i) => {\n                    const filterModel = model.filterModels.length > i ? model.filterModels[i] : null;\n                    filter.onParentModelChanged(filterModel, event);\n                    const shouldShow = lastActiveFloatingFilterIndex == null ? i === 0 : i === lastActiveFloatingFilterIndex;\n                    ag_grid_community__WEBPACK_IMPORTED_MODULE_0__._.setDisplayed(filter.getGui(), shouldShow);\n                });\n            }\n        });\n    }\n    destroy() {\n        this.destroyBeans(this.floatingFilters);\n        this.floatingFilters.length = 0;\n        super.destroy();\n    }\n    createFloatingFilter(filterDef, params) {\n        var _a;\n        let defaultComponentName = (_a = this.userComponentFactory.getDefaultFloatingFilterType(filterDef, () => this.filterManager.getDefaultFloatingFilter(this.params.column))) !== null && _a !== void 0 ? _a : 'agReadOnlyFloatingFilter';\n        const compDetails = this.userComponentFactory.getFloatingFilterCompDetails(filterDef, params, defaultComponentName);\n        return compDetails ? compDetails.newAgStackInstance() : null;\n    }\n    parentMultiFilterInstance(cb) {\n        this.params.parentFilterInstance((parent) => {\n            if (!(parent instanceof MultiFilter)) {\n                throw new Error('AG Grid - MultiFloatingFilterComp expects MultiFilter as its parent');\n            }\n            cb(parent);\n        });\n    }\n}\n__decorate$x([\n    (0,ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.Autowired)('userComponentFactory')\n], MultiFloatingFilterComp.prototype, \"userComponentFactory\", void 0);\n__decorate$x([\n    (0,ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.Autowired)('filterManager')\n], MultiFloatingFilterComp.prototype, \"filterManager\", void 0);\n\n// DO NOT UPDATE MANUALLY: Generated from script during build time\nconst VERSION$6 = '30.0.2';\n\nconst MultiFilterModule = {\n    version: VERSION$6,\n    moduleName: ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.ModuleNames.MultiFilterModule,\n    beans: [],\n    userComponents: [\n        { componentName: 'agMultiColumnFilter', componentClass: MultiFilter },\n        { componentName: 'agMultiColumnFloatingFilter', componentClass: MultiFloatingFilterComp },\n    ],\n    dependantModules: [\n        EnterpriseCoreModule\n    ]\n};\n\n/**\n * cell renderers are used in a few places. they bind to dom slightly differently to other cell renderes as they\n * can return back strings (instead of html elemnt) in the getGui() method. common code placed here to handle that.\n * @param {AgPromise<ICellRendererComp>} cellRendererPromise\n * @param {HTMLElement} eTarget\n */\nfunction bindCellRendererToHtmlElement(cellRendererPromise, eTarget) {\n    cellRendererPromise.then(cellRenderer => {\n        const gui = cellRenderer.getGui();\n        if (gui != null) {\n            if (typeof gui === 'object') {\n                eTarget.appendChild(gui);\n            }\n            else {\n                eTarget.innerHTML = gui;\n            }\n        }\n    });\n}\n\nvar __decorate$w = ( false) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nclass RichSelectRow extends ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.Component {\n    constructor(params) {\n        super(/* html */ `<div class=\"ag-rich-select-row\" role=\"presentation\"></div>`);\n        this.params = params;\n    }\n    setState(value, valueFormatted, selected) {\n        const rendererSuccessful = this.populateWithRenderer(value, valueFormatted);\n        if (!rendererSuccessful) {\n            this.populateWithoutRenderer(value, valueFormatted);\n        }\n        this.updateSelected(selected);\n    }\n    updateSelected(selected) {\n        this.addOrRemoveCssClass('ag-rich-select-row-selected', selected);\n    }\n    populateWithoutRenderer(value, valueFormatted) {\n        const valueFormattedExits = valueFormatted !== null && valueFormatted !== undefined;\n        const valueToRender = valueFormattedExits ? valueFormatted : value;\n        if (ag_grid_community__WEBPACK_IMPORTED_MODULE_0__._.exists(valueToRender) && valueToRender !== '') {\n            // not using innerHTML to prevent injection of HTML\n            // https://developer.mozilla.org/en-US/docs/Web/API/Element/innerHTML#Security_considerations\n            this.getGui().textContent = valueToRender.toString();\n        }\n        else {\n            // putting in blank, so if missing, at least the user can click on it\n            this.getGui().innerHTML = '&nbsp;';\n        }\n    }\n    populateWithRenderer(value, valueFormatted) {\n        // bad coder here - we are not populating all values of the cellRendererParams\n        const params = {\n            value: value,\n            valueFormatted: valueFormatted,\n            api: this.gridOptionsService.api\n        };\n        const compDetails = this.userComponentFactory.getCellRendererDetails(this.params, params);\n        const cellRendererPromise = compDetails ? compDetails.newAgStackInstance() : undefined;\n        if (cellRendererPromise != null) {\n            bindCellRendererToHtmlElement(cellRendererPromise, this.getGui());\n        }\n        else {\n            this.getGui().innerText = params.valueFormatted != null ? params.valueFormatted : params.value;\n        }\n        if (cellRendererPromise) {\n            cellRendererPromise.then(childComponent => {\n                this.addDestroyFunc(() => {\n                    this.getContext().destroyBean(childComponent);\n                });\n            });\n            return true;\n        }\n        return false;\n    }\n}\n__decorate$w([\n    (0,ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.Autowired)('userComponentFactory')\n], RichSelectRow.prototype, \"userComponentFactory\", void 0);\n\nvar __decorate$v = ( false) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nclass RichSelectCellEditor extends ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.PopupComponent {\n    constructor() {\n        super(RichSelectCellEditor.TEMPLATE);\n        this.selectionConfirmed = false;\n        this.searchString = '';\n    }\n    init(params) {\n        var _a;\n        this.params = params;\n        this.selectedValue = params.value;\n        this.originalSelectedValue = params.value;\n        this.focusAfterAttached = params.cellStartedEdit;\n        const icon = ag_grid_community__WEBPACK_IMPORTED_MODULE_0__._.createIconNoSpan('smallDown', this.gridOptionsService);\n        icon.classList.add('ag-rich-select-value-icon');\n        this.eValue.appendChild(icon);\n        this.virtualList = this.createManagedBean(new ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.VirtualList('rich-select'));\n        this.virtualList.setComponentCreator(this.createRowComponent.bind(this));\n        this.eList.appendChild(this.virtualList.getGui());\n        if (ag_grid_community__WEBPACK_IMPORTED_MODULE_0__._.exists(this.params.cellHeight)) {\n            this.virtualList.setRowHeight(this.params.cellHeight);\n        }\n        this.renderSelectedValue();\n        if (ag_grid_community__WEBPACK_IMPORTED_MODULE_0__._.missing(params.values)) {\n            console.warn('AG Grid: richSelectCellEditor requires values for it to work');\n            return;\n        }\n        const values = params.values;\n        this.virtualList.setModel({\n            getRowCount: () => values.length,\n            getRow: (index) => values[index]\n        });\n        this.addGuiEventListener('keydown', this.onKeyDown.bind(this));\n        const virtualListGui = this.virtualList.getGui();\n        this.addManagedListener(virtualListGui, 'click', this.onClick.bind(this));\n        this.addManagedListener(virtualListGui, 'mousemove', this.onMouseMove.bind(this));\n        const debounceDelay = ag_grid_community__WEBPACK_IMPORTED_MODULE_0__._.exists(params.searchDebounceDelay) ? params.searchDebounceDelay : 300;\n        this.clearSearchString = ag_grid_community__WEBPACK_IMPORTED_MODULE_0__._.debounce(this.clearSearchString, debounceDelay);\n        if (((_a = params.eventKey) === null || _a === void 0 ? void 0 : _a.length) === 1) {\n            this.searchText(params.eventKey);\n        }\n    }\n    onKeyDown(event) {\n        const key = event.key;\n        event.preventDefault();\n        switch (key) {\n            case ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.KeyCode.ENTER:\n                this.onEnterKeyDown();\n                break;\n            case ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.KeyCode.TAB:\n                this.confirmSelection();\n                break;\n            case ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.KeyCode.DOWN:\n            case ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.KeyCode.UP:\n                this.onNavigationKeyDown(event, key);\n                break;\n            default:\n                this.searchText(event);\n        }\n    }\n    confirmSelection() {\n        this.selectionConfirmed = true;\n    }\n    onEnterKeyDown() {\n        this.confirmSelection();\n        this.params.stopEditing();\n    }\n    onNavigationKeyDown(event, key) {\n        // if we don't preventDefault the page body and/or grid scroll will move.\n        event.preventDefault();\n        const oldIndex = this.params.values.indexOf(this.selectedValue);\n        const newIndex = key === ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.KeyCode.UP ? oldIndex - 1 : oldIndex + 1;\n        if (newIndex >= 0 && newIndex < this.params.values.length) {\n            const valueToSelect = this.params.values[newIndex];\n            this.setSelectedValue(valueToSelect);\n        }\n    }\n    searchText(key) {\n        if (typeof key !== 'string') {\n            let keyString = key.key;\n            if (keyString === ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.KeyCode.BACKSPACE) {\n                this.searchString = this.searchString.slice(0, -1);\n                keyString = '';\n            }\n            else if (!ag_grid_community__WEBPACK_IMPORTED_MODULE_0__._.isEventFromPrintableCharacter(key)) {\n                return;\n            }\n            this.searchText(keyString);\n            return;\n        }\n        this.searchString += key;\n        this.runSearch();\n        this.clearSearchString();\n    }\n    runSearch() {\n        const values = this.params.values;\n        let searchStrings;\n        if (typeof values[0] === 'number' || typeof values[0] === 'string') {\n            searchStrings = values.map(v => this.params.formatValue(v));\n        }\n        if (typeof values[0] === 'object' && this.params.colDef.keyCreator) {\n            searchStrings = values.map(value => {\n                const keyParams = {\n                    value: value,\n                    colDef: this.params.colDef,\n                    column: this.params.column,\n                    node: this.params.node,\n                    data: this.params.data,\n                    api: this.gridOptionsService.api,\n                    columnApi: this.gridOptionsService.columnApi,\n                    context: this.gridOptionsService.context\n                };\n                return this.params.colDef.keyCreator(keyParams);\n            });\n        }\n        if (!searchStrings) {\n            return;\n        }\n        const topSuggestion = ag_grid_community__WEBPACK_IMPORTED_MODULE_0__._.fuzzySuggestions(this.searchString, searchStrings, true)[0];\n        if (!topSuggestion) {\n            return;\n        }\n        const topSuggestionIndex = searchStrings.indexOf(topSuggestion);\n        const topValue = values[topSuggestionIndex];\n        this.setSelectedValue(topValue);\n    }\n    clearSearchString() {\n        this.searchString = '';\n    }\n    renderSelectedValue() {\n        const valueFormatted = this.params.formatValue(this.selectedValue);\n        const eValue = this.eValue;\n        const params = {\n            value: this.selectedValue,\n            valueFormatted: valueFormatted,\n            api: this.gridOptionsService.api,\n        };\n        const compDetails = this.userComponentFactory.getCellRendererDetails(this.params, params);\n        const promise = compDetails ? compDetails.newAgStackInstance() : undefined;\n        if (promise) {\n            bindCellRendererToHtmlElement(promise, eValue);\n            promise.then(renderer => {\n                this.addDestroyFunc(() => this.getContext().destroyBean(renderer));\n            });\n        }\n        else {\n            if (ag_grid_community__WEBPACK_IMPORTED_MODULE_0__._.exists(this.selectedValue)) {\n                eValue.innerText = valueFormatted;\n            }\n            else {\n                ag_grid_community__WEBPACK_IMPORTED_MODULE_0__._.clearElement(eValue);\n            }\n        }\n    }\n    setSelectedValue(value) {\n        if (this.selectedValue === value) {\n            return;\n        }\n        const index = this.params.values.indexOf(value);\n        if (index === -1) {\n            return;\n        }\n        this.selectedValue = value;\n        this.virtualList.ensureIndexVisible(index);\n        this.virtualList.forEachRenderedRow((cmp, idx) => {\n            cmp.updateSelected(index === idx);\n        });\n        this.virtualList.focusRow(index);\n    }\n    createRowComponent(value) {\n        const valueFormatted = this.params.formatValue(value);\n        const row = new RichSelectRow(this.params);\n        this.getContext().createBean(row);\n        row.setState(value, valueFormatted, value === this.selectedValue);\n        return row;\n    }\n    onMouseMove(mouseEvent) {\n        const rect = this.virtualList.getGui().getBoundingClientRect();\n        const scrollTop = this.virtualList.getScrollTop();\n        const mouseY = mouseEvent.clientY - rect.top + scrollTop;\n        const row = Math.floor(mouseY / this.virtualList.getRowHeight());\n        const value = this.params.values[row];\n        // not using utils.exist() as want empty string test to pass\n        if (value !== undefined) {\n            this.setSelectedValue(value);\n        }\n    }\n    onClick() {\n        this.confirmSelection();\n        this.params.stopEditing();\n    }\n    // we need to have the gui attached before we can draw the virtual rows, as the\n    // virtual row logic needs info about the gui state\n    afterGuiAttached() {\n        const selectedIndex = this.params.values.indexOf(this.selectedValue);\n        // we have to call this here to get the list to have the right height, ie\n        // otherwise it would not have scrolls yet and ensureIndexVisible would do nothing\n        this.virtualList.refresh();\n        if (selectedIndex >= 0) {\n            this.virtualList.ensureIndexVisible(selectedIndex);\n        }\n        // we call refresh again, as the list could of moved, and we need to render the new rows\n        this.virtualList.refresh();\n        if (this.focusAfterAttached) {\n            const indexToSelect = selectedIndex !== -1 ? selectedIndex : 0;\n            if (this.params.values.length) {\n                this.virtualList.focusRow(indexToSelect);\n            }\n            else {\n                this.getGui().focus();\n            }\n        }\n    }\n    getValue() {\n        // NOTE: we don't use valueParser for Set Filter. The user should provide values that are to be\n        // set into the data. valueParser only really makese sense when the user is typing in text (not picking\n        // form a set).\n        return this.selectionConfirmed ? this.selectedValue : this.originalSelectedValue;\n    }\n}\n// tab index is needed so we can focus, which is needed for keyboard events\nRichSelectCellEditor.TEMPLATE = `<div class=\"ag-rich-select\" tabindex=\"-1\">\n            <div ref=\"eValue\" class=\"ag-rich-select-value\"></div>\n            <div ref=\"eList\" class=\"ag-rich-select-list\"></div>\n        </div>`;\n__decorate$v([\n    (0,ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.Autowired)('userComponentFactory')\n], RichSelectCellEditor.prototype, \"userComponentFactory\", void 0);\n__decorate$v([\n    (0,ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.RefSelector)('eValue')\n], RichSelectCellEditor.prototype, \"eValue\", void 0);\n__decorate$v([\n    (0,ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.RefSelector)('eList')\n], RichSelectCellEditor.prototype, \"eList\", void 0);\n\n// DO NOT UPDATE MANUALLY: Generated from script during build time\nconst VERSION$5 = '30.0.2';\n\nconst RichSelectModule = {\n    version: VERSION$5,\n    moduleName: ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.ModuleNames.RichSelectModule,\n    beans: [],\n    userComponents: [\n        { componentName: 'agRichSelect', componentClass: RichSelectCellEditor },\n        { componentName: 'agRichSelectCellEditor', componentClass: RichSelectCellEditor }\n    ],\n    dependantModules: [\n        EnterpriseCoreModule\n    ]\n};\n\nvar __decorate$u = ( false) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nclass FullStore extends ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.RowNodeBlock {\n    constructor(ssrmParams, storeParams, parentRowNode) {\n        // finite block represents a cache with just one block, thus 0 is the id, it's the first block\n        super(0);\n        this.nodeIdSequence = new ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.NumberSequence();\n        this.info = {};\n        this.ssrmParams = ssrmParams;\n        this.parentRowNode = parentRowNode;\n        this.level = parentRowNode.level + 1;\n        this.groupLevel = ssrmParams.rowGroupCols ? this.level < ssrmParams.rowGroupCols.length : undefined;\n        this.leafGroup = ssrmParams.rowGroupCols ? this.level === ssrmParams.rowGroupCols.length - 1 : false;\n    }\n    postConstruct() {\n        this.usingTreeData = this.gridOptionsService.isTreeData();\n        this.nodeIdPrefix = this.blockUtils.createNodeIdPrefix(this.parentRowNode);\n        if (!this.usingTreeData && this.groupLevel) {\n            const groupColVo = this.ssrmParams.rowGroupCols[this.level];\n            this.groupField = groupColVo.field;\n            this.rowGroupColumn = this.columnModel.getRowGroupColumns()[this.level];\n        }\n        let initialRowCount = 1;\n        const isRootStore = this.parentRowNode.level === -1;\n        const userInitialRowCount = this.storeUtils.getServerSideInitialRowCount();\n        if (isRootStore && userInitialRowCount !== undefined) {\n            initialRowCount = userInitialRowCount;\n        }\n        this.initialiseRowNodes(initialRowCount);\n        this.rowNodeBlockLoader.addBlock(this);\n        this.addDestroyFunc(() => this.rowNodeBlockLoader.removeBlock(this));\n    }\n    destroyRowNodes() {\n        this.blockUtils.destroyRowNodes(this.allRowNodes);\n        this.allRowNodes = [];\n        this.nodesAfterSort = [];\n        this.nodesAfterFilter = [];\n        this.allNodesMap = {};\n    }\n    initialiseRowNodes(loadingRowsCount, failedLoad = false) {\n        this.destroyRowNodes();\n        for (let i = 0; i < loadingRowsCount; i++) {\n            const loadingRowNode = this.blockUtils.createRowNode({\n                field: this.groupField, group: this.groupLevel, leafGroup: this.leafGroup,\n                level: this.level, parent: this.parentRowNode, rowGroupColumn: this.rowGroupColumn\n            });\n            if (failedLoad) {\n                loadingRowNode.failedLoad = true;\n            }\n            this.allRowNodes.push(loadingRowNode);\n            this.nodesAfterFilter.push(loadingRowNode);\n            this.nodesAfterSort.push(loadingRowNode);\n        }\n    }\n    getBlockStateJson() {\n        return {\n            id: this.nodeIdPrefix ? this.nodeIdPrefix : '',\n            state: this.getState()\n        };\n    }\n    loadFromDatasource() {\n        this.storeUtils.loadFromDatasource({\n            startRow: undefined,\n            endRow: undefined,\n            parentBlock: this,\n            parentNode: this.parentRowNode,\n            storeParams: this.ssrmParams,\n            successCallback: this.pageLoaded.bind(this, this.getVersion()),\n            success: this.success.bind(this, this.getVersion()),\n            failCallback: this.pageLoadFailed.bind(this, this.getVersion()),\n            fail: this.pageLoadFailed.bind(this, this.getVersion())\n        });\n    }\n    getStartRow() {\n        return 0; // always zero as not in a cache\n    }\n    getEndRow() {\n        return this.nodesAfterSort.length;\n    }\n    createDataNode(data, index) {\n        const rowNode = this.blockUtils.createRowNode({\n            field: this.groupField, group: this.groupLevel, leafGroup: this.leafGroup,\n            level: this.level, parent: this.parentRowNode, rowGroupColumn: this.rowGroupColumn\n        });\n        if (index != null) {\n            ag_grid_community__WEBPACK_IMPORTED_MODULE_0__._.insertIntoArray(this.allRowNodes, rowNode, index);\n        }\n        else {\n            this.allRowNodes.push(rowNode);\n        }\n        const defaultId = this.prefixId(this.nodeIdSequence.next());\n        this.blockUtils.setDataIntoRowNode(rowNode, data, defaultId, undefined);\n        this.nodeManager.addRowNode(rowNode);\n        this.blockUtils.checkOpenByDefault(rowNode);\n        this.allNodesMap[rowNode.id] = rowNode;\n        return rowNode;\n    }\n    prefixId(id) {\n        if (this.nodeIdPrefix) {\n            return this.nodeIdPrefix + '-' + id;\n        }\n        else {\n            return id.toString();\n        }\n    }\n    processServerFail() {\n        this.initialiseRowNodes(1, true);\n        this.fireStoreUpdatedEvent();\n        this.flushAsyncTransactions();\n    }\n    processServerResult(params) {\n        if (!this.isAlive()) {\n            return;\n        }\n        const info = params.storeInfo || params.groupLevelInfo;\n        if (info) {\n            Object.assign(this.info, info);\n        }\n        const nodesToRecycle = this.allRowNodes.length > 0 ? this.allNodesMap : undefined;\n        this.allRowNodes = [];\n        this.nodesAfterSort = [];\n        this.nodesAfterFilter = [];\n        this.allNodesMap = {};\n        if (!params.rowData) {\n            const message = 'AG Grid: \"params.data\" is missing from Server-Side Row Model success() callback. Please use the \"data\" attribute. If no data is returned, set an empty list.';\n            ag_grid_community__WEBPACK_IMPORTED_MODULE_0__._.doOnce(() => console.warn(message, params), 'FullStore.noData');\n        }\n        this.createOrRecycleNodes(nodesToRecycle, params.rowData);\n        if (nodesToRecycle) {\n            this.blockUtils.destroyRowNodes(ag_grid_community__WEBPACK_IMPORTED_MODULE_0__._.getAllValuesInObject(nodesToRecycle));\n        }\n        this.filterAndSortNodes();\n        this.fireStoreUpdatedEvent();\n        this.flushAsyncTransactions();\n    }\n    createOrRecycleNodes(nodesToRecycle, rowData) {\n        if (!rowData) {\n            return;\n        }\n        const lookupNodeToRecycle = (data) => {\n            if (!nodesToRecycle) {\n                return undefined;\n            }\n            const getRowIdFunc = this.gridOptionsService.getCallback('getRowId');\n            if (!getRowIdFunc) {\n                return undefined;\n            }\n            const parentKeys = this.parentRowNode.getGroupKeys();\n            const level = this.level;\n            const id = getRowIdFunc({\n                data,\n                parentKeys: parentKeys.length > 0 ? parentKeys : undefined,\n                level,\n            });\n            const foundNode = nodesToRecycle[id];\n            if (!foundNode) {\n                return undefined;\n            }\n            delete nodesToRecycle[id];\n            return foundNode;\n        };\n        const recycleNode = (rowNode, dataItem) => {\n            this.allNodesMap[rowNode.id] = rowNode;\n            this.blockUtils.updateDataIntoRowNode(rowNode, dataItem);\n            this.allRowNodes.push(rowNode);\n        };\n        rowData.forEach(dataItem => {\n            const nodeToRecycle = lookupNodeToRecycle(dataItem);\n            if (nodeToRecycle) {\n                recycleNode(nodeToRecycle, dataItem);\n            }\n            else {\n                this.createDataNode(dataItem);\n            }\n        });\n    }\n    flushAsyncTransactions() {\n        // we want to update the store with any outstanding transactions straight away,\n        // as otherwise if waitTimeMillis is large (eg 5s), then the user could be looking\n        // at old data for a few seconds before the transactions is applied, which isn't what\n        // you would expect when we advertise 'transaction is applied when data is loaded'.\n        // we do this in a timeout as flushAsyncTransactions expects the grid to be in a settled\n        // state, not in the middle of loading rows! keeps the VM Turns more simple and deterministic.\n        window.setTimeout(() => this.transactionManager.flushAsyncTransactions(), 0);\n    }\n    filterAndSortNodes() {\n        this.filterRowNodes();\n        this.sortRowNodes();\n    }\n    sortRowNodes() {\n        const serverIsSorting = this.storeUtils.isServerSideSortAllLevels() || this.storeUtils.isServerSideSortOnServer();\n        const sortOptions = this.sortController.getSortOptions();\n        const noSortApplied = !sortOptions || sortOptions.length == 0;\n        if (serverIsSorting || noSortApplied) {\n            this.nodesAfterSort = this.nodesAfterFilter;\n            return;\n        }\n        this.nodesAfterSort = this.rowNodeSorter.doFullSort(this.nodesAfterFilter, sortOptions);\n    }\n    filterRowNodes() {\n        const serverIsFiltering = !this.storeUtils.isServerSideOnlyRefreshFilteredGroups() || this.storeUtils.isServerSideFilterOnServer();\n        // filtering for InFullStore only works at lowest level details.\n        // reason is the logic for group filtering was to difficult to work out how it should work at time of writing.\n        const groupLevel = this.groupLevel;\n        if (serverIsFiltering || groupLevel) {\n            this.nodesAfterFilter = this.allRowNodes;\n            return;\n        }\n        this.nodesAfterFilter = this.allRowNodes.filter(rowNode => this.filterManager.doesRowPassFilter({ rowNode: rowNode }));\n    }\n    clearDisplayIndexes() {\n        this.displayIndexStart = undefined;\n        this.displayIndexEnd = undefined;\n        this.allRowNodes.forEach(rowNode => this.blockUtils.clearDisplayIndex(rowNode));\n    }\n    getDisplayIndexEnd() {\n        return this.displayIndexEnd;\n    }\n    isDisplayIndexInStore(displayIndex) {\n        if (this.getRowCount() === 0) {\n            return false;\n        }\n        return displayIndex >= this.displayIndexStart && displayIndex < this.displayIndexEnd;\n    }\n    setDisplayIndexes(displayIndexSeq, nextRowTop) {\n        this.displayIndexStart = displayIndexSeq.peek();\n        this.topPx = nextRowTop.value;\n        const visibleNodeIds = {};\n        // set on all visible nodes\n        this.nodesAfterSort.forEach(rowNode => {\n            this.blockUtils.setDisplayIndex(rowNode, displayIndexSeq, nextRowTop);\n            visibleNodeIds[rowNode.id] = true;\n        });\n        // and clear on all non-visible nodes\n        this.allRowNodes.forEach(rowNode => {\n            if (!visibleNodeIds[rowNode.id]) {\n                this.blockUtils.clearDisplayIndex(rowNode);\n            }\n        });\n        this.displayIndexEnd = displayIndexSeq.peek();\n        this.heightPx = nextRowTop.value - this.topPx;\n    }\n    forEachStoreDeep(callback, sequence = new ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.NumberSequence()) {\n        callback(this, sequence.next());\n        this.allRowNodes.forEach(rowNode => {\n            const childCache = rowNode.childStore;\n            if (childCache) {\n                childCache.forEachStoreDeep(callback, sequence);\n            }\n        });\n    }\n    forEachNodeDeep(callback, sequence = new ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.NumberSequence()) {\n        this.allRowNodes.forEach(rowNode => {\n            callback(rowNode, sequence.next());\n            const childCache = rowNode.childStore;\n            if (childCache) {\n                childCache.forEachNodeDeep(callback, sequence);\n            }\n        });\n    }\n    forEachNodeDeepAfterFilterAndSort(callback, sequence = new ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.NumberSequence()) {\n        this.nodesAfterSort.forEach(rowNode => {\n            callback(rowNode, sequence.next());\n            const childCache = rowNode.childStore;\n            if (childCache) {\n                childCache.forEachNodeDeepAfterFilterAndSort(callback, sequence);\n            }\n        });\n    }\n    getRowUsingDisplayIndex(displayRowIndex) {\n        // this can happen if asking for a row that doesn't exist in the model,\n        // eg if a cell range is selected, and the user filters so rows no longer exists\n        if (!this.isDisplayIndexInStore(displayRowIndex)) {\n            return undefined;\n        }\n        const res = this.blockUtils.binarySearchForDisplayIndex(displayRowIndex, this.nodesAfterSort);\n        return res;\n    }\n    getRowBounds(index) {\n        for (let i = 0; i < this.nodesAfterSort.length; i++) {\n            const rowNode = this.nodesAfterSort[i];\n            const res = this.blockUtils.extractRowBounds(rowNode, index);\n            if (res) {\n                return res;\n            }\n        }\n        return null;\n    }\n    isPixelInRange(pixel) {\n        return pixel >= this.topPx && pixel < (this.topPx + this.heightPx);\n    }\n    getRowIndexAtPixel(pixel) {\n        // if pixel before block, return first row\n        const pixelBeforeThisStore = pixel <= this.topPx;\n        if (pixelBeforeThisStore) {\n            const firstNode = this.nodesAfterSort[0];\n            return firstNode.rowIndex;\n        }\n        // if pixel after store, return last row, however the last\n        // row could be a child store\n        const pixelAfterThisStore = pixel >= (this.topPx + this.heightPx);\n        if (pixelAfterThisStore) {\n            const lastRowNode = this.nodesAfterSort[this.nodesAfterSort.length - 1];\n            const lastRowNodeBottomPx = lastRowNode.rowTop + lastRowNode.rowHeight;\n            if (pixel >= lastRowNodeBottomPx && lastRowNode.expanded) {\n                if (lastRowNode.childStore && lastRowNode.childStore.getRowCount() > 0) {\n                    return lastRowNode.childStore.getRowIndexAtPixel(pixel);\n                }\n                if (lastRowNode.detailNode) {\n                    return lastRowNode.detailNode.rowIndex;\n                }\n            }\n            return lastRowNode.rowIndex;\n        }\n        let res = null;\n        this.nodesAfterSort.forEach(rowNode => {\n            const res2 = this.blockUtils.getIndexAtPixel(rowNode, pixel);\n            if (res2 != null) {\n                res = res2;\n            }\n        });\n        const pixelIsPastLastRow = res == null;\n        if (pixelIsPastLastRow) {\n            return this.displayIndexEnd - 1;\n        }\n        return res;\n    }\n    getChildStore(keys) {\n        return this.storeUtils.getChildStore(keys, this, (key) => {\n            const rowNode = this.allRowNodes.find(currentRowNode => {\n                return currentRowNode.key == key;\n            });\n            return rowNode;\n        });\n    }\n    forEachChildStoreShallow(callback) {\n        this.allRowNodes.forEach(rowNode => {\n            const childStore = rowNode.childStore;\n            if (childStore) {\n                callback(childStore);\n            }\n        });\n    }\n    refreshAfterFilter(params) {\n        const serverIsFiltering = this.storeUtils.isServerSideFilterOnServer();\n        const storeIsImpacted = this.storeUtils.isServerRefreshNeeded(this.parentRowNode, this.ssrmParams.rowGroupCols, params);\n        const serverIsFilteringAllLevels = !this.storeUtils.isServerSideOnlyRefreshFilteredGroups();\n        if (serverIsFilteringAllLevels || (serverIsFiltering && storeIsImpacted)) {\n            this.refreshStore(true);\n            this.sortRowNodes();\n            return;\n        }\n        this.filterRowNodes();\n        this.sortRowNodes();\n        this.forEachChildStoreShallow(store => store.refreshAfterFilter(params));\n    }\n    refreshAfterSort(params) {\n        const serverIsSorting = this.storeUtils.isServerSideSortOnServer();\n        const storeIsImpacted = this.storeUtils.isServerRefreshNeeded(this.parentRowNode, this.ssrmParams.rowGroupCols, params);\n        const serverIsSortingAllLevels = this.storeUtils.isServerSideSortAllLevels();\n        if (serverIsSortingAllLevels || (serverIsSorting && storeIsImpacted)) {\n            this.refreshStore(true);\n            this.filterRowNodes();\n            return;\n        }\n        this.filterRowNodes();\n        this.sortRowNodes();\n        this.forEachChildStoreShallow(store => store.refreshAfterSort(params));\n    }\n    applyTransaction(transaction) {\n        // we only apply transactions to loaded state\n        switch (this.getState()) {\n            case ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.RowNodeBlock.STATE_FAILED:\n                return { status: ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.ServerSideTransactionResultStatus.StoreLoadingFailed };\n            case ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.RowNodeBlock.STATE_LOADING:\n                return { status: ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.ServerSideTransactionResultStatus.StoreLoading };\n            case ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.RowNodeBlock.STATE_WAITING_TO_LOAD:\n                return { status: ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.ServerSideTransactionResultStatus.StoreWaitingToLoad };\n        }\n        const applyCallback = this.gridOptionsService.getCallback('isApplyServerSideTransaction');\n        if (applyCallback) {\n            const params = {\n                transaction: transaction,\n                parentNode: this.parentRowNode,\n                storeInfo: this.info,\n                groupLevelInfo: this.info\n            };\n            const apply = applyCallback(params);\n            if (!apply) {\n                return { status: ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.ServerSideTransactionResultStatus.Cancelled };\n            }\n        }\n        const res = {\n            status: ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.ServerSideTransactionResultStatus.Applied,\n            remove: [],\n            update: [],\n            add: []\n        };\n        const nodesToUnselect = [];\n        this.executeAdd(transaction, res);\n        this.executeRemove(transaction, res, nodesToUnselect);\n        this.executeUpdate(transaction, res, nodesToUnselect);\n        this.filterAndSortNodes();\n        this.updateSelection(nodesToUnselect);\n        return res;\n    }\n    updateSelection(nodesToUnselect) {\n        const selectionChanged = nodesToUnselect.length > 0;\n        if (selectionChanged) {\n            this.selectionService.setNodesSelected({\n                newValue: false,\n                nodes: nodesToUnselect,\n                suppressFinishActions: true,\n                clearSelection: false,\n                source: 'rowDataChanged',\n            });\n            const event = {\n                type: ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.Events.EVENT_SELECTION_CHANGED,\n                source: 'rowDataChanged'\n            };\n            this.eventService.dispatchEvent(event);\n        }\n    }\n    executeAdd(rowDataTran, rowNodeTransaction) {\n        const { add, addIndex } = rowDataTran;\n        if (ag_grid_community__WEBPACK_IMPORTED_MODULE_0__._.missingOrEmpty(add)) {\n            return;\n        }\n        const useIndex = typeof addIndex === 'number' && addIndex >= 0;\n        if (useIndex) {\n            // items get inserted in reverse order for index insertion\n            add.reverse().forEach(item => {\n                const newRowNode = this.createDataNode(item, addIndex);\n                rowNodeTransaction.add.push(newRowNode);\n            });\n        }\n        else {\n            add.forEach(item => {\n                const newRowNode = this.createDataNode(item);\n                rowNodeTransaction.add.push(newRowNode);\n            });\n        }\n    }\n    executeRemove(rowDataTran, rowNodeTransaction, nodesToUnselect) {\n        const { remove } = rowDataTran;\n        if (remove == null) {\n            return;\n        }\n        const rowIdsRemoved = {};\n        remove.forEach(item => {\n            const rowNode = this.lookupRowNode(item);\n            if (!rowNode) {\n                return;\n            }\n            // do delete - setting 'suppressFinishActions = true' to ensure EVENT_SELECTION_CHANGED is not raised for\n            // each row node updated, instead it is raised once by the calling code if any selected nodes exist.\n            if (rowNode.isSelected()) {\n                nodesToUnselect.push(rowNode);\n            }\n            // so row renderer knows to fade row out (and not reposition it)\n            rowNode.clearRowTopAndRowIndex();\n            // NOTE: were we could remove from allLeaveChildren, however _.removeFromArray() is expensive, especially\n            // if called multiple times (eg deleting lots of rows) and if allLeafChildren is a large list\n            rowIdsRemoved[rowNode.id] = true;\n            // _.removeFromArray(this.rootNode.allLeafChildren, rowNode);\n            delete this.allNodesMap[rowNode.id];\n            rowNodeTransaction.remove.push(rowNode);\n            this.nodeManager.removeNode(rowNode);\n        });\n        this.allRowNodes = this.allRowNodes.filter(rowNode => !rowIdsRemoved[rowNode.id]);\n    }\n    executeUpdate(rowDataTran, rowNodeTransaction, nodesToUnselect) {\n        const { update } = rowDataTran;\n        if (update == null) {\n            return;\n        }\n        update.forEach(item => {\n            const rowNode = this.lookupRowNode(item);\n            if (!rowNode) {\n                return;\n            }\n            this.blockUtils.updateDataIntoRowNode(rowNode, item);\n            if (!rowNode.selectable && rowNode.isSelected()) {\n                nodesToUnselect.push(rowNode);\n            }\n            rowNodeTransaction.update.push(rowNode);\n        });\n    }\n    lookupRowNode(data) {\n        const getRowIdFunc = this.gridOptionsService.getCallback('getRowId');\n        let rowNode;\n        if (getRowIdFunc != null) {\n            // find rowNode using id\n            const level = this.level;\n            const parentKeys = this.parentRowNode.getGroupKeys();\n            const id = getRowIdFunc({\n                data,\n                parentKeys: parentKeys.length > 0 ? parentKeys : undefined,\n                level,\n            });\n            rowNode = this.allNodesMap[id];\n            if (!rowNode) {\n                console.error(`AG Grid: could not find row id=${id}, data item was not found for this id`);\n                return null;\n            }\n        }\n        else {\n            // find rowNode using object references\n            rowNode = this.allRowNodes.find(currentRowNode => currentRowNode.data === data);\n            if (!rowNode) {\n                console.error(`AG Grid: could not find data item as object was not found`, data);\n                return null;\n            }\n        }\n        return rowNode;\n    }\n    addStoreStates(result) {\n        result.push({\n            suppressInfiniteScroll: true,\n            route: this.parentRowNode.getGroupKeys(),\n            rowCount: this.allRowNodes.length,\n            info: this.info\n        });\n        this.forEachChildStoreShallow(childStore => childStore.addStoreStates(result));\n    }\n    refreshStore(purge) {\n        if (purge) {\n            const loadingRowsToShow = this.nodesAfterSort ? this.nodesAfterSort.length : 1;\n            this.initialiseRowNodes(loadingRowsToShow);\n        }\n        this.scheduleLoad();\n        this.fireStoreUpdatedEvent();\n    }\n    retryLoads() {\n        if (this.getState() === ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.RowNodeBlock.STATE_FAILED) {\n            this.initialiseRowNodes(1);\n            this.scheduleLoad();\n        }\n        this.forEachChildStoreShallow(store => store.retryLoads());\n    }\n    scheduleLoad() {\n        this.setStateWaitingToLoad();\n        this.rowNodeBlockLoader.checkBlockToLoad();\n    }\n    // gets called 1) row count changed 2) cache purged 3) items inserted\n    fireStoreUpdatedEvent() {\n        // this results in row model firing ModelUpdated.\n        // server side row model also updates the row indexes first\n        const event = {\n            type: ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.Events.EVENT_STORE_UPDATED\n        };\n        this.eventService.dispatchEvent(event);\n    }\n    getRowCount() {\n        return this.nodesAfterSort.length;\n    }\n    getTopLevelRowDisplayedIndex(topLevelIndex) {\n        const rowNode = this.nodesAfterSort[topLevelIndex];\n        return rowNode.rowIndex;\n    }\n    isLastRowIndexKnown() {\n        return this.getState() == ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.RowNodeBlock.STATE_LOADED;\n    }\n    getRowNodesInRange(firstInRange, lastInRange) {\n        const result = [];\n        let inActiveRange = false;\n        // if only one node passed, we start the selection at the top\n        if (ag_grid_community__WEBPACK_IMPORTED_MODULE_0__._.missing(firstInRange)) {\n            inActiveRange = true;\n        }\n        this.nodesAfterSort.forEach(rowNode => {\n            const hitFirstOrLast = rowNode === firstInRange || rowNode === lastInRange;\n            if (inActiveRange || hitFirstOrLast) {\n                result.push(rowNode);\n            }\n            if (hitFirstOrLast) {\n                inActiveRange = !inActiveRange;\n            }\n        });\n        // inActiveRange will be still true if we never hit the second rowNode\n        const invalidRange = inActiveRange;\n        return invalidRange ? [] : result;\n    }\n    getStoreBounds() {\n        return {\n            topPx: this.topPx,\n            heightPx: this.heightPx,\n        };\n    }\n}\n__decorate$u([\n    (0,ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.Autowired)('ssrmStoreUtils')\n], FullStore.prototype, \"storeUtils\", void 0);\n__decorate$u([\n    (0,ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.Autowired)('ssrmBlockUtils')\n], FullStore.prototype, \"blockUtils\", void 0);\n__decorate$u([\n    (0,ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.Autowired)('columnModel')\n], FullStore.prototype, \"columnModel\", void 0);\n__decorate$u([\n    (0,ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.Autowired)('rowNodeBlockLoader')\n], FullStore.prototype, \"rowNodeBlockLoader\", void 0);\n__decorate$u([\n    (0,ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.Autowired)('rowNodeSorter')\n], FullStore.prototype, \"rowNodeSorter\", void 0);\n__decorate$u([\n    (0,ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.Autowired)('sortController')\n], FullStore.prototype, \"sortController\", void 0);\n__decorate$u([\n    (0,ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.Autowired)('selectionService')\n], FullStore.prototype, \"selectionService\", void 0);\n__decorate$u([\n    (0,ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.Autowired)('ssrmNodeManager')\n], FullStore.prototype, \"nodeManager\", void 0);\n__decorate$u([\n    (0,ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.Autowired)('filterManager')\n], FullStore.prototype, \"filterManager\", void 0);\n__decorate$u([\n    (0,ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.Autowired)('ssrmTransactionManager')\n], FullStore.prototype, \"transactionManager\", void 0);\n__decorate$u([\n    ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.PostConstruct\n], FullStore.prototype, \"postConstruct\", null);\n__decorate$u([\n    ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.PreDestroy\n], FullStore.prototype, \"destroyRowNodes\", null);\n\nvar __decorate$t = ( false) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nclass LazyBlockLoader extends ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.BeanStub {\n    constructor(cache, parentNode, storeParams) {\n        super();\n        this.loadingNodes = new Set();\n        this.checkForLoadQueued = false;\n        this.loaderTimeout = undefined;\n        this.nextBlockToLoad = undefined;\n        this.parentNode = parentNode;\n        this.cache = cache;\n        this.storeParams = storeParams;\n    }\n    init() {\n        this.addManagedListener(this.rowNodeBlockLoader, ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.RowNodeBlockLoader.BLOCK_LOADED_EVENT, () => this.queueLoadAction());\n    }\n    isRowLoading(index) {\n        return this.loadingNodes.has(index);\n    }\n    getBlockToLoad() {\n        var _a;\n        const firstRowInViewport = this.api.getFirstDisplayedRow();\n        const lastRowInViewport = this.api.getLastDisplayedRow();\n        // quick look-up for priority rows needing loading in viewport.\n        for (let i = firstRowInViewport; i <= lastRowInViewport; i++) {\n            const node = this.cache.getNodeCachedByDisplayIndex(i);\n            if (!node) {\n                // if no row details, ignore, as row hasn't been created\n                // and it's too expensive to work out its location here\n                continue;\n            }\n            const lazyNode = this.cache.getNodes().getBy('node', node);\n            if (!lazyNode) {\n                continue;\n            }\n            if (this.isRowLoading(lazyNode.index)) {\n                continue;\n            }\n            if (node.__needsRefreshWhenVisible || (node.stub && !node.failedLoad)) {\n                return this.getBlockStartIndexForIndex(lazyNode.index);\n            }\n        }\n        const nodesToRefresh = this.cache.getNodesToRefresh();\n        let nodeToRefresh = null;\n        let nodeToRefreshDist = Number.MAX_SAFE_INTEGER;\n        nodesToRefresh.forEach(node => {\n            if (node.rowIndex == null) {\n                nodeToRefresh = node;\n                return;\n            }\n            const distToViewportTop = Math.abs(firstRowInViewport - node.rowIndex);\n            const distToViewportBottom = Math.abs(node.rowIndex - lastRowInViewport);\n            if (distToViewportTop < nodeToRefreshDist) {\n                nodeToRefresh = node;\n                nodeToRefreshDist = distToViewportTop;\n            }\n            if (distToViewportBottom < nodeToRefreshDist) {\n                nodeToRefresh = node;\n                nodeToRefreshDist = distToViewportBottom;\n            }\n        });\n        const lazyIndex = (_a = this.cache.getNodes().getBy('node', nodeToRefresh)) === null || _a === void 0 ? void 0 : _a.index;\n        return lazyIndex == null ? undefined : this.getBlockStartIndexForIndex(lazyIndex);\n    }\n    reset() {\n        this.loadingNodes.clear();\n        clearTimeout(this.loaderTimeout);\n        this.loaderTimeout = undefined;\n    }\n    executeLoad(startRow, endRow) {\n        var _a;\n        const ssrmParams = this.cache.getSsrmParams();\n        const request = {\n            startRow,\n            endRow,\n            rowGroupCols: ssrmParams.rowGroupCols,\n            valueCols: ssrmParams.valueCols,\n            pivotCols: ssrmParams.pivotCols,\n            pivotMode: ssrmParams.pivotMode,\n            groupKeys: this.parentNode.getGroupKeys(),\n            filterModel: ssrmParams.filterModel,\n            sortModel: ssrmParams.sortModel,\n        };\n        const removeNodesFromLoadingMap = () => {\n            for (let i = 0; i < endRow - startRow; i++) {\n                this.loadingNodes.delete(startRow + i);\n            }\n        };\n        const addNodesToLoadingMap = () => {\n            for (let i = 0; i < endRow - startRow; i++) {\n                this.loadingNodes.add(startRow + i);\n            }\n        };\n        const success = (params) => {\n            this.rowNodeBlockLoader.loadComplete();\n            this.cache.onLoadSuccess(startRow, endRow - startRow, params);\n            removeNodesFromLoadingMap();\n            this.queueLoadAction();\n        };\n        const fail = () => {\n            this.rowNodeBlockLoader.loadComplete();\n            this.cache.onLoadFailed(startRow, endRow - startRow);\n            removeNodesFromLoadingMap();\n            this.queueLoadAction();\n        };\n        const params = {\n            request,\n            successCallback: (rowData, rowCount) => success({ rowData, rowCount }),\n            success,\n            failCallback: fail,\n            fail,\n            parentNode: this.parentNode,\n            api: this.api,\n            columnApi: this.columnApi,\n            context: this.gridOptionsService.context\n        };\n        addNodesToLoadingMap();\n        (_a = this.cache.getSsrmParams().datasource) === null || _a === void 0 ? void 0 : _a.getRows(params);\n    }\n    getNextBlockToLoad() {\n        const result = this.getBlockToLoad();\n        if (result != null && result < 0) {\n            this.getBlockToLoad();\n        }\n        if (result != null) {\n            return [String(result), result + this.getBlockSize()];\n        }\n        return null;\n    }\n    queueLoadCheck() {\n        // already going to check next cycle, ignore.\n        if (this.checkForLoadQueued) {\n            return;\n        }\n        this.checkForLoadQueued = true;\n        window.queueMicrotask(() => {\n            this.checkForLoadQueued = false;\n            this.queueLoadAction();\n        });\n    }\n    queueLoadAction() {\n        var _a;\n        const nextBlockToLoad = this.getNextBlockToLoad();\n        if (!nextBlockToLoad) {\n            // there's no block we should be loading right now, clear the timeouts\n            window.clearTimeout(this.loaderTimeout);\n            this.loaderTimeout = undefined;\n            this.nextBlockToLoad = undefined;\n            return;\n        }\n        // if the next required block has changed, reset the loading timeout\n        if (!this.nextBlockToLoad || (this.nextBlockToLoad[0] !== nextBlockToLoad[0] && this.nextBlockToLoad[1] !== nextBlockToLoad[1])) {\n            this.nextBlockToLoad = nextBlockToLoad;\n            window.clearTimeout(this.loaderTimeout);\n            const [startRowString, endRow] = this.nextBlockToLoad;\n            const startRow = Number(startRowString);\n            this.loaderTimeout = window.setTimeout(() => {\n                if (!this.cache.isAlive()) {\n                    return;\n                }\n                this.loaderTimeout = undefined;\n                this.attemptLoad(startRow, endRow);\n                this.nextBlockToLoad = undefined;\n            }, (_a = this.gridOptionsService.getNum('blockLoadDebounceMillis')) !== null && _a !== void 0 ? _a : 0);\n        }\n    }\n    attemptLoad(start, end) {\n        const availableLoadingCount = this.rowNodeBlockLoader.getAvailableLoadingCount();\n        // too many loads already, ignore the request as a successful request will requeue itself anyway\n        if (availableLoadingCount != null && availableLoadingCount === 0) {\n            return;\n        }\n        this.rowNodeBlockLoader.registerLoads(1);\n        this.executeLoad(start, end);\n        this.queueLoadAction();\n    }\n    getBlockSize() {\n        return this.storeParams.cacheBlockSize || LazyBlockLoader.DEFAULT_BLOCK_SIZE;\n    }\n    getBlockStartIndexForIndex(storeIndex) {\n        const blockSize = this.getBlockSize();\n        return storeIndex - (storeIndex % blockSize);\n    }\n    getBlockBoundsForIndex(storeIndex) {\n        const startOfBlock = this.getBlockStartIndexForIndex(storeIndex);\n        const blockSize = this.getBlockSize();\n        return [startOfBlock, startOfBlock + blockSize];\n    }\n}\nLazyBlockLoader.DEFAULT_BLOCK_SIZE = 100;\n__decorate$t([\n    (0,ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.Autowired)('gridApi')\n], LazyBlockLoader.prototype, \"api\", void 0);\n__decorate$t([\n    (0,ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.Autowired)('columnApi')\n], LazyBlockLoader.prototype, \"columnApi\", void 0);\n__decorate$t([\n    (0,ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.Autowired)('rowNodeBlockLoader')\n], LazyBlockLoader.prototype, \"rowNodeBlockLoader\", void 0);\n__decorate$t([\n    ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.PostConstruct\n], LazyBlockLoader.prototype, \"init\", null);\n\nclass MultiIndexMap {\n    constructor(...indexes) {\n        if (indexes.length < 1) {\n            throw new Error('AG Grid: At least one index must be provided.');\n        }\n        this.indexes = indexes;\n        this.maps = new Map(this.indexes.map(index => [index, new Map()]));\n    }\n    getBy(index, key) {\n        const map = this.maps.get(index);\n        if (!map) {\n            throw new Error(`AG Grid: ${String(index)} not found`);\n        }\n        return map.get(key);\n    }\n    set(item) {\n        this.indexes.forEach(index => {\n            const map = this.maps.get(index);\n            if (!map) {\n                throw new Error(`AG Grid: ${String(index)} not found`);\n            }\n            map.set(item[index], item);\n        });\n    }\n    delete(item) {\n        this.indexes.forEach(index => {\n            const map = this.maps.get(index);\n            if (!map) {\n                throw new Error(`AG Grid: ${String(index)} not found`);\n            }\n            map.delete(item[index]);\n        });\n    }\n    clear() {\n        this.maps.forEach(map => map.clear());\n    }\n    getIterator(index) {\n        const map = this.maps.get(index);\n        if (!map) {\n            throw new Error(`AG Grid: ${String(index)} not found`);\n        }\n        return map.values();\n    }\n    forEach(callback) {\n        const iterator = this.getIterator(this.indexes[0]);\n        let pointer;\n        while (pointer = iterator.next()) {\n            if (pointer.done)\n                break;\n            callback(pointer.value);\n        }\n    }\n    find(callback) {\n        const iterator = this.getIterator(this.indexes[0]);\n        let pointer;\n        while (pointer = iterator.next()) {\n            if (pointer.done)\n                break;\n            if (callback(pointer.value)) {\n                return pointer.value;\n            }\n        }\n    }\n    filter(predicate) {\n        const iterator = this.getIterator(this.indexes[0]);\n        let pointer;\n        const result = [];\n        while (pointer = iterator.next()) {\n            if (pointer.done)\n                break;\n            if (predicate(pointer.value)) {\n                result.push(pointer.value);\n            }\n        }\n        return result;\n    }\n}\n\nvar __decorate$s = ( false) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nclass LazyCache extends ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.BeanStub {\n    constructor(store, numberOfRows, storeParams) {\n        super();\n        /**\n         * Indicates whether this is still the live dataset for this store (used for ignoring old requests after purge)\n         */\n        this.live = true;\n        this.store = store;\n        this.numberOfRows = numberOfRows;\n        this.isLastRowKnown = false;\n        this.storeParams = storeParams;\n    }\n    init() {\n        // initiate the node map to be indexed at 'index', 'id' and 'node' for quick look-up.\n        // it's important id isn't first, as stub nodes overwrite each-other, and the first index is\n        // used for iteration.\n        this.nodeMap = new MultiIndexMap('index', 'id', 'node');\n        this.nodeDisplayIndexMap = new Map();\n        this.nodesToRefresh = new Set();\n        this.defaultNodeIdPrefix = this.blockUtils.createNodeIdPrefix(this.store.getParentNode());\n        this.rowLoader = this.createManagedBean(new LazyBlockLoader(this, this.store.getParentNode(), this.storeParams));\n        this.getRowIdFunc = this.gridOptionsService.getCallback('getRowId');\n        this.isMasterDetail = this.gridOptionsService.isMasterDetail();\n    }\n    destroyRowNodes() {\n        this.numberOfRows = 0;\n        this.nodeMap.forEach(node => this.blockUtils.destroyRowNode(node.node));\n        this.nodeMap.clear();\n        this.nodeDisplayIndexMap.clear();\n        this.nodesToRefresh.clear();\n        this.live = false;\n    }\n    /**\n     * Get the row node for a specific display index from this store\n     * @param displayIndex the display index of the node to find\n     * @returns undefined if the node is not in the store bounds, otherwise will always return a node\n     */\n    getRowByDisplayIndex(displayIndex) {\n        var _a, _b, _c, _d;\n        // if index isn't in store, nothing to return\n        if (!this.store.isDisplayIndexInStore(displayIndex)) {\n            return undefined;\n        }\n        // first try to directly look this node up in the display index map\n        const node = this.nodeDisplayIndexMap.get(displayIndex);\n        if (node) {\n            // if we have the node, check if it needs refreshed when rendered\n            if (node.stub || node.__needsRefreshWhenVisible) {\n                this.rowLoader.queueLoadCheck();\n            }\n            return node;\n        }\n        // next check if this is the first row, if so return a stub node\n        // this is a performance optimisation, as it is the most common scenario\n        // and enables the node - 1 check to kick in more often.\n        if (displayIndex === this.store.getDisplayIndexStart()) {\n            return this.createStubNode(0, displayIndex);\n        }\n        // check if the row immediately prior is available in the store\n        const contiguouslyPreviousNode = this.nodeDisplayIndexMap.get(displayIndex - 1);\n        if (contiguouslyPreviousNode) {\n            // if previous row is master detail, and expanded, this node must be detail\n            if (this.isMasterDetail && contiguouslyPreviousNode.master && contiguouslyPreviousNode.expanded) {\n                return contiguouslyPreviousNode.detailNode;\n            }\n            // if previous row is expanded group, this node will belong to that group.\n            if (contiguouslyPreviousNode.expanded && ((_a = contiguouslyPreviousNode.childStore) === null || _a === void 0 ? void 0 : _a.isDisplayIndexInStore(displayIndex))) {\n                return (_b = contiguouslyPreviousNode.childStore) === null || _b === void 0 ? void 0 : _b.getRowUsingDisplayIndex(displayIndex);\n            }\n            // otherwise, row must be a stub node\n            const lazyCacheNode = this.nodeMap.getBy('node', contiguouslyPreviousNode);\n            return this.createStubNode(lazyCacheNode.index + 1, displayIndex);\n        }\n        const adjacentNodes = this.getSurroundingNodesByDisplayIndex(displayIndex);\n        // if no bounds skipped includes this, calculate from end index\n        if (adjacentNodes == null) {\n            const storeIndexFromEndIndex = this.store.getRowCount() - (this.store.getDisplayIndexEnd() - displayIndex);\n            return this.createStubNode(storeIndexFromEndIndex, displayIndex);\n        }\n        const { previousNode, nextNode } = adjacentNodes;\n        // if the node before this node is expanded, this node might be a child of that node\n        if (previousNode && previousNode.node.expanded && ((_c = previousNode.node.childStore) === null || _c === void 0 ? void 0 : _c.isDisplayIndexInStore(displayIndex))) {\n            return (_d = previousNode.node.childStore) === null || _d === void 0 ? void 0 : _d.getRowUsingDisplayIndex(displayIndex);\n        }\n        // if we have the node after this node, we can calculate the store index of this node by the difference\n        // in display indexes between the two nodes.\n        if (nextNode) {\n            const displayIndexDiff = nextNode.node.rowIndex - displayIndex;\n            const newStoreIndex = nextNode.index - displayIndexDiff;\n            return this.createStubNode(newStoreIndex, displayIndex);\n        }\n        // if no next node, calculate from end index of this store\n        const storeIndexFromEndIndex = this.store.getRowCount() - (this.store.getDisplayIndexEnd() - displayIndex);\n        return this.createStubNode(storeIndexFromEndIndex, displayIndex);\n    }\n    /**\n     * Used for creating and positioning a stub node without firing a store updated event\n     */\n    createStubNode(storeIndex, displayIndex) {\n        // bounds are acquired before creating the node, as otherwise it'll use it's own empty self to calculate\n        const rowBounds = this.store.getRowBounds(displayIndex);\n        const newNode = this.createRowAtIndex(storeIndex, null, node => {\n            node.setRowIndex(displayIndex);\n            node.setRowTop(rowBounds.rowTop);\n            this.nodeDisplayIndexMap.set(displayIndex, node);\n        });\n        this.rowLoader.queueLoadCheck();\n        return newNode;\n    }\n    /**\n     * @param index The row index relative to this store\n     * @returns A rowNode at the given store index\n     */\n    getRowByStoreIndex(index) {\n        var _a;\n        return (_a = this.nodeMap.getBy('index', index)) === null || _a === void 0 ? void 0 : _a.node;\n    }\n    /**\n     * Given a number of rows, skips through the given sequence & row top reference (using default row height)\n     * @param numberOfRowsToSkip number of rows to skip over in the given sequence\n     * @param displayIndexSeq the sequence in which to skip\n     * @param nextRowTop the row top reference in which to skip\n     */\n    skipDisplayIndexes(numberOfRowsToSkip, displayIndexSeq, nextRowTop) {\n        if (numberOfRowsToSkip === 0) {\n            return;\n        }\n        const defaultRowHeight = this.gridOptionsService.getRowHeightAsNumber();\n        displayIndexSeq.skip(numberOfRowsToSkip);\n        nextRowTop.value += numberOfRowsToSkip * defaultRowHeight;\n    }\n    /**\n     * @param displayIndexSeq the number sequence for generating the display index of each row\n     * @param nextRowTop an object containing the next row top value intended to be modified by ref per row\n     */\n    setDisplayIndexes(displayIndexSeq, nextRowTop) {\n        // Create a map of display index nodes for access speed\n        this.nodeDisplayIndexMap.clear();\n        // create an object indexed by store index, as this will sort all of the nodes when we iterate\n        // the object\n        const orderedMap = {};\n        this.nodeMap.forEach(lazyNode => {\n            orderedMap[lazyNode.index] = lazyNode.node;\n        });\n        let lastIndex = -1;\n        // iterate over the nodes in order, setting the display index on each node.\n        for (const stringIndex in orderedMap) {\n            const node = orderedMap[stringIndex];\n            const numericIndex = Number(stringIndex);\n            // if any nodes aren't currently in the store, skip the display indexes too\n            const numberOfRowsToSkip = (numericIndex - 1) - lastIndex;\n            this.skipDisplayIndexes(numberOfRowsToSkip, displayIndexSeq, nextRowTop);\n            // set this nodes index and row top\n            this.blockUtils.setDisplayIndex(node, displayIndexSeq, nextRowTop);\n            this.nodeDisplayIndexMap.set(node.rowIndex, node);\n            // store this index for skipping after this\n            lastIndex = numericIndex;\n        }\n        // need to skip rows until the end of this store\n        const numberOfRowsToSkip = (this.numberOfRows - 1) - lastIndex;\n        this.skipDisplayIndexes(numberOfRowsToSkip, displayIndexSeq, nextRowTop);\n        // this is not terribly efficient, and could probs be improved\n        this.purgeExcessRows();\n    }\n    getRowCount() {\n        return this.numberOfRows;\n    }\n    setRowCount(rowCount, isLastRowIndexKnown) {\n        if (rowCount < 0) {\n            throw new Error('AG Grid: setRowCount can only accept a positive row count.');\n        }\n        this.numberOfRows = rowCount;\n        if (isLastRowIndexKnown != null) {\n            this.isLastRowKnown = isLastRowIndexKnown;\n            if (isLastRowIndexKnown === false) {\n                this.numberOfRows += 1;\n            }\n        }\n        this.fireStoreUpdatedEvent();\n    }\n    getNodes() {\n        return this.nodeMap;\n    }\n    getNodeCachedByDisplayIndex(displayIndex) {\n        var _a;\n        return (_a = this.nodeDisplayIndexMap.get(displayIndex)) !== null && _a !== void 0 ? _a : null;\n    }\n    getNodesToRefresh() {\n        return this.nodesToRefresh;\n    }\n    /**\n     * @returns the previous and next loaded row nodes surrounding the given display index\n     */\n    getSurroundingNodesByDisplayIndex(displayIndex) {\n        let nextNode;\n        let previousNode;\n        this.nodeMap.forEach(lazyNode => {\n            // previous node\n            if (displayIndex > lazyNode.node.rowIndex) {\n                // get the largest previous node\n                if (previousNode == null || previousNode.node.rowIndex < lazyNode.node.rowIndex) {\n                    previousNode = lazyNode;\n                }\n                return;\n            }\n            // next node\n            // get the smallest next node\n            if (nextNode == null || nextNode.node.rowIndex > lazyNode.node.rowIndex) {\n                nextNode = lazyNode;\n                return;\n            }\n        });\n        if (!previousNode && !nextNode)\n            return null;\n        return { previousNode, nextNode };\n    }\n    /**\n     * Get or calculate the display index for a given store index\n     * @param storeIndex the rows index within this store\n     * @returns the rows visible display index relative to the grid\n     */\n    getDisplayIndexFromStoreIndex(storeIndex) {\n        var _a, _b;\n        const nodeAtIndex = this.nodeMap.getBy('index', storeIndex);\n        if (nodeAtIndex) {\n            return nodeAtIndex.node.rowIndex;\n        }\n        let nextNode;\n        let previousNode;\n        this.nodeMap.forEach(lazyNode => {\n            // previous node\n            if (storeIndex > lazyNode.index) {\n                // get the largest previous node\n                if (previousNode == null || previousNode.index < lazyNode.index) {\n                    previousNode = lazyNode;\n                }\n                return;\n            }\n            // next node\n            // get the smallest next node\n            if (nextNode == null || nextNode.index > lazyNode.index) {\n                nextNode = lazyNode;\n                return;\n            }\n        });\n        if (!nextNode) {\n            return this.store.getDisplayIndexEnd() - (this.numberOfRows - storeIndex);\n        }\n        if (!previousNode) {\n            return this.store.getDisplayIndexStart() + storeIndex;\n        }\n        const storeIndexDiff = storeIndex - previousNode.index;\n        const previousDisplayIndex = ((_b = (_a = previousNode.node.childStore) === null || _a === void 0 ? void 0 : _a.getDisplayIndexEnd()) !== null && _b !== void 0 ? _b : previousNode.node.rowIndex);\n        return previousDisplayIndex + storeIndexDiff;\n    }\n    /**\n     * Creates a new row and inserts it at the given index\n     * @param atStoreIndex the node index relative to this store\n     * @param data the data object to populate the node with\n     * @returns the new row node\n     */\n    createRowAtIndex(atStoreIndex, data, createNodeCallback) {\n        // make sure an existing node isn't being overwritten\n        const lazyNode = this.nodeMap.getBy('index', atStoreIndex);\n        // if node already exists, update it or destroy it\n        if (lazyNode) {\n            const { node } = lazyNode;\n            this.nodesToRefresh.delete(node);\n            node.__needsRefreshWhenVisible = false;\n            // if the node is the same, just update the content\n            if (this.doesNodeMatch(data, node)) {\n                this.blockUtils.updateDataIntoRowNode(node, data);\n                return node;\n            }\n            // if there's no id and this is an open group, protect this node from changes\n            if (this.getRowIdFunc == null && node.group && node.expanded) {\n                return node;\n            }\n            // destroy the old node, might be worth caching state here\n            this.destroyRowAtIndex(atStoreIndex);\n        }\n        // if the node already exists elsewhere, update it and move it to the new location\n        if (data && this.getRowIdFunc != null) {\n            const id = this.getRowId(data);\n            const lazyNode = this.nodeMap.getBy('id', id);\n            if (lazyNode) {\n                // delete old lazy node so we can insert it at different location\n                this.nodeMap.delete(lazyNode);\n                const { node, index } = lazyNode;\n                this.blockUtils.updateDataIntoRowNode(node, data);\n                this.nodeMap.set({\n                    id: node.id,\n                    node,\n                    index: atStoreIndex\n                });\n                // mark all of the old block as needsVerify to trigger it for a refresh, as nodes\n                // should not be out of place\n                this.markBlockForVerify(index);\n                return node;\n            }\n        }\n        // node doesn't exist, create a new one\n        const newNode = this.blockUtils.createRowNode(this.store.getRowDetails());\n        if (data != null) {\n            const defaultId = this.getPrefixedId(this.store.getIdSequence().next());\n            this.blockUtils.setDataIntoRowNode(newNode, data, defaultId, undefined);\n            this.blockUtils.checkOpenByDefault(newNode);\n            this.nodeManager.addRowNode(newNode);\n        }\n        // add the new node to the store, has to be done after the display index is calculated so it doesn't take itself into account\n        this.nodeMap.set({\n            id: newNode.id,\n            node: newNode,\n            index: atStoreIndex,\n        });\n        if (createNodeCallback) {\n            createNodeCallback(newNode);\n        }\n        return newNode;\n    }\n    getBlockStates() {\n        const blockCounts = {};\n        const blockStates = {};\n        this.nodeMap.forEach(({ node, index }) => {\n            var _a;\n            const blockStart = this.rowLoader.getBlockStartIndexForIndex(index);\n            if (!node.stub && !node.failedLoad) {\n                blockCounts[blockStart] = ((_a = blockCounts[blockStart]) !== null && _a !== void 0 ? _a : 0) + 1;\n            }\n            let rowState = 'loaded';\n            if (node.failedLoad) {\n                rowState = 'failed';\n            }\n            else if (this.rowLoader.isRowLoading(blockStart)) {\n                rowState = 'loading';\n            }\n            else if (this.nodesToRefresh.has(node) || node.stub) {\n                rowState = 'needsLoading';\n            }\n            if (!blockStates[blockStart]) {\n                blockStates[blockStart] = new Set();\n            }\n            blockStates[blockStart].add(rowState);\n        });\n        const statePriorityMap = {\n            loading: 4,\n            failed: 3,\n            needsLoading: 2,\n            loaded: 1,\n        };\n        const blockPrefix = this.blockUtils.createNodeIdPrefix(this.store.getParentNode());\n        const results = {};\n        Object.entries(blockStates).forEach(([blockStart, uniqueStates]) => {\n            var _a;\n            const sortedStates = [...uniqueStates].sort((a, b) => { var _a, _b; return ((_a = statePriorityMap[a]) !== null && _a !== void 0 ? _a : 0) - ((_b = statePriorityMap[b]) !== null && _b !== void 0 ? _b : 0); });\n            const priorityState = sortedStates[0];\n            const blockNumber = Number(blockStart) / this.rowLoader.getBlockSize();\n            const blockId = blockPrefix ? `${blockPrefix}-${blockNumber}` : String(blockNumber);\n            results[blockId] = {\n                blockNumber,\n                startRow: Number(blockStart),\n                endRow: Number(blockStart) + this.rowLoader.getBlockSize(),\n                pageStatus: priorityState,\n                loadedRowCount: (_a = blockCounts[blockStart]) !== null && _a !== void 0 ? _a : 0,\n            };\n        });\n        return results;\n    }\n    destroyRowAtIndex(atStoreIndex) {\n        const lazyNode = this.nodeMap.getBy('index', atStoreIndex);\n        if (!lazyNode) {\n            return;\n        }\n        this.nodeMap.delete(lazyNode);\n        this.nodeDisplayIndexMap.delete(lazyNode.node.rowIndex);\n        this.nodesToRefresh.delete(lazyNode.node);\n        this.blockUtils.destroyRowNode(lazyNode.node);\n    }\n    getSsrmParams() {\n        return this.store.getSsrmParams();\n    }\n    /**\n     * @param id the base id to be prefixed\n     * @returns a node id with prefix if required\n     */\n    getPrefixedId(id) {\n        if (this.defaultNodeIdPrefix) {\n            return this.defaultNodeIdPrefix + '-' + id;\n        }\n        else {\n            return id.toString();\n        }\n    }\n    markBlockForVerify(rowIndex) {\n        const [start, end] = this.rowLoader.getBlockBoundsForIndex(rowIndex);\n        const lazyNodesInRange = this.nodeMap.filter((lazyNode) => lazyNode.index >= start && lazyNode.index < end);\n        lazyNodesInRange.forEach(({ node }) => {\n            node.__needsRefreshWhenVisible = true;\n        });\n    }\n    doesNodeMatch(data, node) {\n        if (node.stub) {\n            return false;\n        }\n        if (this.getRowIdFunc != null) {\n            const id = this.getRowId(data);\n            return node.id === id;\n        }\n        return node.data === data;\n    }\n    /**\n     * Deletes any stub nodes not within the given range\n     */\n    purgeStubsOutsideOfViewport() {\n        const firstRow = this.api.getFirstDisplayedRow();\n        const lastRow = this.api.getLastDisplayedRow();\n        const firstRowBlockStart = this.rowLoader.getBlockStartIndexForIndex(firstRow);\n        const [_, lastRowBlockEnd] = this.rowLoader.getBlockBoundsForIndex(lastRow);\n        this.nodeMap.forEach(lazyNode => {\n            // failed loads are still useful, so we don't purge them\n            if (this.rowLoader.isRowLoading(lazyNode.index) || lazyNode.node.failedLoad) {\n                return;\n            }\n            if (lazyNode.node.stub && (lazyNode.index < firstRowBlockStart || lazyNode.index > lastRowBlockEnd)) {\n                this.destroyRowAtIndex(lazyNode.index);\n            }\n        });\n    }\n    getBlocksDistanceFromRow(nodes, otherDisplayIndex) {\n        const blockDistanceToMiddle = {};\n        nodes.forEach(({ node, index }) => {\n            const [blockStart, blockEnd] = this.rowLoader.getBlockBoundsForIndex(index);\n            if (blockStart in blockDistanceToMiddle) {\n                return;\n            }\n            const distStart = Math.abs(node.rowIndex - otherDisplayIndex);\n            let distEnd;\n            // may not have an end node if the block came back small \n            const lastLazyNode = this.nodeMap.getBy('index', [blockEnd - 1]);\n            if (lastLazyNode)\n                distEnd = Math.abs(lastLazyNode.node.rowIndex - otherDisplayIndex);\n            const farthest = distEnd == null || distStart < distEnd ? distStart : distEnd;\n            blockDistanceToMiddle[blockStart] = farthest;\n        });\n        return Object.entries(blockDistanceToMiddle);\n    }\n    purgeExcessRows() {\n        var _a;\n        // Delete all stub nodes which aren't in the viewport or already loading\n        this.purgeStubsOutsideOfViewport();\n        if (this.store.getDisplayIndexEnd() == null || this.storeParams.maxBlocksInCache == null) {\n            // if group is collapsed, or max blocks missing, ignore the event\n            return;\n        }\n        const firstRowInViewport = this.api.getFirstDisplayedRow();\n        const lastRowInViewport = this.api.getLastDisplayedRow();\n        // the start storeIndex of every block in this store\n        const allLoadedBlocks = new Set();\n        // the start storeIndex of every displayed block in this store\n        const blocksInViewport = new Set();\n        this.nodeMap.forEach(({ index, node }) => {\n            const blockStart = this.rowLoader.getBlockStartIndexForIndex(index);\n            allLoadedBlocks.add(blockStart);\n            const isInViewport = node.rowIndex >= firstRowInViewport && node.rowIndex <= lastRowInViewport;\n            if (isInViewport) {\n                blocksInViewport.add(blockStart);\n            }\n        });\n        // if the viewport is larger than the max blocks, then the viewport size is minimum cache size\n        const numberOfBlocksToRetain = Math.max(blocksInViewport.size, (_a = this.storeParams.maxBlocksInCache) !== null && _a !== void 0 ? _a : 0);\n        // ensure there is blocks that can be removed\n        const loadedBlockCount = allLoadedBlocks.size;\n        const blocksToRemove = loadedBlockCount - numberOfBlocksToRetain;\n        if (blocksToRemove <= 0) {\n            return;\n        }\n        // the first and last block in the viewport\n        let firstRowBlockStart = Number.MAX_SAFE_INTEGER;\n        let lastRowBlockStart = Number.MIN_SAFE_INTEGER;\n        blocksInViewport.forEach(blockStart => {\n            if (firstRowBlockStart > blockStart) {\n                firstRowBlockStart = blockStart;\n            }\n            if (lastRowBlockStart < blockStart) {\n                lastRowBlockStart = blockStart;\n            }\n        });\n        // all nodes which aren't cached or in the viewport, and so can be removed\n        const disposableNodes = this.nodeMap.filter(({ node, index }) => {\n            const rowBlockStart = this.rowLoader.getBlockStartIndexForIndex(index);\n            const rowBlockInViewport = rowBlockStart >= firstRowBlockStart && rowBlockStart <= lastRowBlockStart;\n            return !rowBlockInViewport && !this.isNodeCached(node);\n        });\n        if (disposableNodes.length === 0) {\n            return;\n        }\n        const midViewportRow = firstRowInViewport + ((lastRowInViewport - firstRowInViewport) / 2);\n        const blockDistanceArray = this.getBlocksDistanceFromRow(disposableNodes, midViewportRow);\n        const blockSize = this.rowLoader.getBlockSize();\n        // sort the blocks by distance from middle of viewport\n        blockDistanceArray.sort((a, b) => Math.sign(b[1] - a[1]));\n        // remove excess blocks, starting from furthest from viewport\n        for (let i = 0; i < Math.min(blocksToRemove, blockDistanceArray.length); i++) {\n            const blockStart = Number(blockDistanceArray[i][0]);\n            for (let x = blockStart; x < blockStart + blockSize; x++) {\n                const lazyNode = this.nodeMap.getBy('index', x);\n                if (!lazyNode || this.isNodeCached(lazyNode.node)) {\n                    continue;\n                }\n                this.destroyRowAtIndex(x);\n            }\n        }\n    }\n    isNodeFocused(node) {\n        const focusedCell = this.focusService.getFocusCellToUseAfterRefresh();\n        if (!focusedCell) {\n            return false;\n        }\n        if (focusedCell.rowPinned != null) {\n            return false;\n        }\n        const hasFocus = focusedCell.rowIndex === node.rowIndex;\n        return hasFocus;\n    }\n    isNodeCached(node) {\n        return (node.isExpandable() && node.expanded) || this.isNodeFocused(node);\n    }\n    extractDuplicateIds(rows) {\n        if (!this.getRowIdFunc == null) {\n            return [];\n        }\n        const newIds = new Set();\n        const duplicates = new Set();\n        rows.forEach(data => {\n            const id = this.getRowId(data);\n            if (newIds.has(id)) {\n                duplicates.add(id);\n                return;\n            }\n            newIds.add(id);\n        });\n        return [...duplicates];\n    }\n    onLoadSuccess(firstRowIndex, numberOfRowsExpected, response) {\n        var _a;\n        if (!this.live)\n            return;\n        const info = (_a = response.groupLevelInfo) !== null && _a !== void 0 ? _a : response.storeInfo;\n        this.store.setStoreInfo(info);\n        if (this.getRowIdFunc != null) {\n            const duplicates = this.extractDuplicateIds(response.rowData);\n            if (duplicates.length > 0) {\n                const duplicateIdText = duplicates.join(', ');\n                console.warn(`AG Grid: Unable to display rows as duplicate row ids (${duplicateIdText}) were returned by the getRowId callback. Please modify the getRowId callback to provide unique ids.`);\n                this.onLoadFailed(firstRowIndex, numberOfRowsExpected);\n                return;\n            }\n        }\n        const wasRefreshing = this.nodesToRefresh.size > 0;\n        response.rowData.forEach((data, responseRowIndex) => {\n            var _a;\n            const rowIndex = firstRowIndex + responseRowIndex;\n            const nodeFromCache = this.nodeMap.getBy('index', rowIndex);\n            // if stub, overwrite\n            if ((_a = nodeFromCache === null || nodeFromCache === void 0 ? void 0 : nodeFromCache.node) === null || _a === void 0 ? void 0 : _a.stub) {\n                this.createRowAtIndex(rowIndex, data);\n                return;\n            }\n            if (nodeFromCache && this.doesNodeMatch(data, nodeFromCache.node)) {\n                this.blockUtils.updateDataIntoRowNode(nodeFromCache.node, data);\n                this.nodesToRefresh.delete(nodeFromCache.node);\n                nodeFromCache.node.__needsRefreshWhenVisible = false;\n                return;\n            }\n            // create row will handle deleting the overwritten row\n            this.createRowAtIndex(rowIndex, data);\n        });\n        const finishedRefreshing = this.nodesToRefresh.size === 0;\n        if (wasRefreshing && finishedRefreshing) {\n            this.fireRefreshFinishedEvent();\n        }\n        if (response.rowCount != undefined && response.rowCount !== -1) {\n            // if the rowCount has been provided, set the row count\n            this.numberOfRows = response.rowCount;\n            this.isLastRowKnown = true;\n        }\n        else if (numberOfRowsExpected > response.rowData.length) {\n            // infer the last row as the response came back short\n            this.numberOfRows = firstRowIndex + response.rowData.length;\n            this.isLastRowKnown = true;\n        }\n        else if (!this.isLastRowKnown) {\n            // add 1 for loading row, as we don't know the last row\n            const lastInferredRow = firstRowIndex + response.rowData.length + 1;\n            if (lastInferredRow > this.numberOfRows) {\n                this.numberOfRows = lastInferredRow;\n            }\n        }\n        if (this.isLastRowKnown) {\n            // delete any rows after the last index\n            const lazyNodesAfterStoreEnd = this.nodeMap.filter(lazyNode => lazyNode.index >= this.numberOfRows);\n            lazyNodesAfterStoreEnd.forEach(lazyNode => this.destroyRowAtIndex(lazyNode.index));\n        }\n        this.fireStoreUpdatedEvent();\n    }\n    fireRefreshFinishedEvent() {\n        const finishedRefreshing = this.nodesToRefresh.size === 0;\n        // if anything refreshing currently, skip.\n        if (!finishedRefreshing) {\n            return;\n        }\n        this.store.fireRefreshFinishedEvent();\n    }\n    isLastRowIndexKnown() {\n        return this.isLastRowKnown;\n    }\n    onLoadFailed(firstRowIndex, numberOfRowsExpected) {\n        var _a;\n        if (!this.live)\n            return;\n        const wasRefreshing = this.nodesToRefresh.size > 0;\n        for (let i = firstRowIndex; i < firstRowIndex + numberOfRowsExpected && i < this.getRowCount(); i++) {\n            let { node } = (_a = this.nodeMap.getBy('index', i)) !== null && _a !== void 0 ? _a : {};\n            if (node) {\n                this.nodesToRefresh.delete(node);\n            }\n            if (!node || !node.stub) {\n                if (node && !node.stub) {\n                    // if node is not a stub, we destroy it and recreate as nodes can't go from data to stub\n                    this.destroyRowAtIndex(i);\n                }\n                node = this.createRowAtIndex(i);\n            }\n            // this node has been refreshed, even if it wasn't successful\n            node.__needsRefreshWhenVisible = false;\n            node.failedLoad = true;\n        }\n        const finishedRefreshing = this.nodesToRefresh.size === 0;\n        if (wasRefreshing && finishedRefreshing) {\n            this.fireRefreshFinishedEvent();\n        }\n        this.fireStoreUpdatedEvent();\n    }\n    markNodesForRefresh() {\n        this.nodeMap.forEach(lazyNode => {\n            if (lazyNode.node.stub && !lazyNode.node.failedLoad) {\n                return;\n            }\n            this.nodesToRefresh.add(lazyNode.node);\n        });\n        this.rowLoader.queueLoadCheck();\n        if (this.isLastRowKnown && this.numberOfRows === 0) {\n            this.numberOfRows = 1;\n            this.isLastRowKnown = false;\n            this.fireStoreUpdatedEvent();\n        }\n    }\n    isNodeInCache(id) {\n        return !!this.nodeMap.getBy('id', id);\n    }\n    // gets called 1) row count changed 2) cache purged 3) items inserted\n    fireStoreUpdatedEvent() {\n        if (!this.live) {\n            return;\n        }\n        this.store.fireStoreUpdatedEvent();\n    }\n    getRowId(data) {\n        if (this.getRowIdFunc == null) {\n            return null;\n        }\n        // find rowNode using id\n        const { level } = this.store.getRowDetails();\n        const parentKeys = this.store.getParentNode().getGroupKeys();\n        const id = this.getRowIdFunc({\n            data,\n            parentKeys: parentKeys.length > 0 ? parentKeys : undefined,\n            level,\n        });\n        return String(id);\n    }\n    updateRowNodes(updates) {\n        if (this.getRowIdFunc == null) {\n            // throw error, as this is type checked in the store. User likely abusing internal apis if here.\n            throw new Error('AG Grid: Insert transactions can only be applied when row ids are supplied.');\n        }\n        const updatedNodes = [];\n        updates.forEach(data => {\n            const id = this.getRowId(data);\n            const lazyNode = this.nodeMap.getBy('id', id);\n            if (lazyNode) {\n                this.blockUtils.updateDataIntoRowNode(lazyNode.node, data);\n                updatedNodes.push(lazyNode.node);\n            }\n        });\n        return updatedNodes;\n    }\n    insertRowNodes(inserts, indexToAdd) {\n        // if missing and we know the last row, we're inserting at the end\n        const addIndex = indexToAdd == null && this.isLastRowKnown ? this.store.getRowCount() : indexToAdd;\n        // can't insert nodes past the end of the store\n        if (addIndex == null || this.store.getRowCount() < addIndex) {\n            return [];\n        }\n        if (this.getRowIdFunc == null) {\n            // throw error, as this is type checked in the store. User likely abusing internal apis if here.\n            throw new Error('AG Grid: Insert transactions can only be applied when row ids are supplied.');\n        }\n        const uniqueInsertsMap = {};\n        inserts.forEach(data => {\n            const dataId = this.getRowId(data);\n            if (dataId && this.isNodeInCache(dataId)) {\n                return;\n            }\n            uniqueInsertsMap[dataId] = data;\n        });\n        const uniqueInserts = Object.values(uniqueInsertsMap);\n        let numberOfInserts = uniqueInserts.length;\n        if (numberOfInserts === 0) {\n            return [];\n        }\n        const nodesToMove = this.nodeMap.filter(node => node.index >= addIndex);\n        // delete all nodes which need moved first, so they don't get overwritten\n        nodesToMove.forEach(lazyNode => this.nodeMap.delete(lazyNode));\n        // then move the nodes to their new locations\n        nodesToMove.forEach(lazyNode => {\n            this.nodeMap.set({\n                node: lazyNode.node,\n                index: lazyNode.index + numberOfInserts,\n                id: lazyNode.id,\n            });\n        });\n        // increase the store size to accommodate\n        this.numberOfRows += numberOfInserts;\n        // finally insert the new rows\n        return uniqueInserts.map((data, uniqueInsertOffset) => this.createRowAtIndex(addIndex + uniqueInsertOffset, data));\n    }\n    getOrderedNodeMap() {\n        const obj = {};\n        this.nodeMap.forEach(node => obj[node.index] = node);\n        return obj;\n    }\n    clearDisplayIndexes() {\n        this.nodeDisplayIndexMap.clear();\n    }\n    removeRowNodes(idsToRemove) {\n        if (this.getRowIdFunc == null) {\n            // throw error, as this is type checked in the store. User likely abusing internal apis if here.\n            throw new Error('AG Grid: Insert transactions can only be applied when row ids are supplied.');\n        }\n        const removedNodes = [];\n        const nodesToVerify = [];\n        // track how many nodes have been deleted, as when we pass other nodes we need to shift them up\n        let deletedNodeCount = 0;\n        const remainingIdsToRemove = [...idsToRemove];\n        const allNodes = this.getOrderedNodeMap();\n        let contiguousIndex = -1;\n        for (let stringIndex in allNodes) {\n            contiguousIndex += 1;\n            const node = allNodes[stringIndex];\n            // finding the index allows the use of splice which should be slightly faster than both a check and filter\n            const matchIndex = remainingIdsToRemove.findIndex(idToRemove => idToRemove === node.id);\n            if (matchIndex !== -1) {\n                // found node, remove it from nodes to remove\n                remainingIdsToRemove.splice(matchIndex, 1);\n                this.destroyRowAtIndex(Number(stringIndex));\n                removedNodes.push(node.node);\n                deletedNodeCount += 1;\n                continue;\n            }\n            // no nodes removed and this node doesn't match, so no need to shift\n            if (deletedNodeCount === 0) {\n                continue;\n            }\n            const numericStoreIndex = Number(stringIndex);\n            if (contiguousIndex !== numericStoreIndex) {\n                nodesToVerify.push(node.node);\n            }\n            // shift normal node up by number of deleted prior to this point\n            this.nodeMap.delete(allNodes[stringIndex]);\n            this.nodeMap.set({\n                id: node.id,\n                node: node.node,\n                index: numericStoreIndex - deletedNodeCount,\n            });\n        }\n        this.numberOfRows -= this.isLastRowIndexKnown() ? idsToRemove.length : deletedNodeCount;\n        if (remainingIdsToRemove.length > 0 && nodesToVerify.length > 0) {\n            nodesToVerify.forEach(node => node.__needsRefreshWhenVisible = true);\n            this.rowLoader.queueLoadCheck();\n        }\n        return removedNodes;\n    }\n}\n__decorate$s([\n    (0,ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.Autowired)('gridApi')\n], LazyCache.prototype, \"api\", void 0);\n__decorate$s([\n    (0,ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.Autowired)('ssrmBlockUtils')\n], LazyCache.prototype, \"blockUtils\", void 0);\n__decorate$s([\n    (0,ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.Autowired)('focusService')\n], LazyCache.prototype, \"focusService\", void 0);\n__decorate$s([\n    (0,ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.Autowired)('ssrmNodeManager')\n], LazyCache.prototype, \"nodeManager\", void 0);\n__decorate$s([\n    ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.PostConstruct\n], LazyCache.prototype, \"init\", null);\n__decorate$s([\n    ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.PreDestroy\n], LazyCache.prototype, \"destroyRowNodes\", null);\n\nvar __decorate$r = ( false) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nclass LazyStore extends ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.BeanStub {\n    constructor(ssrmParams, storeParams, parentRowNode) {\n        super();\n        this.idSequence = new ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.NumberSequence();\n        this.ssrmParams = ssrmParams;\n        this.parentRowNode = parentRowNode;\n        this.storeParams = storeParams;\n        this.level = parentRowNode.level + 1;\n        this.group = ssrmParams.rowGroupCols ? this.level < ssrmParams.rowGroupCols.length : false;\n        this.leafGroup = ssrmParams.rowGroupCols ? this.level === ssrmParams.rowGroupCols.length - 1 : false;\n        this.info = {};\n    }\n    init() {\n        let numberOfRows = 1;\n        if (this.level === 0) {\n            numberOfRows = this.storeUtils.getServerSideInitialRowCount();\n        }\n        this.cache = this.createManagedBean(new LazyCache(this, numberOfRows, this.storeParams));\n        const usingTreeData = this.gridOptionsService.isTreeData();\n        if (!usingTreeData && this.group) {\n            const groupColVo = this.ssrmParams.rowGroupCols[this.level];\n            this.groupField = groupColVo.field;\n            this.rowGroupColumn = this.columnModel.getRowGroupColumns()[this.level];\n        }\n    }\n    destroyRowNodes() {\n        this.displayIndexStart = undefined;\n        this.displayIndexEnd = undefined;\n        this.destroyBean(this.cache);\n    }\n    /**\n     * Applies a given transaction to the data set within this store\n     *\n     * @param transaction an object containing delta instructions determining the changes to apply to this store\n     * @returns an object determining the status of this transaction and effected nodes\n     */\n    applyTransaction(transaction) {\n        var _a, _b, _c;\n        const idFunc = this.gridOptionsService.getCallback('getRowId');\n        if (!idFunc) {\n            console.warn('AG Grid: getRowId callback must be implemented for transactions to work. Transaction was ignored.');\n            return {\n                status: ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.ServerSideTransactionResultStatus.Cancelled,\n            };\n        }\n        const applyCallback = this.gridOptionsService.getCallback('isApplyServerSideTransaction');\n        if (applyCallback) {\n            const params = {\n                transaction: transaction,\n                parentNode: this.parentRowNode,\n                storeInfo: this.info,\n                groupLevelInfo: this.info\n            };\n            const apply = applyCallback(params);\n            if (!apply) {\n                return { status: ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.ServerSideTransactionResultStatus.Cancelled };\n            }\n        }\n        let updatedNodes = undefined;\n        if ((_a = transaction.update) === null || _a === void 0 ? void 0 : _a.length) {\n            updatedNodes = this.cache.updateRowNodes(transaction.update);\n        }\n        let insertedNodes = undefined;\n        if ((_b = transaction.add) === null || _b === void 0 ? void 0 : _b.length) {\n            let addIndex = transaction.addIndex;\n            if (addIndex != null && addIndex < 0) {\n                addIndex = undefined;\n            }\n            insertedNodes = this.cache.insertRowNodes(transaction.add, addIndex);\n        }\n        let removedNodes = undefined;\n        if ((_c = transaction.remove) === null || _c === void 0 ? void 0 : _c.length) {\n            const allIdsToRemove = transaction.remove.map(data => (idFunc({ level: this.level, parentKeys: this.parentRowNode.getGroupKeys(), data })));\n            const allUniqueIdsToRemove = [...new Set(allIdsToRemove)];\n            removedNodes = this.cache.removeRowNodes(allUniqueIdsToRemove);\n        }\n        this.updateSelectionAfterTransaction(updatedNodes, removedNodes);\n        return {\n            status: ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.ServerSideTransactionResultStatus.Applied,\n            update: updatedNodes,\n            add: insertedNodes,\n            remove: removedNodes,\n        };\n    }\n    updateSelectionAfterTransaction(updatedNodes, removedNodes) {\n        const nodesToDeselect = [];\n        updatedNodes === null || updatedNodes === void 0 ? void 0 : updatedNodes.forEach(node => {\n            if (node.isSelected() && !node.selectable) {\n                nodesToDeselect.push(node);\n            }\n        });\n        removedNodes === null || removedNodes === void 0 ? void 0 : removedNodes.forEach(node => {\n            if (node.isSelected()) {\n                nodesToDeselect.push(node);\n            }\n        });\n        if (nodesToDeselect.length) {\n            this.selectionService.setNodesSelected({\n                newValue: false,\n                clearSelection: false,\n                nodes: nodesToDeselect,\n                source: 'rowDataChanged',\n            });\n        }\n    }\n    /**\n     * Clear the display indexes, used for fading rows out when stores are not being destroyed\n     */\n    clearDisplayIndexes() {\n        this.displayIndexStart = undefined;\n        this.displayIndexEnd = undefined;\n        this.cache.getNodes().forEach(lazyNode => this.blockUtils.clearDisplayIndex(lazyNode.node));\n        if (this.parentRowNode.sibling) {\n            this.blockUtils.clearDisplayIndex(this.parentRowNode.sibling);\n        }\n        this.cache.clearDisplayIndexes();\n    }\n    /**\n     * @returns an index representing the last sequentially displayed row in the grid for this store\n     */\n    getDisplayIndexStart() {\n        return this.displayIndexStart;\n    }\n    /**\n     * @returns the index representing one after the last sequentially displayed row in the grid for this store\n     */\n    getDisplayIndexEnd() {\n        return this.displayIndexEnd;\n    }\n    /**\n     * @returns the virtual size of this store\n     */\n    getRowCount() {\n        if (this.parentRowNode.sibling) {\n            return this.cache.getRowCount() + 1;\n        }\n        return this.cache.getRowCount();\n    }\n    /**\n     * Sets the current row count of the store, and whether the last row index is known\n     */\n    setRowCount(rowCount, isLastRowIndexKnown) {\n        this.cache.setRowCount(rowCount, isLastRowIndexKnown);\n    }\n    /**\n     * Given a display index, returns whether that row is within this store or a child store of this store\n     *\n     * @param displayIndex the visible index of a row\n     * @returns whether or not the row exists within this store\n     */\n    isDisplayIndexInStore(displayIndex) {\n        if (this.cache.getRowCount() === 0)\n            return false;\n        return this.displayIndexStart <= displayIndex && displayIndex < this.getDisplayIndexEnd();\n    }\n    /**\n     * Recursively sets up the display indexes and top position of every node belonging to this store.\n     *\n     * Called after a row height changes, or a store updated event.\n     *\n     * @param displayIndexSeq the number sequence for generating the display index of each row\n     * @param nextRowTop an object containing the next row top value intended to be modified by ref per row\n     */\n    setDisplayIndexes(displayIndexSeq, nextRowTop) {\n        this.displayIndexStart = displayIndexSeq.peek();\n        this.topPx = nextRowTop.value;\n        // delegate to the store to set the row display indexes\n        this.cache.setDisplayIndexes(displayIndexSeq, nextRowTop);\n        if (this.parentRowNode.sibling) {\n            this.blockUtils.setDisplayIndex(this.parentRowNode.sibling, displayIndexSeq, nextRowTop);\n        }\n        this.displayIndexEnd = displayIndexSeq.peek();\n        this.heightPx = nextRowTop.value - this.topPx;\n    }\n    /**\n     * Recursively applies a provided function to every node\n     *\n     * For the purpose of exclusively server side filtered stores, this is the same as getNodes().forEachDeepAfterFilterAndSort\n     */\n    forEachStoreDeep(callback, sequence = new ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.NumberSequence()) {\n        callback(this, sequence.next());\n        this.cache.getNodes().forEach(lazyNode => {\n            const childCache = lazyNode.node.childStore;\n            if (childCache) {\n                childCache.forEachStoreDeep(callback, sequence);\n            }\n        });\n    }\n    /**\n     * Recursively applies a provided function to every node\n     *\n     * For the purpose of exclusively server side filtered stores, this is the same as getNodes().forEachDeepAfterFilterAndSort\n     */\n    forEachNodeDeep(callback, sequence = new ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.NumberSequence()) {\n        this.cache.getNodes().forEach(lazyNode => {\n            callback(lazyNode.node, sequence.next());\n            const childCache = lazyNode.node.childStore;\n            if (childCache) {\n                childCache.forEachNodeDeep(callback, sequence);\n            }\n        });\n    }\n    /**\n     * Recursively applies a provided function to every node\n     *\n     * For the purpose of exclusively server side filtered stores, this is the same as getNodes().forEachDeep\n     */\n    forEachNodeDeepAfterFilterAndSort(callback, sequence = new ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.NumberSequence()) {\n        const orderedNodes = this.cache.getOrderedNodeMap();\n        for (let key in orderedNodes) {\n            const lazyNode = orderedNodes[key];\n            callback(lazyNode.node, sequence.next());\n            const childCache = lazyNode.node.childStore;\n            if (childCache) {\n                childCache.forEachNodeDeepAfterFilterAndSort(callback, sequence);\n            }\n        }\n    }\n    /**\n     * Removes the failed status from all nodes, and marks them as stub to encourage reloading\n     */\n    retryLoads() {\n        this.cache.getNodes().forEach(({ node }) => {\n            if (node.failedLoad) {\n                node.failedLoad = false;\n                node.__needsRefreshWhenVisible = true;\n                node.stub = true;\n            }\n        });\n        this.forEachChildStoreShallow(store => store.retryLoads());\n        this.fireStoreUpdatedEvent();\n    }\n    /**\n     * Given a display index, returns the row at that location.\n     *\n     * @param displayRowIndex the displayed index within the grid to search for\n     * @returns the row node if the display index falls within the store, if it didn't exist this will create a new stub to return\n     */\n    getRowUsingDisplayIndex(displayRowIndex) {\n        if (this.parentRowNode.sibling && displayRowIndex === this.parentRowNode.sibling.rowIndex) {\n            return this.parentRowNode.sibling;\n        }\n        return this.cache.getRowByDisplayIndex(displayRowIndex);\n    }\n    /**\n     * Given a display index, returns the row top and height for the row at that index.\n     *\n     * @param displayIndex the display index of the node\n     * @returns an object containing the rowTop and rowHeight of the node at the given displayIndex\n     */\n    getRowBounds(displayIndex) {\n        var _a;\n        if (!this.isDisplayIndexInStore(displayIndex)) {\n            return null;\n        }\n        const thisNode = this.cache.getNodeCachedByDisplayIndex(displayIndex);\n        if (thisNode) {\n            const boundsFromRow = this.blockUtils.extractRowBounds(thisNode, displayIndex);\n            if (boundsFromRow) {\n                return boundsFromRow;\n            }\n        }\n        const { previousNode, nextNode } = (_a = this.cache.getSurroundingNodesByDisplayIndex(displayIndex)) !== null && _a !== void 0 ? _a : {};\n        // previous node may equal, or catch via detail node or child of group\n        if (previousNode) {\n            const boundsFromRow = this.blockUtils.extractRowBounds(previousNode.node, displayIndex);\n            if (boundsFromRow != null) {\n                return boundsFromRow;\n            }\n        }\n        const defaultRowHeight = this.gridOptionsService.getRowHeightAsNumber();\n        // if node after this, can calculate backwards (and ignore detail/grouping)\n        if (nextNode) {\n            const numberOfRowDiff = (nextNode.node.rowIndex - displayIndex) * defaultRowHeight;\n            return {\n                rowTop: nextNode.node.rowTop - numberOfRowDiff,\n                rowHeight: defaultRowHeight,\n            };\n        }\n        // otherwise calculate from end of store\n        const lastTop = this.topPx + this.heightPx;\n        const numberOfRowDiff = (this.getDisplayIndexEnd() - displayIndex) * defaultRowHeight;\n        return {\n            rowTop: lastTop - numberOfRowDiff,\n            rowHeight: defaultRowHeight,\n        };\n    }\n    /**\n     * Given a vertical pixel, determines whether this store contains a row at that pixel\n     *\n     * @param pixel a vertical pixel position from the grid\n     * @returns whether that pixel points to a virtual space belonging to this store\n     */\n    isPixelInRange(pixel) {\n        return pixel >= this.topPx && pixel < (this.topPx + this.heightPx);\n    }\n    /**\n     * Given a vertical pixel, returns the row existing at that pixel location\n     *\n     * @param pixel a vertical pixel position from the grid\n     * @returns the display index at the given pixel location\n     */\n    getRowIndexAtPixel(pixel) {\n        if (pixel < this.topPx) {\n            return this.getDisplayIndexStart();\n        }\n        if (pixel >= this.topPx + this.heightPx) {\n            return this.getDisplayIndexEnd() - 1;\n        }\n        let distToPreviousNodeTop = Number.MAX_SAFE_INTEGER;\n        let previousNode = null;\n        let distToNextNodeTop = Number.MAX_SAFE_INTEGER;\n        let nextNode = null;\n        this.cache.getNodes().forEach(({ node }) => {\n            const distBetween = Math.abs(pixel - node.rowTop);\n            // previous node\n            if (node.rowTop < pixel) {\n                if (distBetween < distToPreviousNodeTop) {\n                    distToPreviousNodeTop = distBetween;\n                    previousNode = node;\n                }\n                return;\n            }\n            // next node\n            if (distBetween < distToNextNodeTop) {\n                distToNextNodeTop = distBetween;\n                nextNode = node;\n            }\n        });\n        // cast these back as typescript doesn't understand the forEach above\n        previousNode = previousNode;\n        nextNode = nextNode;\n        // previous node may equal, or catch via detail node or child of group\n        if (previousNode) {\n            const indexOfRow = this.blockUtils.getIndexAtPixel(previousNode, pixel);\n            if (indexOfRow != null) {\n                return indexOfRow;\n            }\n        }\n        const defaultRowHeight = this.gridOptionsService.getRowHeightAsNumber();\n        // if node after this, can calculate backwards (and ignore detail/grouping)\n        if (nextNode) {\n            const nextTop = nextNode.rowTop;\n            const numberOfRowDiff = Math.ceil((nextTop - pixel) / defaultRowHeight);\n            return nextNode.rowIndex - numberOfRowDiff;\n        }\n        // otherwise calculate from end of store\n        const nextTop = this.topPx + this.heightPx;\n        const numberOfRowDiff = Math.floor((nextTop - pixel) / defaultRowHeight);\n        return this.getDisplayIndexEnd() - numberOfRowDiff;\n    }\n    /**\n     * Given a path of group keys, returns the child store for that group.\n     *\n     * @param keys the grouping path to the desired store\n     * @returns the child store for the given keys, or null if not found\n     */\n    getChildStore(keys) {\n        return this.storeUtils.getChildStore(keys, this, (key) => {\n            const lazyNode = this.cache.getNodes().find(lazyNode => lazyNode.node.key == key);\n            if (!lazyNode) {\n                return null;\n            }\n            return lazyNode.node;\n        });\n    }\n    /**\n     * Executes a provided callback on each child store belonging to this store\n     *\n     * @param cb the callback to execute\n     */\n    forEachChildStoreShallow(cb) {\n        this.cache.getNodes().forEach(({ node }) => {\n            if (node.childStore) {\n                cb(node.childStore);\n            }\n        });\n    }\n    /**\n     * Executes after a change to sorting, determines recursively whether this store or a child requires refreshed.\n     *\n     * If a purge refresh occurs, the row count is preserved.\n     *\n     * @param params a set of properties pertaining to the sort changes\n     */\n    refreshAfterSort(params) {\n        const serverSortsAllLevels = this.storeUtils.isServerSideSortAllLevels();\n        if (serverSortsAllLevels || this.storeUtils.isServerRefreshNeeded(this.parentRowNode, this.ssrmParams.rowGroupCols, params)) {\n            const oldCount = this.cache.getRowCount();\n            this.destroyBean(this.cache);\n            this.cache = this.createManagedBean(new LazyCache(this, oldCount, this.storeParams));\n            this.fireStoreUpdatedEvent();\n            return;\n        }\n        // call refreshAfterSort on children, as we did not purge.\n        // if we did purge, no need to do this as all children were destroyed\n        this.forEachChildStoreShallow(store => store.refreshAfterSort(params));\n    }\n    /**\n     * Executes after a change to filtering, determines recursively whether this store or a child requires refreshed.\n     *\n     * If a refresh occurs, the row count is reset.\n     *\n     * @param params a set of properties pertaining to the filter changes\n     */\n    refreshAfterFilter(params) {\n        const serverFiltersAllLevels = !this.storeUtils.isServerSideOnlyRefreshFilteredGroups();\n        if (serverFiltersAllLevels || this.storeUtils.isServerRefreshNeeded(this.parentRowNode, this.ssrmParams.rowGroupCols, params)) {\n            this.refreshStore(true);\n            return;\n        }\n        // call refreshAfterSort on children, as we did not purge.\n        // if we did purge, no need to do this as all children were destroyed\n        this.forEachChildStoreShallow(store => store.refreshAfterFilter(params));\n    }\n    /**\n     * Marks all existing nodes as requiring reloaded, and triggers a load check\n     *\n     * @param purge whether to remove all nodes and data in favour of stub nodes\n     */\n    refreshStore(purge) {\n        if (purge) {\n            this.destroyBean(this.cache);\n            this.cache = this.createManagedBean(new LazyCache(this, 1, this.storeParams));\n            this.fireStoreUpdatedEvent();\n            return;\n        }\n        this.cache.markNodesForRefresh();\n    }\n    /**\n     * Used for pagination, given a local/store index, returns the display index of that row\n     *\n     * @param topLevelIndex the store index of a row\n     * @returns the display index for the given store index\n     */\n    getTopLevelRowDisplayedIndex(topLevelIndex) {\n        const displayIndex = this.cache.getDisplayIndexFromStoreIndex(topLevelIndex);\n        return displayIndex !== null && displayIndex !== void 0 ? displayIndex : topLevelIndex;\n    }\n    /**\n     * Used for pagination to determine if the last page is known, and for aria to determine if the last grid row is known\n     *\n     * @returns whether the last index of this store is known, or if lazy loading still required\n     */\n    isLastRowIndexKnown() {\n        return this.cache.isLastRowIndexKnown();\n    }\n    /**\n     * Used by the selection service to select a range of nodes\n     *\n     * @param firstInRange the first node in the range to find\n     * @param lastInRange the last node in the range to find\n     * @returns a range of nodes between firstInRange and lastInRange inclusive\n     */\n    getRowNodesInRange(firstInRange, lastInRange) {\n        // if only one node passed, we start the selection at the top\n        if (ag_grid_community__WEBPACK_IMPORTED_MODULE_0__._.missing(firstInRange)) ;\n        return this.cache.getNodes().filter(({ node }) => {\n            return node.rowIndex >= firstInRange.rowIndex && node.rowIndex <= lastInRange.rowIndex;\n        }).map(({ node }) => node);\n    }\n    /**\n     * Mutates a given array to add this stores state, and recursively add all the children store states.\n     *\n     * @param result a mutable results array\n     */\n    addStoreStates(result) {\n        result.push({\n            suppressInfiniteScroll: false,\n            route: this.parentRowNode.getGroupKeys(),\n            rowCount: this.getRowCount(),\n            lastRowIndexKnown: this.isLastRowIndexKnown(),\n            info: this.info,\n            maxBlocksInCache: this.storeParams.maxBlocksInCache,\n            cacheBlockSize: this.storeParams.cacheBlockSize,\n        });\n        this.forEachChildStoreShallow(childStore => childStore.addStoreStates(result));\n    }\n    getIdSequence() {\n        return this.idSequence;\n    }\n    getParentNode() {\n        return this.parentRowNode;\n    }\n    getRowDetails() {\n        return {\n            field: this.groupField,\n            group: this.group,\n            leafGroup: this.leafGroup,\n            level: this.level,\n            parent: this.parentRowNode,\n            rowGroupColumn: this.rowGroupColumn,\n        };\n    }\n    getSsrmParams() {\n        return this.ssrmParams;\n    }\n    setStoreInfo(info) {\n        if (info) {\n            Object.assign(this.info, info);\n        }\n    }\n    // gets called 1) row count changed 2) cache purged\n    fireStoreUpdatedEvent() {\n        // this results in row model firing ModelUpdated.\n        // server side row model also updates the row indexes first\n        const event = {\n            type: ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.Events.EVENT_STORE_UPDATED\n        };\n        this.eventService.dispatchEvent(event);\n    }\n    // gets called when row data updated, and no more refreshing needed\n    fireRefreshFinishedEvent() {\n        const event = {\n            type: ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.Events.EVENT_STORE_REFRESHED,\n            route: this.parentRowNode.getRoute(),\n        };\n        this.eventService.dispatchEvent(event);\n    }\n    getBlockStates() {\n        return this.cache.getBlockStates();\n    }\n    getStoreBounds() {\n        return {\n            topPx: this.topPx,\n            heightPx: this.heightPx,\n        };\n    }\n}\n__decorate$r([\n    (0,ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.Autowired)('ssrmBlockUtils')\n], LazyStore.prototype, \"blockUtils\", void 0);\n__decorate$r([\n    (0,ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.Autowired)('ssrmStoreUtils')\n], LazyStore.prototype, \"storeUtils\", void 0);\n__decorate$r([\n    (0,ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.Autowired)('columnModel')\n], LazyStore.prototype, \"columnModel\", void 0);\n__decorate$r([\n    (0,ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.Autowired)('selectionService')\n], LazyStore.prototype, \"selectionService\", void 0);\n__decorate$r([\n    ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.PostConstruct\n], LazyStore.prototype, \"init\", null);\n__decorate$r([\n    ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.PreDestroy\n], LazyStore.prototype, \"destroyRowNodes\", null);\n\nvar __decorate$q = ( false) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nlet ServerSideRowModel = class ServerSideRowModel extends ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.BeanStub {\n    constructor() {\n        super(...arguments);\n        this.onRowHeightChanged_debounced = ag_grid_community__WEBPACK_IMPORTED_MODULE_0__._.debounce(this.onRowHeightChanged.bind(this), 100);\n        this.pauseStoreUpdateListening = false;\n        this.started = false;\n    }\n    // we don't implement as lazy row heights is not supported in this row model\n    ensureRowHeightsValid() { return false; }\n    start() {\n        this.started = true;\n        const datasource = this.gridOptionsService.get('serverSideDatasource');\n        if (datasource) {\n            this.setDatasource(datasource);\n        }\n    }\n    destroyDatasource() {\n        if (!this.datasource) {\n            return;\n        }\n        if (this.datasource.destroy) {\n            this.datasource.destroy();\n        }\n        this.rowRenderer.datasourceChanged();\n        this.datasource = undefined;\n    }\n    addEventListeners() {\n        this.addManagedListener(this.eventService, ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.Events.EVENT_NEW_COLUMNS_LOADED, this.onColumnEverything.bind(this));\n        this.addManagedListener(this.eventService, ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.Events.EVENT_STORE_UPDATED, this.onStoreUpdated.bind(this));\n        const resetListener = this.resetRootStore.bind(this);\n        this.addManagedListener(this.eventService, ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.Events.EVENT_COLUMN_VALUE_CHANGED, resetListener);\n        this.addManagedListener(this.eventService, ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.Events.EVENT_COLUMN_PIVOT_CHANGED, resetListener);\n        this.addManagedListener(this.eventService, ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.Events.EVENT_COLUMN_ROW_GROUP_CHANGED, resetListener);\n        this.addManagedListener(this.eventService, ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.Events.EVENT_COLUMN_PIVOT_MODE_CHANGED, resetListener);\n        this.verifyProps();\n    }\n    verifyProps() {\n        if (this.gridOptionsService.exists('initialGroupOrderComparator')) {\n            const message = `AG Grid: initialGroupOrderComparator cannot be used with Server Side Row Model. If using Full Store, then provide the rows to the grid in the desired sort order. If using Infinite Scroll, then sorting is done on the server side, nothing to do with the client.`;\n            ag_grid_community__WEBPACK_IMPORTED_MODULE_0__._.doOnce(() => console.warn(message), 'SSRM.InitialGroupOrderComparator');\n        }\n        if (this.gridOptionsService.isRowSelection() && !this.gridOptionsService.exists('getRowId')) {\n            const message = `AG Grid: getRowId callback must be provided for Server Side Row Model selection to work correctly.`;\n            ag_grid_community__WEBPACK_IMPORTED_MODULE_0__._.doOnce(() => console.warn(message), 'SSRM.SelectionNeedsRowNodeIdFunc');\n        }\n    }\n    setDatasource(datasource) {\n        // sometimes React, due to async, can call gridApi.setDatasource() before we have started.\n        // this happens when React app does this:\n        //      useEffect(() => setDatasource(ds), []);\n        // thus if we set the datasource before the grid UI has finished initialising, we do not set it,\n        // and the ssrm.start() method will set the datasoure when the grid is ready.\n        if (!this.started) {\n            return;\n        }\n        this.destroyDatasource();\n        this.datasource = datasource;\n        this.resetRootStore();\n    }\n    isLastRowIndexKnown() {\n        const cache = this.getRootStore();\n        if (!cache) {\n            return false;\n        }\n        return cache.isLastRowIndexKnown();\n    }\n    onColumnEverything() {\n        // if first time, always reset\n        if (!this.storeParams) {\n            this.resetRootStore();\n            return;\n        }\n        // check if anything pertaining to fetching data has changed, and if it has, reset, but if\n        // it has not, don't reset\n        const rowGroupColumnVos = this.columnsToValueObjects(this.columnModel.getRowGroupColumns());\n        const valueColumnVos = this.columnsToValueObjects(this.columnModel.getValueColumns());\n        const pivotColumnVos = this.columnsToValueObjects(this.columnModel.getPivotColumns());\n        // compares two sets of columns, ensuring no columns have been added or removed (unless specified via allowRemovedColumns)\n        // if the columns are found, also ensures the field and aggFunc properties have not been changed.\n        const areColsSame = (params) => {\n            const oldColsMap = {};\n            params.oldCols.forEach(col => oldColsMap[col.id] = col);\n            const allColsUnchanged = params.newCols.every(col => {\n                const equivalentCol = oldColsMap[col.id];\n                if (equivalentCol) {\n                    delete oldColsMap[col.id];\n                }\n                return equivalentCol && equivalentCol.field === col.field && equivalentCol.aggFunc === col.aggFunc;\n            });\n            const missingCols = !params.allowRemovedColumns && !!Object.values(oldColsMap).length;\n            return allColsUnchanged && !missingCols;\n        };\n        const sortModelDifferent = !ag_grid_community__WEBPACK_IMPORTED_MODULE_0__._.jsonEquals(this.storeParams.sortModel, this.sortListener.extractSortModel());\n        const rowGroupDifferent = !areColsSame({\n            oldCols: this.storeParams.rowGroupCols,\n            newCols: rowGroupColumnVos,\n        });\n        const pivotDifferent = !areColsSame({\n            oldCols: this.storeParams.pivotCols,\n            newCols: pivotColumnVos,\n        });\n        const valuesDifferent = !!(rowGroupColumnVos === null || rowGroupColumnVos === void 0 ? void 0 : rowGroupColumnVos.length) && !areColsSame({\n            oldCols: this.storeParams.valueCols,\n            newCols: valueColumnVos,\n            allowRemovedColumns: true,\n        });\n        const resetRequired = sortModelDifferent || rowGroupDifferent || pivotDifferent || valuesDifferent;\n        if (resetRequired) {\n            this.resetRootStore();\n        }\n        else {\n            // cols may have changed even if we didn't do a reset. storeParams ref will be provided when getRows\n            // is called, so it's important to keep it up to date.\n            const newParams = this.createStoreParams();\n            this.storeParams.rowGroupCols = newParams.rowGroupCols;\n            this.storeParams.pivotCols = newParams.pivotCols;\n            this.storeParams.valueCols = newParams.valueCols;\n        }\n    }\n    destroyRootStore() {\n        if (!this.rootNode || !this.rootNode.childStore) {\n            return;\n        }\n        this.rootNode.childStore = this.destroyBean(this.rootNode.childStore);\n        this.nodeManager.clear();\n    }\n    refreshAfterSort(newSortModel, params) {\n        if (this.storeParams) {\n            this.storeParams.sortModel = newSortModel;\n        }\n        const rootStore = this.getRootStore();\n        if (!rootStore) {\n            return;\n        }\n        rootStore.refreshAfterSort(params);\n        this.onStoreUpdated();\n    }\n    resetRootStore() {\n        this.destroyRootStore();\n        this.rootNode = new ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.RowNode(this.beans);\n        this.rootNode.group = true;\n        this.rootNode.level = -1;\n        if (this.datasource) {\n            this.storeParams = this.createStoreParams();\n            this.rootNode.childStore = this.createBean(this.storeFactory.createStore(this.storeParams, this.rootNode));\n            this.updateRowIndexesAndBounds();\n        }\n        // this event shows/hides 'no rows' overlay\n        const rowDataChangedEvent = {\n            type: ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.Events.EVENT_ROW_DATA_UPDATED\n        };\n        this.eventService.dispatchEvent(rowDataChangedEvent);\n        // this gets the row to render rows (or remove the previously rendered rows, as it's blank to start).\n        // important to NOT pass in an event with keepRenderedRows or animate, as we want the renderer\n        // to treat the rows as new rows, as it's all new data\n        this.dispatchModelUpdated(true);\n    }\n    columnsToValueObjects(columns) {\n        return columns.map(col => ({\n            id: col.getId(),\n            aggFunc: col.getAggFunc(),\n            displayName: this.columnModel.getDisplayNameForColumn(col, 'model'),\n            field: col.getColDef().field\n        }));\n    }\n    createStoreParams() {\n        const rowGroupColumnVos = this.columnsToValueObjects(this.columnModel.getRowGroupColumns());\n        const valueColumnVos = this.columnsToValueObjects(this.columnModel.getValueColumns());\n        const pivotColumnVos = this.columnsToValueObjects(this.columnModel.getPivotColumns());\n        const dynamicRowHeight = this.gridOptionsService.isGetRowHeightFunction();\n        const params = {\n            // the columns the user has grouped and aggregated by\n            valueCols: valueColumnVos,\n            rowGroupCols: rowGroupColumnVos,\n            pivotCols: pivotColumnVos,\n            pivotMode: this.columnModel.isPivotMode(),\n            // sort and filter model\n            filterModel: this.filterManager.getFilterModel(),\n            sortModel: this.sortListener.extractSortModel(),\n            datasource: this.datasource,\n            lastAccessedSequence: new ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.NumberSequence(),\n            // blockSize: blockSize == null ? 100 : blockSize,\n            dynamicRowHeight: dynamicRowHeight\n        };\n        return params;\n    }\n    getParams() {\n        return this.storeParams;\n    }\n    dispatchModelUpdated(reset = false) {\n        const modelUpdatedEvent = {\n            type: ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.Events.EVENT_MODEL_UPDATED,\n            animate: !reset,\n            keepRenderedRows: !reset,\n            newPage: false,\n            newData: false\n        };\n        this.eventService.dispatchEvent(modelUpdatedEvent);\n    }\n    onStoreUpdated() {\n        // sometimes if doing a batch update, we do the batch first,\n        // then call onStoreUpdated manually. eg expandAll() method.\n        if (this.pauseStoreUpdateListening) {\n            return;\n        }\n        this.updateRowIndexesAndBounds();\n        this.dispatchModelUpdated();\n    }\n    /** This method is debounced. It is used for row auto-height. If we don't debounce,\n     * then the Row Models will end up recalculating each row position\n     * for each row height change and result in the Row Renderer laying out rows.\n     * This is particularly bad if using print layout, and showing eg 1,000 rows,\n     * each row will change it's height, causing Row Model to update 1,000 times.\n     */\n    onRowHeightChangedDebounced() {\n        this.onRowHeightChanged_debounced();\n    }\n    onRowHeightChanged() {\n        this.updateRowIndexesAndBounds();\n        this.dispatchModelUpdated();\n    }\n    updateRowIndexesAndBounds() {\n        const rootStore = this.getRootStore();\n        if (!rootStore) {\n            return;\n        }\n        rootStore.setDisplayIndexes(new ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.NumberSequence(), { value: 0 });\n    }\n    retryLoads() {\n        const rootStore = this.getRootStore();\n        if (!rootStore) {\n            return;\n        }\n        rootStore.retryLoads();\n        this.onStoreUpdated();\n    }\n    getRow(index) {\n        const rootStore = this.getRootStore();\n        if (!rootStore) {\n            return undefined;\n        }\n        return rootStore.getRowUsingDisplayIndex(index);\n    }\n    expandAll(value) {\n        // if we don't pause store updating, we are needlessly\n        // recalculating row-indexes etc, and also getting rendering\n        // engine to re-render (listens on ModelUpdated event)\n        this.pauseStoreUpdateListening = true;\n        this.forEachNode(node => {\n            if (node.stub) {\n                return;\n            }\n            if (node.hasChildren()) {\n                node.setExpanded(value);\n            }\n        });\n        this.pauseStoreUpdateListening = false;\n        this.onStoreUpdated();\n    }\n    refreshAfterFilter(newFilterModel, params) {\n        if (this.storeParams) {\n            this.storeParams.filterModel = newFilterModel;\n        }\n        const rootStore = this.getRootStore();\n        if (!rootStore) {\n            return;\n        }\n        rootStore.refreshAfterFilter(params);\n        this.onStoreUpdated();\n    }\n    getRootStore() {\n        if (this.rootNode && this.rootNode.childStore) {\n            return this.rootNode.childStore;\n        }\n    }\n    getRowCount() {\n        const rootStore = this.getRootStore();\n        if (!rootStore) {\n            return 0;\n        }\n        return rootStore.getDisplayIndexEnd();\n    }\n    getTopLevelRowCount() {\n        const rootStore = this.getRootStore();\n        if (!rootStore) {\n            return 1;\n        }\n        return rootStore.getRowCount();\n    }\n    getTopLevelRowDisplayedIndex(topLevelIndex) {\n        const rootStore = this.getRootStore();\n        if (!rootStore) {\n            return topLevelIndex;\n        }\n        return rootStore.getTopLevelRowDisplayedIndex(topLevelIndex);\n    }\n    getRowBounds(index) {\n        const rootStore = this.getRootStore();\n        if (!rootStore) {\n            const rowHeight = this.gridOptionsService.getRowHeightAsNumber();\n            return {\n                rowTop: 0,\n                rowHeight: rowHeight\n            };\n        }\n        return rootStore.getRowBounds(index);\n    }\n    getBlockStates() {\n        const root = this.getRootStore();\n        if (!root) {\n            return undefined;\n        }\n        const states = {};\n        root.forEachStoreDeep(store => {\n            if (store instanceof FullStore) {\n                const { id, state } = store.getBlockStateJson();\n                states[id] = state;\n            }\n            else if (store instanceof LazyStore) {\n                Object.entries(store.getBlockStates()).forEach(([block, state]) => {\n                    states[block] = state;\n                });\n            }\n            else {\n                throw new Error('AG Grid: Unsupported store type');\n            }\n        });\n        return states;\n    }\n    getRowIndexAtPixel(pixel) {\n        const rootStore = this.getRootStore();\n        if (pixel <= 0 || !rootStore) {\n            return 0;\n        }\n        return rootStore.getRowIndexAtPixel(pixel);\n    }\n    isEmpty() {\n        return false;\n    }\n    isRowsToRender() {\n        return this.getRootStore() != null && this.getRowCount() > 0;\n    }\n    getType() {\n        return 'serverSide';\n    }\n    forEachNode(callback) {\n        const rootStore = this.getRootStore();\n        if (!rootStore) {\n            return;\n        }\n        rootStore.forEachNodeDeep(callback);\n    }\n    forEachNodeAfterFilterAndSort(callback) {\n        const rootStore = this.getRootStore();\n        if (!rootStore) {\n            return;\n        }\n        rootStore.forEachNodeDeepAfterFilterAndSort(callback);\n    }\n    executeOnStore(route, callback) {\n        const rootStore = this.getRootStore();\n        if (!rootStore) {\n            return;\n        }\n        const storeToExecuteOn = rootStore.getChildStore(route);\n        if (storeToExecuteOn) {\n            callback(storeToExecuteOn);\n        }\n    }\n    refreshStore(params = {}) {\n        const route = params.route ? params.route : [];\n        this.executeOnStore(route, store => store.refreshStore(params.purge == true));\n    }\n    getStoreState() {\n        const res = [];\n        const rootStore = this.getRootStore();\n        if (rootStore) {\n            rootStore.addStoreStates(res);\n        }\n        return res;\n    }\n    getNodesInRangeForSelection(firstInRange, lastInRange) {\n        if (!ag_grid_community__WEBPACK_IMPORTED_MODULE_0__._.exists(firstInRange)) {\n            return [];\n        }\n        if (!lastInRange) {\n            return [firstInRange];\n        }\n        const startIndex = firstInRange.rowIndex;\n        const endIndex = lastInRange.rowIndex;\n        if (startIndex === null || endIndex === null) {\n            return [firstInRange];\n        }\n        const nodeRange = [];\n        const [firstIndex, lastIndex] = [startIndex, endIndex].sort((a, b) => a - b);\n        this.forEachNode((node) => {\n            const thisRowIndex = node.rowIndex;\n            if (thisRowIndex == null || node.stub) {\n                return;\n            }\n            if (thisRowIndex >= firstIndex && thisRowIndex <= lastIndex) {\n                nodeRange.push(node);\n            }\n        });\n        const rowsAreContiguous = nodeRange.every((node, idx, all) => {\n            if (idx === 0) {\n                return node.rowIndex === firstIndex;\n            }\n            return all[idx - 1].rowIndex === (node.rowIndex - 1);\n        });\n        // don't allow range selection if we don't have the full range of rows\n        if (!rowsAreContiguous || nodeRange.length !== (lastIndex - firstIndex + 1)) {\n            return [firstInRange];\n        }\n        return nodeRange;\n    }\n    getRowNode(id) {\n        let result;\n        this.forEachNode(rowNode => {\n            if (rowNode.id === id) {\n                result = rowNode;\n            }\n            if (rowNode.detailNode && rowNode.detailNode.id === id) {\n                result = rowNode.detailNode;\n            }\n        });\n        return result;\n    }\n    isRowPresent(rowNode) {\n        const foundRowNode = this.getRowNode(rowNode.id);\n        return !!foundRowNode;\n    }\n    setRowCount(rowCount, lastRowIndexKnown) {\n        const rootStore = this.getRootStore();\n        if (rootStore) {\n            if (rootStore instanceof LazyStore) {\n                rootStore.setRowCount(rowCount, lastRowIndexKnown);\n                return;\n            }\n            console.error('AG Grid: Infinite scrolling must be enabled in order to set the row count.');\n        }\n    }\n};\n__decorate$q([\n    (0,ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.Autowired)('columnModel')\n], ServerSideRowModel.prototype, \"columnModel\", void 0);\n__decorate$q([\n    (0,ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.Autowired)('filterManager')\n], ServerSideRowModel.prototype, \"filterManager\", void 0);\n__decorate$q([\n    (0,ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.Autowired)('rowRenderer')\n], ServerSideRowModel.prototype, \"rowRenderer\", void 0);\n__decorate$q([\n    (0,ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.Autowired)('ssrmSortService')\n], ServerSideRowModel.prototype, \"sortListener\", void 0);\n__decorate$q([\n    (0,ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.Autowired)('ssrmNodeManager')\n], ServerSideRowModel.prototype, \"nodeManager\", void 0);\n__decorate$q([\n    (0,ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.Autowired)('ssrmStoreFactory')\n], ServerSideRowModel.prototype, \"storeFactory\", void 0);\n__decorate$q([\n    (0,ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.Autowired)('beans')\n], ServerSideRowModel.prototype, \"beans\", void 0);\n__decorate$q([\n    ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.PreDestroy\n], ServerSideRowModel.prototype, \"destroyDatasource\", null);\n__decorate$q([\n    ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.PostConstruct\n], ServerSideRowModel.prototype, \"addEventListeners\", null);\n__decorate$q([\n    ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.PreDestroy\n], ServerSideRowModel.prototype, \"destroyRootStore\", null);\nServerSideRowModel = __decorate$q([\n    (0,ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.Bean)('rowModel')\n], ServerSideRowModel);\n\nvar __decorate$p = ( false) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nlet StoreUtils = class StoreUtils extends ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.BeanStub {\n    loadFromDatasource(p) {\n        const { storeParams, parentBlock, parentNode } = p;\n        const groupKeys = parentNode.getGroupKeys();\n        if (!storeParams.datasource) {\n            return;\n        }\n        const request = {\n            startRow: p.startRow,\n            endRow: p.endRow,\n            rowGroupCols: storeParams.rowGroupCols,\n            valueCols: storeParams.valueCols,\n            pivotCols: storeParams.pivotCols,\n            pivotMode: storeParams.pivotMode,\n            groupKeys: groupKeys,\n            filterModel: storeParams.filterModel,\n            sortModel: storeParams.sortModel\n        };\n        const getRowsParams = {\n            successCallback: p.successCallback,\n            success: p.success,\n            failCallback: p.failCallback,\n            fail: p.fail,\n            request: request,\n            parentNode: p.parentNode,\n            api: this.gridApi,\n            columnApi: this.columnApi,\n            context: this.gridOptionsService.context\n        };\n        window.setTimeout(() => {\n            if (!storeParams.datasource || !parentBlock.isAlive()) {\n                // failCallback() is important, to reduce the 'RowNodeBlockLoader.activeBlockLoadsCount' count\n                p.failCallback();\n                return;\n            }\n            storeParams.datasource.getRows(getRowsParams);\n        }, 0);\n    }\n    getChildStore(keys, currentCache, findNodeFunc) {\n        if (ag_grid_community__WEBPACK_IMPORTED_MODULE_0__._.missingOrEmpty(keys)) {\n            return currentCache;\n        }\n        const nextKey = keys[0];\n        const nextNode = findNodeFunc(nextKey);\n        if (nextNode) {\n            const keyListForNextLevel = keys.slice(1, keys.length);\n            const nextStore = nextNode.childStore;\n            return nextStore ? nextStore.getChildStore(keyListForNextLevel) : null;\n        }\n        return null;\n    }\n    isServerRefreshNeeded(parentRowNode, rowGroupCols, params) {\n        if (params.valueColChanged || params.secondaryColChanged) {\n            return true;\n        }\n        const level = parentRowNode.level + 1;\n        const grouping = level < rowGroupCols.length;\n        const leafNodes = !grouping;\n        if (leafNodes) {\n            return true;\n        }\n        const colIdThisGroup = rowGroupCols[level].id;\n        const actionOnThisGroup = params.changedColumns.indexOf(colIdThisGroup) > -1;\n        if (actionOnThisGroup) {\n            return true;\n        }\n        const allCols = this.columnModel.getAllGridColumns();\n        const affectedGroupCols = allCols\n            // find all impacted cols which also a group display column\n            .filter(col => col.getColDef().showRowGroup && params.changedColumns.includes(col.getId()))\n            .map(col => col.getColDef().showRowGroup)\n            // if displaying all groups, or displaying the effected col for this group, refresh\n            .some(group => group === true || group === colIdThisGroup);\n        return affectedGroupCols;\n    }\n    getServerSideInitialRowCount() {\n        const rowCount = this.gridOptionsService.getNum('serverSideInitialRowCount');\n        if (typeof rowCount === 'number' && rowCount > 0) {\n            return rowCount;\n        }\n        return 1;\n    }\n    assertRowModelIsServerSide(key) {\n        if (!this.gridOptionsService.isRowModelType('serverSide')) {\n            ag_grid_community__WEBPACK_IMPORTED_MODULE_0__._.doOnce(() => console.warn(`AG Grid: The '${key}' property can only be used with the Server Side Row Model.`), key);\n            return false;\n        }\n        return true;\n    }\n    assertNotTreeData(key) {\n        if (this.gridOptionsService.is('treeData')) {\n            ag_grid_community__WEBPACK_IMPORTED_MODULE_0__._.doOnce(() => console.warn(`AG Grid: The '${key}' property cannot be used while using tree data.`), key + '_TreeData');\n            return false;\n        }\n        return true;\n    }\n    isServerSideSortAllLevels() {\n        return this.gridOptionsService.is('serverSideSortAllLevels') && this.assertRowModelIsServerSide('serverSideSortAllLevels');\n    }\n    isServerSideOnlyRefreshFilteredGroups() {\n        return this.gridOptionsService.is('serverSideOnlyRefreshFilteredGroups') && this.assertRowModelIsServerSide('serverSideOnlyRefreshFilteredGroups');\n    }\n    isServerSideSortOnServer() {\n        return this.gridOptionsService.is('serverSideSortOnServer') && this.assertRowModelIsServerSide('serverSideSortOnServer') && this.assertNotTreeData('serverSideSortOnServer');\n    }\n    isServerSideFilterOnServer() {\n        return this.gridOptionsService.is('serverSideFilterOnServer') && this.assertRowModelIsServerSide('serverSideFilterOnServer') && this.assertNotTreeData('serverSideFilterOnServer');\n    }\n};\n__decorate$p([\n    (0,ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.Autowired)('columnApi')\n], StoreUtils.prototype, \"columnApi\", void 0);\n__decorate$p([\n    (0,ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.Autowired)('columnModel')\n], StoreUtils.prototype, \"columnModel\", void 0);\n__decorate$p([\n    (0,ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.Autowired)('gridApi')\n], StoreUtils.prototype, \"gridApi\", void 0);\nStoreUtils = __decorate$p([\n    (0,ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.Bean)('ssrmStoreUtils')\n], StoreUtils);\n\nvar __decorate$o = ( false) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nconst GROUP_MISSING_KEY_ID = 'ag-Grid-MissingKey';\nlet BlockUtils = class BlockUtils extends ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.BeanStub {\n    postConstruct() {\n        this.rowHeight = this.gridOptionsService.getRowHeightAsNumber();\n        this.usingTreeData = this.gridOptionsService.isTreeData();\n        this.usingMasterDetail = this.gridOptionsService.isMasterDetail();\n    }\n    createRowNode(params) {\n        const rowNode = new ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.RowNode(this.beans);\n        const rowHeight = params.rowHeight != null ? params.rowHeight : this.rowHeight;\n        rowNode.setRowHeight(rowHeight);\n        rowNode.group = params.group;\n        rowNode.leafGroup = params.leafGroup;\n        rowNode.level = params.level;\n        rowNode.uiLevel = params.level;\n        rowNode.parent = params.parent;\n        // stub gets set to true here, and then false when this rowNode gets it's data\n        rowNode.stub = true;\n        rowNode.__needsRefreshWhenVisible = false;\n        if (rowNode.group) {\n            rowNode.expanded = false;\n            rowNode.field = params.field;\n            rowNode.rowGroupColumn = params.rowGroupColumn;\n        }\n        return rowNode;\n    }\n    destroyRowNodes(rowNodes) {\n        if (rowNodes) {\n            rowNodes.forEach((row) => this.destroyRowNode(row));\n        }\n    }\n    destroyRowNode(rowNode, preserveStore = false) {\n        if (rowNode.childStore && !preserveStore) {\n            this.destroyBean(rowNode.childStore);\n            rowNode.childStore = null;\n        }\n        if (rowNode.sibling) {\n            this.destroyRowNode(rowNode.sibling, false);\n        }\n        // this is needed, so row render knows to fade out the row, otherwise it\n        // sees row top is present, and thinks the row should be shown. maybe\n        // rowNode should have a flag on whether it is visible???\n        rowNode.clearRowTopAndRowIndex();\n        if (rowNode.id != null) {\n            this.nodeManager.removeNode(rowNode);\n        }\n    }\n    setTreeGroupInfo(rowNode) {\n        rowNode.updateHasChildren();\n        const getKeyFunc = this.gridOptionsService.get('getServerSideGroupKey');\n        if (rowNode.hasChildren() && getKeyFunc != null) {\n            rowNode.key = getKeyFunc(rowNode.data);\n        }\n        if (!rowNode.hasChildren() && rowNode.childStore != null) {\n            this.destroyBean(rowNode.childStore);\n            rowNode.childStore = null;\n            rowNode.expanded = false;\n        }\n    }\n    setRowGroupInfo(rowNode) {\n        rowNode.key = this.valueService.getValue(rowNode.rowGroupColumn, rowNode);\n        if (rowNode.key === null || rowNode.key === undefined) {\n            ag_grid_community__WEBPACK_IMPORTED_MODULE_0__._.doOnce(() => {\n                console.warn(`AG Grid: null and undefined values are not allowed for server side row model keys`);\n                if (rowNode.rowGroupColumn) {\n                    console.warn(`column = ${rowNode.rowGroupColumn.getId()}`);\n                }\n                console.warn(`data is `, rowNode.data);\n            }, 'ServerSideBlock-CannotHaveNullOrUndefinedForKey');\n        }\n        if (this.beans.gridOptionsService.is('groupIncludeFooter')) {\n            rowNode.createFooter();\n            if (rowNode.sibling) {\n                rowNode.sibling.uiLevel = rowNode.uiLevel + 1;\n            }\n        }\n    }\n    setMasterDetailInfo(rowNode) {\n        const isMasterFunc = this.gridOptionsService.get('isRowMaster');\n        if (isMasterFunc != null) {\n            rowNode.master = isMasterFunc(rowNode.data);\n        }\n        else {\n            rowNode.master = true;\n        }\n    }\n    updateDataIntoRowNode(rowNode, data) {\n        rowNode.updateData(data);\n        if (this.usingTreeData) {\n            this.setTreeGroupInfo(rowNode);\n            this.setChildCountIntoRowNode(rowNode);\n        }\n        else if (rowNode.group) {\n            this.setChildCountIntoRowNode(rowNode);\n            // it's not possible for a node to change whether it's a group or not\n            // when doing row grouping (as only rows at certain levels are groups),\n            // so nothing to do here\n        }\n        else if (this.usingMasterDetail) ;\n    }\n    setDataIntoRowNode(rowNode, data, defaultId, cachedRowHeight) {\n        var _a;\n        rowNode.stub = false;\n        if (ag_grid_community__WEBPACK_IMPORTED_MODULE_0__._.exists(data)) {\n            rowNode.setDataAndId(data, defaultId);\n            if (this.usingTreeData) {\n                this.setTreeGroupInfo(rowNode);\n            }\n            else if (rowNode.group) {\n                this.setRowGroupInfo(rowNode);\n            }\n            else if (this.usingMasterDetail) {\n                this.setMasterDetailInfo(rowNode);\n            }\n        }\n        else {\n            rowNode.setDataAndId(undefined, undefined);\n            rowNode.key = null;\n        }\n        if (this.usingTreeData || rowNode.group) {\n            this.setGroupDataIntoRowNode(rowNode);\n            this.setChildCountIntoRowNode(rowNode);\n        }\n        // this needs to be done AFTER setGroupDataIntoRowNode(), as the height can depend on the group data\n        // getting set, if it's a group node and colDef.autoHeight=true\n        if (ag_grid_community__WEBPACK_IMPORTED_MODULE_0__._.exists(data)) {\n            rowNode.setRowHeight(this.gridOptionsService.getRowHeightForNode(rowNode, false, cachedRowHeight).height);\n            (_a = rowNode.sibling) === null || _a === void 0 ? void 0 : _a.setRowHeight(this.gridOptionsService.getRowHeightForNode(rowNode.sibling, false, cachedRowHeight).height);\n        }\n    }\n    setChildCountIntoRowNode(rowNode) {\n        const getChildCount = this.gridOptionsService.get('getChildCount');\n        if (getChildCount) {\n            rowNode.setAllChildrenCount(getChildCount(rowNode.data));\n        }\n    }\n    setGroupDataIntoRowNode(rowNode) {\n        const groupDisplayCols = this.columnModel.getGroupDisplayColumns();\n        const usingTreeData = this.gridOptionsService.isTreeData();\n        groupDisplayCols.forEach(col => {\n            if (rowNode.groupData == null) {\n                rowNode.groupData = {};\n            }\n            if (usingTreeData) {\n                rowNode.groupData[col.getColId()] = rowNode.key;\n            }\n            else if (col.isRowGroupDisplayed(rowNode.rowGroupColumn.getId())) {\n                const groupValue = this.valueService.getValue(rowNode.rowGroupColumn, rowNode);\n                rowNode.groupData[col.getColId()] = groupValue;\n            }\n        });\n    }\n    clearDisplayIndex(rowNode) {\n        rowNode.clearRowTopAndRowIndex();\n        const hasChildStore = rowNode.hasChildren() && ag_grid_community__WEBPACK_IMPORTED_MODULE_0__._.exists(rowNode.childStore);\n        if (hasChildStore) {\n            const childStore = rowNode.childStore;\n            childStore.clearDisplayIndexes();\n        }\n        const hasDetailNode = rowNode.master && rowNode.detailNode;\n        if (hasDetailNode) {\n            rowNode.detailNode.clearRowTopAndRowIndex();\n        }\n    }\n    setDisplayIndex(rowNode, displayIndexSeq, nextRowTop) {\n        // set this row\n        rowNode.setRowIndex(displayIndexSeq.next());\n        rowNode.setRowTop(nextRowTop.value);\n        nextRowTop.value += rowNode.rowHeight;\n        // set child for master / detail\n        const hasDetailRow = rowNode.master;\n        if (hasDetailRow) {\n            if (rowNode.expanded && rowNode.detailNode) {\n                rowNode.detailNode.setRowIndex(displayIndexSeq.next());\n                rowNode.detailNode.setRowTop(nextRowTop.value);\n                nextRowTop.value += rowNode.detailNode.rowHeight;\n            }\n            else if (rowNode.detailNode) {\n                rowNode.detailNode.clearRowTopAndRowIndex();\n            }\n        }\n        // set children for SSRM child rows\n        const hasChildStore = rowNode.hasChildren() && ag_grid_community__WEBPACK_IMPORTED_MODULE_0__._.exists(rowNode.childStore);\n        if (hasChildStore) {\n            const childStore = rowNode.childStore;\n            if (rowNode.expanded) {\n                childStore.setDisplayIndexes(displayIndexSeq, nextRowTop);\n            }\n            else {\n                // we need to clear the row tops, as the row renderer depends on\n                // this to know if the row should be faded out\n                childStore.clearDisplayIndexes();\n            }\n        }\n    }\n    binarySearchForDisplayIndex(displayRowIndex, rowNodes) {\n        let bottomPointer = 0;\n        let topPointer = rowNodes.length - 1;\n        if (ag_grid_community__WEBPACK_IMPORTED_MODULE_0__._.missing(topPointer) || ag_grid_community__WEBPACK_IMPORTED_MODULE_0__._.missing(bottomPointer)) {\n            console.warn(`AG Grid: error: topPointer = ${topPointer}, bottomPointer = ${bottomPointer}`);\n            return undefined;\n        }\n        while (true) {\n            const midPointer = Math.floor((bottomPointer + topPointer) / 2);\n            const currentRowNode = rowNodes[midPointer];\n            // first check current row for index\n            if (currentRowNode.rowIndex === displayRowIndex) {\n                return currentRowNode;\n            }\n            // then check if current row contains a detail row with the index\n            const expandedMasterRow = currentRowNode.master && currentRowNode.expanded;\n            const detailNode = currentRowNode.detailNode;\n            if (expandedMasterRow && detailNode && detailNode.rowIndex === displayRowIndex) {\n                return currentRowNode.detailNode;\n            }\n            // then check if child cache contains index\n            const childStore = currentRowNode.childStore;\n            if (currentRowNode.expanded && childStore && childStore.isDisplayIndexInStore(displayRowIndex)) {\n                return childStore.getRowUsingDisplayIndex(displayRowIndex);\n            }\n            // otherwise adjust pointers to continue searching for index\n            if (currentRowNode.rowIndex < displayRowIndex) {\n                bottomPointer = midPointer + 1;\n            }\n            else if (currentRowNode.rowIndex > displayRowIndex) {\n                topPointer = midPointer - 1;\n            }\n            else {\n                console.warn(`AG Grid: error: unable to locate rowIndex = ${displayRowIndex} in cache`);\n                return undefined;\n            }\n        }\n    }\n    extractRowBounds(rowNode, index) {\n        const extractRowBounds = (currentRowNode) => ({\n            rowHeight: currentRowNode.rowHeight,\n            rowTop: currentRowNode.rowTop\n        });\n        if (rowNode.rowIndex === index) {\n            return extractRowBounds(rowNode);\n        }\n        if (rowNode.hasChildren() && rowNode.expanded && ag_grid_community__WEBPACK_IMPORTED_MODULE_0__._.exists(rowNode.childStore)) {\n            const childStore = rowNode.childStore;\n            if (childStore.isDisplayIndexInStore(index)) {\n                return childStore.getRowBounds(index);\n            }\n        }\n        else if (rowNode.master && rowNode.expanded && ag_grid_community__WEBPACK_IMPORTED_MODULE_0__._.exists(rowNode.detailNode)) {\n            if (rowNode.detailNode.rowIndex === index) {\n                return extractRowBounds(rowNode.detailNode);\n            }\n        }\n    }\n    getIndexAtPixel(rowNode, pixel) {\n        // first check if pixel is in range of current row\n        if (rowNode.isPixelInRange(pixel)) {\n            return rowNode.rowIndex;\n        }\n        // then check if current row contains a detail row with pixel in range\n        const expandedMasterRow = rowNode.master && rowNode.expanded;\n        const detailNode = rowNode.detailNode;\n        if (expandedMasterRow && detailNode && detailNode.isPixelInRange(pixel)) {\n            return rowNode.detailNode.rowIndex;\n        }\n        // then check if it's a group row with a child cache with pixel in range\n        if (rowNode.hasChildren() && rowNode.expanded && ag_grid_community__WEBPACK_IMPORTED_MODULE_0__._.exists(rowNode.childStore)) {\n            const childStore = rowNode.childStore;\n            if (childStore.isPixelInRange(pixel)) {\n                return childStore.getRowIndexAtPixel(pixel);\n            }\n        }\n        return null;\n        // pixel is not within this row node or it's children / detail, so return undefined\n    }\n    createNodeIdPrefix(parentRowNode) {\n        const parts = [];\n        let rowNode = parentRowNode;\n        // pull keys from all parent nodes, but do not include the root node\n        while (rowNode && rowNode.level >= 0) {\n            if (rowNode.key === '') {\n                parts.push(GROUP_MISSING_KEY_ID);\n            }\n            else {\n                parts.push(rowNode.key);\n            }\n            rowNode = rowNode.parent;\n        }\n        if (parts.length > 0) {\n            return parts.reverse().join('-');\n        }\n        // no prefix, so node id's are left as they are\n        return undefined;\n    }\n    checkOpenByDefault(rowNode) {\n        if (!rowNode.isExpandable()) {\n            return;\n        }\n        const userFunc = this.gridOptionsService.getCallback('isServerSideGroupOpenByDefault');\n        if (!userFunc) {\n            return;\n        }\n        const params = {\n            data: rowNode.data,\n            rowNode\n        };\n        const userFuncRes = userFunc(params);\n        if (userFuncRes) {\n            // we do this in a timeout, so that we don't expand a row node while in the middle\n            // of setting up rows, setting up rows is complex enough without another chunk of work\n            // getting added to the call stack. this is also helpful as openByDefault may or may\n            // not happen (so makes setting up rows more deterministic by expands never happening)\n            // and also checkOpenByDefault is shard with both store types, so easier control how it\n            // impacts things by keeping it in new VM turn.\n            window.setTimeout(() => rowNode.setExpanded(true), 0);\n        }\n    }\n};\n__decorate$o([\n    (0,ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.Autowired)('valueService')\n], BlockUtils.prototype, \"valueService\", void 0);\n__decorate$o([\n    (0,ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.Autowired)('columnModel')\n], BlockUtils.prototype, \"columnModel\", void 0);\n__decorate$o([\n    (0,ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.Autowired)('ssrmNodeManager')\n], BlockUtils.prototype, \"nodeManager\", void 0);\n__decorate$o([\n    (0,ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.Autowired)('beans')\n], BlockUtils.prototype, \"beans\", void 0);\n__decorate$o([\n    ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.PostConstruct\n], BlockUtils.prototype, \"postConstruct\", null);\nBlockUtils = __decorate$o([\n    (0,ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.Bean)('ssrmBlockUtils')\n], BlockUtils);\n\nvar __decorate$n = ( false) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nlet NodeManager = class NodeManager {\n    constructor() {\n        this.rowNodes = {};\n    }\n    addRowNode(rowNode) {\n        const id = rowNode.id;\n        if (this.rowNodes[id]) {\n            console.warn(`AG Grid: Duplicate node id ${rowNode.id}. Row ID's are provided via the getRowId() callback. Please modify the getRowId() callback code to provide unique row id values.`);\n            console.warn('first instance', this.rowNodes[id].data);\n            console.warn('second instance', rowNode.data);\n        }\n        this.rowNodes[id] = rowNode;\n    }\n    removeNode(rowNode) {\n        const id = rowNode.id;\n        if (this.rowNodes[id]) {\n            this.rowNodes[id] = undefined;\n        }\n    }\n    clear() {\n        this.rowNodes = {};\n    }\n};\n__decorate$n([\n    ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.PreDestroy\n], NodeManager.prototype, \"clear\", null);\nNodeManager = __decorate$n([\n    (0,ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.Bean)('ssrmNodeManager')\n], NodeManager);\n\nvar __decorate$m = ( false) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nlet TransactionManager = class TransactionManager extends ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.BeanStub {\n    constructor() {\n        super(...arguments);\n        this.asyncTransactions = [];\n    }\n    postConstruct() {\n        // only want to be active if SSRM active, otherwise would be interfering with other row models\n        if (!this.gridOptionsService.isRowModelType('serverSide')) {\n            return;\n        }\n    }\n    applyTransactionAsync(transaction, callback) {\n        if (this.asyncTransactionsTimeout == null) {\n            this.scheduleExecuteAsync();\n        }\n        this.asyncTransactions.push({ transaction: transaction, callback: callback });\n    }\n    scheduleExecuteAsync() {\n        const waitMillis = this.gridOptionsService.getAsyncTransactionWaitMillis();\n        this.asyncTransactionsTimeout = window.setTimeout(() => {\n            this.executeAsyncTransactions();\n        }, waitMillis);\n    }\n    executeAsyncTransactions() {\n        if (!this.asyncTransactions) {\n            return;\n        }\n        const resultFuncs = [];\n        const resultsForEvent = [];\n        const transactionsToRetry = [];\n        let atLeastOneTransactionApplied = false;\n        this.asyncTransactions.forEach(txWrapper => {\n            let result;\n            this.serverSideRowModel.executeOnStore(txWrapper.transaction.route, cache => {\n                result = cache.applyTransaction(txWrapper.transaction);\n            });\n            if (result == undefined) {\n                result = { status: ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.ServerSideTransactionResultStatus.StoreNotFound };\n            }\n            resultsForEvent.push(result);\n            const retryTransaction = result.status == ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.ServerSideTransactionResultStatus.StoreLoading;\n            if (retryTransaction) {\n                transactionsToRetry.push(txWrapper);\n                return;\n            }\n            if (txWrapper.callback) {\n                resultFuncs.push(() => txWrapper.callback(result));\n            }\n            if (result.status === ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.ServerSideTransactionResultStatus.Applied) {\n                atLeastOneTransactionApplied = true;\n            }\n        });\n        // do callbacks in next VM turn so it's async\n        if (resultFuncs.length > 0) {\n            window.setTimeout(() => {\n                resultFuncs.forEach(func => func());\n            }, 0);\n        }\n        this.asyncTransactionsTimeout = undefined;\n        // this will be empty list if nothing to retry\n        this.asyncTransactions = transactionsToRetry;\n        if (atLeastOneTransactionApplied) {\n            this.valueCache.onDataChanged();\n            this.eventService.dispatchEvent({ type: ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.Events.EVENT_STORE_UPDATED });\n        }\n        if (resultsForEvent.length > 0) {\n            const event = {\n                type: ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.Events.EVENT_ASYNC_TRANSACTIONS_FLUSHED,\n                results: resultsForEvent\n            };\n            this.eventService.dispatchEvent(event);\n        }\n    }\n    flushAsyncTransactions() {\n        // the timeout could be missing, if we are flushing due to row data loaded\n        if (this.asyncTransactionsTimeout != null) {\n            clearTimeout(this.asyncTransactionsTimeout);\n        }\n        this.executeAsyncTransactions();\n    }\n    applyTransaction(transaction) {\n        let res;\n        this.serverSideRowModel.executeOnStore(transaction.route, store => {\n            res = store.applyTransaction(transaction);\n        });\n        if (res) {\n            this.valueCache.onDataChanged();\n            if (res.remove) {\n                const removedRowIds = res.remove.map(row => row.id);\n                this.selectionService.deleteSelectionStateFromParent(transaction.route || [], removedRowIds);\n            }\n            this.eventService.dispatchEvent({ type: ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.Events.EVENT_STORE_UPDATED });\n            return res;\n        }\n        else {\n            return { status: ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.ServerSideTransactionResultStatus.StoreNotFound };\n        }\n    }\n};\n__decorate$m([\n    (0,ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.Autowired)('rowNodeBlockLoader')\n], TransactionManager.prototype, \"rowNodeBlockLoader\", void 0);\n__decorate$m([\n    (0,ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.Autowired)('valueCache')\n], TransactionManager.prototype, \"valueCache\", void 0);\n__decorate$m([\n    (0,ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.Autowired)('rowModel')\n], TransactionManager.prototype, \"serverSideRowModel\", void 0);\n__decorate$m([\n    (0,ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.Autowired)('rowRenderer')\n], TransactionManager.prototype, \"rowRenderer\", void 0);\n__decorate$m([\n    (0,ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.Autowired)('selectionService')\n], TransactionManager.prototype, \"selectionService\", void 0);\n__decorate$m([\n    ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.PostConstruct\n], TransactionManager.prototype, \"postConstruct\", null);\nTransactionManager = __decorate$m([\n    (0,ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.Bean)('ssrmTransactionManager')\n], TransactionManager);\n\nvar __decorate$l = ( false) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nlet ExpandListener = class ExpandListener extends ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.BeanStub {\n    postConstruct() {\n        // only want to be active if SSRM active, otherwise would be interfering with other row models\n        if (!this.gridOptionsService.isRowModelType('serverSide')) {\n            return;\n        }\n        this.addManagedListener(this.eventService, ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.Events.EVENT_ROW_GROUP_OPENED, this.onRowGroupOpened.bind(this));\n    }\n    onRowGroupOpened(event) {\n        const rowNode = event.node;\n        if (rowNode.expanded) {\n            if (rowNode.master) {\n                this.createDetailNode(rowNode);\n            }\n            else if (ag_grid_community__WEBPACK_IMPORTED_MODULE_0__._.missing(rowNode.childStore)) {\n                const storeParams = this.serverSideRowModel.getParams();\n                rowNode.childStore = this.createBean(this.storeFactory.createStore(storeParams, rowNode));\n            }\n        }\n        else if (this.gridOptionsService.is('purgeClosedRowNodes') && ag_grid_community__WEBPACK_IMPORTED_MODULE_0__._.exists(rowNode.childStore)) {\n            rowNode.childStore = this.destroyBean(rowNode.childStore);\n        }\n        const storeUpdatedEvent = { type: ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.Events.EVENT_STORE_UPDATED };\n        this.eventService.dispatchEvent(storeUpdatedEvent);\n    }\n    createDetailNode(masterNode) {\n        if (ag_grid_community__WEBPACK_IMPORTED_MODULE_0__._.exists(masterNode.detailNode)) {\n            return masterNode.detailNode;\n        }\n        const detailNode = new ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.RowNode(this.beans);\n        detailNode.detail = true;\n        detailNode.selectable = false;\n        detailNode.parent = masterNode;\n        if (ag_grid_community__WEBPACK_IMPORTED_MODULE_0__._.exists(masterNode.id)) {\n            detailNode.id = 'detail_' + masterNode.id;\n        }\n        detailNode.data = masterNode.data;\n        detailNode.level = masterNode.level + 1;\n        const defaultDetailRowHeight = 200;\n        const rowHeight = this.gridOptionsService.getRowHeightForNode(detailNode).height;\n        detailNode.rowHeight = rowHeight ? rowHeight : defaultDetailRowHeight;\n        masterNode.detailNode = detailNode;\n        return detailNode;\n    }\n};\n__decorate$l([\n    (0,ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.Autowired)('rowModel')\n], ExpandListener.prototype, \"serverSideRowModel\", void 0);\n__decorate$l([\n    (0,ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.Autowired)('ssrmStoreFactory')\n], ExpandListener.prototype, \"storeFactory\", void 0);\n__decorate$l([\n    (0,ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.Autowired)('beans')\n], ExpandListener.prototype, \"beans\", void 0);\n__decorate$l([\n    ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.PostConstruct\n], ExpandListener.prototype, \"postConstruct\", null);\nExpandListener = __decorate$l([\n    (0,ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.Bean)('ssrmExpandListener')\n], ExpandListener);\n\nvar __decorate$k = ( false) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nlet SortListener = class SortListener extends ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.BeanStub {\n    postConstruct() {\n        // only want to be active if SSRM active, otherwise would be interfering with other row models\n        if (!this.gridOptionsService.isRowModelType('serverSide')) {\n            return;\n        }\n        this.addManagedListener(this.eventService, ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.Events.EVENT_SORT_CHANGED, this.onSortChanged.bind(this));\n    }\n    extractSortModel() {\n        const sortModel = this.sortController.getSortModel();\n        // when using tree data we just return the sort model with the 'ag-Grid-AutoColumn' as is, i.e not broken out\n        // into it's constitute group columns as they are not defined up front and can vary per node.\n        if (this.gridOptionsService.isTreeData()) {\n            return sortModel;\n        }\n        // it autoCol is active, we don't want to send this to the server. instead we want to\n        // send the\n        this.replaceAutoGroupColumnWithActualRowGroupColumns(sortModel);\n        this.removeMultiColumnPrefixOnColumnIds(sortModel);\n        return sortModel;\n    }\n    removeMultiColumnPrefixOnColumnIds(sortModel) {\n        if (this.gridOptionsService.isGroupMultiAutoColumn()) {\n            const multiColumnPrefix = ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.GROUP_AUTO_COLUMN_ID + \"-\";\n            for (let i = 0; i < sortModel.length; ++i) {\n                if (sortModel[i].colId.indexOf(multiColumnPrefix) > -1) {\n                    sortModel[i].colId = sortModel[i].colId.substr(multiColumnPrefix.length);\n                }\n            }\n        }\n    }\n    replaceAutoGroupColumnWithActualRowGroupColumns(sortModel) {\n        // find index of auto group column in sort model\n        const autoGroupSortModel = sortModel.find(sm => sm.colId == ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.GROUP_AUTO_COLUMN_ID);\n        // replace auto column with individual group columns\n        if (autoGroupSortModel) {\n            // remove auto group column\n            const autoGroupIndex = sortModel.indexOf(autoGroupSortModel);\n            ag_grid_community__WEBPACK_IMPORTED_MODULE_0__._.removeFromArray(sortModel, autoGroupSortModel);\n            const isNotInSortModel = (col) => sortModel.filter(sm => sm.colId === col.getColId()).length == 0;\n            const mapColumnToSortModel = (col) => ({ colId: col.getId(), sort: autoGroupSortModel.sort });\n            const newModels = this.columnModel.getRowGroupColumns()\n                .filter(isNotInSortModel)\n                .map(mapColumnToSortModel);\n            ag_grid_community__WEBPACK_IMPORTED_MODULE_0__._.insertArrayIntoArray(sortModel, newModels, autoGroupIndex);\n        }\n    }\n    onSortChanged() {\n        const storeParams = this.serverSideRowModel.getParams();\n        if (!storeParams) {\n            return;\n        } // params is undefined if no datasource set\n        const newSortModel = this.extractSortModel();\n        const oldSortModel = storeParams.sortModel;\n        const changedColumns = this.findChangedColumnsInSort(newSortModel, oldSortModel);\n        const valueColChanged = this.listenerUtils.isSortingWithValueColumn(changedColumns);\n        const secondaryColChanged = this.listenerUtils.isSortingWithSecondaryColumn(changedColumns);\n        const params = {\n            valueColChanged,\n            secondaryColChanged,\n            changedColumns\n        };\n        this.serverSideRowModel.refreshAfterSort(newSortModel, params);\n    }\n    // returns back all the cols that were effected by the sorting. eg if we were sorting by col A,\n    // and now we are sorting by col B, the list of impacted cols should be A and B. so if a cache\n    // is impacted by sorting on A or B then it needs to be refreshed. this includes where the cache\n    // was previously sorted by A and then the A sort now needs to be cleared.\n    findChangedColumnsInSort(newSortModel, oldSortModel) {\n        let allColsInBothSorts = [];\n        [newSortModel, oldSortModel].forEach(sortModel => {\n            if (sortModel) {\n                const ids = sortModel.map(sm => sm.colId);\n                allColsInBothSorts = allColsInBothSorts.concat(ids);\n            }\n        });\n        const differentSorts = (oldSortItem, newSortItem) => {\n            const oldSort = oldSortItem ? oldSortItem.sort : null;\n            const newSort = newSortItem ? newSortItem.sort : null;\n            return oldSort !== newSort;\n        };\n        const differentIndexes = (oldSortItem, newSortItem) => {\n            const oldIndex = oldSortItem ? oldSortModel.indexOf(oldSortItem) : -1;\n            const newIndex = newSortItem ? newSortModel.indexOf(newSortItem) : -1;\n            return oldIndex !== newIndex;\n        };\n        return allColsInBothSorts.filter(colId => {\n            const oldSortItem = oldSortModel.find(sm => sm.colId === colId);\n            const newSortItem = newSortModel.find(sm => sm.colId === colId);\n            return differentSorts(oldSortItem, newSortItem) || differentIndexes(oldSortItem, newSortItem);\n        });\n    }\n};\n__decorate$k([\n    (0,ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.Autowired)('sortController')\n], SortListener.prototype, \"sortController\", void 0);\n__decorate$k([\n    (0,ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.Autowired)('columnModel')\n], SortListener.prototype, \"columnModel\", void 0);\n__decorate$k([\n    (0,ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.Autowired)('rowModel')\n], SortListener.prototype, \"serverSideRowModel\", void 0);\n__decorate$k([\n    (0,ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.Autowired)('ssrmListenerUtils')\n], SortListener.prototype, \"listenerUtils\", void 0);\n__decorate$k([\n    ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.PostConstruct\n], SortListener.prototype, \"postConstruct\", null);\nSortListener = __decorate$k([\n    (0,ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.Bean)('ssrmSortService')\n], SortListener);\n\nvar __decorate$j = ( false) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nlet FilterListener = class FilterListener extends ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.BeanStub {\n    postConstruct() {\n        // only want to be active if SSRM active, otherwise would be interfering with other row models\n        if (!this.gridOptionsService.isRowModelType('serverSide')) {\n            return;\n        }\n        this.addManagedListener(this.eventService, ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.Events.EVENT_FILTER_CHANGED, this.onFilterChanged.bind(this));\n    }\n    onFilterChanged() {\n        const storeParams = this.serverSideRowModel.getParams();\n        if (!storeParams) {\n            return;\n        } // params is undefined if no datasource set\n        const newModel = this.filterManager.getFilterModel();\n        const oldModel = storeParams ? storeParams.filterModel : {};\n        const changedColumns = this.findChangedColumns(newModel, oldModel);\n        const valueColChanged = this.listenerUtils.isSortingWithValueColumn(changedColumns);\n        const secondaryColChanged = this.listenerUtils.isSortingWithSecondaryColumn(changedColumns);\n        const params = {\n            valueColChanged,\n            secondaryColChanged,\n            changedColumns\n        };\n        this.serverSideRowModel.refreshAfterFilter(newModel, params);\n    }\n    findChangedColumns(oldModel, newModel) {\n        const allColKeysMap = {};\n        Object.keys(oldModel).forEach(key => allColKeysMap[key] = true);\n        Object.keys(newModel).forEach(key => allColKeysMap[key] = true);\n        const res = [];\n        Object.keys(allColKeysMap).forEach(key => {\n            const oldJson = JSON.stringify(oldModel[key]);\n            const newJson = JSON.stringify(newModel[key]);\n            const filterChanged = oldJson != newJson;\n            if (filterChanged) {\n                res.push(key);\n            }\n        });\n        return res;\n    }\n};\n__decorate$j([\n    (0,ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.Autowired)('rowModel')\n], FilterListener.prototype, \"serverSideRowModel\", void 0);\n__decorate$j([\n    (0,ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.Autowired)('filterManager')\n], FilterListener.prototype, \"filterManager\", void 0);\n__decorate$j([\n    (0,ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.Autowired)('ssrmListenerUtils')\n], FilterListener.prototype, \"listenerUtils\", void 0);\n__decorate$j([\n    ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.PostConstruct\n], FilterListener.prototype, \"postConstruct\", null);\nFilterListener = __decorate$j([\n    (0,ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.Bean)('ssrmFilterListener')\n], FilterListener);\n\nvar __decorate$i = ( false) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nlet StoreFactory = class StoreFactory {\n    createStore(ssrmParams, parentNode) {\n        const storeParams = this.getStoreParams(ssrmParams, parentNode);\n        const CacheClass = storeParams.suppressInfiniteScroll ? FullStore : LazyStore;\n        return new CacheClass(ssrmParams, storeParams, parentNode);\n    }\n    getStoreParams(ssrmParams, parentNode) {\n        const userStoreParams = this.getLevelSpecificParams(parentNode);\n        // if user provided overrideParams, we take infiniteScroll from there if it exists\n        const infiniteScroll = this.isInfiniteScroll(userStoreParams);\n        const cacheBlockSize = this.getBlockSize(infiniteScroll, userStoreParams);\n        const maxBlocksInCache = this.getMaxBlocksInCache(infiniteScroll, ssrmParams, userStoreParams);\n        const storeParams = {\n            suppressInfiniteScroll: !infiniteScroll,\n            cacheBlockSize,\n            maxBlocksInCache\n        };\n        return storeParams;\n    }\n    getMaxBlocksInCache(infiniteScroll, ssrmParams, userStoreParams) {\n        if (!infiniteScroll) {\n            return undefined;\n        }\n        const maxBlocksInCache = (userStoreParams && userStoreParams.maxBlocksInCache != null)\n            ? userStoreParams.maxBlocksInCache\n            : this.gridOptionsService.getNum('maxBlocksInCache');\n        const maxBlocksActive = maxBlocksInCache != null && maxBlocksInCache >= 0;\n        if (!maxBlocksActive) {\n            return undefined;\n        }\n        if (ssrmParams.dynamicRowHeight) {\n            const message = 'AG Grid: Server Side Row Model does not support Dynamic Row Height and Cache Purging. ' +\n                'Either a) remove getRowHeight() callback or b) remove maxBlocksInCache property. Purging has been disabled.';\n            ag_grid_community__WEBPACK_IMPORTED_MODULE_0__._.doOnce(() => console.warn(message), 'storeFactory.maxBlocksInCache.dynamicRowHeight');\n            return undefined;\n        }\n        if (this.columnModel.isAutoRowHeightActive()) {\n            const message = 'AG Grid: Server Side Row Model does not support Auto Row Height and Cache Purging. ' +\n                'Either a) remove colDef.autoHeight or b) remove maxBlocksInCache property. Purging has been disabled.';\n            ag_grid_community__WEBPACK_IMPORTED_MODULE_0__._.doOnce(() => console.warn(message), 'storeFactory.maxBlocksInCache.autoRowHeightActive');\n            return undefined;\n        }\n        return maxBlocksInCache;\n    }\n    getBlockSize(infiniteScroll, userStoreParams) {\n        if (!infiniteScroll) {\n            return undefined;\n        }\n        const blockSize = (userStoreParams && userStoreParams.cacheBlockSize != null)\n            ? userStoreParams.cacheBlockSize\n            : this.gridOptionsService.getNum('cacheBlockSize');\n        if (blockSize != null && blockSize > 0) {\n            return blockSize;\n        }\n        else {\n            return 100;\n        }\n    }\n    getLevelSpecificParams(parentNode) {\n        const callback = this.gridOptionsService.getCallback('getServerSideGroupLevelParams');\n        if (!callback) {\n            return undefined;\n        }\n        const params = {\n            level: parentNode.level + 1,\n            parentRowNode: parentNode.level >= 0 ? parentNode : undefined,\n            rowGroupColumns: this.columnModel.getRowGroupColumns(),\n            pivotColumns: this.columnModel.getPivotColumns(),\n            pivotMode: this.columnModel.isPivotMode()\n        };\n        const res = callback(params);\n        if (res.storeType != null) {\n            res.suppressInfiniteScroll = res.storeType !== \"partial\";\n        }\n        return res;\n    }\n    isInfiniteScroll(storeParams) {\n        const res = (storeParams && storeParams.suppressInfiniteScroll != null)\n            ? storeParams.suppressInfiniteScroll\n            : this.isSuppressServerSideInfiniteScroll();\n        return !res;\n    }\n    isSuppressServerSideInfiniteScroll() {\n        return this.gridOptionsService.is('suppressServerSideInfiniteScroll');\n    }\n};\n__decorate$i([\n    (0,ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.Autowired)('gridOptionsService')\n], StoreFactory.prototype, \"gridOptionsService\", void 0);\n__decorate$i([\n    (0,ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.Autowired)('columnModel')\n], StoreFactory.prototype, \"columnModel\", void 0);\nStoreFactory = __decorate$i([\n    (0,ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.Bean)('ssrmStoreFactory')\n], StoreFactory);\n\nvar __decorate$h = ( false) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nlet ListenerUtils = class ListenerUtils {\n    isSortingWithValueColumn(changedColumnsInSort) {\n        const valueColIds = this.columnModel.getValueColumns().map(col => col.getColId());\n        for (let i = 0; i < changedColumnsInSort.length; i++) {\n            if (valueColIds.indexOf(changedColumnsInSort[i]) > -1) {\n                return true;\n            }\n        }\n        return false;\n    }\n    isSortingWithSecondaryColumn(changedColumnsInSort) {\n        if (!this.columnModel.getSecondaryColumns()) {\n            return false;\n        }\n        const secondaryColIds = this.columnModel.getSecondaryColumns().map(col => col.getColId());\n        for (let i = 0; i < changedColumnsInSort.length; i++) {\n            if (secondaryColIds.indexOf(changedColumnsInSort[i]) > -1) {\n                return true;\n            }\n        }\n        return false;\n    }\n};\n__decorate$h([\n    (0,ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.Autowired)('columnModel')\n], ListenerUtils.prototype, \"columnModel\", void 0);\nListenerUtils = __decorate$h([\n    (0,ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.Bean)('ssrmListenerUtils')\n], ListenerUtils);\n\nvar __decorate$g = ( false) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nclass DefaultStrategy extends ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.BeanStub {\n    constructor() {\n        super(...arguments);\n        this.selectedState = { selectAll: false, toggledNodes: new Set() };\n        this.lastSelected = null;\n        this.selectAllUsed = false;\n        // this is to prevent regressions, default selectionService retains reference of clicked nodes.\n        this.selectedNodes = {};\n    }\n    init() {\n        this.rowSelection = this.gridOptionsService.get('rowSelection');\n        this.addManagedPropertyListener('rowSelection', (propChange) => {\n            this.rowSelection = propChange.currentValue;\n        });\n    }\n    getSelectedState() {\n        return {\n            selectAll: this.selectedState.selectAll,\n            toggledNodes: [...this.selectedState.toggledNodes],\n        };\n    }\n    setSelectedState(state) {\n        // fire selection changed event\n        const newState = {\n            selectAll: false,\n            toggledNodes: new Set(),\n        };\n        if (typeof state !== 'object') {\n            console.error('AG Grid: The provided selection state should be an object.');\n            return;\n        }\n        if ('selectAll' in state && typeof state.selectAll === 'boolean') {\n            newState.selectAll = state.selectAll;\n        }\n        else {\n            console.error('AG Grid: Select all status should be of boolean type.');\n            return;\n        }\n        if ('toggledNodes' in state && Array.isArray(state.toggledNodes)) {\n            state.toggledNodes.forEach((key) => {\n                if (typeof key === 'string') {\n                    newState.toggledNodes.add(key);\n                }\n                else {\n                    console.warn(`AG Grid: Provided ids must be of string type. Invalid id provided: ${key}`);\n                }\n            });\n        }\n        else {\n            console.error('AG Grid: `toggledNodes` must be an array of string ids.');\n            return;\n        }\n        this.selectedState = newState;\n    }\n    deleteSelectionStateFromParent(parentPath, removedNodeIds) {\n        if (this.selectedState.toggledNodes.size === 0) {\n            return false;\n        }\n        let anyNodesToggled = false;\n        removedNodeIds.forEach(id => {\n            if (this.selectedState.toggledNodes.delete(id)) {\n                anyNodesToggled = true;\n            }\n        });\n        return anyNodesToggled;\n    }\n    setNodesSelected(params) {\n        if (params.nodes.length === 0)\n            return 0;\n        const onlyThisNode = params.clearSelection && params.newValue && !params.rangeSelect;\n        if (this.rowSelection !== 'multiple' || onlyThisNode) {\n            if (params.nodes.length > 1) {\n                throw new Error('AG Grid: cannot select multiple rows when rowSelection is set to \\'single\\'');\n            }\n            const node = params.nodes[0];\n            if (params.newValue) {\n                this.selectedNodes = { [node.id]: node };\n                this.selectedState = {\n                    selectAll: false,\n                    toggledNodes: new Set([node.id]),\n                };\n            }\n            else {\n                this.selectedNodes = {};\n                this.selectedState = {\n                    selectAll: false,\n                    toggledNodes: new Set(),\n                };\n            }\n            this.lastSelected = node.id;\n            return 1;\n        }\n        const updateNodeState = (node) => {\n            if (params.newValue) {\n                this.selectedNodes[node.id] = node;\n            }\n            else {\n                delete this.selectedNodes[node.id];\n            }\n            const doesNodeConform = params.newValue === this.selectedState.selectAll;\n            if (doesNodeConform) {\n                this.selectedState.toggledNodes.delete(node.id);\n                return;\n            }\n            this.selectedState.toggledNodes.add(node.id);\n        };\n        if (params.rangeSelect && this.lastSelected) {\n            if (params.nodes.length > 1) {\n                throw new Error('AG Grid: cannot select multiple rows when using rangeSelect');\n            }\n            const node = params.nodes[0];\n            const lastSelectedNode = this.rowModel.getRowNode(this.lastSelected);\n            this.rowModel.getNodesInRangeForSelection(node, lastSelectedNode !== null && lastSelectedNode !== void 0 ? lastSelectedNode : null).forEach(updateNodeState);\n            this.lastSelected = node.id;\n            return 1;\n        }\n        params.nodes.forEach(updateNodeState);\n        this.lastSelected = params.nodes[params.nodes.length - 1].id;\n        return 1;\n    }\n    processNewRow(node) {\n        if (this.selectedNodes[node.id]) {\n            this.selectedNodes[node.id] = node;\n        }\n    }\n    isNodeSelected(node) {\n        const isToggled = this.selectedState.toggledNodes.has(node.id);\n        return this.selectedState.selectAll ? !isToggled : isToggled;\n    }\n    getSelectedNodes() {\n        if (this.selectAllUsed) {\n            console.warn(`AG Grid: getSelectedNodes and getSelectedRows functions cannot be used with select all functionality with the server-side row model.\n                Use \\`api.getServerSideSelectionState()\\` instead.`);\n        }\n        return Object.values(this.selectedNodes);\n    }\n    getSelectedRows() {\n        return this.getSelectedNodes().map(node => node.data);\n    }\n    getSelectionCount() {\n        if (this.selectedState.selectAll) {\n            return -1;\n        }\n        return this.selectedState.toggledNodes.size;\n    }\n    clearOtherNodes(rowNodeToKeepSelected, source) {\n        const clearedRows = this.selectedState.selectAll ? 1 : this.selectedState.toggledNodes.size - 1;\n        this.selectedState = {\n            selectAll: false,\n            toggledNodes: new Set([rowNodeToKeepSelected.id]),\n        };\n        this.rowModel.forEachNode(node => {\n            if (node !== rowNodeToKeepSelected) {\n                node.selectThisNode(false, undefined, source);\n            }\n        });\n        const event = {\n            type: ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.Events.EVENT_SELECTION_CHANGED,\n            source,\n        };\n        this.eventService.dispatchEvent(event);\n        return clearedRows;\n    }\n    isEmpty() {\n        var _a;\n        return !this.selectedState.selectAll && !((_a = this.selectedState.toggledNodes) === null || _a === void 0 ? void 0 : _a.size);\n    }\n    selectAllRowNodes(params) {\n        this.selectedState = { selectAll: true, toggledNodes: new Set() };\n        this.selectedNodes = {};\n        this.selectAllUsed = true;\n    }\n    deselectAllRowNodes(params) {\n        this.selectedState = { selectAll: false, toggledNodes: new Set() };\n        this.selectedNodes = {};\n    }\n    getSelectAllState(justFiltered, justCurrentPage) {\n        if (this.selectedState.selectAll) {\n            if (this.selectedState.toggledNodes.size > 0) {\n                return null;\n            }\n            return true;\n        }\n        if (this.selectedState.toggledNodes.size > 0) {\n            return null;\n        }\n        return false;\n    }\n}\n__decorate$g([\n    (0,ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.Autowired)('rowModel')\n], DefaultStrategy.prototype, \"rowModel\", void 0);\n__decorate$g([\n    ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.PostConstruct\n], DefaultStrategy.prototype, \"init\", null);\n\nvar __decorate$f = ( false) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nvar __rest = ( false) || function (s, e) {\n    var t = {};\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\n        t[p] = s[p];\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\n                t[p[i]] = s[p[i]];\n        }\n    return t;\n};\nclass GroupSelectsChildrenStrategy extends ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.BeanStub {\n    constructor() {\n        super(...arguments);\n        this.selectedState = { selectAllChildren: false, toggledNodes: new Map() };\n        this.lastSelected = null;\n    }\n    init() {\n        // if model has updated, a store may now be fully loaded to clean up indeterminate states\n        this.addManagedListener(this.eventService, ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.Events.EVENT_MODEL_UPDATED, () => this.removeRedundantState());\n        // when the grouping changes, the state no longer makes sense, so reset the state.\n        this.addManagedListener(this.eventService, ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.Events.EVENT_COLUMN_ROW_GROUP_CHANGED, () => this.selectionService.reset());\n    }\n    getSelectedState() {\n        const recursivelySerializeState = (state, level, nodeId) => {\n            const normalisedState = {\n                nodeId,\n            };\n            if (level <= this.columnModel.getRowGroupColumns().length) {\n                normalisedState.selectAllChildren = state.selectAllChildren;\n            }\n            // omit toggledNodes if empty\n            if (state.toggledNodes.size) {\n                const toggledNodes = [];\n                state.toggledNodes.forEach((value, key) => {\n                    const newState = recursivelySerializeState(value, level + 1, key);\n                    toggledNodes.push(newState);\n                });\n                normalisedState.toggledNodes = toggledNodes;\n            }\n            return normalisedState;\n        };\n        return recursivelySerializeState(this.selectedState, 0);\n    }\n    setSelectedState(state) {\n        const recursivelyDeserializeState = (normalisedState, parentSelected) => {\n            var _a, _b;\n            if (typeof normalisedState !== 'object') {\n                throw new Error('AG Grid: Each provided state object must be an object.');\n            }\n            if ('selectAllChildren' in normalisedState && typeof normalisedState.selectAllChildren !== 'boolean') {\n                throw new Error('AG Grid: `selectAllChildren` must be a boolean value or undefined.');\n            }\n            if ('toggledNodes' in normalisedState) {\n                if (!Array.isArray(normalisedState.toggledNodes)) {\n                    throw new Error('AG Grid: `toggledNodes` must be an array.');\n                }\n                const allHaveIds = normalisedState.toggledNodes.every(innerState => (typeof innerState === 'object' && 'nodeId' in innerState && typeof innerState.nodeId === 'string'));\n                if (!allHaveIds) {\n                    throw new Error('AG Grid: Every `toggledNode` requires an associated string id.');\n                }\n            }\n            const isThisNodeSelected = (_a = normalisedState.selectAllChildren) !== null && _a !== void 0 ? _a : !parentSelected;\n            const convertedChildren = (_b = normalisedState.toggledNodes) === null || _b === void 0 ? void 0 : _b.map(innerState => ([innerState.nodeId, recursivelyDeserializeState(innerState, isThisNodeSelected)]));\n            const doesRedundantStateExist = convertedChildren === null || convertedChildren === void 0 ? void 0 : convertedChildren.some(([_, innerState]) => isThisNodeSelected === innerState.selectAllChildren && innerState.toggledNodes.size === 0);\n            if (doesRedundantStateExist) {\n                throw new Error(`\n                    AG Grid: AG Grid: Row selection state could not be parsed due to invalid data. Ensure all child state has toggledNodes or does not conform with the parent rule.\n                    Please rebuild the selection state and reapply it.\n                `);\n            }\n            return {\n                selectAllChildren: isThisNodeSelected,\n                toggledNodes: new Map(convertedChildren),\n            };\n        };\n        try {\n            this.selectedState = recursivelyDeserializeState(state, !!state.selectAllChildren);\n        }\n        catch (e) {\n            console.error(e.message);\n        }\n    }\n    deleteSelectionStateFromParent(parentRoute, removedNodeIds) {\n        let parentState = this.selectedState;\n        const remainingRoute = [...parentRoute];\n        while (parentState && remainingRoute.length) {\n            parentState = parentState.toggledNodes.get(remainingRoute.pop());\n        }\n        // parent has no explicit state, nothing to remove\n        if (!parentState) {\n            return false;\n        }\n        let anyStateChanged = false;\n        removedNodeIds.forEach(id => {\n            if (parentState === null || parentState === void 0 ? void 0 : parentState.toggledNodes.delete(id)) {\n                anyStateChanged = true;\n            }\n        });\n        if (anyStateChanged) {\n            this.removeRedundantState();\n        }\n        return anyStateChanged;\n    }\n    setNodesSelected(params) {\n        const { nodes } = params, other = __rest(params, [\"nodes\"]);\n        if (nodes.length === 0)\n            return 0;\n        if (params.rangeSelect) {\n            if (nodes.length > 1) {\n                throw new Error('AG Grid: cannot select multiple rows when using rangeSelect');\n            }\n            const node = nodes[0];\n            const rangeOfNodes = this.rowModel.getNodesInRangeForSelection(node, this.lastSelected);\n            // sort the routes by route length, high to low, this means we can do the lowest level children first\n            const routes = rangeOfNodes.map(this.getRouteToNode).sort((a, b) => b.length - a.length);\n            // skip routes if we've already done a descendent\n            const completedRoutes = new Set();\n            routes.forEach(route => {\n                // skip routes if we've already selected a descendent\n                if (completedRoutes.has(route[route.length - 1])) {\n                    return;\n                }\n                route.forEach(part => completedRoutes.add(part));\n                this.recursivelySelectNode(route, this.selectedState, Object.assign({ node }, other));\n            });\n            this.removeRedundantState();\n            this.lastSelected = node;\n            return 1;\n        }\n        params.nodes.forEach(node => {\n            const idPathToNode = this.getRouteToNode(node);\n            this.recursivelySelectNode(idPathToNode, this.selectedState, Object.assign(Object.assign({}, other), { node }));\n        });\n        this.removeRedundantState();\n        this.lastSelected = params.nodes[params.nodes.length - 1];\n        return 1;\n    }\n    isNodeSelected(node) {\n        const path = this.getRouteToNode(node);\n        return this.isNodePathSelected(path, this.selectedState);\n    }\n    isNodePathSelected([nextNode, ...nodes], state) {\n        if (nodes.length === 0) {\n            const isToggled = state.toggledNodes.has(nextNode.id);\n            if (nextNode.hasChildren()) {\n                const groupState = state.toggledNodes.get(nextNode.id);\n                if (groupState && groupState.toggledNodes.size) {\n                    return undefined;\n                }\n            }\n            return state.selectAllChildren ? !isToggled : isToggled;\n        }\n        // if there's a deeper level, check recursively\n        if (state.toggledNodes.has(nextNode.id)) {\n            const nextState = state.toggledNodes.get(nextNode.id);\n            if (nextState) {\n                return this.isNodePathSelected(nodes, nextState);\n            }\n        }\n        // no deeper custom state, respect the closest default\n        return !!state.selectAllChildren;\n    }\n    getRouteToNode(node) {\n        const pathToNode = [];\n        let tempNode = node;\n        while (tempNode.parent) {\n            pathToNode.push(tempNode);\n            tempNode = tempNode.parent;\n        }\n        return pathToNode.reverse();\n    }\n    removeRedundantState() {\n        if (this.filterManager.isAnyFilterPresent()) {\n            return;\n        }\n        const recursivelyRemoveState = (selectedState = this.selectedState, store = this.serverSideRowModel.getRootStore(), node) => {\n            let allChildNodesFound = true;\n            let noIndeterminateChildren = true;\n            selectedState.toggledNodes.forEach((state, id) => {\n                const parentNode = this.rowModel.getRowNode(id);\n                if (!parentNode) {\n                    allChildNodesFound = false;\n                }\n                const nextStore = parentNode === null || parentNode === void 0 ? void 0 : parentNode.childStore;\n                if (!nextStore) {\n                    if (state.toggledNodes.size > 0) {\n                        noIndeterminateChildren = false;\n                    }\n                    return;\n                }\n                // if child was cleared, check if this state is still relevant\n                if (recursivelyRemoveState(state, nextStore, parentNode)) {\n                    // cleans out groups which have no toggled nodes and an equivalent default to its parent\n                    if (selectedState.selectAllChildren === state.selectAllChildren) {\n                        selectedState.toggledNodes.delete(id);\n                    }\n                }\n                if (state.toggledNodes.size > 0) {\n                    noIndeterminateChildren = false;\n                }\n            });\n            if (!store || !store.isLastRowIndexKnown() || store.getRowCount() !== selectedState.toggledNodes.size) {\n                // if row count unknown, or doesn't match the size of toggledNodes, ignore.\n                return false;\n            }\n            if (noIndeterminateChildren && allChildNodesFound) {\n                selectedState.toggledNodes.clear();\n                selectedState.selectAllChildren = !selectedState.selectAllChildren;\n                // if node was indeterminate, it's not any more.\n                if (node && (node === null || node === void 0 ? void 0 : node.isSelected()) !== selectedState.selectAllChildren) {\n                    node.selectThisNode(selectedState.selectAllChildren, undefined, 'api');\n                }\n                return true;\n            }\n            return false;\n        };\n        recursivelyRemoveState();\n    }\n    recursivelySelectNode([nextNode, ...nodes], selectedState, params) {\n        if (!nextNode) {\n            return;\n        }\n        // if this is the last node, hard add/remove based on its selectAllChildren state\n        const isLastNode = !nodes.length;\n        if (isLastNode) {\n            const needsDeleted = selectedState.selectAllChildren === params.newValue;\n            if (needsDeleted) {\n                selectedState.toggledNodes.delete(nextNode.id);\n                return;\n            }\n            const newState = {\n                selectAllChildren: params.newValue,\n                toggledNodes: new Map(),\n            };\n            selectedState.toggledNodes.set(nextNode.id, newState);\n            return;\n        }\n        const doesStateAlreadyExist = selectedState.toggledNodes.has(nextNode.id);\n        const childState = doesStateAlreadyExist ? (selectedState.toggledNodes.get(nextNode.id)) : {\n            selectAllChildren: selectedState.selectAllChildren,\n            toggledNodes: new Map(),\n        };\n        if (!doesStateAlreadyExist) {\n            selectedState.toggledNodes.set(nextNode.id, childState);\n        }\n        this.recursivelySelectNode(nodes, childState, params);\n        // cleans out groups which have no toggled nodes and an equivalent default to its parent\n        if (selectedState.selectAllChildren === childState.selectAllChildren && childState.toggledNodes.size === 0) {\n            selectedState.toggledNodes.delete(nextNode.id);\n        }\n    }\n    getSelectedNodes() {\n        console.warn(`AG Grid: \\`getSelectedNodes\\` and \\`getSelectedRows\\` functions cannot be used with \\`groupSelectsChildren\\` and the server-side row model.\n            Use \\`api.getServerSideSelectionState()\\` instead.`);\n        const selectedNodes = [];\n        this.rowModel.forEachNode(node => {\n            if (node.isSelected()) {\n                selectedNodes.push(node);\n            }\n        });\n        return selectedNodes;\n    }\n    processNewRow(node) {\n        // This is used for updating outdated node refs, as this model entirely uses ids it's irrelevant\n    }\n    getSelectedRows() {\n        return this.getSelectedNodes().map(node => node.data);\n    }\n    getSelectionCount() {\n        return -1;\n    }\n    isEmpty() {\n        var _a;\n        return !this.selectedState.selectAllChildren && !((_a = this.selectedState.toggledNodes) === null || _a === void 0 ? void 0 : _a.size);\n    }\n    selectAllRowNodes(params) {\n        this.selectedState = { selectAllChildren: true, toggledNodes: new Map() };\n    }\n    deselectAllRowNodes(params) {\n        this.selectedState = { selectAllChildren: false, toggledNodes: new Map() };\n    }\n    getSelectAllState(justFiltered, justCurrentPage) {\n        if (this.selectedState.selectAllChildren) {\n            if (this.selectedState.toggledNodes.size > 0) {\n                return null;\n            }\n            return true;\n        }\n        if (this.selectedState.toggledNodes.size > 0) {\n            return null;\n        }\n        return false;\n    }\n}\n__decorate$f([\n    (0,ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.Autowired)('rowModel')\n], GroupSelectsChildrenStrategy.prototype, \"rowModel\", void 0);\n__decorate$f([\n    (0,ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.Autowired)('columnModel')\n], GroupSelectsChildrenStrategy.prototype, \"columnModel\", void 0);\n__decorate$f([\n    (0,ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.Autowired)('filterManager')\n], GroupSelectsChildrenStrategy.prototype, \"filterManager\", void 0);\n__decorate$f([\n    (0,ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.Autowired)('rowModel')\n], GroupSelectsChildrenStrategy.prototype, \"serverSideRowModel\", void 0);\n__decorate$f([\n    (0,ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.Autowired)('selectionService')\n], GroupSelectsChildrenStrategy.prototype, \"selectionService\", void 0);\n__decorate$f([\n    ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.PostConstruct\n], GroupSelectsChildrenStrategy.prototype, \"init\", null);\n\nvar __decorate$e = ( false) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nlet ServerSideSelectionService = class ServerSideSelectionService extends ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.BeanStub {\n    init() {\n        const groupSelectsChildren = this.gridOptionsService.is('groupSelectsChildren');\n        this.addManagedPropertyListener('groupSelectsChildren', (propChange) => {\n            this.destroyBean(this.selectionStrategy);\n            const StrategyClazz = !propChange.currentValue ? DefaultStrategy : GroupSelectsChildrenStrategy;\n            this.selectionStrategy = this.createManagedBean(new StrategyClazz());\n            this.shotgunResetNodeSelectionState();\n            const event = {\n                type: ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.Events.EVENT_SELECTION_CHANGED,\n                source: 'api',\n            };\n            this.eventService.dispatchEvent(event);\n        });\n        this.rowSelection = this.gridOptionsService.get('rowSelection');\n        this.addManagedPropertyListener('rowSelection', (propChange) => this.rowSelection = propChange.currentValue);\n        const StrategyClazz = !groupSelectsChildren ? DefaultStrategy : GroupSelectsChildrenStrategy;\n        this.selectionStrategy = this.createManagedBean(new StrategyClazz());\n    }\n    getServerSideSelectionState() {\n        return this.selectionStrategy.getSelectedState();\n    }\n    setServerSideSelectionState(state) {\n        this.selectionStrategy.setSelectedState(state);\n        this.shotgunResetNodeSelectionState();\n        const event = {\n            type: ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.Events.EVENT_SELECTION_CHANGED,\n            source: 'api',\n        };\n        this.eventService.dispatchEvent(event);\n    }\n    setNodesSelected(params) {\n        if (params.nodes.length > 1 && this.rowSelection !== 'multiple') {\n            console.warn(`AG Grid: cannot multi select while rowSelection='single'`);\n            return 0;\n        }\n        if (params.nodes.length > 1 && params.rangeSelect) {\n            console.warn(`AG Grid: cannot use range selection when multi selecting rows`);\n            return 0;\n        }\n        const changedNodes = this.selectionStrategy.setNodesSelected(params);\n        this.shotgunResetNodeSelectionState(params.source);\n        const event = {\n            type: ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.Events.EVENT_SELECTION_CHANGED,\n            source: params.source,\n        };\n        this.eventService.dispatchEvent(event);\n        return changedNodes;\n    }\n    /**\n     * Deletes the selection state for a set of nodes, for use after deleting nodes via\n     * transaction. As this is designed for transactions, all nodes should belong to the same group.\n     */\n    deleteSelectionStateFromParent(storeRoute, removedNodeIds) {\n        const stateChanged = this.selectionStrategy.deleteSelectionStateFromParent(storeRoute, removedNodeIds);\n        if (!stateChanged) {\n            return;\n        }\n        this.shotgunResetNodeSelectionState();\n        const event = {\n            type: ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.Events.EVENT_SELECTION_CHANGED,\n            source: 'api',\n        };\n        this.eventService.dispatchEvent(event);\n    }\n    shotgunResetNodeSelectionState(source) {\n        this.rowModel.forEachNode(node => {\n            if (node.stub) {\n                return;\n            }\n            const isNodeSelected = this.selectionStrategy.isNodeSelected(node);\n            if (isNodeSelected !== node.isSelected()) {\n                node.selectThisNode(isNodeSelected, undefined, source);\n            }\n        });\n    }\n    getSelectedNodes() {\n        return this.selectionStrategy.getSelectedNodes();\n    }\n    getSelectedRows() {\n        return this.selectionStrategy.getSelectedRows();\n    }\n    getSelectionCount() {\n        return this.selectionStrategy.getSelectionCount();\n    }\n    syncInRowNode(rowNode, oldNode) {\n        // update any refs being held in the strategies\n        this.selectionStrategy.processNewRow(rowNode);\n        const isNodeSelected = this.selectionStrategy.isNodeSelected(rowNode);\n        rowNode.setSelectedInitialValue(isNodeSelected);\n    }\n    reset() {\n        this.selectionStrategy.deselectAllRowNodes({ source: 'api' });\n    }\n    isEmpty() {\n        return this.selectionStrategy.isEmpty();\n    }\n    selectAllRowNodes(params) {\n        if (params.justCurrentPage || params.justFiltered) {\n            console.warn(\"AG Grid: selecting just filtered only works when gridOptions.rowModelType='clientSide'\");\n        }\n        this.selectionStrategy.selectAllRowNodes(params);\n        this.rowModel.forEachNode(node => {\n            if (node.stub) {\n                return;\n            }\n            node.selectThisNode(true, undefined, params.source);\n        });\n        const event = {\n            type: ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.Events.EVENT_SELECTION_CHANGED,\n            source: params.source,\n        };\n        this.eventService.dispatchEvent(event);\n    }\n    deselectAllRowNodes(params) {\n        if (params.justCurrentPage || params.justFiltered) {\n            console.warn(\"AG Grid: selecting just filtered only works when gridOptions.rowModelType='clientSide'\");\n        }\n        this.selectionStrategy.deselectAllRowNodes(params);\n        this.rowModel.forEachNode(node => {\n            if (node.stub) {\n                return;\n            }\n            node.selectThisNode(false, undefined, params.source);\n        });\n        const event = {\n            type: ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.Events.EVENT_SELECTION_CHANGED,\n            source: params.source,\n        };\n        this.eventService.dispatchEvent(event);\n    }\n    getSelectAllState(justFiltered, justCurrentPage) {\n        return this.selectionStrategy.getSelectAllState(justFiltered, justCurrentPage);\n    }\n    // used by CSRM\n    updateGroupsFromChildrenSelections(source, changedPath) {\n        return false;\n    }\n    // used by CSRM\n    getBestCostNodeSelection() {\n        console.warn('AG Grid: calling gridApi.getBestCostNodeSelection() is only possible when using rowModelType=`clientSide`.');\n        return undefined;\n    }\n    // used by CSRM\n    filterFromSelection() {\n        return;\n    }\n};\n__decorate$e([\n    (0,ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.Autowired)('rowModel')\n], ServerSideSelectionService.prototype, \"rowModel\", void 0);\n__decorate$e([\n    ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.PostConstruct\n], ServerSideSelectionService.prototype, \"init\", null);\nServerSideSelectionService = __decorate$e([\n    (0,ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.Bean)('selectionService')\n], ServerSideSelectionService);\n\n// DO NOT UPDATE MANUALLY: Generated from script during build time\nconst VERSION$4 = '30.0.2';\n\nconst ServerSideRowModelModule = {\n    version: VERSION$4,\n    moduleName: ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.ModuleNames.ServerSideRowModelModule,\n    rowModel: 'serverSide',\n    beans: [ServerSideRowModel, ExpandListener, SortListener, StoreUtils, BlockUtils, NodeManager, TransactionManager,\n        FilterListener, StoreFactory, ListenerUtils, ServerSideSelectionService],\n    dependantModules: [\n        EnterpriseCoreModule\n    ]\n};\n\n/** @param V type of value in the Set Filter */\nclass ClientSideValuesExtractor {\n    constructor(rowModel, filterParams, createKey, caseFormat, columnModel, valueService, treeDataOrGrouping, treeData, getDataPath) {\n        this.rowModel = rowModel;\n        this.filterParams = filterParams;\n        this.createKey = createKey;\n        this.caseFormat = caseFormat;\n        this.columnModel = columnModel;\n        this.valueService = valueService;\n        this.treeDataOrGrouping = treeDataOrGrouping;\n        this.treeData = treeData;\n        this.getDataPath = getDataPath;\n    }\n    extractUniqueValues(predicate, existingValues) {\n        const values = new Map();\n        const existingFormattedKeys = this.extractExistingFormattedKeys(existingValues);\n        const formattedKeys = new Set();\n        const treeData = this.treeData && !!this.getDataPath;\n        const groupedCols = this.columnModel.getRowGroupColumns();\n        const addValue = (unformattedKey, value) => {\n            const formattedKey = this.caseFormat(unformattedKey);\n            if (!formattedKeys.has(formattedKey)) {\n                formattedKeys.add(formattedKey);\n                let keyToAdd = unformattedKey;\n                let valueToAdd = ag_grid_community__WEBPACK_IMPORTED_MODULE_0__._.makeNull(value);\n                // when case insensitive, we pick the first value to use. if this is later filtered out,\n                // we still want to use the original value and not one with a different case\n                const existingUnformattedKey = existingFormattedKeys === null || existingFormattedKeys === void 0 ? void 0 : existingFormattedKeys.get(formattedKey);\n                if (existingUnformattedKey != null) {\n                    keyToAdd = existingUnformattedKey;\n                    valueToAdd = existingValues.get(existingUnformattedKey);\n                }\n                values.set(keyToAdd, valueToAdd);\n            }\n        };\n        this.rowModel.forEachLeafNode(node => {\n            // only pull values from rows that have data. this means we skip filler group nodes.\n            if (!node.data || !predicate(node)) {\n                return;\n            }\n            if (this.treeDataOrGrouping) {\n                this.addValueForTreeDataOrGrouping(node, treeData, groupedCols, addValue);\n                return;\n            }\n            let value = this.getValue(node);\n            if (this.filterParams.convertValuesToStrings) {\n                // for backwards compatibility - keeping separate as it will eventually be removed\n                this.addValueForConvertValuesToString(node, value, addValue);\n                return;\n            }\n            if (value != null && Array.isArray(value)) {\n                value.forEach(x => {\n                    addValue(this.createKey(x, node), x);\n                });\n                if (value.length === 0) {\n                    addValue(null, null);\n                }\n            }\n            else {\n                addValue(this.createKey(value, node), value);\n            }\n        });\n        return values;\n    }\n    addValueForConvertValuesToString(node, value, addValue) {\n        const key = this.createKey(value, node);\n        if (key != null && Array.isArray(key)) {\n            key.forEach(part => {\n                const processedPart = ag_grid_community__WEBPACK_IMPORTED_MODULE_0__._.toStringOrNull(ag_grid_community__WEBPACK_IMPORTED_MODULE_0__._.makeNull(part));\n                addValue(processedPart, processedPart);\n            });\n            if (key.length === 0) {\n                addValue(null, null);\n            }\n        }\n        else {\n            addValue(key, key);\n        }\n    }\n    addValueForTreeDataOrGrouping(node, treeData, groupedCols, addValue) {\n        var _a;\n        let dataPath;\n        if (treeData) {\n            if ((_a = node.childrenAfterGroup) === null || _a === void 0 ? void 0 : _a.length) {\n                return;\n            }\n            dataPath = this.getDataPath(node.data);\n        }\n        else {\n            dataPath = groupedCols.map(groupCol => this.valueService.getKeyForNode(groupCol, node));\n            dataPath.push(this.getValue(node));\n        }\n        if (dataPath) {\n            dataPath = dataPath.map(treeKey => ag_grid_community__WEBPACK_IMPORTED_MODULE_0__._.toStringOrNull(ag_grid_community__WEBPACK_IMPORTED_MODULE_0__._.makeNull(treeKey)));\n        }\n        if (dataPath === null || dataPath === void 0 ? void 0 : dataPath.some(treeKey => treeKey == null)) {\n            dataPath = null;\n        }\n        addValue(this.createKey(dataPath), dataPath);\n    }\n    getValue(node) {\n        const { api, colDef, column, columnApi, context } = this.filterParams;\n        return this.filterParams.valueGetter({\n            api,\n            colDef,\n            column,\n            columnApi,\n            context,\n            data: node.data,\n            getValue: (field) => node.data[field],\n            node,\n        });\n    }\n    extractExistingFormattedKeys(existingValues) {\n        if (!existingValues) {\n            return null;\n        }\n        const existingFormattedKeys = new Map();\n        existingValues.forEach((_value, key) => {\n            existingFormattedKeys.set(this.caseFormat(key), key);\n        });\n        return existingFormattedKeys;\n    }\n}\n\nclass SetFilterDisplayValue {\n}\nSetFilterDisplayValue.SELECT_ALL = '__AG_SELECT_ALL__';\n\nclass FlatSetDisplayValueModel {\n    constructor(valueFormatterService, valueFormatter, formatter, column) {\n        this.valueFormatterService = valueFormatterService;\n        this.valueFormatter = valueFormatter;\n        this.formatter = formatter;\n        this.column = column;\n        /** All keys that are currently displayed, after the mini-filter has been applied. */\n        this.displayedKeys = [];\n    }\n    updateDisplayedValuesToAllAvailable(_getValue, _allKeys, availableKeys) {\n        this.displayedKeys = Array.from(availableKeys);\n    }\n    updateDisplayedValuesToMatchMiniFilter(getValue, _allKeys, availableKeys, matchesFilter, nullMatchesFilter) {\n        this.displayedKeys = [];\n        for (let key of availableKeys) {\n            if (key == null) {\n                if (nullMatchesFilter) {\n                    this.displayedKeys.push(key);\n                }\n            }\n            else {\n                const value = getValue(key);\n                const valueFormatterValue = this.valueFormatterService.formatValue(this.column, null, value, this.valueFormatter, false);\n                const textFormatterValue = this.formatter(valueFormatterValue);\n                if (matchesFilter(textFormatterValue)) {\n                    this.displayedKeys.push(key);\n                }\n            }\n        }\n    }\n    getDisplayedValueCount() {\n        return this.displayedKeys.length;\n    }\n    getDisplayedItem(index) {\n        return this.displayedKeys[index];\n    }\n    getSelectAllItem() {\n        return SetFilterDisplayValue.SELECT_ALL;\n    }\n    getDisplayedKeys() {\n        return this.displayedKeys;\n    }\n    forEachDisplayedKey(func) {\n        this.displayedKeys.forEach(func);\n    }\n    someDisplayedKey(func) {\n        return this.displayedKeys.some(func);\n    }\n    hasGroups() {\n        return false;\n    }\n    refresh() {\n        // not used\n    }\n}\n\nclass TreeSetDisplayValueModel {\n    constructor(formatter, treeListPathGetter, treeListFormatter, treeDataOrGrouping) {\n        this.formatter = formatter;\n        this.treeListPathGetter = treeListPathGetter;\n        this.treeListFormatter = treeListFormatter;\n        this.treeDataOrGrouping = treeDataOrGrouping;\n        /** all displayed items in a tree structure */\n        this.allDisplayedItemsTree = [];\n        /** all displayed items flattened and filtered */\n        this.activeDisplayedItemsFlat = [];\n        this.selectAllItem = {\n            depth: 0,\n            filterPasses: true,\n            available: true,\n            treeKey: SetFilterDisplayValue.SELECT_ALL,\n            children: this.allDisplayedItemsTree,\n            expanded: true,\n            key: SetFilterDisplayValue.SELECT_ALL,\n            parentTreeKeys: []\n        };\n    }\n    ;\n    updateDisplayedValuesToAllAvailable(getValue, allKeys, availableKeys, source) {\n        if (source === 'reload') {\n            this.generateItemTree(getValue, allKeys, availableKeys);\n        }\n        else if (source === 'otherFilter') {\n            this.updateAvailable(availableKeys);\n            this.updateExpandAll();\n        }\n        else if (source === 'miniFilter') {\n            this.resetFilter();\n            this.updateExpandAll();\n        }\n        this.flattenItems();\n    }\n    updateDisplayedValuesToMatchMiniFilter(getValue, allKeys, availableKeys, matchesFilter, nullMatchesFilter, source) {\n        if (source === 'reload') {\n            this.generateItemTree(getValue, allKeys, availableKeys);\n        }\n        else if (source === 'otherFilter') {\n            this.updateAvailable(availableKeys);\n        }\n        this.updateFilter(matchesFilter, nullMatchesFilter);\n        this.updateExpandAll();\n        this.flattenItems();\n    }\n    generateItemTree(getValue, allKeys, availableKeys) {\n        var _a;\n        this.allDisplayedItemsTree = [];\n        this.groupsExist = false;\n        const treeListPathGetter = this.getTreeListPathGetter(getValue, availableKeys);\n        for (let key of allKeys) {\n            const value = getValue(key);\n            const dataPath = (_a = treeListPathGetter(value)) !== null && _a !== void 0 ? _a : [null];\n            if (dataPath.length > 1) {\n                this.groupsExist = true;\n            }\n            const available = availableKeys.has(key);\n            let children = this.allDisplayedItemsTree;\n            let item;\n            let parentTreeKeys = [];\n            dataPath.forEach((treeKey, depth) => {\n                if (!children) {\n                    children = [];\n                    item.children = children;\n                }\n                item = children.find(child => { var _a; return ((_a = child.treeKey) === null || _a === void 0 ? void 0 : _a.toUpperCase()) === (treeKey === null || treeKey === void 0 ? void 0 : treeKey.toUpperCase()); });\n                if (!item) {\n                    item = { treeKey, depth, filterPasses: true, expanded: false, available, parentTreeKeys };\n                    if (depth === dataPath.length - 1) {\n                        item.key = key;\n                    }\n                    children.push(item);\n                }\n                children = item.children;\n                parentTreeKeys = [...parentTreeKeys, treeKey];\n            });\n        }\n        // update the parent availability based on the children\n        this.updateAvailable(availableKeys);\n        this.selectAllItem.children = this.allDisplayedItemsTree;\n        this.selectAllItem.expanded = false;\n    }\n    getTreeListPathGetter(getValue, availableKeys) {\n        if (this.treeListPathGetter) {\n            return this.treeListPathGetter;\n        }\n        if (this.treeDataOrGrouping) {\n            return value => value;\n        }\n        // infer from data\n        let isDate = false;\n        for (const availableKey of availableKeys) {\n            // find the first non-null value\n            const value = getValue(availableKey);\n            if (value instanceof Date) {\n                isDate = true;\n                break;\n            }\n            else if (value != null) {\n                break;\n            }\n        }\n        if (isDate) {\n            return TreeSetDisplayValueModel.DATE_TREE_LIST_PATH_GETTER;\n        }\n        ag_grid_community__WEBPACK_IMPORTED_MODULE_0__._.doOnce(() => console.warn('AG Grid: property treeList=true for Set Filter params, but you did not provide a treeListPathGetter or values of type Date.'), 'getTreeListPathGetter');\n        return value => [String(value)];\n    }\n    flattenItems() {\n        this.activeDisplayedItemsFlat = [];\n        const recursivelyFlattenDisplayedItems = (items) => {\n            items.forEach(item => {\n                if (!item.filterPasses || !item.available) {\n                    return;\n                }\n                this.activeDisplayedItemsFlat.push(item);\n                if (item.children && item.expanded) {\n                    recursivelyFlattenDisplayedItems(item.children);\n                }\n            });\n        };\n        recursivelyFlattenDisplayedItems(this.allDisplayedItemsTree);\n    }\n    resetFilter() {\n        const recursiveFilterReset = (item) => {\n            if (item.children) {\n                item.children.forEach(child => {\n                    recursiveFilterReset(child);\n                });\n            }\n            item.filterPasses = true;\n        };\n        this.allDisplayedItemsTree.forEach(item => recursiveFilterReset(item));\n    }\n    updateFilter(matchesFilter, nullMatchesFilter) {\n        const passesFilter = (item) => {\n            if (!item.available) {\n                return false;\n            }\n            if (item.treeKey == null) {\n                return nullMatchesFilter;\n            }\n            return matchesFilter(this.formatter(this.treeListFormatter ? this.treeListFormatter(item.treeKey, item.depth, item.parentTreeKeys) : item.treeKey));\n        };\n        this.allDisplayedItemsTree.forEach(item => this.recursiveItemCheck(item, false, passesFilter, 'filterPasses'));\n    }\n    getDisplayedValueCount() {\n        return this.activeDisplayedItemsFlat.length;\n    }\n    getDisplayedItem(index) {\n        return this.activeDisplayedItemsFlat[index];\n    }\n    getSelectAllItem() {\n        return this.selectAllItem;\n    }\n    getDisplayedKeys() {\n        const displayedKeys = [];\n        this.forEachDisplayedKey((key) => displayedKeys.push(key));\n        return displayedKeys;\n    }\n    forEachDisplayedKey(func) {\n        const recursiveForEachItem = (item, topParentExpanded) => {\n            if (item.children) {\n                if (!item.expanded || !topParentExpanded) {\n                    // if the parent is not expanded, we need to iterate the entire tree\n                    item.children.forEach(child => {\n                        if (child.filterPasses) {\n                            recursiveForEachItem(child, false);\n                        }\n                    });\n                }\n            }\n            else {\n                func(item.key);\n            }\n        };\n        this.activeDisplayedItemsFlat.forEach(item => recursiveForEachItem(item, true));\n    }\n    someDisplayedKey(func) {\n        const recursiveSomeItem = (item, topParentExpanded) => {\n            if (item.children) {\n                if (!item.expanded || !topParentExpanded) {\n                    // if the parent is not expanded, we need to iterate the entire tree\n                    return item.children.some(child => {\n                        if (child.filterPasses) {\n                            return recursiveSomeItem(child, false);\n                        }\n                        return false;\n                    });\n                }\n            }\n            else {\n                return func(item.key);\n            }\n            return false;\n        };\n        return this.activeDisplayedItemsFlat.some(item => recursiveSomeItem(item, true));\n    }\n    hasGroups() {\n        return this.groupsExist;\n    }\n    refresh() {\n        this.updateExpandAll();\n        this.flattenItems();\n    }\n    updateExpandAll() {\n        const recursiveExpansionCheck = (items, someTrue, someFalse) => {\n            for (const item of items) {\n                if (!item.filterPasses || !item.available || !item.children) {\n                    continue;\n                }\n                // indeterminate state only exists for expand all, so don't need to check for the current item\n                someTrue = someTrue || !!item.expanded;\n                someFalse = someFalse || !item.expanded;\n                if (someTrue && someFalse) {\n                    // already indeterminate. No need to check the children\n                    return undefined;\n                }\n                const childExpanded = recursiveExpansionCheck(item.children, someTrue, someFalse);\n                if (childExpanded === undefined) {\n                    return undefined;\n                }\n                else if (childExpanded) {\n                    someTrue = true;\n                }\n                else {\n                    someFalse = true;\n                }\n            }\n            return someTrue && someFalse ? undefined : someTrue;\n        };\n        const item = this.getSelectAllItem();\n        item.expanded = recursiveExpansionCheck(item.children, false, false);\n    }\n    recursiveItemCheck(item, parentPasses, checkFunction, itemProp) {\n        let atLeastOneChildPassed = false;\n        if (item.children) {\n            item.children.forEach(child => {\n                const childPasses = this.recursiveItemCheck(child, parentPasses || checkFunction(item), checkFunction, itemProp);\n                atLeastOneChildPassed = atLeastOneChildPassed || childPasses;\n            });\n        }\n        const itemPasses = parentPasses || atLeastOneChildPassed || checkFunction(item);\n        item[itemProp] = itemPasses;\n        return itemPasses;\n    }\n    updateAvailable(availableKeys) {\n        const isAvailable = (item) => availableKeys.has(item.key);\n        this.allDisplayedItemsTree.forEach(item => this.recursiveItemCheck(item, false, isAvailable, 'available'));\n    }\n}\nTreeSetDisplayValueModel.DATE_TREE_LIST_PATH_GETTER = (date) => date ? [String(date.getFullYear()), String(date.getMonth() + 1), String(date.getDate())] : null;\n\nvar SetFilterModelValuesType;\n(function (SetFilterModelValuesType) {\n    SetFilterModelValuesType[SetFilterModelValuesType[\"PROVIDED_LIST\"] = 0] = \"PROVIDED_LIST\";\n    SetFilterModelValuesType[SetFilterModelValuesType[\"PROVIDED_CALLBACK\"] = 1] = \"PROVIDED_CALLBACK\";\n    SetFilterModelValuesType[SetFilterModelValuesType[\"TAKEN_FROM_GRID_VALUES\"] = 2] = \"TAKEN_FROM_GRID_VALUES\";\n})(SetFilterModelValuesType || (SetFilterModelValuesType = {}));\n/** @param V type of value in the Set Filter */\nclass SetValueModel {\n    constructor(params) {\n        var _a;\n        this.localEventService = new ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.EventService();\n        this.miniFilterText = null;\n        /** Values provided to the filter for use. */\n        this.providedValues = null;\n        /** All possible values for the filter, sorted if required. */\n        this.allValues = new Map();\n        /** Remaining keys when filters from other columns have been applied. */\n        this.availableKeys = new Set();\n        /** Keys that have been selected for this filter. */\n        this.selectedKeys = new Set();\n        this.initialised = false;\n        const { usingComplexObjects, columnModel, valueService, treeDataTreeList, groupingTreeList, filterParams, gridOptionsService, valueFormatterService, valueFormatter } = params;\n        const { column, colDef, textFormatter, doesRowPassOtherFilter, suppressSorting, comparator, rowModel, values, caseSensitive, convertValuesToStrings, treeList, treeListPathGetter, treeListFormatter } = filterParams;\n        this.filterParams = filterParams;\n        this.setIsLoading = params.setIsLoading;\n        this.translate = params.translate;\n        this.caseFormat = params.caseFormat;\n        this.createKey = params.createKey;\n        this.usingComplexObjects = !!params.usingComplexObjects;\n        this.formatter = textFormatter || ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.TextFilter.DEFAULT_FORMATTER;\n        this.doesRowPassOtherFilters = doesRowPassOtherFilter;\n        this.suppressSorting = suppressSorting || false;\n        this.convertValuesToStrings = !!convertValuesToStrings;\n        const keyComparator = comparator !== null && comparator !== void 0 ? comparator : colDef.comparator;\n        const treeDataOrGrouping = !!treeDataTreeList || !!groupingTreeList;\n        // If using complex objects and a comparator is provided, sort by values, otherwise need to sort by the string keys.\n        // Also if tree data, grouping, or date with tree list, then need to do value sort\n        this.compareByValue = !!((usingComplexObjects && keyComparator) || treeDataOrGrouping || (treeList && !treeListPathGetter));\n        if (treeDataOrGrouping && !keyComparator) {\n            this.entryComparator = this.createTreeDataOrGroupingComparator();\n        }\n        else if (treeList && !treeListPathGetter && !keyComparator) {\n            this.entryComparator = ([_aKey, aValue], [_bKey, bValue]) => ag_grid_community__WEBPACK_IMPORTED_MODULE_0__._.defaultComparator(aValue, bValue);\n        }\n        else {\n            this.entryComparator = ([_aKey, aValue], [_bKey, bValue]) => keyComparator(aValue, bValue);\n        }\n        this.keyComparator = (_a = keyComparator) !== null && _a !== void 0 ? _a : ag_grid_community__WEBPACK_IMPORTED_MODULE_0__._.defaultComparator;\n        this.caseSensitive = !!caseSensitive;\n        const getDataPath = gridOptionsService.get('getDataPath');\n        if (rowModel.getType() === 'clientSide') {\n            this.clientSideValuesExtractor = new ClientSideValuesExtractor(rowModel, this.filterParams, this.createKey, this.caseFormat, columnModel, valueService, treeDataOrGrouping, !!treeDataTreeList, getDataPath);\n        }\n        if (values == null) {\n            this.valuesType = SetFilterModelValuesType.TAKEN_FROM_GRID_VALUES;\n        }\n        else {\n            this.valuesType = Array.isArray(values) ?\n                SetFilterModelValuesType.PROVIDED_LIST :\n                SetFilterModelValuesType.PROVIDED_CALLBACK;\n            this.providedValues = values;\n        }\n        this.displayValueModel = treeList ? new TreeSetDisplayValueModel(this.formatter, treeListPathGetter, treeListFormatter, treeDataTreeList || groupingTreeList) : new FlatSetDisplayValueModel(valueFormatterService, valueFormatter, this.formatter, column);\n        this.updateAllValues().then(updatedKeys => this.resetSelectionState(updatedKeys || []));\n    }\n    addEventListener(eventType, listener, async) {\n        this.localEventService.addEventListener(eventType, listener, async);\n    }\n    removeEventListener(eventType, listener, async) {\n        this.localEventService.removeEventListener(eventType, listener, async);\n    }\n    /**\n     * Re-fetches the values used in the filter from the value source.\n     * If keepSelection is false, the filter selection will be reset to everything selected,\n     * otherwise the current selection will be preserved.\n     */\n    refreshValues() {\n        const currentModel = this.getModel();\n        this.updateAllValues();\n        // ensure model is updated for new values\n        return this.setModel(currentModel);\n    }\n    /**\n     * Overrides the current values being used for the set filter.\n     * If keepSelection is false, the filter selection will be reset to everything selected,\n     * otherwise the current selection will be preserved.\n     */\n    overrideValues(valuesToUse) {\n        return new ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.AgPromise(resolve => {\n            // wait for any existing values to be populated before overriding\n            this.allValuesPromise.then(() => {\n                this.valuesType = SetFilterModelValuesType.PROVIDED_LIST;\n                this.providedValues = valuesToUse;\n                this.refreshValues().then(() => resolve());\n            });\n        });\n    }\n    /** @return has anything been updated */\n    refreshAfterAnyFilterChanged() {\n        if (this.showAvailableOnly()) {\n            return this.allValuesPromise.then(keys => {\n                this.updateAvailableKeys(keys !== null && keys !== void 0 ? keys : [], 'otherFilter');\n                return true;\n            });\n        }\n        return ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.AgPromise.resolve(false);\n    }\n    isInitialised() {\n        return this.initialised;\n    }\n    updateAllValues() {\n        this.allValuesPromise = new ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.AgPromise(resolve => {\n            switch (this.valuesType) {\n                case SetFilterModelValuesType.TAKEN_FROM_GRID_VALUES:\n                case SetFilterModelValuesType.PROVIDED_LIST: {\n                    resolve(this.processAllKeys(this.valuesType === SetFilterModelValuesType.TAKEN_FROM_GRID_VALUES, this.providedValues));\n                    break;\n                }\n                case SetFilterModelValuesType.PROVIDED_CALLBACK: {\n                    this.setIsLoading(true);\n                    const callback = this.providedValues;\n                    const { columnApi, api, context, column, colDef } = this.filterParams;\n                    const params = {\n                        success: values => {\n                            this.setIsLoading(false);\n                            resolve(this.processAllKeys(false, values));\n                        },\n                        colDef,\n                        column,\n                        columnApi,\n                        api,\n                        context,\n                    };\n                    window.setTimeout(() => callback(params), 0);\n                    break;\n                }\n                default:\n                    throw new Error('Unrecognised valuesType');\n            }\n        });\n        this.allValuesPromise.then(values => this.updateAvailableKeys(values || [], 'reload')).then(() => this.initialised = true);\n        return this.allValuesPromise;\n    }\n    processAllKeys(getFromRows, providedValues) {\n        const values = getFromRows ? this.getValuesFromRows(false) : this.uniqueValues(this.validateProvidedValues(providedValues));\n        const sortedKeys = this.sortKeys(values);\n        this.allValues = values !== null && values !== void 0 ? values : new Map();\n        return sortedKeys;\n    }\n    validateProvidedValues(values) {\n        if (this.usingComplexObjects && (values === null || values === void 0 ? void 0 : values.length)) {\n            const firstValue = values[0];\n            if (firstValue && typeof firstValue !== 'object' && typeof firstValue !== 'function') {\n                const firstKey = this.createKey(firstValue);\n                if (firstKey == null) {\n                    ag_grid_community__WEBPACK_IMPORTED_MODULE_0__._.doOnce(() => console.warn('Set Filter Key Creator is returning null for provided values and provided values are primitives. Please provide complex objects or set convertValuesToStrings=true in the filterParams. See https://www.ag-grid.com/javascript-data-grid/filter-set-filter-list/#filter-value-types'), 'setFilterComplexObjectsProvidedNull');\n                }\n                else {\n                    ag_grid_community__WEBPACK_IMPORTED_MODULE_0__._.doOnce(() => console.warn('AG Grid: Set Filter has a Key Creator, but provided values are primitives. Did you mean to provide complex objects or enable convertValuesToStrings?'), 'setFilterComplexObjectsProvidedPrimitive');\n                }\n            }\n        }\n        return values;\n    }\n    setValuesType(value) {\n        this.valuesType = value;\n    }\n    getValuesType() {\n        return this.valuesType;\n    }\n    isKeyAvailable(key) {\n        return this.availableKeys.has(key);\n    }\n    showAvailableOnly() {\n        return this.valuesType === SetFilterModelValuesType.TAKEN_FROM_GRID_VALUES;\n    }\n    updateAvailableKeys(allKeys, source) {\n        const availableKeys = this.showAvailableOnly() ? this.sortKeys(this.getValuesFromRows(true)) : allKeys;\n        this.availableKeys = new Set(availableKeys);\n        this.localEventService.dispatchEvent({ type: SetValueModel.EVENT_AVAILABLE_VALUES_CHANGED });\n        this.updateDisplayedValues(source, allKeys);\n    }\n    sortKeys(nullableValues) {\n        const values = nullableValues !== null && nullableValues !== void 0 ? nullableValues : new Map();\n        if (this.suppressSorting) {\n            return Array.from(values.keys());\n        }\n        let sortedKeys;\n        if (this.compareByValue) {\n            sortedKeys = Array.from(values.entries()).sort(this.entryComparator).map(([key]) => key);\n        }\n        else {\n            sortedKeys = Array.from(values.keys()).sort(this.keyComparator);\n        }\n        if (this.filterParams.excelMode && values.has(null)) {\n            // ensure the blank value always appears last\n            sortedKeys = sortedKeys.filter(v => v != null);\n            sortedKeys.push(null);\n        }\n        return sortedKeys;\n    }\n    getValuesFromRows(removeUnavailableValues = false) {\n        if (!this.clientSideValuesExtractor) {\n            console.error('AG Grid: Set Filter cannot initialise because you are using a row model that does not contain all rows in the browser. Either use a different filter type, or configure Set Filter such that you provide it with values');\n            return null;\n        }\n        const predicate = (node) => (!removeUnavailableValues || this.doesRowPassOtherFilters(node));\n        return this.clientSideValuesExtractor.extractUniqueValues(predicate, removeUnavailableValues && !this.caseSensitive ? this.allValues : undefined);\n    }\n    /** Sets mini filter value. Returns true if it changed from last value, otherwise false. */\n    setMiniFilter(value) {\n        value = ag_grid_community__WEBPACK_IMPORTED_MODULE_0__._.makeNull(value);\n        if (this.miniFilterText === value) {\n            //do nothing if filter has not changed\n            return false;\n        }\n        this.miniFilterText = value;\n        this.updateDisplayedValues('miniFilter');\n        return true;\n    }\n    getMiniFilter() {\n        return this.miniFilterText;\n    }\n    updateDisplayedValues(source, allKeys) {\n        if (source === 'expansion') {\n            this.displayValueModel.refresh();\n            return;\n        }\n        // if no filter, just display all available values\n        if (this.miniFilterText == null) {\n            this.displayValueModel.updateDisplayedValuesToAllAvailable((key) => this.getValue(key), allKeys, this.availableKeys, source);\n            return;\n        }\n        // if filter present, we filter down the list\n        // to allow for case insensitive searches, upper-case both filter text and value\n        const formattedFilterText = this.caseFormat(this.formatter(this.miniFilterText) || '');\n        const matchesFilter = (valueToCheck) => valueToCheck != null && this.caseFormat(valueToCheck).indexOf(formattedFilterText) >= 0;\n        const nullMatchesFilter = !!this.filterParams.excelMode && matchesFilter(this.translate('blanks'));\n        this.displayValueModel.updateDisplayedValuesToMatchMiniFilter((key) => this.getValue(key), allKeys, this.availableKeys, matchesFilter, nullMatchesFilter, source);\n    }\n    getDisplayedValueCount() {\n        return this.displayValueModel.getDisplayedValueCount();\n    }\n    getDisplayedItem(index) {\n        return this.displayValueModel.getDisplayedItem(index);\n    }\n    getSelectAllItem() {\n        return this.displayValueModel.getSelectAllItem();\n    }\n    hasSelections() {\n        return this.filterParams.defaultToNothingSelected ?\n            this.selectedKeys.size > 0 :\n            this.allValues.size !== this.selectedKeys.size;\n    }\n    getKeys() {\n        return Array.from(this.allValues.keys());\n    }\n    getValues() {\n        return Array.from(this.allValues.values());\n    }\n    getValue(key) {\n        return this.allValues.get(key);\n    }\n    selectAllMatchingMiniFilter(clearExistingSelection = false) {\n        if (this.miniFilterText == null) {\n            // ensure everything is selected\n            this.selectedKeys = new Set(this.allValues.keys());\n        }\n        else {\n            // ensure everything that matches the mini filter is selected\n            if (clearExistingSelection) {\n                this.selectedKeys.clear();\n            }\n            this.displayValueModel.forEachDisplayedKey(key => this.selectedKeys.add(key));\n        }\n    }\n    deselectAllMatchingMiniFilter() {\n        if (this.miniFilterText == null) {\n            // ensure everything is deselected\n            this.selectedKeys.clear();\n        }\n        else {\n            // ensure everything that matches the mini filter is deselected\n            this.displayValueModel.forEachDisplayedKey(key => this.selectedKeys.delete(key));\n        }\n    }\n    selectKey(key) {\n        this.selectedKeys.add(key);\n    }\n    deselectKey(key) {\n        if (this.filterParams.excelMode && this.isEverythingVisibleSelected()) {\n            // ensure we're starting from the correct \"everything selected\" state\n            this.resetSelectionState(this.displayValueModel.getDisplayedKeys());\n        }\n        this.selectedKeys.delete(key);\n    }\n    isKeySelected(key) {\n        return this.selectedKeys.has(key);\n    }\n    isEverythingVisibleSelected() {\n        return !this.displayValueModel.someDisplayedKey(it => !this.isKeySelected(it));\n    }\n    isNothingVisibleSelected() {\n        return !this.displayValueModel.someDisplayedKey(it => this.isKeySelected(it));\n    }\n    getModel() {\n        return this.hasSelections() ? Array.from(this.selectedKeys) : null;\n    }\n    setModel(model) {\n        return this.allValuesPromise.then(keys => {\n            if (model == null) {\n                this.resetSelectionState(keys !== null && keys !== void 0 ? keys : []);\n            }\n            else {\n                // select all values from the model that exist in the filter\n                this.selectedKeys.clear();\n                const existingFormattedKeys = new Map();\n                this.allValues.forEach((_value, key) => {\n                    existingFormattedKeys.set(this.caseFormat(key), key);\n                });\n                model.forEach(unformattedKey => {\n                    const formattedKey = this.caseFormat(unformattedKey);\n                    const existingUnformattedKey = existingFormattedKeys.get(formattedKey);\n                    if (existingUnformattedKey !== undefined) {\n                        this.selectKey(existingUnformattedKey);\n                    }\n                });\n            }\n        });\n    }\n    uniqueValues(values) {\n        const uniqueValues = new Map();\n        const formattedKeys = new Set();\n        (values !== null && values !== void 0 ? values : []).forEach(value => {\n            const valueToUse = ag_grid_community__WEBPACK_IMPORTED_MODULE_0__._.makeNull(value);\n            const unformattedKey = this.convertAndGetKey(valueToUse);\n            const formattedKey = this.caseFormat(unformattedKey);\n            if (!formattedKeys.has(formattedKey)) {\n                formattedKeys.add(formattedKey);\n                uniqueValues.set(unformattedKey, valueToUse);\n            }\n        });\n        return uniqueValues;\n    }\n    convertAndGetKey(value) {\n        return this.convertValuesToStrings ? value : this.createKey(value);\n    }\n    resetSelectionState(keys) {\n        if (this.filterParams.defaultToNothingSelected) {\n            this.selectedKeys.clear();\n        }\n        else {\n            this.selectedKeys = new Set(keys);\n        }\n    }\n    hasGroups() {\n        return this.displayValueModel.hasGroups();\n    }\n    createTreeDataOrGroupingComparator() {\n        return ([_aKey, aValue], [_bKey, bValue]) => {\n            if (aValue == null) {\n                return bValue == null ? 0 : -1;\n            }\n            else if (bValue == null) {\n                return 1;\n            }\n            for (let i = 0; i < aValue.length; i++) {\n                if (i >= bValue.length) {\n                    return 1;\n                }\n                const diff = ag_grid_community__WEBPACK_IMPORTED_MODULE_0__._.defaultComparator(aValue[i], bValue[i]);\n                if (diff !== 0) {\n                    return diff;\n                }\n            }\n            return 0;\n        };\n    }\n}\nSetValueModel.EVENT_AVAILABLE_VALUES_CHANGED = 'availableValuesChanged';\n\nvar __decorate$d = ( false) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\n/** @param V type of value in the Set Filter */\nclass SetFilterListItem extends ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.Component {\n    constructor(params) {\n        var _a;\n        super(params.isGroup ? SetFilterListItem.GROUP_TEMPLATE : SetFilterListItem.TEMPLATE);\n        this.focusWrapper = params.focusWrapper;\n        this.value = params.value;\n        this.params = params.params;\n        this.translate = params.translate;\n        this.valueFormatter = params.valueFormatter;\n        this.item = params.item;\n        this.isSelected = params.isSelected;\n        this.isTree = params.isTree;\n        this.depth = (_a = params.depth) !== null && _a !== void 0 ? _a : 0;\n        this.isGroup = params.isGroup;\n        this.groupsExist = params.groupsExist;\n        this.isExpanded = params.isExpanded;\n        this.hasIndeterminateExpandState = params.hasIndeterminateExpandState;\n    }\n    init() {\n        this.render();\n        this.eCheckbox.setLabelEllipsis(true);\n        this.eCheckbox.setValue(this.isSelected, true);\n        this.eCheckbox.setDisabled(!!this.params.readOnly);\n        this.eCheckbox.getInputElement().setAttribute('tabindex', '-1');\n        this.refreshVariableAriaLabels();\n        if (this.isTree) {\n            if (this.depth > 0) {\n                this.addCssClass('ag-set-filter-indent-' + this.depth);\n            }\n            if (this.isGroup) {\n                this.setupExpansion();\n            }\n            else {\n                if (this.groupsExist) {\n                    this.addCssClass('ag-set-filter-add-group-indent');\n                }\n            }\n            ag_grid_community__WEBPACK_IMPORTED_MODULE_0__._.setAriaLevel(this.focusWrapper, this.depth + 1);\n        }\n        if (!!this.params.readOnly) {\n            // Don't add event listeners if we're read-only.\n            return;\n        }\n        this.eCheckbox.onValueChange((value) => this.onCheckboxChanged(!!value));\n    }\n    setupExpansion() {\n        this.eGroupClosedIcon.appendChild(ag_grid_community__WEBPACK_IMPORTED_MODULE_0__._.createIcon('setFilterGroupClosed', this.gridOptionsService, null));\n        this.eGroupOpenedIcon.appendChild(ag_grid_community__WEBPACK_IMPORTED_MODULE_0__._.createIcon('setFilterGroupOpen', this.gridOptionsService, null));\n        this.addManagedListener(this.eGroupClosedIcon, 'click', this.onExpandOrContractClicked.bind(this));\n        this.addManagedListener(this.eGroupOpenedIcon, 'click', this.onExpandOrContractClicked.bind(this));\n        if (this.hasIndeterminateExpandState) {\n            this.eGroupIndeterminateIcon.appendChild(ag_grid_community__WEBPACK_IMPORTED_MODULE_0__._.createIcon('setFilterGroupIndeterminate', this.gridOptionsService, null));\n            this.addManagedListener(this.eGroupIndeterminateIcon, 'click', this.onExpandOrContractClicked.bind(this));\n        }\n        this.setExpandedIcons();\n        this.refreshAriaExpanded();\n    }\n    onExpandOrContractClicked() {\n        this.setExpanded(!this.isExpanded);\n    }\n    setExpanded(isExpanded, silent) {\n        if (this.isGroup && isExpanded !== this.isExpanded) {\n            this.isExpanded = isExpanded;\n            const event = {\n                type: SetFilterListItem.EVENT_EXPANDED_CHANGED,\n                isExpanded: !!isExpanded,\n                item: this.item\n            };\n            if (!silent) {\n                this.dispatchEvent(event);\n            }\n            this.setExpandedIcons();\n            this.refreshAriaExpanded();\n        }\n    }\n    refreshAriaExpanded() {\n        ag_grid_community__WEBPACK_IMPORTED_MODULE_0__._.setAriaExpanded(this.focusWrapper, !!this.isExpanded);\n    }\n    setExpandedIcons() {\n        ag_grid_community__WEBPACK_IMPORTED_MODULE_0__._.setDisplayed(this.eGroupClosedIcon, this.hasIndeterminateExpandState ? this.isExpanded === false : !this.isExpanded);\n        ag_grid_community__WEBPACK_IMPORTED_MODULE_0__._.setDisplayed(this.eGroupOpenedIcon, this.isExpanded === true);\n        if (this.hasIndeterminateExpandState) {\n            ag_grid_community__WEBPACK_IMPORTED_MODULE_0__._.setDisplayed(this.eGroupIndeterminateIcon, this.isExpanded === undefined);\n        }\n    }\n    onCheckboxChanged(isSelected) {\n        this.isSelected = isSelected;\n        const event = {\n            type: SetFilterListItem.EVENT_SELECTION_CHANGED,\n            isSelected,\n            item: this.item\n        };\n        this.dispatchEvent(event);\n        this.refreshVariableAriaLabels();\n    }\n    toggleSelected() {\n        if (!!this.params.readOnly) {\n            return;\n        }\n        this.setSelected(!this.isSelected);\n    }\n    setSelected(isSelected, silent) {\n        this.isSelected = isSelected;\n        this.eCheckbox.setValue(this.isSelected, silent);\n    }\n    refreshVariableAriaLabels() {\n        if (!this.isTree) {\n            return;\n        }\n        const translate = this.localeService.getLocaleTextFunc();\n        const checkboxValue = this.eCheckbox.getValue();\n        const state = checkboxValue === undefined ?\n            translate('ariaIndeterminate', 'indeterminate') :\n            (checkboxValue ? translate('ariaVisible', 'visible') : translate('ariaHidden', 'hidden'));\n        const visibilityLabel = translate('ariaToggleVisibility', 'Press SPACE to toggle visibility');\n        ag_grid_community__WEBPACK_IMPORTED_MODULE_0__._.setAriaLabelledBy(this.eCheckbox.getInputElement(), undefined);\n        this.eCheckbox.setInputAriaLabel(`${visibilityLabel} (${state})`);\n    }\n    setupFixedAriaLabels(value) {\n        if (!this.isTree) {\n            return;\n        }\n        const translate = this.localeService.getLocaleTextFunc();\n        const itemLabel = translate('ariaFilterValue', 'Filter Value');\n        ag_grid_community__WEBPACK_IMPORTED_MODULE_0__._.setAriaLabel(this.focusWrapper, `${value} ${itemLabel}`);\n        ag_grid_community__WEBPACK_IMPORTED_MODULE_0__._.setAriaDescribedBy(this.focusWrapper, this.eCheckbox.getInputElement().id);\n    }\n    refresh(item, isSelected, isExpanded) {\n        var _a, _b;\n        this.item = item;\n        // setExpanded checks if value has changed, setSelected does not\n        if (isSelected !== this.isSelected) {\n            this.setSelected(isSelected, true);\n        }\n        this.setExpanded(isExpanded, true);\n        if (this.valueFunction) {\n            // underlying value might have changed, so call again and re-render\n            const value = this.valueFunction();\n            this.setTooltipAndCellRendererParams(value, value);\n            if (!this.cellRendererComponent) {\n                this.renderCellWithoutCellRenderer();\n            }\n        }\n        (_b = (_a = this.cellRendererComponent) === null || _a === void 0 ? void 0 : _a.refresh) === null || _b === void 0 ? void 0 : _b.call(_a, this.cellRendererParams);\n    }\n    render() {\n        const { params: { column } } = this;\n        let { value } = this;\n        let formattedValue = null;\n        if (typeof value === 'function') {\n            this.valueFunction = value;\n            formattedValue = this.valueFunction();\n            // backwards compatibility for select all in value\n            value = formattedValue;\n        }\n        else if (this.isTree) {\n            // tree values are already formatted via treeListFormatter\n            formattedValue = ag_grid_community__WEBPACK_IMPORTED_MODULE_0__._.toStringOrNull(value);\n        }\n        else {\n            formattedValue = this.getFormattedValue(column, value);\n        }\n        this.setTooltipAndCellRendererParams(value, formattedValue);\n        this.renderCell();\n    }\n    setTooltipAndCellRendererParams(value, formattedValue) {\n        if (this.params.showTooltips) {\n            const tooltipValue = formattedValue != null ? formattedValue : ag_grid_community__WEBPACK_IMPORTED_MODULE_0__._.toStringOrNull(value);\n            this.setTooltip(tooltipValue);\n        }\n        this.cellRendererParams = {\n            value,\n            valueFormatted: formattedValue,\n            api: this.gridOptionsService.api,\n            columnApi: this.gridOptionsService.columnApi,\n            context: this.gridOptionsService.context,\n            colDef: this.params.colDef,\n            column: this.params.column,\n        };\n    }\n    getTooltipParams() {\n        const res = super.getTooltipParams();\n        res.location = 'setFilterValue';\n        res.colDef = this.getComponentHolder();\n        if (this.isTree) {\n            res.level = this.depth;\n        }\n        return res;\n    }\n    getFormattedValue(column, value) {\n        return this.valueFormatterService.formatValue(column, null, value, this.valueFormatter, false);\n    }\n    renderCell() {\n        const compDetails = this.userComponentFactory.getSetFilterCellRendererDetails(this.params, this.cellRendererParams);\n        const cellRendererPromise = compDetails ? compDetails.newAgStackInstance() : undefined;\n        if (cellRendererPromise == null) {\n            this.renderCellWithoutCellRenderer();\n            return;\n        }\n        cellRendererPromise.then(component => {\n            if (component) {\n                this.cellRendererComponent = component;\n                this.eCheckbox.setLabel(component.getGui());\n                this.addDestroyFunc(() => this.destroyBean(component));\n            }\n        });\n    }\n    renderCellWithoutCellRenderer() {\n        var _a;\n        let valueToRender = (_a = (this.cellRendererParams.valueFormatted == null ? this.cellRendererParams.value : this.cellRendererParams.valueFormatted)) !== null && _a !== void 0 ? _a : this.translate('blanks');\n        if (typeof valueToRender !== 'string') {\n            ag_grid_community__WEBPACK_IMPORTED_MODULE_0__._.doOnce(() => console.warn('AG Grid: Set Filter Value Formatter must return string values. Please ensure the Set Filter Value Formatter returns string values for complex objects, or set convertValuesToStrings=true in the filterParams. See https://www.ag-grid.com/javascript-data-grid/filter-set-filter-list/#filter-value-types'), 'setFilterComplexObjectsValueFormatter');\n            valueToRender = '';\n        }\n        this.eCheckbox.setLabel(valueToRender);\n        this.setupFixedAriaLabels(valueToRender);\n    }\n    getComponentHolder() {\n        return this.params.column.getColDef();\n    }\n}\nSetFilterListItem.EVENT_SELECTION_CHANGED = 'selectionChanged';\nSetFilterListItem.EVENT_EXPANDED_CHANGED = 'expandedChanged';\nSetFilterListItem.GROUP_TEMPLATE = `\n        <div class=\"ag-set-filter-item\" aria-hidden=\"true\">\n            <span class=\"ag-set-filter-group-icons\">\n                <span class=\"ag-set-filter-group-closed-icon\" ref=\"eGroupClosedIcon\"></span>\n                <span class=\"ag-set-filter-group-opened-icon\" ref=\"eGroupOpenedIcon\"></span>\n                <span class=\"ag-set-filter-group-indeterminate-icon\" ref=\"eGroupIndeterminateIcon\"></span>\n            </span>\n            <ag-checkbox ref=\"eCheckbox\" class=\"ag-set-filter-item-checkbox\"></ag-checkbox>\n        </div>`;\nSetFilterListItem.TEMPLATE = `\n        <div class=\"ag-set-filter-item\">\n            <ag-checkbox ref=\"eCheckbox\" class=\"ag-set-filter-item-checkbox\"></ag-checkbox>\n        </div>`;\n__decorate$d([\n    (0,ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.Autowired)('valueFormatterService')\n], SetFilterListItem.prototype, \"valueFormatterService\", void 0);\n__decorate$d([\n    (0,ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.Autowired)('userComponentFactory')\n], SetFilterListItem.prototype, \"userComponentFactory\", void 0);\n__decorate$d([\n    (0,ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.RefSelector)('eCheckbox')\n], SetFilterListItem.prototype, \"eCheckbox\", void 0);\n__decorate$d([\n    (0,ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.RefSelector)('eGroupOpenedIcon')\n], SetFilterListItem.prototype, \"eGroupOpenedIcon\", void 0);\n__decorate$d([\n    (0,ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.RefSelector)('eGroupClosedIcon')\n], SetFilterListItem.prototype, \"eGroupClosedIcon\", void 0);\n__decorate$d([\n    (0,ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.RefSelector)('eGroupIndeterminateIcon')\n], SetFilterListItem.prototype, \"eGroupIndeterminateIcon\", void 0);\n__decorate$d([\n    ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.PostConstruct\n], SetFilterListItem.prototype, \"init\", null);\n\nconst DEFAULT_LOCALE_TEXT = {\n    loadingOoo: 'Loading...',\n    blanks: '(Blanks)',\n    searchOoo: 'Search...',\n    selectAll: '(Select All)',\n    selectAllSearchResults: '(Select All Search Results)',\n    noMatches: 'No matches.'\n};\n\nclass SetFilterModelFormatter {\n    getModelAsString(model, setFilter) {\n        const { values } = model || setFilter.getModel() || {};\n        const valueModel = setFilter.getValueModel();\n        if (values == null || valueModel == null) {\n            return '';\n        }\n        const availableKeys = values.filter(v => valueModel.isKeyAvailable(v));\n        const numValues = availableKeys.length;\n        const formattedValues = availableKeys.slice(0, 10).map(key => setFilter.getFormattedValue(key));\n        return `(${numValues}) ${formattedValues.join(',')}${numValues > 10 ? ',...' : ''}`;\n    }\n}\n\nvar __decorate$c = ( false) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\n/** @param V type of value in the Set Filter */\nclass SetFilter extends ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.ProvidedFilter {\n    constructor() {\n        super('setFilter');\n        this.valueModel = null;\n        this.setFilterParams = null;\n        this.virtualList = null;\n        this.caseSensitive = false;\n        this.convertValuesToStrings = false;\n        this.treeDataTreeList = false;\n        this.groupingTreeList = false;\n        this.hardRefreshVirtualList = false;\n        this.noValueFormatterSupplied = false;\n        // To make the filtering super fast, we store the keys in an Set rather than using the default array\n        this.appliedModelKeys = null;\n        this.noAppliedModelKeys = false;\n        this.filterModelFormatter = new SetFilterModelFormatter();\n    }\n    postConstruct() {\n        super.postConstruct();\n    }\n    // unlike the simple filters, nothing in the set filter UI shows/hides.\n    // maybe this method belongs in abstractSimpleFilter???\n    updateUiVisibility() { }\n    createBodyTemplate() {\n        return /* html */ `\n            <div class=\"ag-set-filter\">\n                <div ref=\"eFilterLoading\" class=\"ag-filter-loading ag-hidden\">${this.translateForSetFilter('loadingOoo')}</div>\n                <ag-input-text-field class=\"ag-mini-filter\" ref=\"eMiniFilter\"></ag-input-text-field>\n                <div ref=\"eFilterNoMatches\" class=\"ag-filter-no-matches ag-hidden\">${this.translateForSetFilter('noMatches')}</div>\n                <div ref=\"eSetFilterList\" class=\"ag-set-filter-list\" role=\"presentation\"></div>\n            </div>`;\n    }\n    handleKeyDown(e) {\n        super.handleKeyDown(e);\n        if (e.defaultPrevented) {\n            return;\n        }\n        switch (e.key) {\n            case ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.KeyCode.SPACE:\n                this.handleKeySpace(e);\n                break;\n            case ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.KeyCode.ENTER:\n                this.handleKeyEnter(e);\n                break;\n            case ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.KeyCode.LEFT:\n                this.handleKeyLeft(e);\n                break;\n            case ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.KeyCode.RIGHT:\n                this.handleKeyRight(e);\n                break;\n        }\n    }\n    handleKeySpace(e) {\n        var _a;\n        (_a = this.getComponentForKeyEvent(e)) === null || _a === void 0 ? void 0 : _a.toggleSelected();\n    }\n    handleKeyEnter(e) {\n        if (!this.setFilterParams) {\n            return;\n        }\n        const { excelMode, readOnly } = this.setFilterParams || {};\n        if (!excelMode || !!readOnly) {\n            return;\n        }\n        e.preventDefault();\n        // in Excel Mode, hitting Enter is the same as pressing the Apply button\n        this.onBtApply(false, false, e);\n        if (this.setFilterParams.excelMode === 'mac') {\n            // in Mac version, select all the input text\n            this.eMiniFilter.getInputElement().select();\n        }\n    }\n    handleKeyLeft(e) {\n        var _a;\n        (_a = this.getComponentForKeyEvent(e)) === null || _a === void 0 ? void 0 : _a.setExpanded(false);\n    }\n    handleKeyRight(e) {\n        var _a;\n        (_a = this.getComponentForKeyEvent(e)) === null || _a === void 0 ? void 0 : _a.setExpanded(true);\n    }\n    getComponentForKeyEvent(e) {\n        var _a;\n        const eDocument = this.gridOptionsService.getDocument();\n        if (!this.eSetFilterList.contains(eDocument.activeElement) || !this.virtualList) {\n            return;\n        }\n        const currentItem = this.virtualList.getLastFocusedRow();\n        if (currentItem == null) {\n            return;\n        }\n        const component = this.virtualList.getComponentAt(currentItem);\n        if (component == null) {\n            return;\n        }\n        e.preventDefault();\n        const { readOnly } = (_a = this.setFilterParams) !== null && _a !== void 0 ? _a : {};\n        if (!!readOnly) {\n            return;\n        }\n        return component;\n    }\n    getCssIdentifier() {\n        return 'set-filter';\n    }\n    setModel(model) {\n        var _a;\n        if (model == null && ((_a = this.valueModel) === null || _a === void 0 ? void 0 : _a.getModel()) == null) {\n            // refreshing is expensive. if new and old model are both null (e.g. nothing set), skip.\n            // mini filter isn't contained within the model, so always reset\n            this.setMiniFilter(null);\n            return ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.AgPromise.resolve();\n        }\n        return super.setModel(model);\n    }\n    setModelAndRefresh(values) {\n        return this.valueModel ? this.valueModel.setModel(values).then(() => this.refresh()) : ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.AgPromise.resolve();\n    }\n    resetUiToDefaults() {\n        this.setMiniFilter(null);\n        return this.setModelAndRefresh(null);\n    }\n    setModelIntoUi(model) {\n        this.setMiniFilter(null);\n        const values = model == null ? null : model.values;\n        return this.setModelAndRefresh(values);\n    }\n    getModelFromUi() {\n        if (!this.valueModel) {\n            throw new Error('Value model has not been created.');\n        }\n        const values = this.valueModel.getModel();\n        if (!values) {\n            return null;\n        }\n        return { values, filterType: this.getFilterType() };\n    }\n    getFilterType() {\n        return 'set';\n    }\n    getValueModel() {\n        return this.valueModel;\n    }\n    areModelsEqual(a, b) {\n        // both are missing\n        if (a == null && b == null) {\n            return true;\n        }\n        return a != null && b != null && ag_grid_community__WEBPACK_IMPORTED_MODULE_0__._.areEqual(a.values, b.values);\n    }\n    setParams(params) {\n        var _a;\n        this.applyExcelModeOptions(params);\n        super.setParams(params);\n        this.setFilterParams = params;\n        this.convertValuesToStrings = !!params.convertValuesToStrings;\n        this.caseSensitive = !!params.caseSensitive;\n        let keyCreator = (_a = params.keyCreator) !== null && _a !== void 0 ? _a : params.colDef.keyCreator;\n        this.setValueFormatter(params.valueFormatter, keyCreator, this.convertValuesToStrings, !!params.treeList, !!params.colDef.refData);\n        const isGroupCol = params.column.getId().startsWith(ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.GROUP_AUTO_COLUMN_ID);\n        this.treeDataTreeList = this.gridOptionsService.is('treeData') && !!params.treeList && isGroupCol;\n        this.getDataPath = this.gridOptionsService.get('getDataPath');\n        this.groupingTreeList = !!this.columnModel.getRowGroupColumns().length && !!params.treeList && isGroupCol;\n        this.createKey = this.generateCreateKey(keyCreator, this.convertValuesToStrings, this.treeDataTreeList || this.groupingTreeList);\n        this.valueModel = new SetValueModel({\n            filterParams: params,\n            setIsLoading: loading => this.setIsLoading(loading),\n            valueFormatterService: this.valueFormatterService,\n            translate: key => this.translateForSetFilter(key),\n            caseFormat: v => this.caseFormat(v),\n            createKey: this.createKey,\n            valueFormatter: this.valueFormatter,\n            usingComplexObjects: !!keyCreator,\n            gridOptionsService: this.gridOptionsService,\n            columnModel: this.columnModel,\n            valueService: this.valueService,\n            treeDataTreeList: this.treeDataTreeList,\n            groupingTreeList: this.groupingTreeList\n        });\n        this.initialiseFilterBodyUi();\n        this.addEventListenersForDataChanges();\n    }\n    setValueFormatter(providedValueFormatter, keyCreator, convertValuesToStrings, treeList, isRefData) {\n        let valueFormatter = providedValueFormatter;\n        if (!valueFormatter) {\n            if (keyCreator && !convertValuesToStrings && !treeList) {\n                throw new Error('AG Grid: Must supply a Value Formatter in Set Filter params when using a Key Creator unless convertValuesToStrings is enabled');\n            }\n            this.noValueFormatterSupplied = true;\n            // ref data is handled by ValueFormatterService\n            if (!isRefData) {\n                valueFormatter = params => ag_grid_community__WEBPACK_IMPORTED_MODULE_0__._.toStringOrNull(params.value);\n            }\n        }\n        this.valueFormatter = valueFormatter;\n    }\n    generateCreateKey(keyCreator, convertValuesToStrings, treeDataOrGrouping) {\n        if (treeDataOrGrouping && !keyCreator) {\n            throw new Error('AG Grid: Must supply a Key Creator in Set Filter params when `treeList = true` on a group column, and Tree Data or Row Grouping is enabled.');\n        }\n        if (keyCreator) {\n            return (value, node = null) => {\n                const params = this.getKeyCreatorParams(value, node);\n                return ag_grid_community__WEBPACK_IMPORTED_MODULE_0__._.makeNull(keyCreator(params));\n            };\n        }\n        if (convertValuesToStrings) {\n            // for backwards compatibility - keeping separate as it will eventually be removed\n            return value => Array.isArray(value) ? value : ag_grid_community__WEBPACK_IMPORTED_MODULE_0__._.makeNull(ag_grid_community__WEBPACK_IMPORTED_MODULE_0__._.toStringOrNull(value));\n        }\n        else {\n            return value => ag_grid_community__WEBPACK_IMPORTED_MODULE_0__._.makeNull(ag_grid_community__WEBPACK_IMPORTED_MODULE_0__._.toStringOrNull(value));\n        }\n    }\n    getFormattedValue(key) {\n        var _a;\n        let value = this.valueModel.getValue(key);\n        if (this.noValueFormatterSupplied && (this.treeDataTreeList || this.groupingTreeList) && Array.isArray(value)) {\n            // essentially get back the cell value\n            value = ag_grid_community__WEBPACK_IMPORTED_MODULE_0__._.last(value);\n        }\n        const formattedValue = this.valueFormatterService.formatValue(this.setFilterParams.column, null, value, this.valueFormatter, false);\n        return (_a = (formattedValue == null ? ag_grid_community__WEBPACK_IMPORTED_MODULE_0__._.toStringOrNull(value) : formattedValue)) !== null && _a !== void 0 ? _a : this.translateForSetFilter('blanks');\n    }\n    applyExcelModeOptions(params) {\n        // apply default options to match Excel behaviour, unless they have already been specified\n        if (params.excelMode === 'windows') {\n            if (!params.buttons) {\n                params.buttons = ['apply', 'cancel'];\n            }\n            if (params.closeOnApply == null) {\n                params.closeOnApply = true;\n            }\n        }\n        else if (params.excelMode === 'mac') {\n            if (!params.buttons) {\n                params.buttons = ['reset'];\n            }\n            if (params.applyMiniFilterWhileTyping == null) {\n                params.applyMiniFilterWhileTyping = true;\n            }\n            if (params.debounceMs == null) {\n                params.debounceMs = 500;\n            }\n        }\n        if (params.excelMode && params.defaultToNothingSelected) {\n            params.defaultToNothingSelected = false;\n            ag_grid_community__WEBPACK_IMPORTED_MODULE_0__._.doOnce(() => console.warn('AG Grid: The Set Filter Parameter \"defaultToNothingSelected\" value was ignored because it does not work when \"excelMode\" is used.'), 'setFilterExcelModeDefaultToNothingSelect');\n        }\n    }\n    addEventListenersForDataChanges() {\n        if (!this.isValuesTakenFromGrid()) {\n            return;\n        }\n        this.addManagedListener(this.eventService, ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.Events.EVENT_CELL_VALUE_CHANGED, (event) => {\n            // only interested in changes to do with this column\n            if (this.setFilterParams && event.column === this.setFilterParams.column) {\n                this.syncAfterDataChange();\n            }\n        });\n    }\n    syncAfterDataChange() {\n        if (!this.valueModel) {\n            throw new Error('Value model has not been created.');\n        }\n        let promise = this.valueModel.refreshValues();\n        return promise.then(() => {\n            this.refresh();\n            this.onBtApply(false, true);\n        });\n    }\n    setIsLoading(isLoading) {\n        ag_grid_community__WEBPACK_IMPORTED_MODULE_0__._.setDisplayed(this.eFilterLoading, isLoading);\n        if (!isLoading) {\n            // hard refresh when async data received\n            this.hardRefreshVirtualList = true;\n        }\n    }\n    initialiseFilterBodyUi() {\n        this.initVirtualList();\n        this.initMiniFilter();\n    }\n    initVirtualList() {\n        if (!this.setFilterParams) {\n            throw new Error('Set filter params have not been provided.');\n        }\n        if (!this.valueModel) {\n            throw new Error('Value model has not been created.');\n        }\n        const translate = this.localeService.getLocaleTextFunc();\n        const filterListName = translate('ariaFilterList', 'Filter List');\n        const isTree = !!this.setFilterParams.treeList;\n        const virtualList = this.virtualList = this.createBean(new ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.VirtualList('filter', isTree ? 'tree' : 'listbox', filterListName));\n        const eSetFilterList = this.getRefElement('eSetFilterList');\n        if (isTree) {\n            eSetFilterList.classList.add('ag-set-filter-tree-list');\n        }\n        if (eSetFilterList) {\n            eSetFilterList.appendChild(virtualList.getGui());\n        }\n        const { cellHeight } = this.setFilterParams;\n        if (cellHeight != null) {\n            virtualList.setRowHeight(cellHeight);\n        }\n        const componentCreator = (item, listItemElement) => this.createSetListItem(item, isTree, listItemElement);\n        virtualList.setComponentCreator(componentCreator);\n        const componentUpdater = (item, component) => this.updateSetListItem(item, component);\n        virtualList.setComponentUpdater(componentUpdater);\n        let model;\n        if (this.setFilterParams.suppressSelectAll) {\n            model = new ModelWrapper(this.valueModel);\n        }\n        else {\n            model = new ModelWrapperWithSelectAll(this.valueModel, () => this.isSelectAllSelected());\n        }\n        if (isTree) {\n            model = new TreeModelWrapper(model);\n        }\n        virtualList.setModel(model);\n    }\n    getSelectAllLabel() {\n        if (!this.setFilterParams) {\n            throw new Error('Set filter params have not been provided.');\n        }\n        if (!this.valueModel) {\n            throw new Error('Value model has not been created.');\n        }\n        const key = this.valueModel.getMiniFilter() == null || !this.setFilterParams.excelMode ?\n            'selectAll' : 'selectAllSearchResults';\n        return this.translateForSetFilter(key);\n    }\n    createSetListItem(item, isTree, focusWrapper) {\n        var _a, _b, _c, _d, _e, _f;\n        if (!this.setFilterParams) {\n            throw new Error('Set filter params have not been provided.');\n        }\n        if (!this.valueModel) {\n            throw new Error('Value model has not been created.');\n        }\n        const groupsExist = this.valueModel.hasGroups();\n        let value;\n        let depth;\n        let isGroup;\n        let hasIndeterminateExpandState;\n        let selectedListener;\n        let expandedListener;\n        if (this.isSetFilterModelTreeItem(item)) {\n            depth = item.depth;\n            if (item.key === SetFilterDisplayValue.SELECT_ALL) {\n                // select all\n                value = () => this.getSelectAllLabel();\n                isGroup = groupsExist;\n                hasIndeterminateExpandState = true;\n                selectedListener = (e) => this.onSelectAll(e.isSelected);\n                expandedListener = (e) => this.onExpandAll(e.item, e.isExpanded);\n            }\n            else if (item.children) {\n                // group\n                value = (_c = (_b = (_a = this.setFilterParams).treeListFormatter) === null || _b === void 0 ? void 0 : _b.call(_a, item.treeKey, item.depth, item.parentTreeKeys)) !== null && _c !== void 0 ? _c : item.treeKey;\n                isGroup = true;\n                selectedListener = (e) => this.onGroupItemSelected(e.item, e.isSelected);\n                expandedListener = (e) => this.onExpandedChanged(e.item, e.isExpanded);\n            }\n            else {\n                // leaf\n                value = (_f = (_e = (_d = this.setFilterParams).treeListFormatter) === null || _e === void 0 ? void 0 : _e.call(_d, item.treeKey, item.depth, item.parentTreeKeys)) !== null && _f !== void 0 ? _f : item.treeKey;\n                selectedListener = (e) => this.onItemSelected(e.item.key, e.isSelected);\n            }\n        }\n        else {\n            if (item === SetFilterDisplayValue.SELECT_ALL) {\n                value = () => this.getSelectAllLabel();\n                selectedListener = (e) => this.onSelectAll(e.isSelected);\n            }\n            else {\n                value = this.valueModel.getValue(item);\n                selectedListener = (e) => this.onItemSelected(e.item, e.isSelected);\n            }\n        }\n        const { isSelected, isExpanded } = this.isSelectedExpanded(item);\n        const itemParams = {\n            focusWrapper,\n            value,\n            params: this.setFilterParams,\n            translate: (translateKey) => this.translateForSetFilter(translateKey),\n            valueFormatter: this.valueFormatter,\n            item,\n            isSelected,\n            isTree,\n            depth,\n            groupsExist,\n            isGroup,\n            isExpanded,\n            hasIndeterminateExpandState,\n        };\n        const listItem = this.createBean(new SetFilterListItem(itemParams));\n        listItem.addEventListener(SetFilterListItem.EVENT_SELECTION_CHANGED, selectedListener);\n        if (expandedListener) {\n            listItem.addEventListener(SetFilterListItem.EVENT_EXPANDED_CHANGED, expandedListener);\n        }\n        return listItem;\n    }\n    updateSetListItem(item, component) {\n        const { isSelected, isExpanded } = this.isSelectedExpanded(item);\n        component.refresh(item, isSelected, isExpanded);\n    }\n    isSelectedExpanded(item) {\n        let isSelected;\n        let isExpanded;\n        if (this.isSetFilterModelTreeItem(item)) {\n            isExpanded = item.expanded;\n            if (item.key === SetFilterDisplayValue.SELECT_ALL) {\n                isSelected = this.isSelectAllSelected();\n            }\n            else if (item.children) {\n                isSelected = this.areAllChildrenSelected(item);\n            }\n            else {\n                isSelected = this.valueModel.isKeySelected(item.key);\n            }\n        }\n        else {\n            if (item === SetFilterDisplayValue.SELECT_ALL) {\n                isSelected = this.isSelectAllSelected();\n            }\n            else {\n                isSelected = this.valueModel.isKeySelected(item);\n            }\n        }\n        return { isSelected, isExpanded };\n    }\n    isSetFilterModelTreeItem(item) {\n        return (item === null || item === void 0 ? void 0 : item.treeKey) !== undefined;\n    }\n    initMiniFilter() {\n        if (!this.setFilterParams) {\n            throw new Error('Set filter params have not been provided.');\n        }\n        if (!this.valueModel) {\n            throw new Error('Value model has not been created.');\n        }\n        const { eMiniFilter, localeService } = this;\n        const translate = localeService.getLocaleTextFunc();\n        eMiniFilter.setDisplayed(!this.setFilterParams.suppressMiniFilter);\n        eMiniFilter.setValue(this.valueModel.getMiniFilter());\n        eMiniFilter.onValueChange(() => this.onMiniFilterInput());\n        eMiniFilter.setInputAriaLabel(translate('ariaSearchFilterValues', 'Search filter values'));\n        this.addManagedListener(eMiniFilter.getInputElement(), 'keydown', e => this.onMiniFilterKeyDown(e));\n    }\n    // we need to have the GUI attached before we can draw the virtual rows, as the\n    // virtual row logic needs info about the GUI state\n    afterGuiAttached(params) {\n        if (!this.setFilterParams) {\n            throw new Error('Set filter params have not been provided.');\n        }\n        super.afterGuiAttached(params);\n        // collapse all tree list items (if tree list)\n        this.resetExpansion();\n        this.refreshVirtualList();\n        const { eMiniFilter } = this;\n        eMiniFilter.setInputPlaceholder(this.translateForSetFilter('searchOoo'));\n        if (!params || !params.suppressFocus) {\n            eMiniFilter.getFocusableElement().focus();\n        }\n    }\n    afterGuiDetached() {\n        var _a, _b;\n        super.afterGuiDetached();\n        // discard any unapplied UI state (reset to model)\n        if ((_a = this.setFilterParams) === null || _a === void 0 ? void 0 : _a.excelMode) {\n            this.resetMiniFilter();\n        }\n        const appliedModel = this.getModel();\n        if (((_b = this.setFilterParams) === null || _b === void 0 ? void 0 : _b.excelMode) || !this.areModelsEqual(appliedModel, this.getModelFromUi())) {\n            this.resetUiToActiveModel(appliedModel);\n            this.showOrHideResults();\n        }\n    }\n    applyModel(source = 'api') {\n        if (!this.setFilterParams) {\n            throw new Error('Set filter params have not been provided.');\n        }\n        if (!this.valueModel) {\n            throw new Error('Value model has not been created.');\n        }\n        if (this.setFilterParams.excelMode && source !== 'rowDataUpdated' && this.valueModel.isEverythingVisibleSelected()) {\n            // In Excel, if the filter is applied with all visible values selected, then any active filter on the\n            // column is removed. This ensures the filter is removed in this situation.\n            this.valueModel.selectAllMatchingMiniFilter();\n        }\n        const result = super.applyModel(source);\n        // keep appliedModelKeys in sync with the applied model\n        const appliedModel = this.getModel();\n        if (appliedModel) {\n            this.appliedModelKeys = new Set();\n            appliedModel.values.forEach(key => {\n                this.appliedModelKeys.add(this.caseFormat(key));\n            });\n        }\n        else {\n            this.appliedModelKeys = null;\n        }\n        this.noAppliedModelKeys = (appliedModel === null || appliedModel === void 0 ? void 0 : appliedModel.values.length) === 0;\n        return result;\n    }\n    isModelValid(model) {\n        return this.setFilterParams && this.setFilterParams.excelMode ? model == null || model.values.length > 0 : true;\n    }\n    doesFilterPass(params) {\n        if (!this.setFilterParams || !this.valueModel || !this.appliedModelKeys) {\n            return true;\n        }\n        // if nothing selected, don't need to check value\n        if (this.noAppliedModelKeys) {\n            return false;\n        }\n        const { node, data } = params;\n        if (this.treeDataTreeList) {\n            return this.doesFilterPassForTreeData(node, data);\n        }\n        if (this.groupingTreeList) {\n            return this.doesFilterPassForGrouping(node, data);\n        }\n        let value = this.getValueFromNode(node, data);\n        if (this.convertValuesToStrings) {\n            // for backwards compatibility - keeping separate as it will eventually be removed\n            return this.doesFilterPassForConvertValuesToString(node, value);\n        }\n        if (value != null && Array.isArray(value)) {\n            if (value.length === 0) {\n                return this.appliedModelKeys.has(null);\n            }\n            return value.some(v => this.isInAppliedModel(this.createKey(v, node)));\n        }\n        return this.isInAppliedModel(this.createKey(value, node));\n    }\n    doesFilterPassForConvertValuesToString(node, value) {\n        const key = this.createKey(value, node);\n        if (key != null && Array.isArray(key)) {\n            if (key.length === 0) {\n                return this.appliedModelKeys.has(null);\n            }\n            return key.some(v => this.isInAppliedModel(v));\n        }\n        return this.isInAppliedModel(key);\n    }\n    doesFilterPassForTreeData(node, data) {\n        var _a;\n        if ((_a = node.childrenAfterGroup) === null || _a === void 0 ? void 0 : _a.length) {\n            // only perform checking on leaves. The core filtering logic for tree data won't work properly otherwise\n            return false;\n        }\n        return this.isInAppliedModel(this.createKey(this.checkMakeNullDataPath(this.getDataPath(data))));\n    }\n    doesFilterPassForGrouping(node, data) {\n        const dataPath = this.columnModel.getRowGroupColumns().map(groupCol => this.valueService.getKeyForNode(groupCol, node));\n        dataPath.push(this.getValueFromNode(node, data));\n        return this.isInAppliedModel(this.createKey(this.checkMakeNullDataPath(dataPath)));\n    }\n    checkMakeNullDataPath(dataPath) {\n        if (dataPath) {\n            dataPath = dataPath.map(treeKey => ag_grid_community__WEBPACK_IMPORTED_MODULE_0__._.toStringOrNull(ag_grid_community__WEBPACK_IMPORTED_MODULE_0__._.makeNull(treeKey)));\n        }\n        if (dataPath === null || dataPath === void 0 ? void 0 : dataPath.some(treeKey => treeKey == null)) {\n            return null;\n        }\n        return dataPath;\n    }\n    isInAppliedModel(key) {\n        return this.appliedModelKeys.has(this.caseFormat(key));\n    }\n    getValueFromNode(node, data) {\n        const { valueGetter, api, colDef, column, columnApi, context } = this.setFilterParams;\n        return valueGetter({\n            api,\n            colDef,\n            column,\n            columnApi,\n            context,\n            data: data,\n            getValue: (field) => data[field],\n            node: node,\n        });\n    }\n    getKeyCreatorParams(value, node = null) {\n        return {\n            value,\n            colDef: this.setFilterParams.colDef,\n            column: this.setFilterParams.column,\n            node: node,\n            data: node === null || node === void 0 ? void 0 : node.data,\n            api: this.setFilterParams.api,\n            columnApi: this.setFilterParams.columnApi,\n            context: this.setFilterParams.context\n        };\n    }\n    onNewRowsLoaded() {\n        if (!this.isValuesTakenFromGrid()) {\n            return;\n        }\n        this.syncAfterDataChange();\n    }\n    isValuesTakenFromGrid() {\n        if (!this.valueModel) {\n            return false;\n        }\n        const valuesType = this.valueModel.getValuesType();\n        return valuesType === SetFilterModelValuesType.TAKEN_FROM_GRID_VALUES;\n    }\n    //noinspection JSUnusedGlobalSymbols\n    /**\n     * Public method provided so the user can change the value of the filter once\n     * the filter has been already started\n     * @param values The values to use.\n     */\n    setFilterValues(values) {\n        if (!this.valueModel) {\n            throw new Error('Value model has not been created.');\n        }\n        this.valueModel.overrideValues(values).then(() => {\n            this.refresh();\n            this.onUiChanged();\n        });\n    }\n    //noinspection JSUnusedGlobalSymbols\n    /**\n     * Public method provided so the user can reset the values of the filter once that it has started.\n     */\n    resetFilterValues() {\n        if (!this.valueModel) {\n            throw new Error('Value model has not been created.');\n        }\n        this.valueModel.setValuesType(SetFilterModelValuesType.TAKEN_FROM_GRID_VALUES);\n        this.syncAfterDataChange();\n    }\n    refreshFilterValues() {\n        if (!this.valueModel) {\n            throw new Error('Value model has not been created.');\n        }\n        // the model is still being initialised\n        if (!this.valueModel.isInitialised()) {\n            return;\n        }\n        this.valueModel.refreshValues().then(() => {\n            this.refresh();\n            this.onUiChanged();\n        });\n    }\n    onAnyFilterChanged() {\n        // don't block the current action when updating the values for this filter\n        setTimeout(() => {\n            if (!this.isAlive()) {\n                return;\n            }\n            if (!this.valueModel) {\n                throw new Error('Value model has not been created.');\n            }\n            this.valueModel.refreshAfterAnyFilterChanged().then(refresh => {\n                if (refresh) {\n                    this.refresh();\n                    this.showOrHideResults();\n                }\n            });\n        }, 0);\n    }\n    onMiniFilterInput() {\n        if (!this.setFilterParams) {\n            throw new Error('Set filter params have not been provided.');\n        }\n        if (!this.valueModel) {\n            throw new Error('Value model has not been created.');\n        }\n        if (!this.valueModel.setMiniFilter(this.eMiniFilter.getValue())) {\n            return;\n        }\n        const { applyMiniFilterWhileTyping, readOnly } = this.setFilterParams || {};\n        if (!readOnly && applyMiniFilterWhileTyping) {\n            this.filterOnAllVisibleValues(false);\n        }\n        else {\n            this.updateUiAfterMiniFilterChange();\n        }\n    }\n    updateUiAfterMiniFilterChange() {\n        if (!this.setFilterParams) {\n            throw new Error('Set filter params have not been provided.');\n        }\n        if (!this.valueModel) {\n            throw new Error('Value model has not been created.');\n        }\n        const { excelMode, readOnly } = this.setFilterParams || {};\n        if (excelMode == null || !!readOnly) {\n            this.refresh();\n        }\n        else if (this.valueModel.getMiniFilter() == null) {\n            this.resetUiToActiveModel(this.getModel());\n        }\n        else {\n            this.valueModel.selectAllMatchingMiniFilter(true);\n            this.refresh();\n            this.onUiChanged();\n        }\n        this.showOrHideResults();\n    }\n    showOrHideResults() {\n        if (!this.valueModel) {\n            throw new Error('Value model has not been created.');\n        }\n        const hideResults = this.valueModel.getMiniFilter() != null && this.valueModel.getDisplayedValueCount() < 1;\n        ag_grid_community__WEBPACK_IMPORTED_MODULE_0__._.setDisplayed(this.eNoMatches, hideResults);\n        ag_grid_community__WEBPACK_IMPORTED_MODULE_0__._.setDisplayed(this.eSetFilterList, !hideResults);\n    }\n    resetMiniFilter() {\n        var _a;\n        this.eMiniFilter.setValue(null, true);\n        (_a = this.valueModel) === null || _a === void 0 ? void 0 : _a.setMiniFilter(null);\n    }\n    resetUiToActiveModel(currentModel, afterUiUpdatedFunc) {\n        // override the default behaviour as we don't always want to clear the mini filter\n        this.setModelAndRefresh(currentModel == null ? null : currentModel.values).then(() => {\n            this.onUiChanged(false, 'prevent');\n            afterUiUpdatedFunc === null || afterUiUpdatedFunc === void 0 ? void 0 : afterUiUpdatedFunc();\n        });\n    }\n    handleCancelEnd(e) {\n        this.setMiniFilter(null);\n        super.handleCancelEnd(e);\n    }\n    onMiniFilterKeyDown(e) {\n        const { excelMode, readOnly } = this.setFilterParams || {};\n        if (e.key === ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.KeyCode.ENTER && !excelMode && !readOnly) {\n            this.filterOnAllVisibleValues();\n        }\n    }\n    filterOnAllVisibleValues(applyImmediately = true) {\n        const { readOnly } = this.setFilterParams || {};\n        if (!this.valueModel) {\n            throw new Error('Value model has not been created.');\n        }\n        if (!!readOnly) {\n            throw new Error('Unable to filter in readOnly mode.');\n        }\n        this.valueModel.selectAllMatchingMiniFilter(true);\n        this.refresh();\n        this.onUiChanged(false, applyImmediately ? 'immediately' : 'debounce');\n        this.showOrHideResults();\n    }\n    focusRowIfAlive(rowIndex) {\n        if (rowIndex == null) {\n            return;\n        }\n        window.setTimeout(() => {\n            if (!this.virtualList) {\n                throw new Error('Virtual list has not been created.');\n            }\n            if (this.isAlive()) {\n                this.virtualList.focusRow(rowIndex);\n            }\n        }, 0);\n    }\n    onSelectAll(isSelected) {\n        if (!this.valueModel) {\n            throw new Error('Value model has not been created.');\n        }\n        if (!this.virtualList) {\n            throw new Error('Virtual list has not been created.');\n        }\n        if (isSelected) {\n            this.valueModel.selectAllMatchingMiniFilter();\n        }\n        else {\n            this.valueModel.deselectAllMatchingMiniFilter();\n        }\n        this.refreshAfterSelection();\n    }\n    onGroupItemSelected(item, isSelected) {\n        const recursiveGroupSelection = (i) => {\n            if (i.children) {\n                i.children.forEach(childItem => recursiveGroupSelection(childItem));\n            }\n            else {\n                this.selectItem(i.key, isSelected);\n            }\n        };\n        recursiveGroupSelection(item);\n        this.refreshAfterSelection();\n    }\n    onItemSelected(key, isSelected) {\n        if (!this.valueModel) {\n            throw new Error('Value model has not been created.');\n        }\n        if (!this.virtualList) {\n            throw new Error('Virtual list has not been created.');\n        }\n        this.selectItem(key, isSelected);\n        this.refreshAfterSelection();\n    }\n    selectItem(key, isSelected) {\n        if (isSelected) {\n            this.valueModel.selectKey(key);\n        }\n        else {\n            this.valueModel.deselectKey(key);\n        }\n    }\n    onExpandAll(item, isExpanded) {\n        const recursiveExpansion = (i) => {\n            if (i.filterPasses && i.available && i.children) {\n                i.children.forEach(childItem => recursiveExpansion(childItem));\n                i.expanded = isExpanded;\n            }\n        };\n        recursiveExpansion(item);\n        this.refreshAfterExpansion();\n    }\n    onExpandedChanged(item, isExpanded) {\n        item.expanded = isExpanded;\n        this.refreshAfterExpansion();\n    }\n    refreshAfterExpansion() {\n        const focusedRow = this.virtualList.getLastFocusedRow();\n        this.valueModel.updateDisplayedValues('expansion');\n        this.refresh();\n        this.focusRowIfAlive(focusedRow);\n    }\n    refreshAfterSelection() {\n        const focusedRow = this.virtualList.getLastFocusedRow();\n        this.refresh();\n        this.onUiChanged();\n        this.focusRowIfAlive(focusedRow);\n    }\n    setMiniFilter(newMiniFilter) {\n        this.eMiniFilter.setValue(newMiniFilter);\n        this.onMiniFilterInput();\n    }\n    getMiniFilter() {\n        return this.valueModel ? this.valueModel.getMiniFilter() : null;\n    }\n    refresh() {\n        if (!this.virtualList) {\n            throw new Error('Virtual list has not been created.');\n        }\n        this.virtualList.refresh(!this.hardRefreshVirtualList);\n        if (this.hardRefreshVirtualList) {\n            this.hardRefreshVirtualList = false;\n        }\n    }\n    getFilterKeys() {\n        return this.valueModel ? this.valueModel.getKeys() : [];\n    }\n    getFilterValues() {\n        return this.valueModel ? this.valueModel.getValues() : [];\n    }\n    getValues() {\n        return this.getFilterKeys();\n    }\n    refreshVirtualList() {\n        if (this.setFilterParams && this.setFilterParams.refreshValuesOnOpen) {\n            this.refreshFilterValues();\n        }\n        else {\n            this.refresh();\n        }\n    }\n    translateForSetFilter(key) {\n        const translate = this.localeService.getLocaleTextFunc();\n        return translate(key, DEFAULT_LOCALE_TEXT[key]);\n    }\n    isSelectAllSelected() {\n        if (!this.setFilterParams || !this.valueModel) {\n            return false;\n        }\n        if (!this.setFilterParams.defaultToNothingSelected) {\n            // everything selected by default\n            if (this.valueModel.hasSelections() && this.valueModel.isNothingVisibleSelected()) {\n                return false;\n            }\n            if (this.valueModel.isEverythingVisibleSelected()) {\n                return true;\n            }\n        }\n        else {\n            // nothing selected by default\n            if (this.valueModel.hasSelections() && this.valueModel.isEverythingVisibleSelected()) {\n                return true;\n            }\n            if (this.valueModel.isNothingVisibleSelected()) {\n                return false;\n            }\n        }\n        // returning `undefined` means the checkbox status is indeterminate.\n        return undefined;\n    }\n    areAllChildrenSelected(item) {\n        const recursiveChildSelectionCheck = (i) => {\n            if (i.children) {\n                let someTrue = false;\n                let someFalse = false;\n                const mixed = i.children.some(child => {\n                    if (!child.filterPasses || !child.available) {\n                        return false;\n                    }\n                    const childSelected = recursiveChildSelectionCheck(child);\n                    if (childSelected === undefined) {\n                        return true;\n                    }\n                    if (childSelected) {\n                        someTrue = true;\n                    }\n                    else {\n                        someFalse = true;\n                    }\n                    return someTrue && someFalse;\n                });\n                // returning `undefined` means the checkbox status is indeterminate.\n                // if not mixed and some true, all must be true\n                return mixed ? undefined : someTrue;\n            }\n            else {\n                return this.valueModel.isKeySelected(i.key);\n            }\n        };\n        if (!this.setFilterParams.defaultToNothingSelected) {\n            // everything selected by default\n            return recursiveChildSelectionCheck(item);\n        }\n        else {\n            // nothing selected by default\n            return this.valueModel.hasSelections() && recursiveChildSelectionCheck(item);\n        }\n    }\n    destroy() {\n        if (this.virtualList != null) {\n            this.virtualList.destroy();\n            this.virtualList = null;\n        }\n        super.destroy();\n    }\n    caseFormat(valueToFormat) {\n        if (valueToFormat == null || typeof valueToFormat !== 'string') {\n            return valueToFormat;\n        }\n        return this.caseSensitive ? valueToFormat : valueToFormat.toUpperCase();\n    }\n    resetExpansion() {\n        var _a, _b;\n        if (!((_a = this.setFilterParams) === null || _a === void 0 ? void 0 : _a.treeList)) {\n            return;\n        }\n        const selectAllItem = (_b = this.valueModel) === null || _b === void 0 ? void 0 : _b.getSelectAllItem();\n        if (this.isSetFilterModelTreeItem(selectAllItem)) {\n            const recursiveCollapse = (i) => {\n                if (i.children) {\n                    i.children.forEach(childItem => recursiveCollapse(childItem));\n                    i.expanded = false;\n                }\n            };\n            recursiveCollapse(selectAllItem);\n            this.valueModel.updateDisplayedValues('expansion');\n        }\n    }\n    getModelAsString(model) {\n        return this.filterModelFormatter.getModelAsString(model, this);\n    }\n    getPositionableElement() {\n        return this.eSetFilterList;\n    }\n}\n__decorate$c([\n    (0,ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.RefSelector)('eMiniFilter')\n], SetFilter.prototype, \"eMiniFilter\", void 0);\n__decorate$c([\n    (0,ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.RefSelector)('eFilterLoading')\n], SetFilter.prototype, \"eFilterLoading\", void 0);\n__decorate$c([\n    (0,ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.RefSelector)('eSetFilterList')\n], SetFilter.prototype, \"eSetFilterList\", void 0);\n__decorate$c([\n    (0,ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.RefSelector)('eFilterNoMatches')\n], SetFilter.prototype, \"eNoMatches\", void 0);\n__decorate$c([\n    (0,ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.Autowired)('valueFormatterService')\n], SetFilter.prototype, \"valueFormatterService\", void 0);\n__decorate$c([\n    (0,ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.Autowired)('columnModel')\n], SetFilter.prototype, \"columnModel\", void 0);\n__decorate$c([\n    (0,ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.Autowired)('valueService')\n], SetFilter.prototype, \"valueService\", void 0);\nclass ModelWrapper {\n    constructor(model) {\n        this.model = model;\n    }\n    getRowCount() {\n        return this.model.getDisplayedValueCount();\n    }\n    getRow(index) {\n        return this.model.getDisplayedItem(index);\n    }\n    isRowSelected(index) {\n        return this.model.isKeySelected(this.getRow(index));\n    }\n    areRowsEqual(oldRow, newRow) {\n        return oldRow === newRow;\n    }\n}\nclass ModelWrapperWithSelectAll {\n    constructor(model, isSelectAllSelected) {\n        this.model = model;\n        this.isSelectAllSelected = isSelectAllSelected;\n    }\n    getRowCount() {\n        return this.model.getDisplayedValueCount() + 1;\n    }\n    getRow(index) {\n        return index === 0 ? this.model.getSelectAllItem() : this.model.getDisplayedItem(index - 1);\n    }\n    isRowSelected(index) {\n        return index === 0 ? this.isSelectAllSelected() : this.model.isKeySelected(this.getRow(index));\n    }\n    areRowsEqual(oldRow, newRow) {\n        return oldRow === newRow;\n    }\n}\n// isRowSelected is used by VirtualList to add aria tags for flat lists. We want to suppress this when using trees\nclass TreeModelWrapper {\n    constructor(model) {\n        this.model = model;\n    }\n    getRowCount() {\n        return this.model.getRowCount();\n    }\n    getRow(index) {\n        return this.model.getRow(index);\n    }\n    areRowsEqual(oldRow, newRow) {\n        if (oldRow == null && newRow == null) {\n            return true;\n        }\n        return oldRow != null && newRow != null && oldRow.treeKey === newRow.treeKey && oldRow.depth === newRow.depth;\n    }\n}\n\nvar __decorate$b = ( false) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nclass SetFloatingFilterComp extends ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.Component {\n    constructor() {\n        super(/* html */ `\n            <div class=\"ag-floating-filter-input ag-set-floating-filter-input\" role=\"presentation\">\n                <ag-input-text-field ref=\"eFloatingFilterText\"></ag-input-text-field>\n            </div>`);\n        this.availableValuesListenerAdded = false;\n        this.filterModelFormatter = new SetFilterModelFormatter();\n    }\n    // this is a user component, and IComponent has \"public destroy()\" as part of the interface.\n    // so we need to override destroy() just to make the method public.\n    destroy() {\n        super.destroy();\n    }\n    init(params) {\n        const displayName = this.columnModel.getDisplayNameForColumn(params.column, 'header', true);\n        const translate = this.localeService.getLocaleTextFunc();\n        this.eFloatingFilterText\n            .setDisabled(true)\n            .setInputAriaLabel(`${displayName} ${translate('ariaFilterInput', 'Filter Input')}`)\n            .addGuiEventListener('click', () => params.showParentFilter());\n        this.params = params;\n    }\n    onParentModelChanged(parentModel) {\n        this.updateFloatingFilterText(parentModel);\n    }\n    parentSetFilterInstance(cb) {\n        this.params.parentFilterInstance((filter) => {\n            if (!(filter instanceof SetFilter)) {\n                throw new Error('AG Grid - SetFloatingFilter expects SetFilter as its parent');\n            }\n            cb(filter);\n        });\n    }\n    addAvailableValuesListener() {\n        this.parentSetFilterInstance((setFilter) => {\n            const setValueModel = setFilter.getValueModel();\n            if (!setValueModel) {\n                return;\n            }\n            // unlike other filters, what we show in the floating filter can be different, even\n            // if another filter changes. this is due to how set filter restricts its values based\n            // on selections in other filters, e.g. if you filter Language to English, then the set filter\n            // on Country will only show English speaking countries. Thus the list of items to show\n            // in the floating filter can change.\n            this.addManagedListener(setValueModel, SetValueModel.EVENT_AVAILABLE_VALUES_CHANGED, () => this.updateFloatingFilterText());\n        });\n        this.availableValuesListenerAdded = true;\n    }\n    updateFloatingFilterText(parentModel) {\n        if (!this.availableValuesListenerAdded) {\n            this.addAvailableValuesListener();\n        }\n        this.parentSetFilterInstance((setFilter) => {\n            this.eFloatingFilterText.setValue(this.filterModelFormatter.getModelAsString(parentModel, setFilter));\n        });\n    }\n}\n__decorate$b([\n    (0,ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.RefSelector)('eFloatingFilterText')\n], SetFloatingFilterComp.prototype, \"eFloatingFilterText\", void 0);\n__decorate$b([\n    (0,ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.Autowired)('columnModel')\n], SetFloatingFilterComp.prototype, \"columnModel\", void 0);\n\n// DO NOT UPDATE MANUALLY: Generated from script during build time\nconst VERSION$3 = '30.0.2';\n\nconst SetFilterModule = {\n    version: VERSION$3,\n    moduleName: ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.ModuleNames.SetFilterModule,\n    beans: [],\n    userComponents: [\n        { componentName: 'agSetColumnFilter', componentClass: SetFilter },\n        { componentName: 'agSetColumnFloatingFilter', componentClass: SetFloatingFilterComp },\n    ],\n    dependantModules: [\n        EnterpriseCoreModule\n    ]\n};\n\nvar __decorate$a = ( false) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nlet StatusBarService = class StatusBarService extends ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.BeanStub {\n    // tslint:disable-next-line\n    constructor() {\n        super();\n        this.allComponents = {};\n    }\n    registerStatusPanel(key, component) {\n        this.allComponents[key] = component;\n    }\n    getStatusPanel(key) {\n        return this.allComponents[key];\n    }\n};\nStatusBarService = __decorate$a([\n    (0,ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.Bean)('statusBarService')\n], StatusBarService);\n\nvar __decorate$9 = ( false) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nclass StatusBar extends ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.Component {\n    constructor() {\n        super(StatusBar.TEMPLATE);\n    }\n    postConstruct() {\n        var _a;\n        const statusPanels = (_a = this.gridOptionsService.get('statusBar')) === null || _a === void 0 ? void 0 : _a.statusPanels;\n        if (statusPanels) {\n            const leftStatusPanelComponents = statusPanels\n                .filter((componentConfig) => componentConfig.align === 'left');\n            this.createAndRenderComponents(leftStatusPanelComponents, this.eStatusBarLeft);\n            const centerStatusPanelComponents = statusPanels\n                .filter((componentConfig) => componentConfig.align === 'center');\n            this.createAndRenderComponents(centerStatusPanelComponents, this.eStatusBarCenter);\n            const rightStatusPanelComponents = statusPanels\n                .filter((componentConfig) => (!componentConfig.align || componentConfig.align === 'right'));\n            this.createAndRenderComponents(rightStatusPanelComponents, this.eStatusBarRight);\n        }\n        else {\n            this.setDisplayed(false);\n        }\n    }\n    createAndRenderComponents(statusBarComponents, ePanelComponent) {\n        const componentDetails = [];\n        statusBarComponents.forEach(componentConfig => {\n            const params = {};\n            const compDetails = this.userComponentFactory.getStatusPanelCompDetails(componentConfig, params);\n            const promise = compDetails.newAgStackInstance();\n            if (!promise) {\n                return;\n            }\n            componentDetails.push({\n                // default to the component name if no key supplied\n                key: componentConfig.key || componentConfig.statusPanel,\n                promise\n            });\n        });\n        ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.AgPromise.all(componentDetails.map((details) => details.promise))\n            .then(() => {\n            componentDetails.forEach(componentDetail => {\n                componentDetail.promise.then((component) => {\n                    const destroyFunc = () => {\n                        this.getContext().destroyBean(component);\n                    };\n                    if (this.isAlive()) {\n                        this.statusBarService.registerStatusPanel(componentDetail.key, component);\n                        ePanelComponent.appendChild(component.getGui());\n                        this.addDestroyFunc(destroyFunc);\n                    }\n                    else {\n                        destroyFunc();\n                    }\n                });\n            });\n        });\n    }\n}\nStatusBar.TEMPLATE = `<div class=\"ag-status-bar\">\n            <div ref=\"eStatusBarLeft\" class=\"ag-status-bar-left\" role=\"status\"></div>\n            <div ref=\"eStatusBarCenter\" class=\"ag-status-bar-center\" role=\"status\"></div>\n            <div ref=\"eStatusBarRight\" class=\"ag-status-bar-right\" role=\"status\"></div>\n        </div>`;\n__decorate$9([\n    (0,ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.Autowired)('userComponentFactory')\n], StatusBar.prototype, \"userComponentFactory\", void 0);\n__decorate$9([\n    (0,ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.Autowired)('statusBarService')\n], StatusBar.prototype, \"statusBarService\", void 0);\n__decorate$9([\n    (0,ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.RefSelector)('eStatusBarLeft')\n], StatusBar.prototype, \"eStatusBarLeft\", void 0);\n__decorate$9([\n    (0,ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.RefSelector)('eStatusBarCenter')\n], StatusBar.prototype, \"eStatusBarCenter\", void 0);\n__decorate$9([\n    (0,ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.RefSelector)('eStatusBarRight')\n], StatusBar.prototype, \"eStatusBarRight\", void 0);\n__decorate$9([\n    ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.PostConstruct\n], StatusBar.prototype, \"postConstruct\", null);\n\nvar __decorate$8 = ( false) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nclass NameValueComp extends ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.Component {\n    constructor() {\n        super(NameValueComp.TEMPLATE);\n    }\n    setLabel(key, defaultValue) {\n        // we want to hide until the first value comes in\n        this.setDisplayed(false);\n        const localeTextFunc = this.localeService.getLocaleTextFunc();\n        this.eLabel.innerHTML = localeTextFunc(key, defaultValue);\n    }\n    setValue(value) {\n        this.eValue.innerHTML = value;\n    }\n}\nNameValueComp.TEMPLATE = `<div class=\"ag-status-name-value\">\n            <span ref=\"eLabel\"></span>:&nbsp;\n            <span ref=\"eValue\" class=\"ag-status-name-value-value\"></span>\n        </div>`;\n__decorate$8([\n    (0,ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.RefSelector)('eLabel')\n], NameValueComp.prototype, \"eLabel\", void 0);\n__decorate$8([\n    (0,ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.RefSelector)('eValue')\n], NameValueComp.prototype, \"eValue\", void 0);\n\nvar __decorate$7 = ( false) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nclass TotalAndFilteredRowsComp extends NameValueComp {\n    postConstruct() {\n        // this component is only really useful with client side row model\n        if (this.gridApi.getModel().getType() !== 'clientSide') {\n            console.warn(`AG Grid: agTotalAndFilteredRowCountComponent should only be used with the client side row model.`);\n            return;\n        }\n        this.setLabel('totalAndFilteredRows', 'Rows');\n        this.addCssClass('ag-status-panel');\n        this.addCssClass('ag-status-panel-total-and-filtered-row-count');\n        this.setDisplayed(true);\n        this.addManagedListener(this.eventService, ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.Events.EVENT_MODEL_UPDATED, this.onDataChanged.bind(this));\n        this.onDataChanged();\n    }\n    onDataChanged() {\n        const localeTextFunc = this.localeService.getLocaleTextFunc();\n        const thousandSeparator = localeTextFunc('thousandSeparator', ',');\n        const decimalSeparator = localeTextFunc('decimalSeparator', '.');\n        const rowCount = ag_grid_community__WEBPACK_IMPORTED_MODULE_0__._.formatNumberCommas(this.getFilteredRowCountValue(), thousandSeparator, decimalSeparator);\n        const totalRowCount = ag_grid_community__WEBPACK_IMPORTED_MODULE_0__._.formatNumberCommas(this.getTotalRowCount(), thousandSeparator, decimalSeparator);\n        if (rowCount === totalRowCount) {\n            this.setValue(rowCount);\n        }\n        else {\n            const localeTextFunc = this.localeService.getLocaleTextFunc();\n            this.setValue(`${rowCount} ${localeTextFunc('of', 'of')} ${totalRowCount}`);\n        }\n    }\n    getFilteredRowCountValue() {\n        let filteredRowCount = 0;\n        this.gridApi.forEachNodeAfterFilter((node) => {\n            if (!node.group) {\n                filteredRowCount++;\n            }\n        });\n        return filteredRowCount;\n    }\n    getTotalRowCount() {\n        let totalRowCount = 0;\n        this.gridApi.forEachNode(node => {\n            if (!node.group) {\n                totalRowCount++;\n            }\n        });\n        return totalRowCount;\n    }\n    init() { }\n    // this is a user component, and IComponent has \"public destroy()\" as part of the interface.\n    // so we need to override destroy() just to make the method public.\n    destroy() {\n        super.destroy();\n    }\n}\n__decorate$7([\n    (0,ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.Autowired)('gridApi')\n], TotalAndFilteredRowsComp.prototype, \"gridApi\", void 0);\n__decorate$7([\n    ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.PostConstruct\n], TotalAndFilteredRowsComp.prototype, \"postConstruct\", null);\n\nvar __decorate$6 = ( false) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nclass FilteredRowsComp extends NameValueComp {\n    postConstruct() {\n        this.setLabel('filteredRows', 'Filtered');\n        // this component is only really useful with client side row model\n        if (this.gridApi.getModel().getType() !== 'clientSide') {\n            console.warn(`AG Grid: agFilteredRowCountComponent should only be used with the client side row model.`);\n            return;\n        }\n        this.addCssClass('ag-status-panel');\n        this.addCssClass('ag-status-panel-filtered-row-count');\n        this.setDisplayed(true);\n        const listener = this.onDataChanged.bind(this);\n        this.addManagedListener(this.eventService, ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.Events.EVENT_MODEL_UPDATED, listener);\n        listener();\n    }\n    onDataChanged() {\n        const totalRowCountValue = this.getTotalRowCountValue();\n        const filteredRowCountValue = this.getFilteredRowCountValue();\n        const localeTextFunc = this.localeService.getLocaleTextFunc();\n        const thousandSeparator = localeTextFunc('thousandSeparator', ',');\n        const decimalSeparator = localeTextFunc('decimalSeparator', '.');\n        this.setValue(ag_grid_community__WEBPACK_IMPORTED_MODULE_0__._.formatNumberCommas(filteredRowCountValue, thousandSeparator, decimalSeparator));\n        this.setDisplayed(totalRowCountValue !== filteredRowCountValue);\n    }\n    getTotalRowCountValue() {\n        let totalRowCount = 0;\n        this.gridApi.forEachNode((node) => totalRowCount += 1);\n        return totalRowCount;\n    }\n    getFilteredRowCountValue() {\n        let filteredRowCount = 0;\n        this.gridApi.forEachNodeAfterFilter((node) => {\n            if (!node.group) {\n                filteredRowCount += 1;\n            }\n        });\n        return filteredRowCount;\n    }\n    init() { }\n    // this is a user component, and IComponent has \"public destroy()\" as part of the interface.\n    // so we need to override destroy() just to make the method public.\n    destroy() {\n        super.destroy();\n    }\n}\n__decorate$6([\n    (0,ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.Autowired)('gridApi')\n], FilteredRowsComp.prototype, \"gridApi\", void 0);\n__decorate$6([\n    ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.PostConstruct\n], FilteredRowsComp.prototype, \"postConstruct\", null);\n\nvar __decorate$5 = ( false) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nclass TotalRowsComp extends NameValueComp {\n    postConstruct() {\n        this.setLabel('totalRows', 'Total Rows');\n        // this component is only really useful with client side row model\n        if (this.gridApi.getModel().getType() !== 'clientSide') {\n            console.warn(`AG Grid: agTotalRowCountComponent should only be used with the client side row model.`);\n            return;\n        }\n        this.addCssClass('ag-status-panel');\n        this.addCssClass('ag-status-panel-total-row-count');\n        this.setDisplayed(true);\n        this.addManagedListener(this.eventService, ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.Events.EVENT_MODEL_UPDATED, this.onDataChanged.bind(this));\n        this.onDataChanged();\n    }\n    onDataChanged() {\n        const localeTextFunc = this.localeService.getLocaleTextFunc();\n        const thousandSeparator = localeTextFunc('thousandSeparator', ',');\n        const decimalSeparator = localeTextFunc('decimalSeparator', '.');\n        this.setValue(ag_grid_community__WEBPACK_IMPORTED_MODULE_0__._.formatNumberCommas(this.getRowCountValue(), thousandSeparator, decimalSeparator));\n    }\n    getRowCountValue() {\n        let totalRowCount = 0;\n        this.gridApi.forEachLeafNode((node) => totalRowCount += 1);\n        return totalRowCount;\n    }\n    init() {\n    }\n    // this is a user component, and IComponent has \"public destroy()\" as part of the interface.\n    // so we need to override destroy() just to make the method public.\n    destroy() {\n        super.destroy();\n    }\n}\n__decorate$5([\n    (0,ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.Autowired)('gridApi')\n], TotalRowsComp.prototype, \"gridApi\", void 0);\n__decorate$5([\n    ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.PostConstruct\n], TotalRowsComp.prototype, \"postConstruct\", null);\n\nvar __decorate$4 = ( false) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nclass SelectedRowsComp extends NameValueComp {\n    postConstruct() {\n        if (!this.isValidRowModel()) {\n            console.warn(`AG Grid: agSelectedRowCountComponent should only be used with the client and server side row model.`);\n            return;\n        }\n        this.setLabel('selectedRows', 'Selected');\n        this.addCssClass('ag-status-panel');\n        this.addCssClass('ag-status-panel-selected-row-count');\n        this.onRowSelectionChanged();\n        const eventListener = this.onRowSelectionChanged.bind(this);\n        this.addManagedListener(this.eventService, ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.Events.EVENT_MODEL_UPDATED, eventListener);\n        this.addManagedListener(this.eventService, ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.Events.EVENT_SELECTION_CHANGED, eventListener);\n    }\n    isValidRowModel() {\n        // this component is only really useful with client or server side rowmodels\n        const rowModelType = this.gridApi.getModel().getType();\n        return rowModelType === 'clientSide' || rowModelType === 'serverSide';\n    }\n    onRowSelectionChanged() {\n        const selectedRowCount = this.selectionService.getSelectionCount();\n        if (selectedRowCount < 0) {\n            this.setValue('?');\n            this.setDisplayed(true);\n            return;\n        }\n        const localeTextFunc = this.localeService.getLocaleTextFunc();\n        const thousandSeparator = localeTextFunc('thousandSeparator', ',');\n        const decimalSeparator = localeTextFunc('decimalSeparator', '.');\n        this.setValue(ag_grid_community__WEBPACK_IMPORTED_MODULE_0__._.formatNumberCommas(selectedRowCount, thousandSeparator, decimalSeparator));\n        this.setDisplayed(selectedRowCount > 0);\n    }\n    init() {\n    }\n    // this is a user component, and IComponent has \"public destroy()\" as part of the interface.\n    // so we need to override destroy() just to make the method public.\n    destroy() {\n        super.destroy();\n    }\n}\n__decorate$4([\n    (0,ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.Autowired)('gridApi')\n], SelectedRowsComp.prototype, \"gridApi\", void 0);\n__decorate$4([\n    (0,ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.Autowired)('selectionService')\n], SelectedRowsComp.prototype, \"selectionService\", void 0);\n__decorate$4([\n    ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.PostConstruct\n], SelectedRowsComp.prototype, \"postConstruct\", null);\n\nvar __decorate$3 = ( false) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nclass AggregationComp extends ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.Component {\n    constructor() {\n        super(AggregationComp.TEMPLATE);\n    }\n    // this is a user component, and IComponent has \"public destroy()\" as part of the interface.\n    // so we need to override destroy() just to make the method public.\n    destroy() {\n        super.destroy();\n    }\n    postConstruct() {\n        if (!this.isValidRowModel()) {\n            console.warn(`AG Grid: agAggregationComponent should only be used with the client and server side row model.`);\n            return;\n        }\n        this.avgAggregationComp.setLabel('avg', 'Average');\n        this.countAggregationComp.setLabel('count', 'Count');\n        this.minAggregationComp.setLabel('min', 'Min');\n        this.maxAggregationComp.setLabel('max', 'Max');\n        this.sumAggregationComp.setLabel('sum', 'Sum');\n        this.addManagedListener(this.eventService, ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.Events.EVENT_RANGE_SELECTION_CHANGED, this.onRangeSelectionChanged.bind(this));\n        this.addManagedListener(this.eventService, ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.Events.EVENT_MODEL_UPDATED, this.onRangeSelectionChanged.bind(this));\n    }\n    isValidRowModel() {\n        // this component is only really useful with client or server side rowmodels\n        const rowModelType = this.gridApi.getModel().getType();\n        return rowModelType === 'clientSide' || rowModelType === 'serverSide';\n    }\n    init() {\n    }\n    setAggregationComponentValue(aggFuncName, value, visible) {\n        const statusBarValueComponent = this.getAggregationValueComponent(aggFuncName);\n        if (ag_grid_community__WEBPACK_IMPORTED_MODULE_0__._.exists(statusBarValueComponent) && statusBarValueComponent) {\n            const localeTextFunc = this.localeService.getLocaleTextFunc();\n            const thousandSeparator = localeTextFunc('thousandSeparator', ',');\n            const decimalSeparator = localeTextFunc('decimalSeparator', '.');\n            statusBarValueComponent.setValue(ag_grid_community__WEBPACK_IMPORTED_MODULE_0__._.formatNumberTwoDecimalPlacesAndCommas(value, thousandSeparator, decimalSeparator));\n            statusBarValueComponent.setDisplayed(visible);\n        }\n    }\n    getAggregationValueComponent(aggFuncName) {\n        // converts user supplied agg name to our reference - eg: sum => sumAggregationComp\n        const refComponentName = `${aggFuncName}AggregationComp`;\n        // if the user has specified the agAggregationPanelComp but no aggFuncs we show the all\n        // if the user has specified the agAggregationPanelComp and aggFuncs, then we only show the aggFuncs listed\n        let statusBarValueComponent = null;\n        const statusBar = this.gridOptionsService.get('statusBar');\n        const aggregationPanelConfig = ag_grid_community__WEBPACK_IMPORTED_MODULE_0__._.exists(statusBar) && statusBar ? statusBar.statusPanels.find(panel => panel.statusPanel === 'agAggregationComponent') : null;\n        if (ag_grid_community__WEBPACK_IMPORTED_MODULE_0__._.exists(aggregationPanelConfig) && aggregationPanelConfig) {\n            // a little defensive here - if no statusPanelParams show it, if componentParams we also expect aggFuncs\n            if (!ag_grid_community__WEBPACK_IMPORTED_MODULE_0__._.exists(aggregationPanelConfig.statusPanelParams) ||\n                (ag_grid_community__WEBPACK_IMPORTED_MODULE_0__._.exists(aggregationPanelConfig.statusPanelParams) &&\n                    ag_grid_community__WEBPACK_IMPORTED_MODULE_0__._.exists(aggregationPanelConfig.statusPanelParams.aggFuncs) &&\n                    ag_grid_community__WEBPACK_IMPORTED_MODULE_0__._.exists(aggregationPanelConfig.statusPanelParams.aggFuncs.find((func) => func === aggFuncName)))) {\n                statusBarValueComponent = this[refComponentName];\n            }\n        }\n        else {\n            // components not specified - assume we can show this component\n            statusBarValueComponent = this[refComponentName];\n        }\n        // either we can't find it (which would indicate a typo or similar user side), or the user has deliberately\n        // not listed the component in aggFuncs\n        return statusBarValueComponent;\n    }\n    onRangeSelectionChanged() {\n        const cellRanges = this.rangeService ? this.rangeService.getCellRanges() : undefined;\n        let sum = 0;\n        let count = 0;\n        let numberCount = 0;\n        let min = null;\n        let max = null;\n        const cellsSoFar = {};\n        if (cellRanges && !ag_grid_community__WEBPACK_IMPORTED_MODULE_0__._.missingOrEmpty(cellRanges)) {\n            cellRanges.forEach((cellRange) => {\n                let currentRow = this.rangeService.getRangeStartRow(cellRange);\n                const lastRow = this.rangeService.getRangeEndRow(cellRange);\n                while (true) {\n                    const finishedAllRows = ag_grid_community__WEBPACK_IMPORTED_MODULE_0__._.missing(currentRow) || !currentRow || this.rowPositionUtils.before(lastRow, currentRow);\n                    if (finishedAllRows || !currentRow || !cellRange.columns) {\n                        break;\n                    }\n                    cellRange.columns.forEach(col => {\n                        if (currentRow === null) {\n                            return;\n                        }\n                        // we only want to include each cell once, in case a cell is in multiple ranges\n                        const cellId = this.cellPositionUtils.createId({\n                            rowPinned: currentRow.rowPinned,\n                            column: col,\n                            rowIndex: currentRow.rowIndex\n                        });\n                        if (cellsSoFar[cellId]) {\n                            return;\n                        }\n                        cellsSoFar[cellId] = true;\n                        const rowNode = this.rowRenderer.getRowNode(currentRow);\n                        if (ag_grid_community__WEBPACK_IMPORTED_MODULE_0__._.missing(rowNode)) {\n                            return;\n                        }\n                        let value = this.valueService.getValue(col, rowNode);\n                        // if empty cell, skip it, doesn't impact count or anything\n                        if (ag_grid_community__WEBPACK_IMPORTED_MODULE_0__._.missing(value) || value === '') {\n                            return;\n                        }\n                        count++;\n                        // see if value is wrapped, can happen when doing count() or avg() functions\n                        if (typeof value === 'object' && 'value' in value) {\n                            value = value.value;\n                            // ensure that the new value wouldn't have been skipped by the previous check\n                            if (value === '') {\n                                return;\n                            }\n                        }\n                        if (typeof value === 'string') {\n                            value = Number(value);\n                        }\n                        if (typeof value === 'number' && !isNaN(value)) {\n                            sum += value;\n                            if (max === null || value > max) {\n                                max = value;\n                            }\n                            if (min === null || value < min) {\n                                min = value;\n                            }\n                            numberCount++;\n                        }\n                    });\n                    currentRow = this.cellNavigationService.getRowBelow(currentRow);\n                }\n            });\n        }\n        const gotResult = count > 1;\n        const gotNumberResult = numberCount > 1;\n        // we show count even if no numbers\n        this.setAggregationComponentValue('count', count, gotResult);\n        // show if numbers found\n        this.setAggregationComponentValue('sum', sum, gotNumberResult);\n        this.setAggregationComponentValue('min', min, gotNumberResult);\n        this.setAggregationComponentValue('max', max, gotNumberResult);\n        this.setAggregationComponentValue('avg', (sum / numberCount), gotNumberResult);\n    }\n}\nAggregationComp.TEMPLATE = `<div class=\"ag-status-panel ag-status-panel-aggregations\">\n            <ag-name-value ref=\"avgAggregationComp\"></ag-name-value>\n            <ag-name-value ref=\"countAggregationComp\"></ag-name-value>\n            <ag-name-value ref=\"minAggregationComp\"></ag-name-value>\n            <ag-name-value ref=\"maxAggregationComp\"></ag-name-value>\n            <ag-name-value ref=\"sumAggregationComp\"></ag-name-value>\n        </div>`;\n__decorate$3([\n    (0,ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.Optional)('rangeService')\n], AggregationComp.prototype, \"rangeService\", void 0);\n__decorate$3([\n    (0,ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.Autowired)('valueService')\n], AggregationComp.prototype, \"valueService\", void 0);\n__decorate$3([\n    (0,ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.Autowired)('cellNavigationService')\n], AggregationComp.prototype, \"cellNavigationService\", void 0);\n__decorate$3([\n    (0,ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.Autowired)('rowRenderer')\n], AggregationComp.prototype, \"rowRenderer\", void 0);\n__decorate$3([\n    (0,ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.Autowired)('gridApi')\n], AggregationComp.prototype, \"gridApi\", void 0);\n__decorate$3([\n    (0,ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.Autowired)('cellPositionUtils')\n], AggregationComp.prototype, \"cellPositionUtils\", void 0);\n__decorate$3([\n    (0,ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.Autowired)('rowPositionUtils')\n], AggregationComp.prototype, \"rowPositionUtils\", void 0);\n__decorate$3([\n    (0,ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.RefSelector)('sumAggregationComp')\n], AggregationComp.prototype, \"sumAggregationComp\", void 0);\n__decorate$3([\n    (0,ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.RefSelector)('countAggregationComp')\n], AggregationComp.prototype, \"countAggregationComp\", void 0);\n__decorate$3([\n    (0,ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.RefSelector)('minAggregationComp')\n], AggregationComp.prototype, \"minAggregationComp\", void 0);\n__decorate$3([\n    (0,ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.RefSelector)('maxAggregationComp')\n], AggregationComp.prototype, \"maxAggregationComp\", void 0);\n__decorate$3([\n    (0,ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.RefSelector)('avgAggregationComp')\n], AggregationComp.prototype, \"avgAggregationComp\", void 0);\n__decorate$3([\n    ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.PostConstruct\n], AggregationComp.prototype, \"postConstruct\", null);\n\n// DO NOT UPDATE MANUALLY: Generated from script during build time\nconst VERSION$2 = '30.0.2';\n\nconst StatusBarModule = {\n    version: VERSION$2,\n    moduleName: ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.ModuleNames.StatusBarModule,\n    beans: [StatusBarService],\n    agStackComponents: [\n        { componentName: 'AgStatusBar', componentClass: StatusBar },\n        { componentName: 'AgNameValue', componentClass: NameValueComp },\n    ],\n    userComponents: [\n        { componentName: 'agAggregationComponent', componentClass: AggregationComp },\n        { componentName: 'agSelectedRowCountComponent', componentClass: SelectedRowsComp },\n        { componentName: 'agTotalRowCountComponent', componentClass: TotalRowsComp },\n        { componentName: 'agFilteredRowCountComponent', componentClass: FilteredRowsComp },\n        { componentName: 'agTotalAndFilteredRowCountComponent', componentClass: TotalAndFilteredRowsComp }\n    ],\n    dependantModules: [\n        EnterpriseCoreModule\n    ]\n};\n\n// DO NOT UPDATE MANUALLY: Generated from script during build time\nconst VERSION$1 = '30.0.2';\n\nvar __decorate$2 = ( false) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nconst DEFAULT_VIEWPORT_ROW_MODEL_PAGE_SIZE = 5;\nconst DEFAULT_VIEWPORT_ROW_MODEL_BUFFER_SIZE = 5;\nlet ViewportRowModel = class ViewportRowModel extends ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.BeanStub {\n    constructor() {\n        super(...arguments);\n        // rowRenderer tells us these\n        this.firstRow = -1;\n        this.lastRow = -1;\n        // datasource tells us this\n        this.rowCount = -1;\n        this.rowNodesByIndex = {};\n    }\n    // we don't implement as lazy row heights is not supported in this row model\n    ensureRowHeightsValid(startPixel, endPixel, startLimitIndex, endLimitIndex) { return false; }\n    init() {\n        this.rowHeight = this.gridOptionsService.getRowHeightAsNumber();\n        this.addManagedListener(this.eventService, ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.Events.EVENT_VIEWPORT_CHANGED, this.onViewportChanged.bind(this));\n    }\n    start() {\n        if (this.gridOptionsService.get('viewportDatasource')) {\n            this.setViewportDatasource(this.gridOptionsService.get('viewportDatasource'));\n        }\n    }\n    isLastRowIndexKnown() {\n        return true;\n    }\n    destroyDatasource() {\n        if (!this.viewportDatasource) {\n            return;\n        }\n        if (this.viewportDatasource.destroy) {\n            this.viewportDatasource.destroy();\n        }\n        this.rowRenderer.datasourceChanged();\n        this.firstRow = -1;\n        this.lastRow = -1;\n    }\n    getViewportRowModelPageSize() {\n        return ag_grid_community__WEBPACK_IMPORTED_MODULE_0__._.oneOrGreater(this.gridOptionsService.getNum('viewportRowModelPageSize'), DEFAULT_VIEWPORT_ROW_MODEL_PAGE_SIZE);\n    }\n    getViewportRowModelBufferSize() {\n        return ag_grid_community__WEBPACK_IMPORTED_MODULE_0__._.zeroOrGreater(this.gridOptionsService.getNum('viewportRowModelBufferSize'), DEFAULT_VIEWPORT_ROW_MODEL_BUFFER_SIZE);\n    }\n    calculateFirstRow(firstRenderedRow) {\n        const bufferSize = this.getViewportRowModelBufferSize();\n        const pageSize = this.getViewportRowModelPageSize();\n        const afterBuffer = firstRenderedRow - bufferSize;\n        if (afterBuffer < 0) {\n            return 0;\n        }\n        return Math.floor(afterBuffer / pageSize) * pageSize;\n    }\n    calculateLastRow(lastRenderedRow) {\n        if (lastRenderedRow === -1) {\n            return lastRenderedRow;\n        }\n        const bufferSize = this.getViewportRowModelBufferSize();\n        const pageSize = this.getViewportRowModelPageSize();\n        const afterBuffer = lastRenderedRow + bufferSize;\n        const result = Math.ceil(afterBuffer / pageSize) * pageSize;\n        const lastRowIndex = this.rowCount - 1;\n        return Math.min(result, lastRowIndex);\n    }\n    onViewportChanged(event) {\n        const newFirst = this.calculateFirstRow(event.firstRow);\n        const newLast = this.calculateLastRow(event.lastRow);\n        if (this.firstRow !== newFirst || this.lastRow !== newLast) {\n            this.firstRow = newFirst;\n            this.lastRow = newLast;\n            this.purgeRowsNotInViewport();\n            if (this.viewportDatasource) {\n                this.viewportDatasource.setViewportRange(this.firstRow, this.lastRow);\n            }\n        }\n    }\n    purgeRowsNotInViewport() {\n        Object.keys(this.rowNodesByIndex).forEach(indexStr => {\n            const index = parseInt(indexStr, 10);\n            if (index < this.firstRow || index > this.lastRow) {\n                if (this.isRowFocused(index)) {\n                    return;\n                }\n                delete this.rowNodesByIndex[index];\n            }\n        });\n    }\n    isRowFocused(rowIndex) {\n        const focusedCell = this.focusService.getFocusCellToUseAfterRefresh();\n        if (!focusedCell) {\n            return false;\n        }\n        if (focusedCell.rowPinned != null) {\n            return false;\n        }\n        const hasFocus = focusedCell.rowIndex === rowIndex;\n        return hasFocus;\n    }\n    setViewportDatasource(viewportDatasource) {\n        this.destroyDatasource();\n        this.viewportDatasource = viewportDatasource;\n        this.rowCount = -1;\n        if (!viewportDatasource.init) {\n            console.warn('AG Grid: viewport is missing init method.');\n        }\n        else {\n            viewportDatasource.init({\n                setRowCount: this.setRowCount.bind(this),\n                setRowData: this.setRowData.bind(this),\n                getRow: this.getRow.bind(this)\n            });\n        }\n    }\n    getType() {\n        return 'viewport';\n    }\n    getRow(rowIndex) {\n        if (!this.rowNodesByIndex[rowIndex]) {\n            this.rowNodesByIndex[rowIndex] = this.createBlankRowNode(rowIndex);\n        }\n        return this.rowNodesByIndex[rowIndex];\n    }\n    getRowNode(id) {\n        let result;\n        this.forEachNode(rowNode => {\n            if (rowNode.id === id) {\n                result = rowNode;\n            }\n        });\n        return result;\n    }\n    getRowCount() {\n        return this.rowCount === -1 ? 0 : this.rowCount;\n    }\n    getRowIndexAtPixel(pixel) {\n        if (this.rowHeight !== 0) { // avoid divide by zero error\n            return Math.floor(pixel / this.rowHeight);\n        }\n        return 0;\n    }\n    getRowBounds(index) {\n        return {\n            rowHeight: this.rowHeight,\n            rowTop: this.rowHeight * index\n        };\n    }\n    getTopLevelRowCount() {\n        return this.getRowCount();\n    }\n    getTopLevelRowDisplayedIndex(topLevelIndex) {\n        return topLevelIndex;\n    }\n    isEmpty() {\n        return this.rowCount > 0;\n    }\n    isRowsToRender() {\n        return this.rowCount > 0;\n    }\n    getNodesInRangeForSelection(firstInRange, lastInRange) {\n        const firstIndex = ag_grid_community__WEBPACK_IMPORTED_MODULE_0__._.missing(firstInRange) ? 0 : firstInRange.rowIndex;\n        const lastIndex = lastInRange.rowIndex;\n        const firstNodeOutOfRange = firstIndex < this.firstRow || firstIndex > this.lastRow;\n        const lastNodeOutOfRange = lastIndex < this.firstRow || lastIndex > this.lastRow;\n        if (firstNodeOutOfRange || lastNodeOutOfRange) {\n            return [];\n        }\n        const result = [];\n        const startIndex = firstIndex <= lastIndex ? firstIndex : lastIndex;\n        const endIndex = firstIndex <= lastIndex ? lastIndex : firstIndex;\n        for (let i = startIndex; i <= endIndex; i++) {\n            result.push(this.rowNodesByIndex[i]);\n        }\n        return result;\n    }\n    forEachNode(callback) {\n        let callbackCount = 0;\n        Object.keys(this.rowNodesByIndex).forEach(indexStr => {\n            const index = parseInt(indexStr, 10);\n            const rowNode = this.rowNodesByIndex[index];\n            callback(rowNode, callbackCount);\n            callbackCount++;\n        });\n    }\n    setRowData(rowData) {\n        ag_grid_community__WEBPACK_IMPORTED_MODULE_0__._.iterateObject(rowData, (indexStr, dataItem) => {\n            const index = parseInt(indexStr, 10);\n            // we should never keep rows that we didn't specifically ask for, this\n            // guarantees the contract we have with the server.\n            if (index >= this.firstRow && index <= this.lastRow) {\n                let rowNode = this.rowNodesByIndex[index];\n                // the abnormal case is we requested a row even though the grid didn't need it\n                // as a result of the paging and buffer (ie the row is off screen), in which\n                // case we need to create a new node now\n                if (ag_grid_community__WEBPACK_IMPORTED_MODULE_0__._.missing(rowNode)) {\n                    rowNode = this.createBlankRowNode(index);\n                    this.rowNodesByIndex[index] = rowNode;\n                }\n                // now we deffo have a row node, so set in the details\n                // if the grid already asked for this row (the normal case), then we would\n                // of put a placeholder node in place.\n                rowNode.setDataAndId(dataItem, index.toString());\n            }\n        });\n    }\n    createBlankRowNode(rowIndex) {\n        const rowNode = new ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.RowNode(this.beans);\n        rowNode.setRowHeight(this.rowHeight);\n        rowNode.setRowTop(this.rowHeight * rowIndex);\n        rowNode.setRowIndex(rowIndex);\n        return rowNode;\n    }\n    setRowCount(rowCount, keepRenderedRows = false) {\n        if (rowCount === this.rowCount) {\n            return;\n        }\n        this.rowCount = rowCount;\n        const event = {\n            type: ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.Events.EVENT_MODEL_UPDATED,\n            newData: false,\n            newPage: false,\n            keepRenderedRows: keepRenderedRows,\n            animate: false\n        };\n        this.eventService.dispatchEvent(event);\n    }\n    isRowPresent(rowNode) {\n        const foundRowNode = this.getRowNode(rowNode.id);\n        return !!foundRowNode;\n    }\n};\n__decorate$2([\n    (0,ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.Autowired)('rowRenderer')\n], ViewportRowModel.prototype, \"rowRenderer\", void 0);\n__decorate$2([\n    (0,ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.Autowired)('focusService')\n], ViewportRowModel.prototype, \"focusService\", void 0);\n__decorate$2([\n    (0,ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.Autowired)('beans')\n], ViewportRowModel.prototype, \"beans\", void 0);\n__decorate$2([\n    ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.PostConstruct\n], ViewportRowModel.prototype, \"init\", null);\n__decorate$2([\n    ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.PreDestroy\n], ViewportRowModel.prototype, \"destroyDatasource\", null);\nViewportRowModel = __decorate$2([\n    (0,ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.Bean)('rowModel')\n], ViewportRowModel);\n\nconst ViewportRowModelModule = {\n    version: VERSION$1,\n    moduleName: ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.ModuleNames.ViewportRowModelModule,\n    rowModel: 'viewport',\n    beans: [ViewportRowModel],\n    dependantModules: [\n        EnterpriseCoreModule\n    ]\n};\n\nconst defaultTooltipCss = `\n.ag-sparkline-tooltip-wrapper {\n    position: absolute;\n    user-select: none;\n    pointer-events: none;\n}\n\n.ag-sparkline-tooltip {\n    position: relative;\n    font: 12px arial,sans-serif;\n    border-radius: 2px;\n    box-shadow: 0 1px 3px rgb(0 0 0 / 20%), 0 1px 1px rgb(0 0 0 / 14%);\n    line-height: 1.7em;\n    overflow: hidden;\n    white-space: nowrap;\n    z-index: 99999;\n    background-color: rgb(255, 255, 255);\n    color: rgba(0,0,0, 0.67);\n}\n\n.ag-sparkline-tooltip-content {\n    padding: 0 7px;\n    opacity: 1;\n}\n\n.ag-sparkline-tooltip-title {\n    padding-left: 7px;\n    opacity: 1;\n}\n\n.ag-sparkline-tooltip-wrapper-hidden {\n    top: -10000px !important;\n}\n\n.ag-sparkline-wrapper {\n    box-sizing: border-box;\n    overflow: hidden;\n}\n`;\n\nconst { extent: extent$3, isNumber: isNumber$3, isString, isStringObject, isDate, createId, Padding } = _Util;\nconst { LinearScale, BandScale: BandScale$4, TimeScale } = _Scale;\n/**\n * Constants to declare the expected nominal zIndex for nodes in a sparkline rendering.\n */\nvar ZINDICIES;\n(function (ZINDICIES) {\n    ZINDICIES[ZINDICIES[\"SERIES_FILL_ZINDEX\"] = 50] = \"SERIES_FILL_ZINDEX\";\n    ZINDICIES[ZINDICIES[\"AXIS_LINE_ZINDEX\"] = 500] = \"AXIS_LINE_ZINDEX\";\n    ZINDICIES[ZINDICIES[\"SERIES_STROKE_ZINDEX\"] = 1000] = \"SERIES_STROKE_ZINDEX\";\n    ZINDICIES[ZINDICIES[\"SERIES_LABEL_ZINDEX\"] = 1500] = \"SERIES_LABEL_ZINDEX\";\n    ZINDICIES[ZINDICIES[\"CROSSHAIR_ZINDEX\"] = 2000] = \"CROSSHAIR_ZINDEX\";\n    ZINDICIES[ZINDICIES[\"SERIES_MARKERS_ZINDEX\"] = 2500] = \"SERIES_MARKERS_ZINDEX\";\n})(ZINDICIES || (ZINDICIES = {}));\nclass SparklineAxis {\n    constructor() {\n        this.type = 'category';\n        this.stroke = 'rgb(204, 214, 235)';\n        this.strokeWidth = 1;\n    }\n}\nclass Sparkline {\n    constructor() {\n        this.id = createId(this);\n        this.seriesRect = {\n            x: 0,\n            y: 0,\n            width: 0,\n            height: 0,\n        };\n        this._context = undefined;\n        this._container = undefined;\n        this._data = undefined;\n        this.padding = new Padding(3);\n        this.xKey = 'x';\n        this.yKey = 'y';\n        this.dataType = undefined;\n        this.xData = [];\n        this.yData = [];\n        // Minimum y value in provided data.\n        this.min = undefined;\n        // Maximum y value in provided data.\n        this.max = undefined;\n        this.yScale = new LinearScale();\n        this.axis = new SparklineAxis();\n        this.highlightStyle = {\n            size: 6,\n            fill: 'yellow',\n            stroke: 'silver',\n            strokeWidth: 1,\n        };\n        this._width = 100;\n        this._height = 100;\n        this.smallestInterval = undefined;\n        this.layoutId = 0;\n        this.defaultDateFormatter = new Intl.DateTimeFormat('en-US', {\n            year: 'numeric',\n            month: '2-digit',\n            day: '2-digit',\n            hour: '2-digit',\n            minute: '2-digit',\n            second: '2-digit',\n            hour12: false,\n        });\n        this._onMouseMove = this.onMouseMove.bind(this);\n        this._onMouseOut = this.onMouseOut.bind(this);\n        const root = new Group();\n        this.rootGroup = root;\n        const element = document.createElement('div');\n        element.setAttribute('class', 'ag-sparkline-wrapper');\n        const scene = new Scene({ document });\n        this.scene = scene;\n        this.canvasElement = scene.canvas.element;\n        scene.root = root;\n        scene.container = element;\n        scene.resize(this.width, this.height);\n        this.seriesRect.width = this.width;\n        this.seriesRect.height = this.height;\n        // one style element for tooltip styles per document\n        if (Sparkline.tooltipDocuments.indexOf(document) === -1) {\n            const styleElement = document.createElement('style');\n            styleElement.innerHTML = defaultTooltipCss;\n            document.head.insertBefore(styleElement, document.head.querySelector('style'));\n            Sparkline.tooltipDocuments.push(document);\n        }\n        this.setupDomEventListeners(this.scene.canvas.element);\n    }\n    set context(value) {\n        if (this._context !== value) {\n            this._context = value;\n        }\n    }\n    get context() {\n        return this._context;\n    }\n    set container(value) {\n        if (this._container !== value) {\n            const { parentNode } = this.canvasElement;\n            if (parentNode != null) {\n                parentNode.removeChild(this.canvasElement);\n            }\n            if (value) {\n                value.appendChild(this.canvasElement);\n            }\n            this._container = value;\n        }\n    }\n    get container() {\n        return this._container;\n    }\n    set data(value) {\n        if (this._data !== value) {\n            this._data = value;\n            this.processData();\n            if (this.mouseMoveEvent && this.highlightedDatum) {\n                this.updateHitPoint(this.mouseMoveEvent);\n            }\n        }\n    }\n    get data() {\n        return this._data;\n    }\n    set width(value) {\n        if (this._width !== value) {\n            this._width = value;\n            this.scene.resize(value, this.height);\n            this.scheduleLayout();\n        }\n    }\n    get width() {\n        return this._width;\n    }\n    set height(value) {\n        if (this._height !== value) {\n            this._height = value;\n            this.scene.resize(this.width, value);\n            this.scheduleLayout();\n        }\n    }\n    get height() {\n        return this._height;\n    }\n    /**\n     * Generate node data from processed data.\n     * Produce data joins.\n     * Update selection's nodes using node data.\n     */\n    update() { }\n    // Update y scale based on processed data.\n    updateYScale() {\n        this.updateYScaleRange();\n        this.updateYScaleDomain();\n    }\n    // Update y scale domain based on processed data.\n    updateYScaleDomain() { }\n    // Update y scale range based on height and padding (seriesRect).\n    updateYScaleRange() {\n        const { yScale, seriesRect } = this;\n        yScale.range = [seriesRect.height, 0];\n    }\n    // Update x scale based on processed data.\n    updateXScale() {\n        const { type } = this.axis;\n        this.xScale = this.getXScale(type);\n        this.updateXScaleRange();\n        this.updateXScaleDomain();\n    }\n    // Update x scale range based on width and padding (seriesRect).\n    updateXScaleRange() {\n        this.xScale.range = [0, this.seriesRect.width];\n    }\n    // Update x scale domain based on processed data and type of scale.\n    updateXScaleDomain() {\n        const { xData, xScale } = this;\n        let xMinMax;\n        if (xScale instanceof LinearScale || xScale instanceof TimeScale) {\n            xMinMax = extent$3(xData);\n        }\n        this.xScale.domain = xMinMax ? xMinMax.slice() : xData;\n    }\n    /**\n     * Return xScale instance based on the provided type or return a `BandScale` by default.\n     * The default type is `category`.\n     * @param type\n     */\n    getXScale(type = 'category') {\n        switch (type) {\n            case 'number':\n                return new LinearScale();\n            case 'time':\n                return new TimeScale();\n            case 'category':\n            default:\n                return new BandScale$4();\n        }\n    }\n    // Update axis line.\n    updateAxisLine() { }\n    // Update X and Y scales and the axis line.\n    updateAxes() {\n        this.updateYScale();\n        this.updateXScale();\n        this.updateAxisLine();\n    }\n    // Update horizontal and vertical crosshair lines.\n    updateCrosshairs() {\n        this.updateXCrosshairLine();\n        this.updateYCrosshairLine();\n    }\n    // Using processed data, generate data that backs visible nodes.\n    generateNodeData() {\n        return [];\n    }\n    // Returns persisted node data associated with the sparkline's data.\n    getNodeData() {\n        return [];\n    }\n    // Update the selection's nodes.\n    updateNodes() { }\n    // Update the vertical crosshair line.\n    updateXCrosshairLine() { }\n    // Update the horizontal crosshair line.\n    updateYCrosshairLine() { }\n    highlightDatum(closestDatum) {\n        this.updateNodes();\n    }\n    dehighlightDatum() {\n        this.highlightedDatum = undefined;\n        this.updateNodes();\n        this.updateCrosshairs();\n    }\n    /**\n     * Highlight closest datum and display tooltip if enabled.\n     * Only update if necessary, i.e. only update if the highlighted datum is different from previously highlighted datum,\n     * or if there is no previously highlighted datum.\n     * @param event\n     */\n    onMouseMove(event) {\n        this.mouseMoveEvent = event;\n        this.updateHitPoint(event);\n    }\n    updateHitPoint(event) {\n        var _a, _b, _c;\n        const closestDatum = this.pickClosestSeriesNodeDatum(event.offsetX, event.offsetY);\n        if (!closestDatum) {\n            return;\n        }\n        const oldHighlightedDatum = this.highlightedDatum;\n        this.highlightedDatum = closestDatum;\n        if ((this.highlightedDatum && !oldHighlightedDatum) ||\n            (this.highlightedDatum && oldHighlightedDatum && this.highlightedDatum !== oldHighlightedDatum)) {\n            this.highlightDatum(closestDatum);\n            this.updateCrosshairs();\n            this.scene.render().catch((e) => console.error(`AG Grid - chart rendering failed`, e));\n        }\n        const tooltipEnabled = (_c = (_b = (_a = this.processedOptions) === null || _a === void 0 ? void 0 : _a.tooltip) === null || _b === void 0 ? void 0 : _b.enabled) !== null && _c !== void 0 ? _c : true;\n        if (tooltipEnabled) {\n            this.handleTooltip(event, closestDatum);\n        }\n    }\n    /**\n     * Dehighlight all nodes and remove tooltip.\n     * @param event\n     */\n    onMouseOut(event) {\n        this.dehighlightDatum();\n        this.tooltip.toggle(false);\n        this.scene.render().catch((e) => console.error(`AG Grid - chart rendering failed`, e));\n    }\n    // Fetch required values from the data object and process them.\n    processData() {\n        const { data, yData, xData } = this;\n        if (!data || this.invalidData(this.data)) {\n            return;\n        }\n        yData.length = 0;\n        xData.length = 0;\n        const n = data.length;\n        const dataType = this.getDataType(data);\n        this.dataType = dataType;\n        const { type: xValueType } = this.axis;\n        const xType = xValueType !== 'number' && xValueType !== 'time' ? 'category' : xValueType;\n        const isContinuousX = xType === 'number' || xType === 'time';\n        const setSmallestXInterval = (curr, prev) => {\n            if (this.smallestInterval == undefined) {\n                this.smallestInterval = { x: Infinity, y: Infinity };\n            }\n            const { x } = this.smallestInterval;\n            const interval = Math.abs(curr - prev);\n            if (interval > 0 && interval < x) {\n                this.smallestInterval.x = interval;\n            }\n        };\n        let prevX;\n        if (dataType === 'number') {\n            for (let i = 0; i < n; i++) {\n                const xDatum = i;\n                const yDatum = data[i];\n                const x = this.getDatum(xDatum, xType);\n                const y = this.getDatum(yDatum, 'number');\n                if (isContinuousX) {\n                    setSmallestXInterval(x, prevX);\n                }\n                xData.push(x);\n                yData.push(y);\n                prevX = x;\n            }\n        }\n        else if (dataType === 'array') {\n            for (let i = 0; i < n; i++) {\n                const datum = data[i];\n                if (Array.isArray(datum)) {\n                    const xDatum = datum[0];\n                    const yDatum = datum[1];\n                    const x = this.getDatum(xDatum, xType);\n                    const y = this.getDatum(yDatum, 'number');\n                    if (x == undefined) {\n                        continue;\n                    }\n                    if (isContinuousX) {\n                        setSmallestXInterval(x, prevX);\n                    }\n                    xData.push(x);\n                    yData.push(y);\n                    prevX = x;\n                }\n            }\n        }\n        else if (dataType === 'object') {\n            const { yKey, xKey } = this;\n            for (let i = 0; i < n; i++) {\n                const datum = data[i];\n                if (typeof datum === 'object' && !Array.isArray(datum)) {\n                    const xDatum = datum[xKey];\n                    const yDatum = datum[yKey];\n                    const x = this.getDatum(xDatum, xType);\n                    const y = this.getDatum(yDatum, 'number');\n                    if (x == undefined) {\n                        continue;\n                    }\n                    if (isContinuousX) {\n                        setSmallestXInterval(x, prevX);\n                    }\n                    xData.push(x);\n                    yData.push(y);\n                    prevX = x;\n                }\n            }\n        }\n        this.updateAxes();\n        this.immediateLayout();\n    }\n    /**\n     * Return the type of data provided to the sparkline based on the first truthy value in the data array.\n     * If the value is not a number, array or object, return `undefined`.\n     * @param data\n     */\n    getDataType(data) {\n        for (const datum of data) {\n            if (datum != undefined) {\n                if (isNumber$3(datum)) {\n                    return 'number';\n                }\n                else if (Array.isArray(datum)) {\n                    return 'array';\n                }\n                else if (typeof datum === 'object') {\n                    return 'object';\n                }\n            }\n        }\n    }\n    /**\n     * Return the given value depending on the type of axis.\n     * Return `undefined` if the value is invalid for the given axis type.\n     * @param value\n     */\n    getDatum(value, type) {\n        if ((type === 'number' && isNumber$3(value)) || (type === 'time' && (isNumber$3(value) || isDate(value)))) {\n            return value;\n        }\n        else if (type === 'category') {\n            if (isString(value) || isDate(value) || isNumber$3(value)) {\n                return { toString: () => String(value) };\n            }\n            else if (isStringObject(value)) {\n                return value;\n            }\n        }\n    }\n    /**\n     * Only `true` while we are waiting for the layout to start.\n     * This will be `false` if the layout has already started and is ongoing.\n     */\n    get layoutScheduled() {\n        return !!this.layoutId;\n    }\n    /**\n     * Execute update method on the next available screen repaint to make changes to the canvas.\n     * If we are waiting for a layout to start and a new layout is requested,\n     * cancel the previous layout using the non 0 integer (this.layoutId) returned from requestAnimationFrame.\n     */\n    scheduleLayout() {\n        if (this.layoutId) {\n            cancelAnimationFrame(this.layoutId);\n        }\n        this.layoutId = requestAnimationFrame(() => {\n            this.immediateLayout();\n            this.layoutId = 0;\n        });\n    }\n    immediateLayout() {\n        this.setSparklineDimensions();\n        if (this.invalidData(this.data)) {\n            return;\n        }\n        // update axes ranges\n        this.updateXScaleRange();\n        this.updateYScaleRange();\n        // update axis line\n        this.updateAxisLine();\n        // produce data joins and update selection's nodes\n        this.update();\n        this.scene.render().catch((e) => console.error(`AG Grid - chart rendering failed`, e));\n    }\n    setSparklineDimensions() {\n        const { width, height, padding, seriesRect, rootGroup } = this;\n        const shrunkWidth = width - padding.left - padding.right;\n        const shrunkHeight = height - padding.top - padding.bottom;\n        seriesRect.width = shrunkWidth;\n        seriesRect.height = shrunkHeight;\n        seriesRect.x = padding.left;\n        seriesRect.y = padding.top;\n        rootGroup.translationX = seriesRect.x;\n        rootGroup.translationY = seriesRect.y;\n    }\n    /**\n     * Return the closest data point to x/y canvas coordinates.\n     * @param x\n     * @param y\n     */\n    pickClosestSeriesNodeDatum(x, y) {\n        let minDistance = Infinity;\n        let closestDatum;\n        const hitPoint = this.rootGroup.transformPoint(x, y);\n        const nodeData = this.getNodeData();\n        for (let i = 0; i < nodeData.length; i++) {\n            const datum = nodeData[i];\n            if (!datum.point) {\n                return;\n            }\n            const distance = this.getDistance(hitPoint, datum.point);\n            if (distance <= minDistance) {\n                minDistance = distance;\n                closestDatum = datum;\n            }\n        }\n        return closestDatum;\n    }\n    /**\n     * Return the relevant distance between two points.\n     * The distance will be calculated based on the x value of the points for all sparklines except bar sparkline, where the distance is based on the y values.\n     * @param x\n     * @param y\n     */\n    getDistance(p1, p2) {\n        return Math.abs(p1.x - p2.x);\n    }\n    /**\n     * calculate x/y coordinates for tooltip based on coordinates of highlighted datum, position of canvas and page offset.\n     * @param datum\n     */\n    handleTooltip(event, datum) {\n        var _a, _b;\n        const { seriesDatum } = datum;\n        const { canvasElement } = this;\n        const { clientX, clientY } = event;\n        const tooltipOptions = (_a = this.processedOptions) === null || _a === void 0 ? void 0 : _a.tooltip;\n        const meta = {\n            pageX: clientX,\n            pageY: clientY,\n            position: {\n                xOffset: tooltipOptions === null || tooltipOptions === void 0 ? void 0 : tooltipOptions.xOffset,\n                yOffset: tooltipOptions === null || tooltipOptions === void 0 ? void 0 : tooltipOptions.yOffset,\n            },\n            container: tooltipOptions === null || tooltipOptions === void 0 ? void 0 : tooltipOptions.container,\n        };\n        // confine tooltip to sparkline width if tooltip container not provided.\n        if (meta.container == undefined) {\n            meta.container = canvasElement;\n        }\n        const yValue = seriesDatum.y;\n        const xValue = seriesDatum.x;\n        // check if tooltip is enabled for this specific data point\n        let enabled = (_b = tooltipOptions === null || tooltipOptions === void 0 ? void 0 : tooltipOptions.enabled) !== null && _b !== void 0 ? _b : true;\n        const tooltipRenderer = tooltipOptions === null || tooltipOptions === void 0 ? void 0 : tooltipOptions.renderer;\n        if (tooltipRenderer) {\n            const tooltipRendererResult = tooltipRenderer({\n                context: this.context,\n                datum: seriesDatum,\n                yValue,\n                xValue,\n            });\n            enabled =\n                typeof tooltipRendererResult !== 'string' && tooltipRendererResult.enabled !== undefined\n                    ? tooltipRendererResult.enabled\n                    : enabled;\n        }\n        const html = enabled && seriesDatum.y !== undefined && this.getTooltipHtml(datum);\n        if (html) {\n            this.tooltip.show(meta, html);\n        }\n    }\n    formatNumericDatum(datum) {\n        return String(Math.round(datum * 10) / 10);\n    }\n    // locale.format('%m/%d/%y, %H:%M:%S');\n    formatDatum(datum) {\n        const type = this.axis.type || 'category';\n        if (type === 'number' && typeof datum === 'number') {\n            return this.formatNumericDatum(datum);\n        }\n        else if (type === 'time' && (datum instanceof Date || isNumber$3(datum))) {\n            return this.defaultDateFormatter.format(datum);\n        }\n        else {\n            return String(datum);\n        }\n    }\n    setupDomEventListeners(chartElement) {\n        chartElement.addEventListener('mousemove', this._onMouseMove);\n        chartElement.addEventListener('mouseout', this._onMouseOut);\n    }\n    cleanupDomEventListeners(chartElement) {\n        chartElement.removeEventListener('mousemove', this._onMouseMove);\n        chartElement.removeEventListener('mouseout', this._onMouseOut);\n    }\n    invalidData(data) {\n        return !data || !Array.isArray(data) || data.length === 0;\n    }\n    /**\n     * Cleanup and remove canvas element from the DOM.\n     */\n    destroy() {\n        this.scene.container = undefined;\n        // remove canvas element from the DOM\n        this.container = undefined;\n        this.cleanupDomEventListeners(this.scene.canvas.element);\n    }\n}\nSparkline.tooltipDocuments = [];\n\nfunction toTooltipHtml(input, defaults) {\n    var _a, _b, _c;\n    if (typeof input === 'string') {\n        return input;\n    }\n    defaults = defaults !== null && defaults !== void 0 ? defaults : {};\n    const { content = (_a = defaults.content) !== null && _a !== void 0 ? _a : '', title = (_b = defaults.title) !== null && _b !== void 0 ? _b : undefined, color = defaults.color, backgroundColor = defaults.backgroundColor, opacity = (_c = defaults.opacity) !== null && _c !== void 0 ? _c : 1, } = input;\n    let titleHtml;\n    let contentHtml;\n    if (color) {\n        titleHtml = title\n            ? `<span class=\"${SparklineTooltip.class}-title\"; style=\"color: ${color}\">${title}</span>`\n            : '';\n        contentHtml = `<span class=\"${SparklineTooltip.class}-content\" style=\"color: ${color}\">${content}</span>`;\n    }\n    else {\n        titleHtml = title ? `<span class=\"${SparklineTooltip.class}-title\">${title}</span>` : '';\n        contentHtml = `<span class=\"${SparklineTooltip.class}-content\">${content}</span>`;\n    }\n    let style = `opacity: ${opacity}`;\n    if (backgroundColor) {\n        style += `; background-color: ${backgroundColor.toLowerCase()}`;\n    }\n    return `<div class=\"${SparklineTooltip.class}\" style=\"${style}\">\n                ${titleHtml}\n                ${contentHtml}\n            </div>`;\n}\nclass SparklineTooltip {\n    constructor() {\n        this.element = document.createElement('div');\n        const tooltipRoot = document.body;\n        tooltipRoot.appendChild(this.element);\n    }\n    isVisible() {\n        const { element } = this;\n        if (element.classList) {\n            return !element.classList.contains(`${SparklineTooltip.class}-wrapper-hidden`);\n        }\n        // IE11\n        const classes = element.getAttribute('class');\n        if (classes) {\n            return classes.split(' ').indexOf(`${SparklineTooltip.class}-wrapper-hidden`) < 0;\n        }\n        return false;\n    }\n    updateClass(visible) {\n        const classList = [`${SparklineTooltip.class}-wrapper`];\n        if (visible !== true) {\n            classList.push(`${SparklineTooltip.class}-wrapper-hidden`);\n        }\n        this.element.setAttribute('class', classList.join(' '));\n    }\n    show(meta, html) {\n        var _a, _b, _c, _d;\n        this.toggle(false);\n        const { element } = this;\n        if (html !== undefined) {\n            element.innerHTML = html;\n        }\n        else if (!element.innerHTML) {\n            return;\n        }\n        const xOffset = (_b = (_a = meta.position) === null || _a === void 0 ? void 0 : _a.xOffset) !== null && _b !== void 0 ? _b : 10;\n        const yOffset = (_d = (_c = meta.position) === null || _c === void 0 ? void 0 : _c.yOffset) !== null && _d !== void 0 ? _d : 0;\n        let left = meta.pageX + xOffset;\n        let top = meta.pageY + yOffset;\n        const tooltipRect = element.getBoundingClientRect();\n        let maxLeft = window.innerWidth - tooltipRect.width;\n        if (meta.container) {\n            const containerRect = meta.container.getBoundingClientRect();\n            maxLeft = containerRect.left + (containerRect.width - tooltipRect.width);\n        }\n        if (left > maxLeft) {\n            left = meta.pageX - element.clientWidth - xOffset;\n        }\n        if (typeof scrollX !== 'undefined') {\n            left += scrollX;\n        }\n        if (typeof scrollY !== 'undefined') {\n            top += scrollY;\n        }\n        element.style.left = `${Math.round(left)}px`;\n        element.style.top = `${Math.round(top)}px`;\n        this.toggle(true);\n    }\n    toggle(visible) {\n        this.updateClass(visible);\n    }\n    destroy() {\n        const { parentNode } = this.element;\n        if (parentNode) {\n            parentNode.removeChild(this.element);\n        }\n    }\n}\nSparklineTooltip.class = 'ag-sparkline-tooltip';\n\nfunction getMarker(shape) {\n    switch (shape) {\n        case 'circle':\n            return Circle;\n        case 'square':\n            return Square;\n        case 'diamond':\n            return Diamond;\n        default:\n            return Circle;\n    }\n}\n\nfunction getLineDash(lineCap, lineDash = 'solid') {\n    const buttOrNull = {\n        solid: [],\n        dash: [4, 3],\n        dot: [1, 3],\n        dashDot: [4, 3, 1, 3],\n        dashDotDot: [4, 3, 1, 3, 1, 3],\n        shortDot: [1, 1],\n        shortDash: [3, 1],\n        shortDashDot: [3, 1, 1, 1],\n        shortDashDotDot: [3, 1, 1, 1, 1, 1],\n        longDash: [8, 3],\n        longDashDot: [8, 3, 1, 3],\n        longDashDotDot: [8, 3, 1, 3, 1, 3]\n    };\n    const roundOrSquare = {\n        solid: [],\n        dash: [3, 3],\n        dot: [0, 3],\n        dashDot: [3, 3, 0, 3],\n        dashDotDot: [3, 3, 0, 3, 0, 3],\n        shortDot: [0, 2],\n        shortDash: [2, 2],\n        shortDashDot: [2, 2, 0, 2],\n        shortDashDotDot: [2, 2, 0, 2, 0, 2],\n        longDash: [7, 3],\n        longDashDot: [7, 3, 0, 3],\n        longDashDotDot: [7, 3, 0, 3, 0, 3]\n    };\n    if (lineCap === 'round' || lineCap === 'square') {\n        if (roundOrSquare[lineDash] == undefined) {\n            console.warn(`'${lineDash}' is not a valid 'lineDash' option.`);\n            return roundOrSquare.solid;\n        }\n        return roundOrSquare[lineDash];\n    }\n    if (buttOrNull[lineDash] == undefined) {\n        console.warn(`'${lineDash}' is not a valid 'lineDash' option.`);\n        return buttOrNull.solid;\n    }\n    return buttOrNull[lineDash];\n}\n\nconst { extent: extent$2 } = _Util;\nconst { BandScale: BandScale$3 } = _Scale;\nclass SparklineMarker$1 {\n    constructor() {\n        this.enabled = true;\n        this.shape = 'circle';\n        this.size = 0;\n        this.fill = 'rgb(124, 181, 236)';\n        this.stroke = 'rgb(124, 181, 236)';\n        this.strokeWidth = 1;\n        this.formatter = undefined;\n    }\n}\nclass SparklineLine$1 {\n    constructor() {\n        this.stroke = 'rgb(124, 181, 236)';\n        this.strokeWidth = 1;\n    }\n}\nclass SparklineCrosshairs$1 {\n    constructor() {\n        this.xLine = {\n            enabled: true,\n            stroke: 'rgba(0,0,0, 0.54)',\n            strokeWidth: 1,\n            lineDash: 'solid',\n            lineCap: undefined,\n        };\n        this.yLine = {\n            enabled: false,\n            stroke: 'rgba(0,0,0, 0.54)',\n            strokeWidth: 1,\n            lineDash: 'solid',\n            lineCap: undefined,\n        };\n    }\n}\nclass AreaSparkline extends Sparkline {\n    constructor() {\n        super();\n        this.fill = 'rgba(124, 181, 236, 0.25)';\n        this.strokePath = new Path();\n        this.fillPath = new Path();\n        this.xCrosshairLine = new Line();\n        this.yCrosshairLine = new Line();\n        this.areaSparklineGroup = new Group();\n        this.xAxisLine = new Line();\n        this.markers = new Group();\n        this.markerSelection = Selection.select(this.markers, () => this.markerFactory());\n        this.markerSelectionData = [];\n        this.marker = new SparklineMarker$1();\n        this.line = new SparklineLine$1();\n        this.crosshairs = new SparklineCrosshairs$1();\n        this.rootGroup.append(this.areaSparklineGroup);\n        this.xAxisLine.zIndex = ZINDICIES.AXIS_LINE_ZINDEX;\n        this.fillPath.zIndex = ZINDICIES.SERIES_FILL_ZINDEX;\n        this.strokePath.zIndex = ZINDICIES.SERIES_STROKE_ZINDEX;\n        this.xCrosshairLine.zIndex = ZINDICIES.CROSSHAIR_ZINDEX;\n        this.yCrosshairLine.zIndex = ZINDICIES.CROSSHAIR_ZINDEX;\n        this.markers.zIndex = ZINDICIES.SERIES_MARKERS_ZINDEX;\n        this.areaSparklineGroup.append([\n            this.fillPath,\n            this.xAxisLine,\n            this.strokePath,\n            this.xCrosshairLine,\n            this.yCrosshairLine,\n            this.markers,\n        ]);\n    }\n    markerFactory() {\n        const { shape } = this.marker;\n        const MarkerShape = getMarker(shape);\n        return new MarkerShape();\n    }\n    getNodeData() {\n        return this.markerSelectionData;\n    }\n    update() {\n        const data = this.generateNodeData();\n        if (!data) {\n            return;\n        }\n        const { nodeData, fillData, strokeData } = data;\n        this.markerSelectionData = nodeData;\n        this.updateSelection(nodeData);\n        this.updateNodes();\n        this.updateStroke(strokeData);\n        this.updateFill(fillData);\n    }\n    updateYScaleDomain() {\n        const { yData, yScale } = this;\n        const yMinMax = extent$2(yData);\n        let yMin = 0;\n        let yMax = 1;\n        if (yMinMax !== undefined) {\n            yMin = this.min = yMinMax[0];\n            yMax = this.max = yMinMax[1];\n        }\n        // if yMin is positive, set yMin to 0\n        yMin = yMin < 0 ? yMin : 0;\n        // if yMax is negative, set yMax to 0\n        yMax = yMax < 0 ? 0 : yMax;\n        yScale.domain = [yMin, yMax];\n    }\n    generateNodeData() {\n        const { data, yData, xData, xScale, yScale } = this;\n        if (!data) {\n            return;\n        }\n        const continuous = !(xScale instanceof BandScale$3);\n        const offsetX = !continuous ? xScale.bandwidth / 2 : 0;\n        const n = yData.length;\n        const nodeData = [];\n        const fillData = [];\n        const strokeData = [];\n        let firstValidX;\n        let lastValidX;\n        let previousX;\n        let nextX;\n        const yZero = yScale.convert(0);\n        for (let i = 0; i < n; i++) {\n            const yDatum = yData[i];\n            const xDatum = xData[i];\n            const x = xScale.convert(continuous ? xScale.toDomain(xDatum) : xDatum) + offsetX;\n            const y = yDatum === undefined ? NaN : yScale.convert(yDatum);\n            // if this iteration is not the last, set nextX using the next value in the data array\n            if (i + 1 < n) {\n                nextX = xScale.convert(continuous ? xScale.toDomain(xData[i + 1]) : xData[i + 1]) + offsetX;\n            }\n            // set stroke data regardless of missing/ undefined values. Undefined values will be handled in the updateStroke() method\n            strokeData.push({\n                seriesDatum: { x: xDatum, y: yDatum },\n                point: { x, y },\n            });\n            if (yDatum === undefined && previousX !== undefined) {\n                // if yDatum is undefined and there is a valid previous data point, add a phantom point at yZero\n                // if a next data point exists, add a phantom point at yZero at the next X\n                fillData.push({ seriesDatum: undefined, point: { x: previousX, y: yZero } });\n                if (nextX !== undefined) {\n                    fillData.push({ seriesDatum: undefined, point: { x: nextX, y: yZero } });\n                }\n            }\n            else if (yDatum !== undefined) {\n                fillData.push({\n                    seriesDatum: { x: xDatum, y: yDatum },\n                    point: { x, y },\n                });\n                // set node data only if yDatum is not undefined. These values are used in the updateSelection() method to update markers\n                nodeData.push({\n                    seriesDatum: { x: xDatum, y: yDatum },\n                    point: { x, y },\n                });\n                firstValidX = firstValidX !== undefined ? firstValidX : x;\n                lastValidX = x;\n            }\n            previousX = x;\n        }\n        // phantom points for creating closed area\n        fillData.push({ seriesDatum: undefined, point: { x: lastValidX, y: yZero } }, { seriesDatum: undefined, point: { x: firstValidX, y: yZero } });\n        return { nodeData, fillData, strokeData };\n    }\n    updateAxisLine() {\n        const { xScale, yScale, axis, xAxisLine } = this;\n        xAxisLine.x1 = xScale.range[0];\n        xAxisLine.x2 = xScale.range[1];\n        xAxisLine.y1 = xAxisLine.y2 = 0;\n        xAxisLine.stroke = axis.stroke;\n        xAxisLine.strokeWidth = axis.strokeWidth;\n        const yZero = yScale.convert(0);\n        xAxisLine.translationY = yZero;\n    }\n    updateSelection(selectionData) {\n        this.markerSelection.update(selectionData);\n    }\n    updateNodes() {\n        const { highlightedDatum, highlightStyle, marker } = this;\n        const { size: highlightSize, fill: highlightFill, stroke: highlightStroke, strokeWidth: highlightStrokeWidth, } = highlightStyle;\n        const markerFormatter = marker.formatter;\n        this.markerSelection.each((node, datum, index) => {\n            const { point, seriesDatum } = datum;\n            if (!point) {\n                return;\n            }\n            const highlighted = datum === highlightedDatum;\n            const markerFill = highlighted && highlightFill !== undefined ? highlightFill : marker.fill;\n            const markerStroke = highlighted && highlightStroke !== undefined ? highlightStroke : marker.stroke;\n            const markerStrokeWidth = highlighted && highlightStrokeWidth !== undefined ? highlightStrokeWidth : marker.strokeWidth;\n            const markerSize = highlighted && highlightSize !== undefined ? highlightSize : marker.size;\n            let markerFormat;\n            if (markerFormatter) {\n                const first = index === 0;\n                const last = index === this.markerSelectionData.length - 1;\n                const min = seriesDatum.y === this.min;\n                const max = seriesDatum.y === this.max;\n                markerFormat = markerFormatter({\n                    datum,\n                    xValue: seriesDatum.x,\n                    yValue: seriesDatum.y,\n                    min,\n                    max,\n                    first,\n                    last,\n                    fill: markerFill,\n                    stroke: markerStroke,\n                    strokeWidth: markerStrokeWidth,\n                    size: markerSize,\n                    highlighted,\n                });\n            }\n            node.size = markerFormat && markerFormat.size != undefined ? markerFormat.size : markerSize;\n            node.fill = markerFormat && markerFormat.fill != undefined ? markerFormat.fill : markerFill;\n            node.stroke = markerFormat && markerFormat.stroke != undefined ? markerFormat.stroke : markerStroke;\n            node.strokeWidth =\n                markerFormat && markerFormat.strokeWidth != undefined ? markerFormat.strokeWidth : markerStrokeWidth;\n            node.translationX = point.x;\n            node.translationY = point.y;\n            node.visible =\n                markerFormat && markerFormat.enabled != undefined\n                    ? markerFormat.enabled\n                    : marker.enabled && node.size > 0;\n        });\n    }\n    updateStroke(strokeData) {\n        const { strokePath, yData, line } = this;\n        if (yData.length < 2) {\n            return;\n        }\n        const path = strokePath.path;\n        const n = strokeData.length;\n        let moveTo = true;\n        path.clear();\n        for (let i = 0; i < n; i++) {\n            const { point, seriesDatum } = strokeData[i];\n            const x = point.x;\n            const y = point.y;\n            if (seriesDatum.y == undefined) {\n                moveTo = true;\n            }\n            else {\n                if (moveTo) {\n                    path.moveTo(x, y);\n                    moveTo = false;\n                }\n                else {\n                    path.lineTo(x, y);\n                }\n            }\n        }\n        strokePath.lineJoin = strokePath.lineCap = 'round';\n        strokePath.fill = undefined;\n        strokePath.stroke = line.stroke;\n        strokePath.strokeWidth = line.strokeWidth;\n    }\n    updateFill(areaData) {\n        const { fillPath, yData, fill } = this;\n        const path = fillPath.path;\n        const n = areaData.length;\n        path.clear();\n        if (yData.length < 2) {\n            return;\n        }\n        for (let i = 0; i < n; i++) {\n            const { point } = areaData[i];\n            const x = point.x;\n            const y = point.y;\n            if (i > 0) {\n                path.lineTo(x, y);\n            }\n            else {\n                path.moveTo(x, y);\n            }\n        }\n        path.closePath();\n        fillPath.lineJoin = 'round';\n        fillPath.stroke = undefined;\n        fillPath.fill = fill;\n    }\n    updateXCrosshairLine() {\n        var _a;\n        const { yScale, xCrosshairLine, highlightedDatum, crosshairs: { xLine }, } = this;\n        if (!xLine.enabled || highlightedDatum == undefined) {\n            xCrosshairLine.strokeWidth = 0;\n            return;\n        }\n        xCrosshairLine.y1 = yScale.range[0];\n        xCrosshairLine.y2 = yScale.range[1];\n        xCrosshairLine.x1 = xCrosshairLine.x2 = 0;\n        xCrosshairLine.stroke = xLine.stroke;\n        xCrosshairLine.strokeWidth = (_a = xLine.strokeWidth) !== null && _a !== void 0 ? _a : 1;\n        xCrosshairLine.lineCap = xLine.lineCap === 'round' || xLine.lineCap === 'square' ? xLine.lineCap : undefined;\n        const { lineDash } = xLine;\n        xCrosshairLine.lineDash = Array.isArray(lineDash)\n            ? lineDash\n            : getLineDash(xCrosshairLine.lineCap, xLine.lineDash);\n        xCrosshairLine.translationX = highlightedDatum.point.x;\n    }\n    updateYCrosshairLine() {\n        var _a;\n        const { xScale, yCrosshairLine, highlightedDatum, crosshairs: { yLine }, } = this;\n        if (!yLine.enabled || highlightedDatum == undefined) {\n            yCrosshairLine.strokeWidth = 0;\n            return;\n        }\n        yCrosshairLine.x1 = xScale.range[0];\n        yCrosshairLine.x2 = xScale.range[1];\n        yCrosshairLine.y1 = yCrosshairLine.y2 = 0;\n        yCrosshairLine.stroke = yLine.stroke;\n        yCrosshairLine.strokeWidth = (_a = yLine.strokeWidth) !== null && _a !== void 0 ? _a : 1;\n        yCrosshairLine.lineCap = yLine.lineCap === 'round' || yLine.lineCap === 'square' ? yLine.lineCap : undefined;\n        const { lineDash } = yLine;\n        yCrosshairLine.lineDash = Array.isArray(lineDash)\n            ? lineDash\n            : getLineDash(yCrosshairLine.lineCap, yLine.lineDash);\n        yCrosshairLine.translationY = highlightedDatum.point.y;\n    }\n    getTooltipHtml(datum) {\n        var _a, _b;\n        const { dataType } = this;\n        const { seriesDatum } = datum;\n        const yValue = seriesDatum.y;\n        const xValue = seriesDatum.x;\n        const content = this.formatNumericDatum(yValue);\n        const title = dataType === 'array' || dataType === 'object' ? this.formatDatum(xValue) : undefined;\n        const defaults = {\n            content,\n            title,\n        };\n        const tooltipRenderer = (_b = (_a = this.processedOptions) === null || _a === void 0 ? void 0 : _a.tooltip) === null || _b === void 0 ? void 0 : _b.renderer;\n        if (tooltipRenderer) {\n            return toTooltipHtml(tooltipRenderer({\n                context: this.context,\n                datum: seriesDatum,\n                yValue,\n                xValue,\n            }), defaults);\n        }\n        return toTooltipHtml(defaults);\n    }\n}\nAreaSparkline.className = 'AreaSparkline';\n\nconst { extent: extent$1 } = _Util;\nconst { BandScale: BandScale$2 } = _Scale;\nclass SparklineMarker {\n    constructor() {\n        this.enabled = true;\n        this.shape = 'circle';\n        this.size = 0;\n        this.fill = 'rgb(124, 181, 236)';\n        this.stroke = 'rgb(124, 181, 236)';\n        this.strokeWidth = 1;\n        this.formatter = undefined;\n    }\n}\nclass SparklineLine {\n    constructor() {\n        this.stroke = 'rgb(124, 181, 236)';\n        this.strokeWidth = 1;\n    }\n}\nclass SparklineCrosshairs {\n    constructor() {\n        this.xLine = {\n            enabled: true,\n            stroke: 'rgba(0,0,0, 0.54)',\n            strokeWidth: 1,\n            lineDash: 'solid',\n            lineCap: undefined,\n        };\n        this.yLine = {\n            enabled: false,\n            stroke: 'rgba(0,0,0, 0.54)',\n            strokeWidth: 1,\n            lineDash: 'solid',\n            lineCap: undefined,\n        };\n    }\n}\nclass LineSparkline extends Sparkline {\n    constructor() {\n        super();\n        this.linePath = new Path();\n        this.xCrosshairLine = new Line();\n        this.yCrosshairLine = new Line();\n        this.lineSparklineGroup = new Group();\n        this.markers = new Group();\n        this.markerSelection = Selection.select(this.markers, () => this.markerFactory());\n        this.markerSelectionData = [];\n        this.marker = new SparklineMarker();\n        this.line = new SparklineLine();\n        this.crosshairs = new SparklineCrosshairs();\n        this.rootGroup.append(this.lineSparklineGroup);\n        this.linePath.zIndex = ZINDICIES.SERIES_STROKE_ZINDEX;\n        this.xCrosshairLine.zIndex = ZINDICIES.CROSSHAIR_ZINDEX;\n        this.yCrosshairLine.zIndex = ZINDICIES.CROSSHAIR_ZINDEX;\n        this.markers.zIndex = ZINDICIES.SERIES_MARKERS_ZINDEX;\n        this.lineSparklineGroup.append([this.linePath, this.xCrosshairLine, this.yCrosshairLine, this.markers]);\n    }\n    getNodeData() {\n        return this.markerSelectionData;\n    }\n    markerFactory() {\n        const { shape } = this.marker;\n        const MarkerShape = getMarker(shape);\n        return new MarkerShape();\n    }\n    /**\n     * If marker shape is changed, this method should be called to remove the previous marker nodes selection.\n     */\n    onMarkerShapeChange() {\n        this.markerSelection = this.markerSelection.clear();\n        this.scheduleLayout();\n    }\n    update() {\n        const nodeData = this.generateNodeData();\n        if (!nodeData) {\n            return;\n        }\n        this.markerSelectionData = nodeData;\n        this.updateSelection(nodeData);\n        this.updateNodes();\n        this.updateLine();\n    }\n    updateYScaleDomain() {\n        const { yData, yScale } = this;\n        const yMinMax = extent$1(yData);\n        let yMin = 0;\n        let yMax = 1;\n        if (yMinMax !== undefined) {\n            yMin = this.min = yMinMax[0];\n            yMax = this.max = yMinMax[1];\n        }\n        if (yMin === yMax) {\n            // if all values in the data are the same, yMin and yMax will be equal, need to adjust the domain with some padding\n            const padding = Math.abs(yMin * 0.01);\n            yMin -= padding;\n            yMax += padding;\n        }\n        yScale.domain = [yMin, yMax];\n    }\n    generateNodeData() {\n        const { data, yData, xData, xScale, yScale } = this;\n        if (!data) {\n            return;\n        }\n        const continuous = !(xScale instanceof BandScale$2);\n        const offsetX = !continuous ? xScale.bandwidth / 2 : 0;\n        const nodeData = [];\n        for (let i = 0; i < yData.length; i++) {\n            const yDatum = yData[i];\n            const xDatum = xData[i];\n            if (yDatum == undefined) {\n                continue;\n            }\n            const x = xScale.convert(continuous ? xScale.toDomain(xDatum) : xDatum) + offsetX;\n            const y = yDatum === undefined ? NaN : yScale.convert(yDatum);\n            nodeData.push({\n                seriesDatum: { x: xDatum, y: yDatum },\n                point: { x, y },\n            });\n        }\n        return nodeData;\n    }\n    updateSelection(selectionData) {\n        this.markerSelection.update(selectionData);\n    }\n    updateNodes() {\n        const { highlightedDatum, highlightStyle, marker } = this;\n        const { size: highlightSize, fill: highlightFill, stroke: highlightStroke, strokeWidth: highlightStrokeWidth, } = highlightStyle;\n        const markerFormatter = marker.formatter;\n        this.markerSelection.each((node, datum, index) => {\n            const highlighted = datum === highlightedDatum;\n            const markerFill = highlighted && highlightFill !== undefined ? highlightFill : marker.fill;\n            const markerStroke = highlighted && highlightStroke !== undefined ? highlightStroke : marker.stroke;\n            const markerStrokeWidth = highlighted && highlightStrokeWidth !== undefined ? highlightStrokeWidth : marker.strokeWidth;\n            const markerSize = highlighted && highlightSize !== undefined ? highlightSize : marker.size;\n            let markerFormat;\n            const { seriesDatum, point } = datum;\n            if (markerFormatter) {\n                const first = index === 0;\n                const last = index === this.markerSelectionData.length - 1;\n                const min = seriesDatum.y === this.min;\n                const max = seriesDatum.y === this.max;\n                markerFormat = markerFormatter({\n                    datum,\n                    xValue: seriesDatum.x,\n                    yValue: seriesDatum.y,\n                    min,\n                    max,\n                    first,\n                    last,\n                    fill: markerFill,\n                    stroke: markerStroke,\n                    strokeWidth: markerStrokeWidth,\n                    size: markerSize,\n                    highlighted,\n                });\n            }\n            node.size = markerFormat && markerFormat.size != undefined ? markerFormat.size : markerSize;\n            node.fill = markerFormat && markerFormat.fill != undefined ? markerFormat.fill : markerFill;\n            node.stroke = markerFormat && markerFormat.stroke != undefined ? markerFormat.stroke : markerStroke;\n            node.strokeWidth =\n                markerFormat && markerFormat.strokeWidth != undefined ? markerFormat.strokeWidth : markerStrokeWidth;\n            node.translationX = point.x;\n            node.translationY = point.y;\n            node.visible =\n                markerFormat && markerFormat.enabled != undefined\n                    ? markerFormat.enabled\n                    : marker.enabled && node.size > 0;\n        });\n    }\n    updateLine() {\n        const { linePath, yData, xData, xScale, yScale, line } = this;\n        if (yData.length < 2) {\n            return;\n        }\n        const continuous = !(xScale instanceof BandScale$2);\n        const path = linePath.path;\n        const n = yData.length;\n        const offsetX = !continuous ? xScale.bandwidth / 2 : 0;\n        let moveTo = true;\n        path.clear();\n        for (let i = 0; i < n; i++) {\n            const xDatum = xData[i];\n            const yDatum = yData[i];\n            const x = xScale.convert(continuous ? xScale.toDomain(xDatum) : xDatum) + offsetX;\n            const y = yDatum === undefined ? NaN : yScale.convert(yDatum);\n            if (yDatum == undefined) {\n                moveTo = true;\n            }\n            else {\n                if (moveTo) {\n                    path.moveTo(x, y);\n                    moveTo = false;\n                }\n                else {\n                    path.lineTo(x, y);\n                }\n            }\n        }\n        linePath.fill = undefined;\n        linePath.stroke = line.stroke;\n        linePath.strokeWidth = line.strokeWidth;\n    }\n    updateXCrosshairLine() {\n        var _a;\n        const { yScale, xCrosshairLine, highlightedDatum, crosshairs: { xLine }, } = this;\n        if (!xLine.enabled || highlightedDatum == undefined) {\n            xCrosshairLine.strokeWidth = 0;\n            return;\n        }\n        xCrosshairLine.y1 = yScale.range[0];\n        xCrosshairLine.y2 = yScale.range[1];\n        xCrosshairLine.x1 = xCrosshairLine.x2 = 0;\n        xCrosshairLine.stroke = xLine.stroke;\n        xCrosshairLine.strokeWidth = (_a = xLine.strokeWidth) !== null && _a !== void 0 ? _a : 1;\n        xCrosshairLine.lineCap = xLine.lineCap === 'round' || xLine.lineCap === 'square' ? xLine.lineCap : undefined;\n        const { lineDash } = xLine;\n        xCrosshairLine.lineDash = Array.isArray(lineDash)\n            ? lineDash\n            : getLineDash(xCrosshairLine.lineCap, xLine.lineDash);\n        xCrosshairLine.translationX = highlightedDatum.point.x;\n    }\n    updateYCrosshairLine() {\n        var _a;\n        const { xScale, yCrosshairLine, highlightedDatum, crosshairs: { yLine }, } = this;\n        if (!yLine.enabled || highlightedDatum == undefined) {\n            yCrosshairLine.strokeWidth = 0;\n            return;\n        }\n        yCrosshairLine.x1 = xScale.range[0];\n        yCrosshairLine.x2 = xScale.range[1];\n        yCrosshairLine.y1 = yCrosshairLine.y2 = 0;\n        yCrosshairLine.stroke = yLine.stroke;\n        yCrosshairLine.strokeWidth = (_a = yLine.strokeWidth) !== null && _a !== void 0 ? _a : 1;\n        yCrosshairLine.lineCap = yLine.lineCap === 'round' || yLine.lineCap === 'square' ? yLine.lineCap : undefined;\n        const { lineDash } = yLine;\n        yCrosshairLine.lineDash = Array.isArray(lineDash)\n            ? lineDash\n            : getLineDash(yCrosshairLine.lineCap, yLine.lineDash);\n        yCrosshairLine.translationY = highlightedDatum.point.y;\n    }\n    getTooltipHtml(datum) {\n        var _a, _b;\n        const { dataType } = this;\n        const { seriesDatum } = datum;\n        const yValue = seriesDatum.y;\n        const xValue = seriesDatum.x;\n        const content = this.formatNumericDatum(yValue);\n        const title = dataType === 'array' || dataType === 'object' ? this.formatDatum(xValue) : undefined;\n        const defaults = {\n            content,\n            title,\n        };\n        const tooltipRenderer = (_b = (_a = this.processedOptions) === null || _a === void 0 ? void 0 : _a.tooltip) === null || _b === void 0 ? void 0 : _b.renderer;\n        if (tooltipRenderer) {\n            return toTooltipHtml(tooltipRenderer({\n                context: this.context,\n                datum: seriesDatum,\n                yValue,\n                xValue,\n            }), defaults);\n        }\n        return toTooltipHtml(defaults);\n    }\n}\nLineSparkline.className = 'LineSparkline';\n\nclass Label {\n    constructor() {\n        this.enabled = true;\n        this.fontSize = 8;\n        this.fontFamily = 'Verdana, sans-serif';\n        this.fontStyle = undefined;\n        this.fontWeight = undefined;\n        this.color = 'rgba(70, 70, 70, 1)';\n    }\n}\n\nconst { extent } = _Util;\nvar BarColumnNodeTag;\n(function (BarColumnNodeTag) {\n    BarColumnNodeTag[BarColumnNodeTag[\"Rect\"] = 0] = \"Rect\";\n    BarColumnNodeTag[BarColumnNodeTag[\"Label\"] = 1] = \"Label\";\n})(BarColumnNodeTag || (BarColumnNodeTag = {}));\nvar BarColumnLabelPlacement;\n(function (BarColumnLabelPlacement) {\n    BarColumnLabelPlacement[\"InsideBase\"] = \"insideBase\";\n    BarColumnLabelPlacement[\"InsideEnd\"] = \"insideEnd\";\n    BarColumnLabelPlacement[\"Center\"] = \"center\";\n    BarColumnLabelPlacement[\"OutsideEnd\"] = \"outsideEnd\";\n})(BarColumnLabelPlacement || (BarColumnLabelPlacement = {}));\nclass BarColumnLabel extends Label {\n    constructor() {\n        super(...arguments);\n        this.formatter = undefined;\n        this.placement = BarColumnLabelPlacement.InsideEnd;\n    }\n}\nclass BarColumnSparkline extends Sparkline {\n    constructor() {\n        super();\n        this.fill = 'rgb(124, 181, 236)';\n        this.stroke = 'silver';\n        this.strokeWidth = 0;\n        this.paddingInner = 0.1;\n        this.paddingOuter = 0.2;\n        this.valueAxisDomain = undefined;\n        this.formatter = undefined;\n        this.axisLine = new Line();\n        this.bandWidth = 0;\n        this.sparklineGroup = new Group();\n        this.rectGroup = new Group();\n        this.labelGroup = new Group();\n        this.rectSelection = Selection.select(this.rectGroup, Rect);\n        this.labelSelection = Selection.select(this.labelGroup, Text);\n        this.nodeSelectionData = [];\n        this.label = new BarColumnLabel();\n        this.rootGroup.append(this.sparklineGroup);\n        this.rectGroup.zIndex = ZINDICIES.SERIES_FILL_ZINDEX;\n        this.axisLine.zIndex = ZINDICIES.AXIS_LINE_ZINDEX;\n        this.labelGroup.zIndex = ZINDICIES.SERIES_LABEL_ZINDEX;\n        this.sparklineGroup.append([this.rectGroup, this.axisLine, this.labelGroup]);\n        this.axisLine.lineCap = 'round';\n        this.label.enabled = false;\n    }\n    getNodeData() {\n        return this.nodeSelectionData;\n    }\n    update() {\n        this.updateSelections();\n        this.updateNodes();\n    }\n    updateSelections() {\n        const nodeData = this.generateNodeData();\n        if (!nodeData) {\n            return;\n        }\n        this.nodeSelectionData = nodeData;\n        this.updateRectSelection(nodeData);\n        this.updateLabelSelection(nodeData);\n    }\n    updateNodes() {\n        this.updateRectNodes();\n        this.updateLabelNodes();\n    }\n    calculateStep(range) {\n        var _a;\n        const { xScale, paddingInner, paddingOuter, smallestInterval } = this;\n        // calculate step\n        let domainLength = xScale.domain[1] - xScale.domain[0];\n        let intervals = domainLength / ((_a = smallestInterval === null || smallestInterval === void 0 ? void 0 : smallestInterval.x) !== null && _a !== void 0 ? _a : 1) + 1;\n        // The number of intervals/bands is used to determine the width of individual bands by dividing the available range.\n        // Allow a maximum of 50 bands to ensure the step (width of individual bands + padding) does not fall below a certain number of pixels.\n        // If the number of intervals exceeds 50, calculate the step for 50 bands within the given range.\n        // This means there could be some overlap of the bands in the sparkline.\n        const maxBands = 50;\n        const bands = Math.min(intervals, maxBands);\n        const gaps = bands - 1; // number of gaps (padding between bands)\n        const step = range / Math.max(1, 2 * paddingOuter + gaps * paddingInner + bands); // step width is a combination of band width and gap width\n        return step;\n    }\n    updateYScaleDomain() {\n        const { yScale, yData, valueAxisDomain } = this;\n        const yMinMax = extent(yData);\n        let yMin = 0;\n        let yMax = 1;\n        if (yMinMax !== undefined) {\n            yMin = this.min = yMinMax[0];\n            yMax = this.max = yMinMax[1];\n        }\n        // if yMin is positive, set yMin to 0\n        yMin = yMin < 0 ? yMin : 0;\n        // if yMax is negative, set yMax to 0\n        yMax = yMax < 0 ? 0 : yMax;\n        if (valueAxisDomain) {\n            if (valueAxisDomain[1] < yMax) {\n                valueAxisDomain[1] = yMax;\n            }\n            if (valueAxisDomain[0] > yMin) {\n                valueAxisDomain[0] = yMin;\n            }\n        }\n        yScale.domain = valueAxisDomain ? valueAxisDomain : [yMin, yMax];\n    }\n    updateRectSelection(selectionData) {\n        this.rectSelection.update(selectionData);\n    }\n    updateRectNodes() {\n        const { highlightedDatum, formatter: nodeFormatter, fill, stroke, strokeWidth } = this;\n        const { fill: highlightFill, stroke: highlightStroke, strokeWidth: highlightStrokeWidth } = this.highlightStyle;\n        this.rectSelection.each((node, datum, index) => {\n            const highlighted = datum === highlightedDatum;\n            const nodeFill = highlighted && highlightFill !== undefined ? highlightFill : fill;\n            const nodeStroke = highlighted && highlightStroke !== undefined ? highlightStroke : stroke;\n            const nodeStrokeWidth = highlighted && highlightStrokeWidth !== undefined ? highlightStrokeWidth : strokeWidth;\n            let nodeFormat;\n            const { x, y, width, height, seriesDatum } = datum;\n            if (nodeFormatter) {\n                const first = index === 0;\n                const last = index === this.nodeSelectionData.length - 1;\n                const min = seriesDatum.y === this.min;\n                const max = seriesDatum.y === this.max;\n                nodeFormat = nodeFormatter({\n                    datum,\n                    xValue: seriesDatum.x,\n                    yValue: seriesDatum.y,\n                    width: width,\n                    height: height,\n                    min,\n                    max,\n                    first,\n                    last,\n                    fill: nodeFill,\n                    stroke: nodeStroke,\n                    strokeWidth: nodeStrokeWidth,\n                    highlighted,\n                });\n            }\n            node.fill = (nodeFormat && nodeFormat.fill) || nodeFill;\n            node.stroke = (nodeFormat && nodeFormat.stroke) || nodeStroke;\n            node.strokeWidth = (nodeFormat && nodeFormat.strokeWidth) || nodeStrokeWidth;\n            node.x = node.y = 0;\n            node.width = width;\n            node.height = height;\n            node.visible = node.height > 0;\n            node.translationX = x;\n            node.translationY = y;\n            // shifts bars upwards?\n            // node.crisp = true;\n        });\n    }\n    updateLabelSelection(selectionData) {\n        this.labelSelection.update(selectionData, (text) => {\n            text.tag = BarColumnNodeTag.Label;\n            text.pointerEvents = PointerEvents.None;\n        });\n    }\n    updateLabelNodes() {\n        const { label: { enabled: labelEnabled, fontStyle, fontWeight, fontSize, fontFamily, color }, } = this;\n        this.labelSelection.each((text, datum) => {\n            const label = datum.label;\n            if (label && labelEnabled) {\n                text.fontStyle = fontStyle;\n                text.fontWeight = fontWeight;\n                text.fontSize = fontSize;\n                text.fontFamily = fontFamily;\n                text.textAlign = label.textAlign;\n                text.textBaseline = label.textBaseline;\n                text.text = label.text;\n                text.x = label.x;\n                text.y = label.y;\n                text.fill = color;\n                text.visible = true;\n            }\n            else {\n                text.visible = false;\n            }\n        });\n    }\n    getTooltipHtml(datum) {\n        var _a, _b;\n        const { dataType } = this;\n        const { seriesDatum } = datum;\n        const yValue = seriesDatum.y;\n        const xValue = seriesDatum.x;\n        const content = this.formatNumericDatum(yValue);\n        const title = dataType === 'array' || dataType === 'object' ? this.formatDatum(xValue) : undefined;\n        const defaults = {\n            content,\n            title,\n        };\n        const tooltipRenderer = (_b = (_a = this.processedOptions) === null || _a === void 0 ? void 0 : _a.tooltip) === null || _b === void 0 ? void 0 : _b.renderer;\n        if (tooltipRenderer) {\n            return toTooltipHtml(tooltipRenderer({\n                context: this.context,\n                datum: seriesDatum,\n                yValue,\n                xValue,\n            }), defaults);\n        }\n        return toTooltipHtml(defaults);\n    }\n    formatLabelValue(value) {\n        return value % 1 !== 0 ? value.toFixed(1) : value.toFixed(0);\n    }\n}\n\nconst { isNumber: isNumber$2 } = _Util;\nconst { BandScale: BandScale$1 } = _Scale;\nclass BarSparkline extends BarColumnSparkline {\n    updateYScaleRange() {\n        const { seriesRect, yScale } = this;\n        yScale.range = [0, seriesRect.width];\n    }\n    updateXScaleRange() {\n        const { xScale, seriesRect, paddingOuter, paddingInner } = this;\n        if (xScale instanceof BandScale$1) {\n            xScale.range = [0, seriesRect.height];\n            xScale.paddingInner = paddingInner;\n            xScale.paddingOuter = paddingOuter;\n        }\n        else {\n            // last node will be clipped if the scale is not a band scale\n            // subtract last band width from the range so that the last band is not clipped\n            const step = this.calculateStep(seriesRect.height);\n            // PaddingOuter and paddingInner are fractions of the step with values between 0 and 1\n            const padding = step * paddingOuter; // left and right outer padding\n            this.bandWidth = step * (1 - paddingInner);\n            xScale.range = [padding, seriesRect.height - padding - this.bandWidth];\n        }\n    }\n    updateAxisLine() {\n        const { yScale, axis, axisLine, seriesRect } = this;\n        const { strokeWidth } = axis;\n        axisLine.x1 = 0;\n        axisLine.x2 = 0;\n        axisLine.y1 = 0;\n        axisLine.y2 = seriesRect.height;\n        axisLine.stroke = axis.stroke;\n        axisLine.strokeWidth = strokeWidth + (strokeWidth % 2 === 1 ? 1 : 0);\n        const yZero = yScale.convert(0);\n        axisLine.translationX = yZero;\n    }\n    generateNodeData() {\n        const { data, yData, xData, xScale, yScale, fill, stroke, strokeWidth, label } = this;\n        if (!data) {\n            return;\n        }\n        const { fontStyle: labelFontStyle, fontWeight: labelFontWeight, fontSize: labelFontSize, fontFamily: labelFontFamily, color: labelColor, formatter: labelFormatter, placement: labelPlacement, } = label;\n        const nodeData = [];\n        const yZero = yScale.convert(0);\n        const continuous = !(xScale instanceof BandScale$1);\n        for (let i = 0, n = yData.length; i < n; i++) {\n            let yDatum = yData[i];\n            const xDatum = xData[i];\n            const invalidDatum = yDatum === undefined;\n            if (invalidDatum) {\n                yDatum = 0;\n            }\n            const y = xScale.convert(continuous ? xScale.toDomain(xDatum) : xDatum);\n            const x = Math.min(yDatum === undefined ? NaN : yScale.convert(yDatum), yZero);\n            const bottom = Math.max(yDatum === undefined ? NaN : yScale.convert(yDatum), yZero);\n            // if the scale is a band scale, the width of the rects will be the bandwidth, otherwise the width of the rects will be the range / number of items in the data\n            const height = !continuous ? xScale.bandwidth : this.bandWidth;\n            const width = bottom - x;\n            const midPoint = {\n                x: yZero,\n                y: y,\n            };\n            let labelText;\n            if (labelFormatter) {\n                labelText = labelFormatter({ value: yDatum });\n            }\n            else {\n                labelText = yDatum !== undefined && isNumber$2(yDatum) ? this.formatLabelValue(yDatum) : '';\n            }\n            const labelY = y + height / 2;\n            let labelX;\n            const labelTextBaseline = 'middle';\n            let labelTextAlign;\n            const isPositiveY = yDatum !== undefined && yDatum >= 0;\n            const labelPadding = 4;\n            if (labelPlacement === BarColumnLabelPlacement.Center) {\n                labelX = x + width / 2;\n                labelTextAlign = 'center';\n            }\n            else if (labelPlacement === BarColumnLabelPlacement.OutsideEnd) {\n                labelX = x + (isPositiveY ? width + labelPadding : -labelPadding);\n                labelTextAlign = isPositiveY ? 'start' : 'end';\n            }\n            else if (labelPlacement === BarColumnLabelPlacement.InsideEnd) {\n                labelX = x + (isPositiveY ? width - labelPadding : labelPadding);\n                labelTextAlign = isPositiveY ? 'end' : 'start';\n                const textSize = HdpiCanvas.getTextSize(labelText, labelFontFamily);\n                const textWidth = textSize.width || 20;\n                const positiveBoundary = yZero + textWidth;\n                const negativeBoundary = yZero - textWidth;\n                const exceedsBoundaries = (isPositiveY && labelX < positiveBoundary) || (!isPositiveY && labelX > negativeBoundary);\n                if (exceedsBoundaries) {\n                    // if labelX exceeds the boundary, labels should be positioned at `insideBase`.\n                    labelX = yZero + labelPadding * (isPositiveY ? 1 : -1);\n                    labelTextAlign = isPositiveY ? 'start' : 'end';\n                }\n            }\n            else {\n                // if labelPlacement === BarColumnLabelPlacement.InsideBase\n                labelX = yZero + labelPadding * (isPositiveY ? 1 : -1);\n                labelTextAlign = isPositiveY ? 'start' : 'end';\n            }\n            nodeData.push({\n                x,\n                y,\n                width,\n                height,\n                fill,\n                stroke,\n                strokeWidth,\n                seriesDatum: { x: xDatum, y: invalidDatum ? undefined : yDatum },\n                point: midPoint,\n                label: {\n                    x: labelX,\n                    y: labelY,\n                    text: labelText,\n                    fontStyle: labelFontStyle,\n                    fontWeight: labelFontWeight,\n                    fontSize: labelFontSize,\n                    fontFamily: labelFontFamily,\n                    textAlign: labelTextAlign,\n                    textBaseline: labelTextBaseline,\n                    fill: labelColor,\n                },\n            });\n        }\n        return nodeData;\n    }\n    getDistance(p1, p2) {\n        return Math.abs(p1.y - p2.y);\n    }\n}\nBarSparkline.className = 'BarSparkline';\n\nconst { isNumber: isNumber$1 } = _Util;\nconst { BandScale } = _Scale;\nclass ColumnSparkline extends BarColumnSparkline {\n    updateYScaleRange() {\n        const { seriesRect, yScale } = this;\n        yScale.range = [seriesRect.height, 0];\n    }\n    updateXScaleRange() {\n        const { xScale, seriesRect, paddingOuter, paddingInner } = this;\n        if (xScale instanceof BandScale) {\n            xScale.range = [0, seriesRect.width];\n            xScale.paddingInner = paddingInner;\n            xScale.paddingOuter = paddingOuter;\n        }\n        else {\n            // last node will be clipped if the scale is not a band scale\n            // subtract last band width from the range so that the last band is not clipped\n            const step = this.calculateStep(seriesRect.width);\n            // PaddingOuter and paddingInner are fractions of the step with values between 0 and 1\n            const padding = step * paddingOuter; // left and right outer padding\n            this.bandWidth = step * (1 - paddingInner);\n            xScale.range = [padding, seriesRect.width - padding - this.bandWidth];\n        }\n    }\n    updateAxisLine() {\n        const { yScale, axis, axisLine, seriesRect } = this;\n        const { strokeWidth } = axis;\n        axisLine.x1 = 0;\n        axisLine.x2 = seriesRect.width;\n        axisLine.y1 = 0;\n        axisLine.y2 = 0;\n        axisLine.stroke = axis.stroke;\n        axisLine.strokeWidth = strokeWidth + (strokeWidth % 2 === 1 ? 1 : 0);\n        const yZero = yScale.convert(0);\n        axisLine.translationY = yZero;\n    }\n    generateNodeData() {\n        const { data, yData, xData, xScale, yScale, fill, stroke, strokeWidth, label } = this;\n        if (!data) {\n            return;\n        }\n        const { fontStyle: labelFontStyle, fontWeight: labelFontWeight, fontSize: labelFontSize, fontFamily: labelFontFamily, color: labelColor, formatter: labelFormatter, placement: labelPlacement, } = label;\n        const nodeData = [];\n        const yZero = yScale.convert(0);\n        const continuous = !(xScale instanceof BandScale);\n        for (let i = 0, n = yData.length; i < n; i++) {\n            let yDatum = yData[i];\n            const xDatum = xData[i];\n            const invalidDatum = yDatum === undefined;\n            if (invalidDatum) {\n                yDatum = 0;\n            }\n            const y = Math.min(yDatum === undefined ? NaN : yScale.convert(yDatum), yZero);\n            const x = xScale.convert(continuous ? xScale.toDomain(xDatum) : xDatum);\n            const bottom = Math.max(yDatum === undefined ? NaN : yScale.convert(yDatum), yZero);\n            // if the scale is a band scale, the width of the rects will be the bandwidth, otherwise the width of the rects will be the range / number of items in the data\n            const width = !continuous ? xScale.bandwidth : this.bandWidth;\n            const height = bottom - y;\n            const midPoint = {\n                x: x + width / 2,\n                y: yZero,\n            };\n            let labelText;\n            if (labelFormatter) {\n                labelText = labelFormatter({ value: yDatum });\n            }\n            else {\n                labelText = yDatum !== undefined && isNumber$1(yDatum) ? this.formatLabelValue(yDatum) : '';\n            }\n            const labelX = x + width / 2;\n            let labelY;\n            const labelTextAlign = 'center';\n            let labelTextBaseline;\n            const isPositiveY = yDatum !== undefined && yDatum >= 0;\n            const labelPadding = 2;\n            if (labelPlacement === BarColumnLabelPlacement.Center) {\n                labelY = y + height / 2;\n                labelTextBaseline = 'middle';\n            }\n            else if (labelPlacement === BarColumnLabelPlacement.OutsideEnd) {\n                labelY = y + (isPositiveY ? -labelPadding : height + labelPadding);\n                labelTextBaseline = isPositiveY ? 'bottom' : 'top';\n            }\n            else if (labelPlacement === BarColumnLabelPlacement.InsideEnd) {\n                labelY = y + (isPositiveY ? labelPadding : height - labelPadding);\n                labelTextBaseline = isPositiveY ? 'top' : 'bottom';\n                const textSize = HdpiCanvas.getTextSize(labelText, labelFontFamily);\n                const textHeight = textSize.height || 10;\n                const positiveBoundary = yZero - textHeight;\n                const negativeBoundary = yZero + textHeight;\n                const exceedsBoundaries = (isPositiveY && labelY > positiveBoundary) || (!isPositiveY && labelY < negativeBoundary);\n                if (exceedsBoundaries) {\n                    // if labelY exceeds the y boundary, labels should be positioned at the insideBase\n                    labelY = yZero + labelPadding * (isPositiveY ? -1 : 1);\n                    labelTextBaseline = isPositiveY ? 'bottom' : 'top';\n                }\n            }\n            else {\n                // if labelPlacement === BarColumnLabelPlacement.InsideBase\n                labelY = yZero + labelPadding * (isPositiveY ? -1 : 1);\n                labelTextBaseline = isPositiveY ? 'bottom' : 'top';\n            }\n            nodeData.push({\n                x,\n                y,\n                width,\n                height,\n                fill,\n                stroke,\n                strokeWidth,\n                seriesDatum: { x: xDatum, y: invalidDatum ? undefined : yDatum },\n                point: midPoint,\n                label: {\n                    x: labelX,\n                    y: labelY,\n                    text: labelText,\n                    fontStyle: labelFontStyle,\n                    fontWeight: labelFontWeight,\n                    fontSize: labelFontSize,\n                    fontFamily: labelFontFamily,\n                    textAlign: labelTextAlign,\n                    textBaseline: labelTextBaseline,\n                    fill: labelColor,\n                },\n            });\n        }\n        return nodeData;\n    }\n}\nColumnSparkline.className = 'ColumnSparkline';\n\nconst { isNumber } = _Util;\nclass AgSparkline {\n    static create(options, tooltip) {\n        // avoid mutating user provided options\n        options = jsonMerge([options]);\n        const sparkline = getSparklineInstance(options.type);\n        if (tooltip) {\n            sparkline.tooltip = tooltip;\n        }\n        initSparkline(sparkline, options);\n        initSparklineByType(sparkline, options);\n        if (options.data) {\n            sparkline.data = options.data;\n        }\n        sparkline.processedOptions = options;\n        return sparkline;\n    }\n}\nfunction getSparklineInstance(type = 'line') {\n    switch (type) {\n        case 'column':\n            return new ColumnSparkline();\n        case 'bar':\n            return new BarSparkline();\n        case 'area':\n            return new AreaSparkline();\n        case 'line':\n        default:\n            return new LineSparkline();\n    }\n}\nfunction initSparklineByType(sparkline, options) {\n    switch (options.type) {\n        case 'bar':\n            initBarColumnSparkline(sparkline, options);\n            break;\n        case 'column':\n            initBarColumnSparkline(sparkline, options);\n            break;\n        case 'area':\n            initAreaSparkline(sparkline, options);\n            break;\n        case 'line':\n        default:\n            initLineSparkline(sparkline, options);\n            break;\n    }\n}\nfunction initSparkline(sparkline, options) {\n    setValueIfPropertyExists(sparkline, 'context', options.context, options);\n    setValueIfPropertyExists(sparkline, 'width', options.width, options);\n    setValueIfPropertyExists(sparkline, 'height', options.height, options);\n    setValueIfPropertyExists(sparkline, 'container', options.container, options);\n    setValueIfPropertyExists(sparkline, 'xKey', options.xKey, options);\n    setValueIfPropertyExists(sparkline, 'yKey', options.yKey, options);\n    if (options.padding) {\n        initPaddingOptions(sparkline.padding, options.padding);\n    }\n    if (options.axis) {\n        initAxisOptions(sparkline.axis, options.axis);\n    }\n    if (options.highlightStyle) {\n        initHighlightStyleOptions(sparkline.highlightStyle, options.highlightStyle);\n    }\n}\nfunction initLineSparkline(sparkline, options) {\n    if (options.marker) {\n        initMarkerOptions(sparkline.marker, options.marker);\n    }\n    if (options.line) {\n        initLineOptions(sparkline.line, options.line);\n    }\n    if (options.crosshairs) {\n        initCrosshairsOptions(sparkline.crosshairs, options.crosshairs);\n    }\n}\nfunction initAreaSparkline(sparkline, options) {\n    setValueIfPropertyExists(sparkline, 'fill', options.fill, options);\n    if (options.marker) {\n        initMarkerOptions(sparkline.marker, options.marker);\n    }\n    if (options.line) {\n        initLineOptions(sparkline.line, options.line);\n    }\n    if (options.crosshairs) {\n        initCrosshairsOptions(sparkline.crosshairs, options.crosshairs);\n    }\n}\nfunction initBarColumnSparkline(sparkline, options) {\n    setValueIfPropertyExists(sparkline, 'valueAxisDomain', options.valueAxisDomain, options);\n    setValueIfPropertyExists(sparkline, 'fill', options.fill, options);\n    setValueIfPropertyExists(sparkline, 'stroke', options.stroke, options);\n    setValueIfPropertyExists(sparkline, 'strokeWidth', options.strokeWidth, options);\n    setValueIfPropertyExists(sparkline, 'paddingInner', options.paddingInner, options);\n    setValueIfPropertyExists(sparkline, 'paddingOuter', options.paddingOuter, options);\n    setValueIfPropertyExists(sparkline, 'formatter', options.formatter, options);\n    if (options.label) {\n        initLabelOptions(sparkline.label, options.label);\n    }\n}\nfunction initPaddingOptions(target, options) {\n    setValueIfPropertyExists(target, 'top', options.top, options);\n    setValueIfPropertyExists(target, 'right', options.right, options);\n    setValueIfPropertyExists(target, 'bottom', options.bottom, options);\n    setValueIfPropertyExists(target, 'left', options.left, options);\n}\nfunction initMarkerOptions(target, options) {\n    setValueIfPropertyExists(target, 'enabled', options.enabled, options);\n    setValueIfPropertyExists(target, 'size', options.size, options);\n    setValueIfPropertyExists(target, 'shape', options.shape, options);\n    setValueIfPropertyExists(target, 'fill', options.fill, options);\n    setValueIfPropertyExists(target, 'stroke', options.stroke, options);\n    setValueIfPropertyExists(target, 'strokeWidth', options.strokeWidth, options);\n    setValueIfPropertyExists(target, 'formatter', options.formatter, options);\n}\nfunction initLabelOptions(target, options) {\n    setValueIfPropertyExists(target, 'enabled', options.enabled, options);\n    setValueIfPropertyExists(target, 'fontStyle', options.fontStyle, options);\n    setValueIfPropertyExists(target, 'fontWeight', options.fontWeight, options);\n    setValueIfPropertyExists(target, 'fontSize', options.fontSize, options);\n    setValueIfPropertyExists(target, 'fontFamily', options.fontFamily, options);\n    setValueIfPropertyExists(target, 'textAlign', options.textAlign, options);\n    setValueIfPropertyExists(target, 'textBaseline', options.textBaseline, options);\n    setValueIfPropertyExists(target, 'color', options.color, options);\n    setValueIfPropertyExists(target, 'formatter', options.formatter, options);\n    setValueIfPropertyExists(target, 'placement', options.placement, options);\n}\nfunction initLineOptions(target, options) {\n    setValueIfPropertyExists(target, 'stroke', options.stroke, options);\n    setValueIfPropertyExists(target, 'strokeWidth', options.strokeWidth, options);\n}\nfunction initAxisOptions(target, options) {\n    setValueIfPropertyExists(target, 'type', options.type, options);\n    setValueIfPropertyExists(target, 'stroke', options.stroke, options);\n    setValueIfPropertyExists(target, 'strokeWidth', options.strokeWidth, options);\n}\nfunction initHighlightStyleOptions(target, options) {\n    setValueIfPropertyExists(target, 'fill', options.fill, options);\n    setValueIfPropertyExists(target, 'size', options.size, options);\n    setValueIfPropertyExists(target, 'stroke', options.stroke, options);\n    setValueIfPropertyExists(target, 'strokeWidth', options.strokeWidth, options);\n}\nfunction initCrosshairsOptions(target, options) {\n    if (target.xLine && options.xLine) {\n        initCrosshairLineOptions(target.xLine, options.xLine);\n    }\n    if (target.yLine && options.yLine) {\n        initCrosshairLineOptions(target.yLine, options.yLine);\n    }\n}\nfunction initCrosshairLineOptions(target, options) {\n    setValueIfPropertyExists(target, 'enabled', options.enabled, options);\n    setValueIfPropertyExists(target, 'stroke', options.stroke, options);\n    setValueIfPropertyExists(target, 'strokeWidth', options.strokeWidth, options);\n    setValueIfPropertyExists(target, 'lineDash', options.lineDash, options);\n    setValueIfPropertyExists(target, 'lineCap', options.lineCap, options);\n}\nconst doOnceFlags = {};\n/**\n * If the key was passed before, then doesn't execute the func\n * @param {Function} func\n * @param {string} key\n */\nfunction doOnce(func, key) {\n    if (doOnceFlags[key]) {\n        return;\n    }\n    func();\n    doOnceFlags[key] = true;\n}\nconst offsetValidator = (property, value, defaultOffset) => {\n    if (isNumber(value)) {\n        return true;\n    }\n    const message = `AG Charts: ${property} must be a number, the value you provided is not a valid number. Using the default of ${defaultOffset}px.`;\n    doOnce(() => console.warn(message), `${property} not a number`);\n    return false;\n};\nconst validators = {\n    xOffset: offsetValidator,\n    yOffset: offsetValidator,\n};\nfunction setValueIfPropertyExists(target, property, value, options) {\n    if (property in options) {\n        if (property in target) {\n            const validator = validators[property];\n            const isValid = validator ? validator(property, value, target[property]) : true;\n            if (isValid && target[property] !== value) {\n                // only set property if the value is different to new value\n                target[property] = value;\n            }\n        }\n        else {\n            console.warn(`Property ${property} does not exist on the target object.`);\n        }\n    }\n}\n\nvar __decorate$1 = ( false) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nclass SparklineCellRenderer extends ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.Component {\n    constructor() {\n        super(SparklineCellRenderer.TEMPLATE);\n    }\n    init(params) {\n        let firstTimeIn = true;\n        const updateSparkline = () => {\n            const { clientWidth, clientHeight } = this.getGui();\n            if (clientWidth === 0 || clientHeight === 0) {\n                return;\n            }\n            if (firstTimeIn) {\n                const options = Object.assign({ data: params.value, width: clientWidth, height: clientHeight, context: {\n                        data: params.data,\n                    } }, params.sparklineOptions);\n                // create new instance of sparkline\n                this.sparkline = AgSparkline.create(options, this.sparklineTooltipSingleton.getSparklineTooltip());\n                // append sparkline canvas to cell renderer element\n                this.eSparkline.appendChild(this.sparkline.canvasElement);\n                firstTimeIn = false;\n            }\n            else {\n                this.sparkline.width = clientWidth;\n                this.sparkline.height = clientHeight;\n            }\n        };\n        const unsubscribeFromResize = this.resizeObserverService.observeResize(this.getGui(), updateSparkline);\n        this.addDestroyFunc(() => unsubscribeFromResize());\n    }\n    refresh(params) {\n        if (this.sparkline) {\n            this.sparkline.data = params.value;\n            return true;\n        }\n        return false;\n    }\n    destroy() {\n        if (this.sparkline) {\n            this.sparkline.destroy();\n        }\n        super.destroy();\n    }\n}\nSparklineCellRenderer.TEMPLATE /* html */ = `<div class=\"ag-sparkline-wrapper\">\n            <span ref=\"eSparkline\"></span>\n        </div>`;\n__decorate$1([\n    (0,ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.RefSelector)('eSparkline')\n], SparklineCellRenderer.prototype, \"eSparkline\", void 0);\n__decorate$1([\n    (0,ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.Autowired)('resizeObserverService')\n], SparklineCellRenderer.prototype, \"resizeObserverService\", void 0);\n__decorate$1([\n    (0,ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.Autowired)('sparklineTooltipSingleton')\n], SparklineCellRenderer.prototype, \"sparklineTooltipSingleton\", void 0);\n\nvar __decorate = ( false) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\n/**\n * This 'bean' creates a single sparkline tooltip that is bound to the grid lifecycle.\n */\nlet SparklineTooltipSingleton = class SparklineTooltipSingleton extends ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.BeanStub {\n    postConstruct() {\n        this.tooltip = new SparklineTooltip();\n    }\n    getSparklineTooltip() {\n        return this.tooltip;\n    }\n    destroyTooltip() {\n        if (this.tooltip) {\n            this.tooltip.destroy();\n        }\n    }\n};\n__decorate([\n    ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.PostConstruct\n], SparklineTooltipSingleton.prototype, \"postConstruct\", null);\n__decorate([\n    ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.PreDestroy\n], SparklineTooltipSingleton.prototype, \"destroyTooltip\", null);\nSparklineTooltipSingleton = __decorate([\n    (0,ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.Bean)('sparklineTooltipSingleton')\n], SparklineTooltipSingleton);\n\n// DO NOT UPDATE MANUALLY: Generated from script during build time\nconst VERSION = '30.0.2';\n\nconst SparklinesModule = {\n    version: VERSION,\n    moduleName: ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.ModuleNames.SparklinesModule,\n    beans: [SparklineTooltipSingleton],\n    userComponents: [{ componentName: 'agSparklineCellRenderer', componentClass: SparklineCellRenderer }],\n    dependantModules: [EnterpriseCoreModule],\n};\n\nconst AllEnterpriseModules = [\n    ClipboardModule,\n    ColumnsToolPanelModule,\n    ExcelExportModule,\n    FiltersToolPanelModule,\n    GridChartsModule,\n    MasterDetailModule,\n    MenuModule,\n    MultiFilterModule,\n    RangeSelectionModule,\n    RichSelectModule,\n    RowGroupingModule,\n    ServerSideRowModelModule,\n    SetFilterModule,\n    SideBarModule,\n    StatusBarModule,\n    ViewportRowModelModule,\n    SparklinesModule\n];\nconst AllModules = ag_grid_community__WEBPACK_IMPORTED_MODULE_0__.AllCommunityModules.concat(AllEnterpriseModules);\n\nag_grid_community__WEBPACK_IMPORTED_MODULE_0__.ModuleRegistry.registerModules(AllEnterpriseModules);\n\n\n\n\n//# sourceURL=webpack://webgpu-webpack-starter/./node_modules/ag-grid-enterprise/dist/ag-grid-enterprise.auto.esm.js?");

/***/ })

}]);