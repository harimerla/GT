import {vec3,mat4} from 'gl-matrix'
import { CubeData } from './cubeData'
import {shaders} from './triangle'
import {CubeDataGene, ColormapData} from './gene_list'
import csv from 'csv-parser';
import * as fs from 'fs';
// var Plotly = require('plotly.js');

// const Papa = require('papaparse');


function getImageDataFromImage(image: HTMLImageElement): Uint8ClampedArray {
  const canvas = document.createElement('canvas');
  canvas.width = image.width;
  canvas.height = image.height;
  const context = canvas.getContext('2d');
  if (!context) {
    throw new Error('Canvas 2D context not supported.');
  }

  context.drawImage(image, 0, 0);
  const imageData = context.getImageData(0, 0, image.width, image.height);

  return imageData.data;
}


function imageBitmapToArray(imageBitmap: ImageBitmap): Promise<Uint8ClampedArray> {
  const canvas = document.createElement('canvas');
  canvas.width = imageBitmap.width;
  canvas.height = imageBitmap.height;
  const ctx = canvas.getContext('2d');
  if (!ctx) {
    throw new Error('Canvas 2D context not supported.');
  }

  ctx.drawImage(imageBitmap, 0, 0);
  const imageData = ctx.getImageData(0, 0, imageBitmap.width, imageBitmap.height);

  return Promise.resolve(imageData.data);
}


function blobToArray(blob: Blob): Promise<Uint8Array> {
  return new Promise((resolve, reject) => {
    const reader = new FileReader();

    reader.onloadend = () => {
      const arrayBuffer = reader.result as ArrayBuffer;
      const uint8Array = new Uint8Array(arrayBuffer);
      resolve(uint8Array);
    };

    reader.onerror = () => {
      reject(new Error('Failed to read blob as array.'));
    };

    reader.readAsArrayBuffer(blob);
  });
}

async function saveImageBitmapToPNG(imageBitmap: ImageBitmap, fileName: string) {
  const canvas = document.createElement('canvas');
  canvas.width = imageBitmap.width;
  canvas.height = imageBitmap.height;

  const context = canvas.getContext('2d');
  context.drawImage(imageBitmap, 0, 0);

  return new Promise<void>((resolve, reject) => {
    canvas.toBlob((blob) => {
      if (blob) {
        const url = URL.createObjectURL(blob);
        const link = document.createElement('a');
        link.href = url;
        link.download = fileName;
        link.click();
        resolve();
      } else {
        reject(new Error('Failed to create blob.'));
      }
    }, 'image/png');
  });
}

function convertFloat32ArrayToHTMLImageElement(floatArray, width, height) {
  const canvas = document.createElement('canvas');
  canvas.width = width;
  canvas.height = height;

  const imageData = new ImageData(Uint8ClampedArray.from(floatArray), width, height);
  //console.log('imagedata: '+imageData.data);
  canvas.getContext('2d').putImageData(imageData, 0, 0);
  //console.log('canvas get data: '+canvas.getContext('2d').getImageData(0,0,width,height).data);

  const img = new Image();
  img.src = canvas.toDataURL();
  img.width=width;
  img.height=height;
  //console.log(img.src)

  return img;
}


function pixelsToCanvas(pixels, width, height) {
  const canvas = document.createElement('canvas');
  canvas.width = width;
  canvas.height = height;
  const ctx = canvas.getContext('2d');
  const imgData = ctx.createImageData(width, height);
  imgData.data.set(pixels);
  ctx.putImageData(imgData, 0, 1);

  // flip the image
  ctx.scale(1, -1);
  ctx.globalCompositeOperation = 'copy';
  ctx.drawImage(canvas, 0, -height, width, height);

  return canvas;
}

(async() => {
  var adapter = await navigator.gpu.requestAdapter();
  var device = await adapter.requestDevice();

  var canvas = document.getElementById("webgpu-canvas") as HTMLCanvasElement;
  var context = canvas.getContext("webgpu");

  var square = CubeDataGene().square;
  var cubeBuff = device.createBuffer({
    size: square.byteLength,
    usage: GPUBufferUsage.VERTEX | GPUBufferUsage.COPY_DST,
    mappedAtCreation: true 
  });

  new Float32Array(cubeBuff.getMappedRange()).set(square);
  cubeBuff.unmap();

  var depthTexture = device.createTexture({
    size: {width: canvas.width, height: canvas.height},
    format: "depth24plus-stencil8",
    usage: GPUTextureUsage.RENDER_ATTACHMENT
  });

  context.configure(
    {device: device, format: "bgra8unorm", usage: GPUTextureUsage.RENDER_ATTACHMENT});
  
    var sampler = device.createSampler({
      magFilter: 'linear',
      minFilter: 'linear',
      addressModeU: 'clamp-to-edge',
      addressModeV: 'clamp-to-edge',
      mipmapFilter: 'nearest',
      maxAnisotropy: 1
    } as GPUSamplerDescriptor);
  var width=256, height=256;
  var imageee;
  let cubeTexture: GPUTexture;
    {
      const img = document.createElement('img');
      const response: Response = await fetch('dog.webp');
      const blob: Blob = await response.blob();
      //console.log('response: '+blobToArray(blob));

      const imageBitmap = await createImageBitmap(blob);
      //saveImageBitmapToPNG(imageBitmap, 'dog');
      // imageBitmapToArray(imageBitmap).then((array)=>{
      //   console.log('array'+array.length);
      // })

      console.log('image: '+imageBitmap.height+" "+imageBitmap.width);
      console.log('canvas'+canvas.height+" "+canvas.width);
  
      cubeTexture = device.createTexture({
        size: [width,height, 1],
        //size: [64,64,1],
        format: 'rgba8unorm',
        usage:
          GPUTextureUsage.TEXTURE_BINDING |
          GPUTextureUsage.COPY_DST |
          GPUTextureUsage.RENDER_ATTACHMENT,
      });
      console.log('dimension'+cubeTexture.width);
      imageee=imageBitmap;
      // console.log(zeroimg.length);
      // var image = pixelsToCanvas(zeroimg, width, height);
      // console.log('blob'+blob.size);
      // device.queue.copyExternalImageToTexture(
      //   { source: imageBitmap },
      //   { texture: cubeTexture },
      //   [imageBitmap.width,imageBitmap.height]
      // );
    }
  
    // Load the default colormap and upload it
  var colormapImage = new Image();
  colormapImage.src = "/dog.webp";
  colormapImage.id = 'image';
  await colormapImage.decode();
  const imageBitmap = await createImageBitmap(colormapImage);
  document.getElementById("no-webgpu").appendChild(colormapImage);
  var colorTexture = device.createTexture({
    size: [imageBitmap.width, imageBitmap.height, 1],
    format: "rgba8unorm",
    usage: GPUTextureUsage.TEXTURE_BINDING | GPUTextureUsage.COPY_DST | GPUTextureUsage.RENDER_ATTACHMENT,
  });
  // device.queue.copyExternalImageToTexture(
  //   { source: imageBitmap },
  //   { texture: colorTexture },
  //   [imageBitmap.width, imageBitmap.height, 1]
  // );

    var bindingGroupLayout = device.createBindGroupLayout({
      entries:[{
        binding: 0,
        visibility: GPUShaderStage.FRAGMENT,
        sampler: {}
      } as GPUBindGroupLayoutEntry,{
        binding: 1,
        visibility: GPUShaderStage.FRAGMENT,
        texture:{}
      } as GPUBindGroupLayoutEntry]
    });
  
    var uniformBindGroup = device.createBindGroup({
      layout: bindingGroupLayout,
      entries: [
        {
          binding: 0,
          resource: sampler
        },
        {
          binding: 1,
          resource: cubeTexture.createView()
        }
      ]
    });
  
  var computeBindGroupLayouts = device.createBindGroupLayout({
    label: 'Compute Binding Group Layout',
    entries: [{
      binding: 0,
      visibility: GPUShaderStage.COMPUTE,
      buffer: {type: 'storage'}
    },{
      binding: 1,
      visibility: GPUShaderStage.COMPUTE,
      buffer: {type: 'storage'}
    },{
      binding: 2,
      visibility: GPUShaderStage.COMPUTE,
      buffer: {type: 'storage'}
    },{
      binding: 3,
      visibility: GPUShaderStage.COMPUTE,
      buffer: {type: 'storage'}
    },{
      binding: 4,
      visibility: GPUShaderStage.COMPUTE,
      buffer: {type: 'storage'}
    },{
      binding: 5,
      visibility: GPUShaderStage.COMPUTE,
      texture: {}
    }]
  })

  var zeroimg = new Float32Array(256*256*4);
  var texBuff = device.createBuffer({
    label: 'textbuff buffer',
    size: zeroimg.byteLength,
    usage: GPUBufferUsage.COPY_DST | GPUBufferUsage.COPY_SRC | GPUBufferUsage.STORAGE,
  });
  var x = CubeDataGene().x;
  var y = CubeDataGene().y;
  var weight = CubeDataGene().weight;

  var xBuff = device.createBuffer({
    label: 'x buffer',
    size: x.byteLength,
    usage: GPUBufferUsage.COPY_DST | GPUBufferUsage.COPY_SRC | GPUBufferUsage.STORAGE,
  });

  var yBuff = device.createBuffer({
    label: 'y buffer',
    size: y.byteLength,
    usage: GPUBufferUsage.COPY_DST | GPUBufferUsage.COPY_SRC | GPUBufferUsage.STORAGE,
  });

  var weightBuff = device.createBuffer({
    label: 'textbuff buffer',
    size: weight.byteLength,
    usage: GPUBufferUsage.COPY_DST | GPUBufferUsage.COPY_SRC | GPUBufferUsage.STORAGE,
  });

  var resultBuff = device.createBuffer({
    label: 'result buffer',
    size: zeroimg.byteLength,
    usage: GPUBufferUsage.MAP_READ | GPUBufferUsage.COPY_DST,
  });

  var colormap = require('colormap');
  var color = colormap({
    colormap: 'hsv',
    nshades: 200,
    format: 'rgba',
    alpha: 1
  });

  //var flatColor = new Float32Array(ColormapData('jet2').flat());
  var flatColor = new Float32Array(color.flat());
  //console.log(flatColor);
  console.log(flatColor[0]+' '+flatColor[1]+' '+flatColor[2]);
  console.log(flatColor[flatColor.length-4]+' '+flatColor[flatColor.length-3]+' '+flatColor[flatColor.length-2]+' '+flatColor[flatColor.length-1]);
  console.log(flatColor[106632]+' '+flatColor[106633]+' '+flatColor[106634]);
  console.log(flatColor[106614]+' '+flatColor[106615]+' '+flatColor[106616]);
  var colomapBuff = device.createBuffer({
    label: 'color map buffer',
    size: flatColor.byteLength,
    usage: GPUBufferUsage.COPY_DST | GPUBufferUsage.COPY_SRC | GPUBufferUsage.STORAGE,
  })

  device.queue.writeBuffer(texBuff, 0, zeroimg);
  device.queue.writeBuffer(xBuff,0,x);
  device.queue.writeBuffer(yBuff,0,y);
  device.queue.writeBuffer(weightBuff,0,weight);
  device.queue.writeBuffer(colomapBuff,0,flatColor);

  var computeUniformBindGroup = device.createBindGroup({
    label: 'Compute Binding Group',
    layout: computeBindGroupLayouts,
    entries: [{
      binding: 0,
      resource: {buffer: texBuff}
    },{
      binding: 1,
      resource: {buffer: xBuff}
    },{
      binding: 2,
      resource: {buffer: yBuff}
    },{
      binding: 3,
      resource: {buffer: weightBuff}
    },{
      binding: 4,
      resource: {buffer: colomapBuff}
    },{
      binding: 5,
      resource: colorTexture.createView(),
    }]
  })
  
  var computePipeline = device.createComputePipeline({
    label: 'Compute Pipeline',
    layout: device.createPipelineLayout({bindGroupLayouts: [computeBindGroupLayouts]}),
    compute: {
      module: device.createShaderModule({code: shaders().compute}),
      entryPoint: 'main'
    }
  })

  var computePipeline = device.createComputePipeline({
    label: 'Compute Pipeline for Normalization',
    layout: device.createPipelineLayout({bindGroupLayouts: [computeBindGroupLayouts]}),
    compute: {
      module: device.createShaderModule({code: shaders().compute}),
      entryPoint: 'normalize'
    }
  })
  
  var renderPipeline = device.createRenderPipeline({
    layout : device.createPipelineLayout({bindGroupLayouts: [bindingGroupLayout]}),
    vertex: {
      module: device.createShaderModule({code: shaders().vertex}),
      entryPoint: 'main',
      buffers: [{
        arrayStride: 6*4,
        attributes:[
          {format: 'float32x4', offset:0, shaderLocation: 0},
          {format: 'float32x2', offset:16, shaderLocation: 1}]
      }]
    } as GPUVertexState,
    fragment:{
      module: device.createShaderModule({code: shaders().fragment}),
      entryPoint: 'main',
      targets: [{format: 'bgra8unorm'}]
    } as GPUFragmentState,
    depthStencil: {format: "depth24plus-stencil8", depthWriteEnabled: true, depthCompare: "less"},
    primitive:{topology:"triangle-strip"},
  });

  var renderPassDesc = {
    colorAttachments: [{    
        view: undefined,
        loadOp: "clear",
        clearValue: [0.5, 0.5, 0.5, 1],
        storeOp: "store"
    }],
    depthStencilAttachment: {
        view: depthTexture.createView(),
        depthLoadOp: "clear",
        depthClearValue: 1.0,
        depthStoreOp: "store",
        stencilLoadOp: "clear",
        stencilClearValue: 0,
        stencilStoreOp: "store"
    }
} as GPURenderPassDescriptor;


var animationFrame = function() {
  var resolve = null;
  var promise = new Promise(r => resolve = r);
  window.requestAnimationFrame(resolve);
  return promise
};
requestAnimationFrame(animationFrame);

const encoder = device.createCommandEncoder({
  label: 'doubling encoder',
});
const pass = encoder.beginComputePass({
  label: 'doubling compute pass',
});
pass.setPipeline(computePipeline);
pass.setBindGroup(0, computeUniformBindGroup);
//pass.dispatchWorkgroups(zeroimg.length);
pass.dispatchWorkgroups(width*height-1);

pass.end();
encoder.copyBufferToBuffer(texBuff,0,resultBuff, 0, resultBuff.size);
console.log('height: '+height+" width+"+width+" image bytelength: "+zeroimg.byteLength)
//encoder.copyBufferToTexture({buffer:texBuff, offset:0, bytesPerRow:zeroimg.byteLength/height},{texture:cubeTexture},[width,height,1]);
device.queue.submit([encoder.finish()]);
await resultBuff.mapAsync(GPUMapMode.READ);
const result = new Float32Array(resultBuff.getMappedRange().slice(0,resultBuff.size));
resultBuff.unmap();
//console.log(result);


// const file = new Blob([result.toString()], {type: 'text/plain;charset=utf-8'});
// const url = URL.createObjectURL(file);
// const link = document.createElement('a');
// link.href = url;
// link.download = 'filename.txt';
// document.body.appendChild(link);
// link.click();
// console.log('output'+result[result.length-1]);
var min=10000, max=-100000;
for(var i=0;i<result.length;i++){
  if(min>result[i])
    min=result[i];
  if(max<result[i])
    max=result[i];
}
console.log('min: '+min+' max: '+max);

while(true){
  await animationFrame();

  renderPassDesc.colorAttachments[0].view = context.getCurrentTexture().createView();
  var commandEncoder = device.createCommandEncoder();
  var fks = new Float32Array(256*256);
  var k=0;
  for(var i=0;i<result.length;i+=4){
    fks[k++]=result[i];
  }
  var texBuff1 = device.createBuffer({
    label: 'textbuff buffer',
    size: fks.byteLength,
    usage: GPUBufferUsage.COPY_DST | GPUBufferUsage.COPY_SRC | GPUBufferUsage.STORAGE,
  });
  // console.log('fks: '+fks)
  device.queue.writeBuffer(texBuff1, 0, fks);
  //commandEncoder.copyBufferToTexture({buffer:texBuff1, offset:0, bytesPerRow:fks.byteLength/height},{texture:cubeTexture},[width,height,1]);
  //commandEncoder.copyBufferToTexture({buffer:texBuff, offset:0, bytesPerRow:zeroimg.byteLength/(4*height), rowsPerImage:height},{texture:cubeTexture},[width,height,1]);
  var renderPass = commandEncoder.beginRenderPass(renderPassDesc);

  renderPass.setPipeline(renderPipeline);
  renderPass.setVertexBuffer(0,cubeBuff);
  renderPass.setBindGroup(0,uniformBindGroup);


      //console.log('result'+result);

//       const csvFilePath = 'Output_GT(12).csv';

// // Create an empty array to store the CSV data
// const data: any[] = [];

// // Create a read stream from the CSV file
// fs.createReadStream(csvFilePath)
//   .pipe(csv())
//   .on('data', (row: any) => {
//     // Process each row of the CSV and store it in the data array
//     data.push(row);
//   })
//   .on('end', () => {
//     // The CSV parsing is complete
//     console.log(data);
//     // Do something with the data here
//   });
// var f=document.createElement('input');
// f.type='file';
// f.id='csvFile';
// f.name='file';
// f.accept='.csv';
// f.src='Output_GT(12).csv';
// document.getElementById('no-webgpu').appendChild(f);

// document.getElementById('csvFile').addEventListener('change', function(evt) {
  
//   const target = event.target as HTMLInputElement;
//   var file = target.files[0];
//   // var file = (document.getElementById('csvFile')).files[0];
//   Papa.parse(file, {
//   complete: function(results) {
//   var data = results.data;
//   var matrix = data.map(row => row.map(Number)); // Convert string values to numbers
//   plotHeatmap(matrix);
//   }
//   });
//   });
  
//   function plotHeatmap(matrix) {
//   var data = [
//   {
//   z: matrix,
//   type: 'heatmap',
//   colorscale: 'Jet' // Use the 'Jet' color scale
//   }
//   ];
//   var layout = {
//   title: 'Heatmap',
//   autosize: false, // This allows us to set a specific size for the plot
//   width: 500, // The width of the plot in pixels
//   height: 500 // The height of the plot in pixels
//   };
//   Plotly.newPlot('heatmap', data, layout);
//   }
      const htmlImage = convertFloat32ArrayToHTMLImageElement(result,width,height);
      document.getElementById("no-webgpu").appendChild(htmlImage);
      //console.log('output of converted htmlimage'+getImageDataFromImage(htmlImage));
      console.log('htmlimage'+htmlImage.width+" : "+htmlImage.height);
      console.log('canvas dimension'+cubeTexture.width+" : "+cubeTexture.height);
      const imageBitmap = await createImageBitmap(htmlImage, {resizeWidth:width, resizeHeight:height});
      //saveImageBitmapToPNG(imageBitmap, 'temp');
      console.log('generated :'+imageBitmap.width+' '+imageBitmap.height);
      console.log('texture: '+cubeTexture.width+" "+cubeTexture.height);
      device.queue.copyExternalImageToTexture(
        {source:  imageBitmap},
        { texture: cubeTexture},
        [imageBitmap.width, imageBitmap.height,1]
      );
  

  renderPass.draw(6);
  renderPass.end();
  device.queue.submit([commandEncoder.finish()]);
  break;
}

})();


<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, initial-scale=1, shrink-to-fit=no">
    <!-- Bootstrap CSS -->
    <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/4.0.0/css/bootstrap.min.css"
                           integrity="sha384-Gn5384xqQ1aoWXA+058RXPxPg6fy4IWvTNh0E263XmFcJlSAwiGgFAW/dAiS6JXm"
                           crossorigin="anonymous">

    <title>WebGPU Webpack Starter</title>
</head>
<body>
    <div class="container mt-4">
        <div class="row">
            <div class="col-12 text-center">
                <h4>WebGPU Webpack Starter</h4>
                <canvas id="webgpu-canvas" class="img-fluid" width="1280" height="720"></canvas>
                <div class="col-12 alert alert-danger" id="no-webgpu" style="display:none;">
                    <h4>Error: Your browser does not support WebGPU</h4>
                    <p>You can find out how to get access to it in Chrome Canary
                    <a href="https://web.dev/gpu/#use">here</a>.</p>
                </div>
            </div>
            <div id="file upload div">
                <span>
                    <label for="expression">Choose Expression File</label>
                    <input type="file" name="Expression" id="expression">
                </span>
                <span>
                    <label for="layout">Choose Layout File</label>
                    <input type="file" name="Layout" id="layout">
                </span>
            </div>
        </div>
    </div>
</body>
</html>

